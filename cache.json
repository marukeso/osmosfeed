{
  "sources": [
    {
      "title": "Release notes from osmosfeed",
      "feedUrl": "https://github.com/osmoscraft/osmosfeed/releases.atom",
      "siteUrl": "https://github.com/osmoscraft/osmosfeed/releases",
      "articles": [
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.2",
          "author": null,
          "description": "Fixed: unicode characters in URL caused download error\nFixed: project root npm install error\nAdded: unit test library\nChore: Dependency updates\nThank you: @CaptNo1",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.2",
          "publishedOn": "2021-09-26T18:45:39.000Z",
          "wordCount": 354,
          "title": "v1.11.2"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1",
          "author": null,
          "description": "Fixed: Unexpected nested element in author field crashes the parser\nThank you @ad-m",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1",
          "publishedOn": "2021-09-16T06:39:32.000Z",
          "wordCount": 343,
          "title": "v1.11.1"
        }
      ]
    },
    {
      "title": "JSer.info",
      "feedUrl": "http://jser.info/rss",
      "siteUrl": "https://jser.info/",
      "articles": [
        {
          "id": "https://jser.info/2021/09/27/lit-2-gatsby-4-beta-partytownthird-party-script-into-worker/",
          "author": null,
          "description": "JSer.info #559 - Web Componentsを扱うライブラリであるLit 2がリリースされました。\nAnnouncing Lit 2 stable release – Lit\nLit 2.0 Release Livestream - YouTube\nLit 2は今までLitElement 2.xとlit-html 1.xという別々のパッケージになったものを統合していて、litという新しいパッケージ担っています。\nclassベースのDirectives API、非同期Directives、Reactive Controllersの追加されています。\nLitElement 2.xとlit-html 1.xからアップグレードガイドも公開されています。\nUpgrade guide – Lit\nGatsby 4のベータ版がリリースされています。\nIntroducing Gatsby 4 | Gatsby\nrendering modeとして、HTMLの生成を実際にアクセスするときまで遅延するDeferred Static Generation(DSG)のサポート、SSRのサポートが追加されています。\nDeferred Static Generation(DSG)はNext.jsのIncremental Static Regeneration(ISR)と似ていて、初回のリクエストがきた段階で始めてビルドを開始することで、めったにアクセスされないコンテンツを含むようなサイトでのデプロイにかかるビルド時間を短縮する仕組みです。\nWhile DSG may look similar on the surface, what Gatsby does is that it takes a snapshot of the data at initial build time and…",
          "link": "https://jser.info/2021/09/27/lit-2-gatsby-4-beta-partytownthird-party-script-into-worker/",
          "publishedOn": "2021-09-27T14:10:06.000Z",
          "wordCount": 715,
          "title": "2021-09-28のJS: Lit 2、Gatsby 4 beta、Partytown(Third-Party Script into Worker)"
        },
        {
          "id": "https://jser.info/2021/09/21/deno-1.14-chromeuser-agent-vue-2vue-3/",
          "author": null,
          "description": "JSer.info #558 - Deno 1.14がリリースされました。\nDeno 1.14 Release Notes | Deno Blog\nDeno 1.14.0 がリリースされたので新機能や変更点の紹介\ndeno lintとdeno fmtがオプションをサポートしてquoteやindentなどの設定ができるようになっています。\nURLPatternのサポート。fetchがMutual TLSをサポートなども追加されています。\nstd/httpモジュールのパフォーマンス改善などが含まれています。\nChromeのUser-Agent文字列削減のスケジュールが改めて公開されています。\nChromium Blog: User-Agent Reduction Origin Trial and Dates\nnavigator.userAgent、@navigator.appVersion、 navigator.platformなどの情報量を減らす/固定化することでfinger printingなどのリスクを減らすことが目的です。これらのAPIは非推奨となり、代替としてUser Agent Client Hintsが実装されています。\nUA文字列の削減などは、次のようなスケジュールで展開していく予定となっています。\nChrome 92:  コンソールに警告の追加\nChrome 95 から 100: Origin Trialの実施\nChrome 100: Reverse Origin Trialの実施\nChrome 101から110: 削減を段階的に実施\nChrome 113: 完了\nVue2のプロジェクトをVue3へマイグレーションするという記事では、@vue/compatを使いつつVue2で書かれたアプリケーションをVue3へマイグレーションしていく方法について書かれています…",
          "link": "https://jser.info/2021/09/21/deno-1.14-chromeuser-agent-vue-2vue-3/",
          "publishedOn": "2021-09-21T02:25:53.000Z",
          "wordCount": 389,
          "title": "2021-09-21のJS: Deno 1.14リリース、ChromeのUser-Agent文字列削減スケジュール、Vue 2からVue 3への移行"
        },
        {
          "id": "https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/",
          "author": null,
          "description": "JSer.info #557 - Node.js 16.9.0リリース。\nNode v16.9.0 (Current) | Node.js\nプロジェクトごとにnpm/yarn/pnpmなどのパッケージマネージャを切り替えて利用できるCorepackのサポートが実験的に追加されています。Corepackが有効時は、どのパッケージマネージャを使うかをpackage.json の packageManager フィールドで指定して、透過的にインストールや実行できるようになります。\nまた実験的であるため、利用するにはcorepack enable yarnなどのコマンドがオプトインで必要となっています。\nCorepack | Node.js v16.9.0 Documentation\ncorepack is 何?\nその他には、V8 9.3へアップデートしObject.hasOwnとError Causeをサポート、stream.composeの追加などが含まれています。\nV8 release v9.3 · V8\nSpook.jsという、投機的実行を利用したsame-siteでのサイドチャネル攻撃についての論文が公開されています。\nsame-site/cross-site, same-origin/cross-originをちゃんと理解する\n以前、GoogleがSpectreの概念を説明するものとしてhttps://leaky.page/というサイトを公開しています。\nGoogle Online Security Blog: A Spectre proof-of-concept for a Spectre-proof web\nSpook.jsは、これをより実践的に検証した論文で、BitbucketやTumblrなどのユーザーコンテンツがサブドメインにあるサイト同士でのデモ、Googl…",
          "link": "https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/",
          "publishedOn": "2021-09-14T01:00:58.000Z",
          "wordCount": 527,
          "title": "2021-09-14のJS: Node v16.9.0(Corepack)、Spook.js(Same-Siteでのサイドチャネル攻撃)"
        },
        {
          "id": "https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/",
          "author": null,
          "description": "JSer.info #556 - Electron 14.0.0がリリースされました。\nElectron 14.0.0 | Electron Blog\n依存がそれぞれChromium 93、Node.js 14.17.0、V8 9.3へとアップデートされています。\napp.allowRendererProcessReuseオプションの削除、worldSafeExecuteJavaScriptオプションを削除(trueがデフォルト)されています。\nまた、Electron 12でDeprecatedとなっていたremoteモジュールを削除し、@electron/remoteという外部モジュールへと変更されています。\ncontextBridgeを使っていく方向になっています。\nElectron（v.14.0.0 現在）の IPC 通信入門 - よりセキュアな方法への変遷 - Qiita\nNode.jsでのFetch APIのpolyfillライブラリであるnode-fetch 3.0.0がリリースされました。\nRelease v3.0.0 · node-fetch/node-fetch\n破壊的な変更として、Node.jsのESMのサポート、Node.js 12未満のサポート終了されています。\ntimeoutオプションは不要となったため削除されています。\nShould we deprecate timeout in favor of AbortController? · Issue #523 · node-fetch/node-fetch\n一方で、非標準なhighWaterMarkオプションの追加されています。\nWhen users clone(), automatically create streams with custom highWaterMark · Issue #38…",
          "link": "https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/",
          "publishedOn": "2021-09-07T01:36:56.000Z",
          "wordCount": 417,
          "title": "2021-09-07のJS: Electron 14.0.0、node-fetch 3.0.0、replace-jquery"
        }
      ]
    },
    {
      "title": "Zennの「Next.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/nextjs/feed",
      "siteUrl": "https://zenn.dev/topics/nextjs",
      "articles": [
        {
          "id": "https://zenn.dev/rabbit/articles/af45822a7cd01c",
          "author": "hanetsuki",
          "description": "先日開催されたジャムジャムJamstackで登壇させていただいた時の記事になります。\nhttps://speakerdeck.com/hanetsuki/next-dot-jstezheng-eru-tesaintorositukufalsefen-li\n簡易構成のリポジトリを作成しましたので、参考になればと思います。\nhttps://github.com/tsuki-lab/split-view-and-hook\n\n 経緯\n\nメディアサイトを作成することになった\n\nデザイナーコーダー ×1\nフロントエンドエンジニア ×1（ワイ）\n\n\nNext.jsとmicroCMSでSSGしてverc...",
          "link": "https://zenn.dev/rabbit/articles/af45822a7cd01c",
          "publishedOn": "2021-10-01T08:29:38.000Z",
          "wordCount": 319,
          "title": "Next.jsで整える。デザインとロジックの分離",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--d-zKEf48--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%25E3%2580%2582%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25A8%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E5%2588%2586%25E9%259B%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/heavenosk/articles/nextjs-extension-config",
          "author": "へぶん",
          "description": "Next.js で開発中のページを公開したくない状況がありました。\nCustom Page Extension を利用してリリースに含めるかどうかをコントロールすることができたので、その方法を紹介します。\n\n TL;DR\n\nCustom Page Extension で page.tsx を設定する\n開発用に next dev 時の Custom Page Extension の制限を緩くする\n\n\n next.config.js で Custom Page Extensions を設定する\n以下のように設定すると、ビルド対象を page.tsx の拡張子のファイルに限定することができます...",
          "link": "https://zenn.dev/heavenosk/articles/nextjs-extension-config",
          "publishedOn": "2021-10-01T07:52:58.000Z",
          "wordCount": 152,
          "title": "[Next.js] Custom Page Extensions で開発中のページを非公開にする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--xq61akXI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B8%25E3%2581%25B6%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%255BNext.js%255D%2520Custom%2520Page%2520Extensions%2520%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E4%25B8%25AD%25E3%2581%25AE%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592%25E9%259D%259E%25E5%2585%25AC%25E9%2596%258B%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hoMWZIZ0JrazVrQ3N2c2dQYS10azVkMG0yTk02ZHBDM3BBWXdKPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takepepe/articles/storybook-driven-development",
          "author": "Takepepe",
          "description": "Storybook CSF3.0 の概要\n単体テスト・結合テスト・Storybook を充実させるためには、多くの工数が必要です。堅牢なフロントエンド開発のためとはいえ、これらのメンテナンスは日に日に負担が増しています。似かよったテストケースでは、同じような下作業をそれぞれに用意する必要がありました。\nComponent Story Format（CSF）は、この課題への取り組みとして開発されました。「様々なソリューションで再利用可能な資材」 が用意できれば、開発は素早く・より楽しいものになります。リリース間近の CSF3.0 はより一層、そのゴールを明確に示してくれています。\nht...",
          "link": "https://zenn.dev/takepepe/articles/storybook-driven-development",
          "publishedOn": "2021-09-30T13:52:06.000Z",
          "wordCount": 1173,
          "title": "Storybook 駆動開発 @ CSF3.0",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zYx3JLbC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takepepe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Storybook%2520%25E9%25A7%2586%25E5%258B%2595%25E9%2596%258B%25E7%2599%25BA%2520%2540%2520CSF3.0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dpejh1QmdoVHJXUHhiRlRFdm9IVHJ5WDNhRkdmdlJCLUtVVTl6SUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/maztak/articles/d0608857bb140e",
          "author": "Takuya Matsuda",
          "description": "Next.js x TypeScript x Firebase Authentication で Twitterログインを実装するケースは今後増えそうですが、Firebase公式ドキュメントを見てもサクッと実装できなかったのでZennにします。\nRecoil, Atom, State まわりの理解が正直自信ないので、「意味わからないことしてる」「もっとスマートな書き方がある」などあればコメントでご指摘いただけると幸いですm(_ _)m\n\n 環境 & 注意\n\nTypeScript\nNode.js 16\nM1 Mac...\n\nNext.js（SSR）なのでFirebaesのinitま...",
          "link": "https://zenn.dev/maztak/articles/d0608857bb140e",
          "publishedOn": "2021-09-30T12:35:17.000Z",
          "wordCount": 416,
          "title": "Recoil で Next.js x Firebase Twitter auth を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s---NJlB9jB--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takuya%2520Matsuda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Recoil%2520%25E3%2581%25A7%2520Next.js%2520x%2520Firebase%2520Twitter%2520auth%2520%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pneVNwNkxqcEZSMEVzVXhmb2pzTVZHblBjYUVSNnRKRVhuY1NzNXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/knaka0209/books/261398faf9b13a",
          "author": "knaka Tech-Blog",
          "description": "Next.js + Apollo で、GraphQL に入門、初級的な記事を集めました。\n導入、製作ノウハウ、事例等の内容を追加予定です。\n\n環境について、下記となります。\nnode : 14.17\nnext.js: 11.1.2\napollo-server-express: 2.25.1\n@apollo/client: 3.4.13\nPrisma ORM\nmysql : 5.7\neslint : 7.32.0",
          "link": "https://zenn.dev/knaka0209/books/261398faf9b13a",
          "publishedOn": "2021-09-28T23:41:51.000Z",
          "wordCount": 64,
          "title": "Next.js + Apollo + Prisma で、GraphQL初級編",
          "enclosure": {
            "url": "https://zenn.dev/images/logo-only-dark.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/knaka0209/articles/c8044a7e80e181",
          "author": "knaka Tech-Blog",
          "description": "概要:\nNext.js+ apollo client で、CRUD作成の例となります\n\n\n 環境\n\nnode 14\nnext.js: 11.1.2\n@apollo/client: 3.4.13\nPrisma ORM\nmysql 5.7\n\n\n\n 参考のコード\nhttps://github.com/kuc-arc-f/nextjs11_5apollo\n\napollo server\n\nhttps://github.com/kuc-arc-f/apollo_server_prisma\n\n\n 関連の記事 / apollo client 追加\nhttps://zenn.dev/knaka0209...",
          "link": "https://zenn.dev/knaka0209/articles/c8044a7e80e181",
          "publishedOn": "2021-09-27T08:56:11.000Z",
          "wordCount": 31,
          "title": "Next.js + Apollo client で、CRUD作成",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--jTclnNRY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:knaka%2520Tech-Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520Apollo%2520client%2520%25E3%2581%25A7%25E3%2580%2581CRUD%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2owZG5pNFJFRHhHSGxQMkJMVGgtMzNaV2hoSjI5RVIxOG14d3FFV2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yoshiko/articles/32371c83e68cbe",
          "author": "よしこ",
          "description": "こんにちは、よしこです。\n株式会社ナレッジワーク というスタートアップで、2020年4月の創業時から一人目のフロントエンドエンジニアをしています。\n初期に考えて組み上げたスタックで1年半ほど開発・運用してみて、なかなか快適に日々開発ができているので\n\n新規開発のプロダクト立ち上げ時にどのようにフロントエンドを構築したのか？\n立ち上げから1年以上開発・運用を続けてきた今、それらの選択はどうだったのか？\n\nを記事にして振り返り、公開したいなと思いました。\n（プロダクトの内容はステルスで進めていてあまり対外的な発信ができないので、かわりに技術的なところはどんどんオープンにしていきたいなという気...",
          "link": "https://zenn.dev/yoshiko/articles/32371c83e68cbe",
          "publishedOn": "2021-09-27T03:30:10.000Z",
          "wordCount": 262,
          "title": "2020年に立ち上げたWebフロントエンド構成の振り返り",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bQFeA8RV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2588%25E3%2581%2597%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:2020%25E5%25B9%25B4%25E3%2581%25AB%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%2592%25E3%2581%259FWeb%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AE%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kwU3JDUjBpVERyUHpqWnF4YjJLZ0tueHgtamE0N253SEE0NGE4RDhrPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tera_ny/articles/cd19497b39e1d5",
          "author": "teranyan",
          "description": "こちらの記事に追記しても良かったのですが、この内容単体で出す方が内容も纏まると思ったので投稿しました。\nCloudStorageに静的コンテンツをアップロードする場合、REST APIやCloudStorage用のライブラリを使用してアップロードすることがほとんどです。ですがどちらもアップロードするコンテンツの内容、命名をサービス提供者側が強制することは難しいです。\n例えばですがfirestoreのドキュメントとCloudStorageのコンテンツを1対1で紐づけたい場合や、CloudFunctionsのCloudStorageイベントトリガーなどでアップロードされたファイル名に依存する...",
          "link": "https://zenn.dev/tera_ny/articles/cd19497b39e1d5",
          "publishedOn": "2021-09-26T13:06:15.000Z",
          "wordCount": 230,
          "title": "ポリシードキュメントを使用したCloudStorageのファイルアップロード",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--DFhLKKxM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:teranyan%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%259D%25E3%2583%25AA%25E3%2582%25B7%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25AD%25E3%2583%25A5%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259FCloudStorage%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%25A2%25E3%2583%2583%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzBmMzFlOTdmZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tiwu_dev/articles/2504a20732d305",
          "author": "Wataru Taguchi",
          "description": "はじめに\n今までは実装方法がわからず調査し試行錯誤して実装できた方法を書いたりしていましたが、\n今回は実装自体はできているが、より良い実装はないか？という方向性で書いてみたいと思います。\n書いていく内容は Next.js で実装された一覧と検索機能を持った画面のコンポーネントと状態管理のファイル分割と設計についてです。\n自分は Next.js(React) については書き始めて1年位で、仕事では書いたことなく他PJの構成をほぼ知らないですが、一旦自分の中の設計が落ち着いたので書こうと思った次第です🙏\n\n 解説するページ\n今回解説するページは自分が実装しているサイトのツイッターの呟き一...",
          "link": "https://zenn.dev/tiwu_dev/articles/2504a20732d305",
          "publishedOn": "2021-09-26T11:28:53.000Z",
          "wordCount": 561,
          "title": "【Next.js】コンポーネントと状態管理のファイル分割と設計",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vPiU5GMl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Wataru%2520Taguchi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A8%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25A8%25E8%25A8%25AD%25E8%25A8%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTIyZWFlYzZmYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/thisistakanori/articles/fb3a013085e652",
          "author": "Takanori Fukuyama",
          "description": "最近フロントエンドちょっとやってるので書いてみる\nnextauth v4のfirebase adapterを使ったらエラーでサーバーが起動しないので仕方なくapi-routeでcredencialを渡して、firebase authenticationと連携させた\n\n細かい解説はしていません。あとで時間と需要があれば書きます\nOAuth周りはnextauthに任せて、ユーザーの永続化だけfirebaseでやる想定です\nGoogle認証のみです。\nfirebaseの認証UIを使わない\nnextauthとfirebaseの基本的な初期設定は済んでいる想定です\n\n\n 手を抜くためにnextau...",
          "link": "https://zenn.dev/thisistakanori/articles/fb3a013085e652",
          "publishedOn": "2021-09-26T10:07:42.000Z",
          "wordCount": 264,
          "title": "[Next.js] nextauth v4でのfirebase(SDK v9) authentication認証(API Routeで)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LuXP5gX4--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takanori%2520Fukuyama%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:%255BNext.js%255D%2520nextauth%2520v4%25E3%2581%25A7%25E3%2581%25AEfirebase%2528SDK%2520v9%2529%2520authentication%25E8%25AA%258D%25E8%25A8%25BC%2528API%2520Route%25E3%2581%25A7%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pUdVhDa2tfOGdSclBia0Flb0FTMzc5VzhCbmtmdFdvVmtyODZZbzQwPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/t723/articles/a76c583084f383",
          "author": "T_723",
          "description": "octokit/restを利用してリポジトリのコンテンツを参照\n\n Typescript用のGithub APIを利用するライブラリ\noctokit/rest\n\n インストール\nnpm i @octokit/rest\n\n 使い方\n\n      \n        \n        import { Octokit } from \"@octokit/rest\";\n\n\n      \n      ドキュメント\n\n 認証\nGithub APIを利用しているとアクセス制限にかかるので認証(GITHUB_TOKEN)を取得し宣言しておきます。\n私の場合は、リポジトリのコンテンツにアクセスしたかった...",
          "link": "https://zenn.dev/t723/articles/a76c583084f383",
          "publishedOn": "2021-09-26T00:07:00.000Z",
          "wordCount": 72,
          "title": "Next.jsでGithub APIを使用する方法(octokit/rest)Typescript",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--jQSbtbGV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:T_723%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%25E3%2581%25A7Github%2520API%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2528octokit%252Frest%2529Typescript%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKd1NNNk9sQ2lfRXh6M2Q1MUh0aHB1ckVsaW9UTnlXWnJQZEltR3g9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/elpnt/articles/1af1047612992d",
          "author": "elpnt",
          "description": "はじめに\nhttps://next-auth.js.org/\nNextAuth.js は Next.js のために作られた OSS の認証ライブラリです。\nこのライブラリは主に OAuth もしくは Email で認証したユーザーの情報やセッションを連携したデータベースで自動管理できるのが売りです。他の認証システムで既に認証済みのユーザーを管理する方法もありはするのですが、OAuth や Email 認証に比べるとあまり分かりやすいサンプルコードがありません。防備録も兼ねて、ここで知見を共有したいと思います。\nなお、NextAuth ではログイン中のユーザーの情報は firebase...",
          "link": "https://zenn.dev/elpnt/articles/1af1047612992d",
          "publishedOn": "2021-09-25T15:16:05.000Z",
          "wordCount": 695,
          "title": "NextAuth.js と Firebase Authentication の連携",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Z0Oiutaz--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:elpnt%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:NextAuth.js%2520%25E3%2581%25A8%2520Firebase%2520Authentication%2520%25E3%2581%25AE%25E9%2580%25A3%25E6%2590%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTZjYzMxZjE5NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/t723/articles/f63785a12e3280",
          "author": "T_723",
          "description": "Next.jsのバージョン\n執筆時点(2021/9/25)でのバージョン11.1.2の最新を使っています。\n\n トレイリングスラッシュ設定とUrlの関係について\nnext.config.jsに下記のように記載がある場合はトレイリングスラッシュが設定されています。\n\n      \n        \n        module.exports = {\n  trailingSlash: true,\n}\n\n\n      \n      この設定をしていると/posts/hello.html -> /posts/hello/index.htmlでアクセスできるようになります。\n404ペー...",
          "link": "https://zenn.dev/t723/articles/f63785a12e3280",
          "publishedOn": "2021-09-25T12:29:15.000Z",
          "wordCount": 98,
          "title": "Next.jsのトレイリングスラッシュ設定により404ページをNetlifyで表示できない場合の対処方法(Typescript)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--3lrr1VxR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:T_723%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:Next.js%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25B9%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258A404%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592Netlify%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%2528Typescript%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKd1NNNk9sQ2lfRXh6M2Q1MUh0aHB1ckVsaW9UTnlXWnJQZEltR3g9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/knaka0209/articles/36ce5834d2f73e",
          "author": "knaka Tech-Blog",
          "description": "概要:\nnext.js 11 で、Apollo Client設定内容となります\n\napollo Serverは、事前に設置したり。しておきます\n\n\n\n 環境\n\nnode : 14.17\nnext.js : 11.1.2\n@apollo/client: 3.4.13\n\n\n\n 関連\nhttps://www.apollographql.com/blog/apollo-client/next-js/next-js-getting-started\n\n\n 参考のコード\nhttps://github.com/kuc-arc-f/nextjs11_2apollo\n\n\nnext.js / npm の追...",
          "link": "https://zenn.dev/knaka0209/articles/36ce5834d2f73e",
          "publishedOn": "2021-09-25T05:14:25.000Z",
          "wordCount": 143,
          "title": "Next.jsで、Apollo Client設定メモ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--v4C3ECLl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:knaka%2520Tech-Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7%25E3%2580%2581Apollo%2520Client%25E8%25A8%25AD%25E5%25AE%259A%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2owZG5pNFJFRHhHSGxQMkJMVGgtMzNaV2hoSjI5RVIxOG14d3FFV2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/knaka0209/articles/53a679da7ba502",
          "author": "knaka Tech-Blog",
          "description": "概要:\nnext.js 11 で、ESLint 対応されているようでしたので\n試したメモとなります\n\n\n 環境\n\nnode : 14.17\nnext.js : 11.1.2\nESLint : 7.32.0\n\n\n\n 関連\nhttps://zenn.dev/thiragi/articles/555a644b35ebc1\nhttps://qiita.com/howdy39/items/6e2c75861bc5a14b2acf\n\n\n 参考のコード\nhttps://github.com/kuc-arc-f/nextjs11_1eslint\n\n.eslintrc.json\nruleは、適当に設定...",
          "link": "https://zenn.dev/knaka0209/articles/53a679da7ba502",
          "publishedOn": "2021-09-25T00:57:08.000Z",
          "wordCount": 85,
          "title": "Next.js 11で、ESLint設定メモ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kZXCvolp--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:knaka%2520Tech-Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%252011%25E3%2581%25A7%25E3%2580%2581ESLint%25E8%25A8%25AD%25E5%25AE%259A%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2owZG5pNFJFRHhHSGxQMkJMVGgtMzNaV2hoSjI5RVIxOG14d3FFV2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryoka419319/articles/4518625e1b5b74",
          "author": "ITEEK 上川",
          "description": "はじめに\n前回、Next.js について調べてみたので、今回はよく使うアカウント認証について、アプリケーションを作ってみようと思います。\nNext.js を開発している Vercel が作っている NextAuth.js を使用します。\n\n アプリを作ってみる\nsample という名前でアカウント認証付きのアプリケーションを作成します。\n\n 1. まずは、Hello world！\n\n      \n        \n        $ yarn create next-app --typescript\n$ cd sample\n$ yarn add next-auth\n$ yarn a...",
          "link": "https://zenn.dev/ryoka419319/articles/4518625e1b5b74",
          "publishedOn": "2021-09-24T12:46:52.000Z",
          "wordCount": 331,
          "title": "Next.js で SNS アカウント認証！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AP_9owfQ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ITEEK%2520%25E4%25B8%258A%25E5%25B7%259D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25A7%2520SNS%2520%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E8%25AA%258D%25E8%25A8%25BC%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dIb1d3OGQ2eEFsUjVlamxTNy13Q1BhdVBPUkxpUFp0YVdDblJ4Tmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryoka419319/articles/82e92b209a9fc9",
          "author": "ITEEK 上川",
          "description": "はじめに\nNext.js は本番環境のための React フレームワークで主に以下のような特徴があります。\n\n画像最適化\n国際化ルーティング\nNext.js アナリティクス\nゼロコンフィグ\nハイブリッド SSG・SSR\nISR（Incremental Static Regeneration）\nTypeScript サポート\nファスト・リフレッシュ\nファイルシステムルート\nAPI ルーティング\nビルトイン CSS サポート\nコード分割とバンドリング\n\n今回は、これらの特徴について、説明していきたいと思います。\n\n 特徴\n\n 画像最適化\nhttps://nextjs.org/docs/...",
          "link": "https://zenn.dev/ryoka419319/articles/82e92b209a9fc9",
          "publishedOn": "2021-09-24T11:09:27.000Z",
          "wordCount": 477,
          "title": "React の フレームワーク、Next.js に入門！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--5iqKDwdY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ITEEK%2520%25E4%25B8%258A%25E5%25B7%259D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25AE%2520%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2580%2581Next.js%2520%25E3%2581%25AB%25E5%2585%25A5%25E9%2596%2580%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dIb1d3OGQ2eEFsUjVlamxTNy13Q1BhdVBPUkxpUFp0YVdDblJ4Tmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c",
          "author": "oubakiou",
          "description": "クリスマスまでには出版される予定になっている",
          "link": "https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c",
          "publishedOn": "2021-09-24T03:47:24.000Z",
          "wordCount": 31,
          "title": "出来る100%TypeScript   作って学ぶNext.js + GraphQL + Prisma(下) - GCP編",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ClxhHh4o--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9kMjMyMTBmMTYwLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/oubakiou/books/181b750dfb6838",
          "author": "oubakiou",
          "description": "クライアントサイドでは広く普及したTypeScriptですが、その一方サーバーサイドでは比較すると緩やかな採用拡大に留まっています。もしも両方を一貫してTypeScriptでの開発が出来たら？\n\n本書ではTypeScriptの強みである静的型の力を最大限活かした構成でのアプリケーション開発について、SNS開発を題材に学べる実践的なチュートリアルです。",
          "link": "https://zenn.dev/oubakiou/books/181b750dfb6838",
          "publishedOn": "2021-09-24T03:46:49.000Z",
          "wordCount": 22,
          "title": "出来る100%TypeScript  作って学ぶNext.js + GraphQL + Prisma(上) - GCP編",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYdqMh0g--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9jOTQzZjk0NmVlLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/takepepe/articles/form-with-useswr",
          "author": "Takepepe",
          "description": "管理画面のような CRUD 中心のプロダクトでは Form と CSR をよく利用します。SWR は開発体験に優れたライブラリですが、Form に利用する場合注意点があるので、備忘録として共有します（広義の SWR と紛わない様に、タイトルはuseSWRとしました）\n\n 視覚的安定性とキャッシュ\nはじめに、SWR や React Query を利用するモチベーションについて言及します。SWR は一意のキーに紐づいたキャッシュが無い場合、loading fallback を表示します。fallback 表示はたとえ一瞬であっても「チカっ」とした表示になるため「スムーズではない印象」を利用者...",
          "link": "https://zenn.dev/takepepe/articles/form-with-useswr",
          "publishedOn": "2021-09-24T03:03:28.000Z",
          "wordCount": 599,
          "title": "useSWR で作る Form 画面の備忘録",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--G8Pd0w9A--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takepepe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:useSWR%2520%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%2520Form%2520%25E7%2594%25BB%25E9%259D%25A2%25E3%2581%25AE%25E5%2582%2599%25E5%25BF%2598%25E9%258C%25B2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dpejh1QmdoVHJXUHhiRlRFdm9IVHJ5WDNhRkdmdlJCLUtVVTl6SUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d",
          "author": "Kimura Kazuki",
          "description": "やりたいこと\n.svg を .tsx の拡張子に変換したい\n\n 技術選定\n\nReact\nTypeScript\nNext.js\n\n\n 実現方法\nSVGRというツールを用いることで簡単に実現できた\n\n 前提知識\n\n SVGRとは何か？\n\n      \n        \n        svgファイル から Reactコンポーネント にコマンド1つで簡単に変換できる CLI ツール\n\n\n      \n      \n SVGR の基本構成\n\n      \n        \n        svgファイル（.svg） → SVGR → React Component（.jsx | .tsx）\n...",
          "link": "https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d",
          "publishedOn": "2021-09-23T20:48:45.000Z",
          "wordCount": 319,
          "title": "svgファイルをReactコンポーネントに変換する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--oXF0_pL---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kimura%2520Kazuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:svg%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592React%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzYwMmFkYjExZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yun8boo/articles/74e0f6994a93c9",
          "author": "yun8boo",
          "description": "Supabaseとは\n公式ドキュメント見てもらえればなと。\n\n Storage Usage\nStorageの基本的な操作をざっくりメモ程度に残す。\n※supabase clientの初期化などは行っていることを前提\n\n アップロード\nfrom.upload()\ne.g. avatarsバケットにアップロード\n\n      \n        \n        const avatarFile = event.target.files[0]\nconst { data, error } = await supabase\n  .storage\n  .from('avatars')\n  .up...",
          "link": "https://zenn.dev/yun8boo/articles/74e0f6994a93c9",
          "publishedOn": "2021-09-23T14:41:39.000Z",
          "wordCount": 149,
          "title": "Supabase Storage Usage Memo",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--hUMmbw4B--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yun8boo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Supabase%2520Storage%2520Usage%2520Memo%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMGM0MGY5ZmIyNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/4498ad794002c3",
          "author": "空雲",
          "description": "１．getInitialPropsの終焉\n\n 1.1. Next.jsではgetInitialPropsのSSRが終わったことにされている\nNext.jsの9.3以降、getStaticPropsやgetServerSidePropsが登場し、現在ではgetInitialPropsを使ったSSRが終焉を迎えたかのような風潮となっています。しかしgetStaticPropsとgetServerSidePropsは、実際の所で大きな欠点を抱えています。\ngetStaticPropsはSSG前提で使うなら全く問題ありません。しかし、ある程度の更新頻度をもつシステムやリアルタイムな編集機能と...",
          "link": "https://zenn.dev/sora_kumo/articles/4498ad794002c3",
          "publishedOn": "2021-09-23T04:39:31.000Z",
          "wordCount": 379,
          "title": "Next.jsでSSRを限界まで簡単に実現する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--P1V4DtNj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7SSR%25E3%2582%2592%25E9%2599%2590%25E7%2595%258C%25E3%2581%25BE%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/7f38cab4792446",
          "author": "空雲",
          "description": "※ ジョーク記事です\n※ ジョークですが、プログラムはきちんと動きます\nソースコード https://github.com/SoraKumo001/next-context\n動作確認 https://next-context-ten.vercel.app/\n\n コンテキストについて\n下記の公式ドキュメントでコンテキストはこのように説明されています。\n\nコンテクストは各階層で手動でプロパティを下に渡すことなく、コンポーネントツリー内でデータを渡す方法を提供します。\n\nつまり、ツリー内で有効となるデータ領域です。\nそれ以上を期待すると残念なことになるので、とにかくタダのデータ領域だと思いまし...",
          "link": "https://zenn.dev/sora_kumo/articles/7f38cab4792446",
          "publishedOn": "2021-09-23T00:48:25.000Z",
          "wordCount": 426,
          "title": "React コンテキストの真の使い方（useContext）",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--neIUJTXG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E7%259C%259F%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25EF%25BC%2588useContext%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9",
          "author": "minguu",
          "description": "はじめに\nこの記事では TypeScript で書かれた Next アプリに Firebase JavaScript SDK v9 を利用して Google ログインを実装する方法について書きます. 認証するユーザは Recoil で管理します. Context API で管理する方法はこちらの記事で書いています.\nまた, 前述した記事に載っていますので, この記事では Firebase プロジェクトの作成, Google プロバイダの有効化などの詳しい手順は省略させて頂きます.\nこの記事が他の人の参考になれば幸いです.\nまた, この記事の内容に間違った記載がありましたら, 指摘して...",
          "link": "https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9",
          "publishedOn": "2021-09-22T13:23:52.000Z",
          "wordCount": 620,
          "title": "Firebase SDK v9, Recoil で Next.js アプリの Google ログインを実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--79iO3zKf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:minguu%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Firebase%2520SDK%2520v9%252C%2520Recoil%2520%25E3%2581%25A7%2520Next.js%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%2520Google%2520%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lMaU1RSm1OSlUyZXBOWldpcWpTOTV6eXBVeFQxSDRjU2FVVUNvbVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ucwork/articles/dc993c8494d65e",
          "author": "ucwork",
          "description": "概要\nやっとローカルのインフラ周りができてきたので\n次は認証認可を実装していきたい🏄‍♂️\n....が、なんかフロントエンド見えるものがないとやりずらいので\nNext.jsをMinikube + Istio環境にデプロイしてみたら\n実行時にpermission deniedエラーが出てちょっと詰まったのでメモ\n\n 雑談\nせっかくprivateで作ってるアプリだし\nマイクロフロントエンドやってみようかと思って結構調べたけど\n相当上手に設計できないと利点以上に困難さが発生する未来しか見えなかったので断念...\n技術がNext.js, Reactに縛られるけど\n一旦コンポーネントをマイクロ...",
          "link": "https://zenn.dev/ucwork/articles/dc993c8494d65e",
          "publishedOn": "2021-09-21T12:27:35.000Z",
          "wordCount": 222,
          "title": "Next.jsをDockerでdeployするとpermission deniedが出る",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--yG7aoMUf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ucwork%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%25E3%2582%2592Docker%25E3%2581%25A7deploy%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8permission%2520denied%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dtWVRJV1B6ai1fb0s0ZmJlVTZCT3hfU0xST08xaERPTnV3Q2VsPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/izumin/articles/fce4918f5f7946",
          "author": "Masayuki Izumi",
          "description": "TL;DR\n\nNext.js アプリ内のページ遷移では、原則として元 page の component は unmount される\n「遷移前後の page component が同じである」場合、および「App に記述されたコンポーネント（Layout）」は unmount されない\n\npage component に getLayout 関数を定義するパターン[1]を適用することで、page ごとの Layout を細かく設定・管理できる\n\n\n モチベーション\nたとえばタブを使ったページ遷移などで、一部のコンポーネントを引き継ぎたい場合。\nzenn.dev でいうとトップページのグ...",
          "link": "https://zenn.dev/izumin/articles/fce4918f5f7946",
          "publishedOn": "2021-09-21T01:32:22.000Z",
          "wordCount": 436,
          "title": "Next.js でページ遷移前後で共通するコンポーネントを残す",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--rOkddw5H--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Masayuki%2520Izumi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25A7%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E9%2581%25B7%25E7%25A7%25BB%25E5%2589%258D%25E5%25BE%258C%25E3%2581%25A7%25E5%2585%25B1%25E9%2580%259A%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E6%25AE%258B%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pLQnhYeEszZEtUbG80dkZXU04zbWNpU0lvNlRFckpid1M3WUdoeFE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "author": "aiji42",
          "description": "はじめに\nNext.js には SSR するための getServerSideProps と SSG/ISR のための getStaticProps というデータフェッチファンクションが用意されています。\n一般的な getServerSideProps は、次のようにレンダリングに必要な props を返却することが主な用途です。\n\n      \n        \n        export async function getServerSideProps(context) {\n  const data = await fetch('...').then((res) => ...",
          "link": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "publishedOn": "2021-09-20T16:03:30.000Z",
          "wordCount": 267,
          "title": "【Next.js】getServerSidePropsをリバースプロキシ化して遊ぼう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bgvRilVw--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Next.js%25E3%2580%2591getServerSideProps%25E3%2582%2592%25E3%2583%25AA%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25AD%25E3%2582%25B7%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E9%2581%258A%25E3%2581%25BC%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "author": "空雲",
          "description": "Next.jsの初回queryのundefined現象\n\nsrc/pages/[q].tsx\n\n\n      \n        \n        import { useRouter } from 'next/router'\nimport React from 'react'\n\nconst Page = () => {\n  const router = useRouter()\n  const q = router.query['q']\n  console.log(\"q:\",q)\n  return <div>{q}</div>\n}\n\nexport defa...",
          "link": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "publishedOn": "2021-09-20T04:26:09.000Z",
          "wordCount": 81,
          "title": "[Next.js]router.queryから初回のundefinedを消し去る方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W26cShMZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%255BNext.js%255Drouter.query%25E3%2581%258B%25E3%2582%2589%25E5%2588%259D%25E5%259B%259E%25E3%2581%25AEundefined%25E3%2582%2592%25E6%25B6%2588%25E3%2581%2597%25E5%258E%25BB%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "author": "aiji42",
          "description": "はじめに\nNext.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。\nここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。\n例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…\n\n一般ユーザ向けページは誰でもアクセス可能\nマイページはログイン済みのユーザのみアクセス可能\nログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる\n\nた...",
          "link": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "publishedOn": "2021-09-18T17:11:31.000Z",
          "wordCount": 460,
          "title": "【Next.js】アクセスコントロールパターン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fXFmupwO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "author": "anozon",
          "description": "この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。\nGist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx\n\n pages/_app.tsx\nこちらは Function Component でかけるのでシンプルです。\n\n      \n        \n        import { AppProps } from 'next/app'\nimport Head from 'next/head'\n\nconst...",
          "link": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 145,
          "title": "Next.js with TypeScript で最小限の _app.tsx, _document.tsx",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uLCP34vU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%2520with%2520TypeScript%2520%25E3%2581%25A7%25E6%259C%2580%25E5%25B0%258F%25E9%2599%2590%25E3%2581%25AE%2520_app.tsx%252C%2520_document.tsx%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "author": "anozon",
          "description": "next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。\njsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。\nSSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。\n(/pages 直下で export するコンポーネント)\n\n コード\n\n      \n        \n        import { createConte...",
          "link": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "publishedOn": "2021-09-18T13:58:05.000Z",
          "wordCount": 143,
          "title": "Next.js export 実行時のタイムスタンプをコンポーネントで使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_ZPfgWAW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520export%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2583%2597%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/localhost-apphost-dev",
          "author": "anozon",
          "description": "複数のアプリを同じ localhost:3000 で開発すると切り替えるたびにキャッシュが競合するので /etc/hosts で変える案です。\n\n /etc/hosts\n\n      \n        \n        sudo vim /etc/hosts\n\n\n      \n      \n      \n        \n        127.0.0.1 localhost.appname\n127.0.0.1 localhost.othername\n127.0.0.1 localhost.hoge\n127.0.0.1 localhost.fuga\n\n\n      \n      \n フロ...",
          "link": "https://zenn.dev/anozon/articles/localhost-apphost-dev",
          "publishedOn": "2021-09-18T13:58:02.000Z",
          "wordCount": 59,
          "title": "localhost.{appname}:3000 で開発してブラウザキャッシュを活用する案",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--tUolYE7d--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:localhost.%257Bappname%257D%253A3000%2520%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E6%25A1%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochinozenn/articles/173dd93e19ba18",
          "author": "RyosukeMochizuki",
          "description": "useStateで全てのstateを定義している人なら、ぶち当たるであろう「コードの肥大化問題」。\nuseStateで一つずつ定義していくのは、stateが１つか２つならいいんですけど、\n増えてくると、同じような記述がたくさんでてきてコードが肥大化します。(例えば、入力フォームなど)\n入力フォームの例↓\n\n      \n        \n        export default function Home () {\n\tconst [name, setName] = useState(\"\");\n\tconst [age, setAge] = useState(0);\n\tconst [ge...",
          "link": "https://zenn.dev/mochinozenn/articles/173dd93e19ba18",
          "publishedOn": "2021-09-18T02:33:00.000Z",
          "wordCount": 114,
          "title": "useStateの使いすぎで、収集つかなくなりそうになった時のためのリファクタリング方法🧹",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--58BOpZJU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:RyosukeMochizuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:useState%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2599%25E3%2581%258E%25E3%2581%25A7%25E3%2580%2581%25E5%258F%258E%25E9%259B%2586%25E3%2581%25A4%25E3%2581%258B%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258A%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E6%2596%25B9%25E6%25B3%2595%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeGpEQVZkWlVLRnFGM193cFRwaHQ1TjhZTmVxYXlIdmF4dGVzRS09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler",
          "author": "terrierscript",
          "description": "next.jsで同じエンドポイントをハンドラとして使い回すとちょっと便利だった\n\n ユースケース1: URLを変更したい場合\nAPIのURLを変更したいが後方互換を保ちたいようなケースがあるだろう。\nリダイレクトを設定したり、Custom Serverを利用しても良いが、ちょっとそこまでやりたくないがコピペもしたくないようなときに利用できる\n例えばこんなAPIが/api/greetとしてあったとする\n\n      \n        \n        // /api/greet.ts\n\nimport { NextApiHandler } from \"next\"\n\nconst handler...",
          "link": "https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler",
          "publishedOn": "2021-09-17T14:07:30.000Z",
          "wordCount": 256,
          "title": "next.jsで複数のAPIエンドポイントで同じhandlerを使う小技",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bytwYQ9a--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terrierscript%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:next.js%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AEAPI%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E5%2590%258C%25E3%2581%2598handler%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E5%25B0%258F%25E6%258A%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGE3MmMyMTRjZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochinozenn/articles/8218f316e704e7",
          "author": "RyosukeMochizuki",
          "description": "現在携わっているプロジェクトが、フロントNext.js, バックエンドrailsのジャムスタック構成です。\nそこで、rails側で生成したsessionがブラウザのcookieに保存されない事件が起こり、解決に時間がかかったため、備忘録です。\n(1ヶ月ほど時間が空いてしまったので、試したところは、覚えているものだけです、少し前後しているかも🙇‍♂️)\n認証情報はブラウザのsessionで管理したいというものが前提のものです。\n\n 問題の発端\nユーザー新規登録した際に、sessionを生成し、ブラウザのcookieに保存して、ユーザー情報を扱いたかった。\nそのため、railsのinitia...",
          "link": "https://zenn.dev/mochinozenn/articles/8218f316e704e7",
          "publishedOn": "2021-09-17T00:41:23.000Z",
          "wordCount": 95,
          "title": "vercelのプレビューURLでは、sessionの保存ができないみたい🤔",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0HKJMbUT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:RyosukeMochizuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vercel%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BCURL%25E3%2581%25A7%25E3%2581%25AF%25E3%2580%2581session%25E3%2581%25AE%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeGpEQVZkWlVLRnFGM193cFRwaHQ1TjhZTmVxYXlIdmF4dGVzRS09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kanon_code/articles/4384426f8f8a80",
          "author": "kanon_code",
          "description": "【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと\nフロント：Next.js\nホスティング：vercel\nこの記事ではOGPの説明は割愛します。\n\n 参考記事一覧\nNext.jsにおけるSSG（静的サイト生成）とISRについて（自分の）限界まで丁寧に説明する\nnextjsのISRを使うときのfallback指定について理解するまでの話\nfallbackに関して【公式】\n\n 下調べが足りなかった箇所\n\nOGPで表示される画像の拡張子\nOGPで表示される画像の最小サイズ\nfallbackの挙動についての理解\n\n\n OGPに関すること\nこれは自分がドキ...",
          "link": "https://zenn.dev/kanon_code/articles/4384426f8f8a80",
          "publishedOn": "2021-09-14T03:00:14.000Z",
          "wordCount": 225,
          "title": "【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AgvvVgOA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kanon_code%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9Kanon%2520Code%25E3%2581%25A7OGP%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzRjMjEwNDA1Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "author": "空雲",
          "description": "Firebaseを使えるようにするまで\n\n Firebaseでプロジェクトを作成\nFirebaseを利用すると、無料で以下のサービスに対応した認証を行えます。\n自力で一つ一つ対応するより遙かに簡単です。\n\n上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。\n\n Google認証の有効化\nFirebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。\n先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。\n\n\n アプリケーションの登録\n歯車ボタンからプロジェクトを設定を選びま...",
          "link": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "publishedOn": "2021-09-14T00:01:35.000Z",
          "wordCount": 342,
          "title": "Next.jsでFirebase経由でGoogle認証を利用する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYVZRDtq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Firebase%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7Google%25E8%25AA%258D%25E8%25A8%25BC%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cacbahbj/articles/4e72e38872d67f",
          "author": "terry",
          "description": "概要\n2021/09/01に開催された下記勉強会のメモです\nhttps://mercari.connpass.com/event/221978/\nhttps://www.youtube.com/watch?v=YNLvIkqRC-g\nhttps://engineering.mercari.com/blog/entry/20210823-a57631d32e/\n\n パネルディスカッション\n\n メルカリShopsの画面構成\n\nメルカリトップからwebアプリケーションで埋め込み\n\nタブの中がメルカリShopsのWebView\nおすすめの商品をタップで商品画面を出す個別のWebView\n\n検...",
          "link": "https://zenn.dev/cacbahbj/articles/4e72e38872d67f",
          "publishedOn": "2021-09-13T16:15:39.000Z",
          "wordCount": 109,
          "title": "Souzoh Tech Talk #03: Frontend",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--CPnG8PmF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terry%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Souzoh%2520Tech%2520Talk%2520%252303%253A%2520Frontend%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hKejB3ejZmdXM2N25DX1NTZzdDa2YxNXUwc1J3b0tBNmdjMmZBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kanon_code/articles/b3019ec509d6f5",
          "author": "kanon_code",
          "description": "CtoCのコードレビューサービス Kanon Codeをリリースしました\n\n本サイト\nKanon Code\n\n どんなサービス？\nレビューして欲しい人がコードを投稿し、自由にレビューしてもらえるサービスです。\nユーザー登録でレビュイーにもレビュワーにもなれます。\nまた、レビューは販売することも可能で、販売システムはnoteを参考にしています。\nもちろん無料でのレビューも可能です。\n\n 技術スタック\n\nNext.js\nLambda(node.js)\nDynamoDB\nvercel\nSAM\nMaterial UI\nstyled-component\n\n\n 実際の画面\n\nトップ画面はこのよう...",
          "link": "https://zenn.dev/kanon_code/articles/b3019ec509d6f5",
          "publishedOn": "2021-09-13T10:38:44.000Z",
          "wordCount": 97,
          "title": "【個人開発】CtoCのコードレビューサービス Kanon Code",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NXm7AVhq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kanon_code%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591CtoC%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%2520Kanon%2520Code%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzRjMjEwNDA1Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kin/articles/658b06a3233e60",
          "author": "Fiddler25",
          "description": "はじめに\nミチビク株式会社で開発に携わっております、Fiddler25と申します。\n最近業務でreact-pdf, react-konvaを使う機会がありました。\n画面上にPDFを表示し、PDF上で画像をドラッグ & ドロップする機能が必要だったのですが、Next.jsではインポートして利用できるようにするまでいくつかハマりポイントがあったため、解決方法を記したいと思います。\n記事の最後にreact-pdf + react-konvaの簡単なサンプルコードを載せました。\nこちらのコードで以下のような機能を作ることができます。\n\nPDFはpdf.jsのExamplesにあるhe...",
          "link": "https://zenn.dev/kin/articles/658b06a3233e60",
          "publishedOn": "2021-09-12T23:56:42.000Z",
          "wordCount": 669,
          "title": "Next.jsでreact-pdf + react-konvaを使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YYbo1p0q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Fiddler25%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7react-pdf%2520%252B%2520react-konva%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyYjQzRUh6NGhkbmxLTmZyclduaE43Z0M3V1hPMUQtRW5oVTh3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takepepe/articles/nextjs-error-handling",
          "author": "Takepepe",
          "description": "Next.js には組み込みのエラーフォールバック機構が存在します。pages/404.tsxとpages/500.tsx、Unhandled Error を捉えるpages/_error.tsxが組み込みフォールバックです。https://nextjs.org/docs/advanced-features/custom-error-page\n実アプリケーションにおいてはこれだけでは不十分なケースが多く、意図的なもの・そうでないものをハンドリングしログ収集に繋げるなど、きちんとエラー設計をしたいところです。\n\n TypeScript 4.4 で try catch の推論が変更になった\n...",
          "link": "https://zenn.dev/takepepe/articles/nextjs-error-handling",
          "publishedOn": "2021-09-12T16:39:51.000Z",
          "wordCount": 569,
          "title": "Next.js の Error を丁寧に扱う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--hq9pZrJB--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takepepe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25AE%2520Error%2520%25E3%2582%2592%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E6%2589%25B1%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dpejh1QmdoVHJXUHhiRlRFdm9IVHJ5WDNhRkdmdlJCLUtVVTl6SUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/qaynam/articles/c4794537a163d2",
          "author": "qaynam",
          "description": "フォームに入力中のデータがの残っていて、ページ遷移する前に注意(window.confirm())を出したくて、色々ハマりましたので、書き残しておきます。\n結論から言う、beforeunloadはwindow.location.hrefやF5ようなページの再読み込むが発生する時には発火しますが、Next.jsのRouterのような ブラウザーのhistory APIでの画面遷移の場合は発火しないようです。\n解決策をいくつか見つかったので、全部書いておきます。\n\n 解決策1\n\n      \n        \n        import SingletonRouter, { Router ...",
          "link": "https://zenn.dev/qaynam/articles/c4794537a163d2",
          "publishedOn": "2021-09-12T14:30:16.000Z",
          "wordCount": 160,
          "title": "Next.JSでページ遷移する前にbeforeunloadはさみたい時",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SjaSIAcI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:qaynam%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.JS%25E3%2581%25A7%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%2599%25E3%2582%258B%25E5%2589%258D%25E3%2581%25ABbeforeunload%25E3%2581%25AF%25E3%2581%2595%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E6%2599%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqMTRfSGhpb09SazlXcGlSV29ZUjJDdWVHRW9ab3NwcFFER24zPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/dff5c97e5c41b0",
          "author": "ぺい",
          "description": "課題としては、SPAでのアクセス制御。\n\nユーザーがログインしたら特定の画面にアクセスできる\nログインしてない場合はアクセスできないようにする。\nログインしている時はログイン画面からリダイレクトする\n\nなどなど。\nhttps://zenn.dev/nus3/scraps/d04f5026bab361\nhttps://zenn.dev/catnose99/articles/2169dae14b58b6\n\n リダイレクトする前に画面が見えてしまう。\nfunctional componentでuseEffectで制御しようとすると、見せたくない画面が一瞬表示される。\nhttps://davec...",
          "link": "https://zenn.dev/peg/articles/dff5c97e5c41b0",
          "publishedOn": "2021-09-12T07:00:06.000Z",
          "wordCount": 67,
          "title": "ReactとかNext.jsのアクセス制御",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Eu3tSa_Y--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%25A8%25E3%2581%258BNext.js%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E5%2588%25B6%25E5%25BE%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/61440985120417",
          "author": "ぺい",
          "description": "Nextjsでの認証のタイミングがどうなのか調べた。\n\n 記事1\nhttps://www.mikealche.com/software-development/how-to-implement-authentication-in-next-js-without-third-party-libraries\n\nIn this way, if you don’t check for authentication on the server, you can prevent adding getServerSideProps to your pages.\n\n\nAnd if your pages ...",
          "link": "https://zenn.dev/peg/articles/61440985120417",
          "publishedOn": "2021-09-12T06:59:39.000Z",
          "wordCount": 135,
          "title": "Nextjsでの認証の記事を読んだ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OVaHN1zx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Nextjs%25E3%2581%25A7%25E3%2581%25AE%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25AE%25E8%25A8%2598%25E4%25BA%258B%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/maztak/articles/0a59c556ce4b83",
          "author": "Takuya Matsuda",
          "description": "Llike this👇\n\n      \n        \n        {router.pathname !== '/' && (\n    <div className=''>\n\t...\n    </div>\n)}\n\n\n      \n      \n Properties of router\nHere is a example that shows what are propeties of router. This url is /search?q=aaa, not / so that we can understand. So don't us...",
          "link": "https://zenn.dev/maztak/articles/0a59c556ce4b83",
          "publishedOn": "2021-09-12T05:14:41.000Z",
          "wordCount": 91,
          "title": "How to chechk is home with useRouter in Next.js(React)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--k2B5V_bM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takuya%2520Matsuda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:How%2520to%2520chechk%2520is%2520home%2520with%2520useRouter%2520in%2520Next.js%2528React%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pneVNwNkxqcEZSMEVzVXhmb2pzTVZHblBjYUVSNnRKRVhuY1NzNXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyo9bo/articles/9909ba89c42a77",
          "author": "kyosuke kubo",
          "description": "やったこと\nstorybook + chromatic + githubActionでUIのテストを自動化させました。\n今回mainとdevelopブランチにpull requestが行われた場合に実行させるようにしたので、手順を記事にします。\n\n 手順\n\n chromaticのセットアップ\nchromaticとは、storybookのメンテナーが作っているstorybookをホスティングするサービスです。加えてgithubと連携することで、PRと連携してUIのreviewを効率化してくれます。\n現状、似たようなサービスとしてNetlifyがよく使われているように思われますが、sto...",
          "link": "https://zenn.dev/kyo9bo/articles/9909ba89c42a77",
          "publishedOn": "2021-09-11T09:02:23.000Z",
          "wordCount": 140,
          "title": "ChromaticとstorybookでUIのテストを自動化してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Nixvpepg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kyosuke%2520kubo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Chromatic%25E3%2581%25A8storybook%25E3%2581%25A7UI%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmY1Nzk1ZDI3OC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/itomise/articles/72ab332bb8f506",
          "author": "itomise",
          "description": "本記事の構成は、CIなどは使わずにすべてローカルで完結することを前提としています。\n\n\n モチベーション\n自分の前回の記事で、Next.jsの画像最適化モジュール「next-optimized-images」を使った環境などについて書いたのですが、\n実際に使っていていくつか問題があったため結局実務では使っていません...。\n問題としては、\n\nほぼ空のプロジェクトでも、next-optimized-imagesを使っただけで生成ファイルのサイズが200kbほど増えてしまっていた（詳しくは調べていませんが）\nビルド毎に画像生成を行うので毎回ビルドが遅い\n\nということがありました。\n画像最適...",
          "link": "https://zenn.dev/itomise/articles/72ab332bb8f506",
          "publishedOn": "2021-09-11T07:31:24.000Z",
          "wordCount": 243,
          "title": "ディレクトリ構造を保ったままwebp生成するNode.js/webp対応について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BpMkflje--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:itomise%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E4%25BF%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25BE%25E3%2581%25BEwebp%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258BNode.js%252Fwebp%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2E1Y2RlZmViYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/052hide/articles/e1b9f90013c7f2",
          "author": "Hidetoshi Ota",
          "description": "Next.jsアプリ作成\n\n      \n        \n        npx create-next-app --ts\n\n# What is your project named?\nnextjs-ssr-amplify-sample\n\n\n      \n      コードが生成されるまで待つ！\n\n GitHubにあげる\n省略\nhttps://github.com/052hide/nextjs-ssr-amplify-sample\n\n Amplifyにデプロイ\n\n AWSにログインしてAmplify Consoleを開く\nhttps://ap-northeast-1.console...",
          "link": "https://zenn.dev/052hide/articles/e1b9f90013c7f2",
          "publishedOn": "2021-09-10T16:15:21.000Z",
          "wordCount": 46,
          "title": "[Next.js] AmplifyでSSRデプロイする方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--JtM3lLeG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Hidetoshi%2520Ota%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BNext.js%255D%2520Amplify%25E3%2581%25A7SSR%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjFlZjgxZDE0NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507",
          "author": "ichigo",
          "description": "Next.jsにおけるSPA的遷移の考え方\n\n 背景\nインターン先で既存SSR(React)プロジェクトをNext.jsに移行する際に、プロフィールページのタブやモーダルといった箇所でコンポーネントの切り替えと共にURLも変わるようなSPA的遷移の実装を移行するのに苦労した\n具体的にはreact-routerのhistory.push()にあたる機能が Next.js ですぐに見つけられなかった\n今まではタブなどの切り替え時にhistory.push()をすることで実装していたが、\nそれがNext.jsではどのようにすれば実装できるかについて議論する\n\n 単語定義\n\n SPA的遷移\n...",
          "link": "https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507",
          "publishedOn": "2021-09-10T10:28:59.000Z",
          "wordCount": 101,
          "title": "Next.jsにおけるSPA的遷移の考え方",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--p6q_SUpF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ichigo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258BSPA%25E7%259A%2584%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%25AE%25E8%2580%2583%25E3%2581%2588%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dJbjVqVFhfRGlKc2tiUjVzUkxXVnNUby03dFRWTkpCcUFvMWlLPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/stacklive/articles/bccf6d9a6d0806",
          "author": "StackLive",
          "description": "配信を予約して事前に告知することが可能になりました\n今回のアップデートでは配信をする日時を予約することが可能になり、視聴者に事前にお知らせできるようになりました。予約配信機能により、「いきなり配信をしても視聴者が集まらない」「配信内容に需要があるかわからない」などの不安も軽減されより気軽に配信していただければと思います。\n\n\n 配信予約をする方法\n\n右上のLIVEボタンをクリック\n通常の配信通りにタイトルと概要を記入\n配信予約をONにする\n配信予約日時を設定して予約する\n\n\n配信を予約すると、ホーム画面にある予約配信の箇所に表示されるようになります。\nまた、自分が予約している配信はマ...",
          "link": "https://zenn.dev/stacklive/articles/bccf6d9a6d0806",
          "publishedOn": "2021-09-10T03:40:19.000Z",
          "wordCount": 25,
          "title": "エンジニア向けライブ配信サービスに配信予約機能が追加されました！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dEbxJXQn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:StackLive%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E5%2590%2591%25E3%2581%2591%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E9%2585%258D%25E4%25BF%25A1%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2581%25AB%25E9%2585%258D%25E4%25BF%25A1%25E4%25BA%2588%25E7%25B4%2584%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%258C%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMWFkOGFlNzRmMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nitaking/articles/9ff4fca3e8e62e",
          "author": "nitaking",
          "description": "何がおきたか\n\n\npages/index.tsxの内容が、pages/[hoge].tsxに一瞬表示される\n\n\n なぜか\n\nSPAはWEBサーバーからindex.html受け取る\n\nこれがデフォルトの表示に関係している？？？\n\n\n\n\n どうしたか\n\n      \n        \n          /**\n   * dynamic-pathなどの場合、`pages/index.tsx`がSSRのデフォルトとして読み込まれるため、\n   * SSRではそのまま、CSRではリダイレクトする.\n   *\n   *  SSR: Rootがレンダリング -> Contentがレンダリン...",
          "link": "https://zenn.dev/nitaking/articles/9ff4fca3e8e62e",
          "publishedOn": "2021-09-09T14:24:03.000Z",
          "wordCount": 71,
          "title": "【Next.js】dynamic-pathでindex.tsxのComponentが一瞬表示される",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SnqrommY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nitaking%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Next.js%25E3%2580%2591dynamic-path%25E3%2581%25A7index.tsx%25E3%2581%25AEComponent%25E3%2581%258C%25E4%25B8%2580%25E7%259E%25AC%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pDTWQ2V3JtNEFxOTluQ2xBTXQ1NHVJZTBPdnVYX05Fd1BZNElLUnc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "author": "hanetsuki",
          "description": "2021/09/時点での Next.js + TypeScript の環境構築忘備録です。\n主な環境のバージョン\n\nnext: v11.1.0\ntypescript: v4.3.5\neslint: v7.32.0\n@emotion/react: v11.4.1\n\n\n 1.Next.jsの環境を作成\nhttps://nextjs.org/docs#setup\ntpescript用の環境作成コマンドよしなにやってくれる便利なやつ。\n\n      \n        \n        yarn create next-app --typescript\n\n\n      \n      \n ディレクト...",
          "link": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "publishedOn": "2021-09-09T10:47:54.000Z",
          "wordCount": 383,
          "title": "Next.js + TypeScript 環境構築 v11.1",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1TuHkiZq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520TypeScript%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520v11.1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takasing/articles/parameter-extensions",
          "author": "Takashi Toyofuku",
          "description": "シェル芸をする際にいつも何でググればよいかわからなくなるあれのことを Parameter expansion というらしい。\n変数が存在しない際にデフォルト値設定したり、変数が存在する場合に変わりの文字を入れたりするあれ。\nNext.js のアプリケーションを Vercel にデプロイする際に.env.localをうまく拡張する際に必要になったので一部だけ整理しとく。 .env.localでうまく展開されませんでした。。。\n\n      \n        \n        #!/bin/bash\n\nNO_VARIABLES=\nVARIABLES=var\n\necho \"- operator...",
          "link": "https://zenn.dev/takasing/articles/parameter-extensions",
          "publishedOn": "2021-09-08T06:12:38.000Z",
          "wordCount": 158,
          "title": "BashのParameter expansionの一部について整理",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pv1rcV-V--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takashi%2520Toyofuku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Bash%25E3%2581%25AEParameter%2520expansion%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E6%2595%25B4%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDE5M2Y3MTBiOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/byanbyan/articles/supabase_swr",
          "author": "ゆゆゆ",
          "description": "Supabase で swr 使えるのだろうか、、、\nやってみたのでまとめ。\n参考 🐈 Github\nhttps://github.com/supabase/supabase/discussions/764\nSWR\nhttps://swr.vercel.app/ja\nSupabase\nhttps://app.supabase.io/\n\n\nプロジェクト内に\npages/apiフォルダを作成し、supabase からデータ取得する処理を書く。\n\n\nuseSWR を使って、pages/apiからデータを取得する。\n\n\n\n 0.supabase のクライアントの設定\nhttps://supaba...",
          "link": "https://zenn.dev/byanbyan/articles/supabase_swr",
          "publishedOn": "2021-09-07T08:07:18.000Z",
          "wordCount": 227,
          "title": "Supabaseでuseswrを使ってみる。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2usexuJs--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2586%25E3%2582%2586%25E3%2582%2586%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Supabase%25E3%2581%25A7useswr%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2U3NDQzNzU4NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "author": "matsutoba",
          "description": "nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。\n先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。\n\n やりたいこと\n\nボタンを押したらテキストが変わるコンポーネントを作る。\nボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい\n\n\n 動かした環境\n\nmacOS 11.5.2\nNode.js 14.17.0\nyarn 1.22.10\n\n後述の cr...",
          "link": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "publishedOn": "2021-09-06T11:24:10.000Z",
          "wordCount": 636,
          "title": "nextjs + typescript + jest + enzyme の最小サンプルを動かしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gNRMktEh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsutoba%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:nextjs%2520%252B%2520typescript%2520%252B%2520jest%2520%252B%2520enzyme%2520%25E3%2581%25AE%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM5ZDk0NGY4My5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377",
          "author": "mochi",
          "description": "状況\nNextjs のプロジェクトで GitHub Pages にデプロイし 下のようなコードを書いた時に https://aaaaaaaaaaaaaa.github.io/bbbbbbbbbbbb/page1に遷移してほしいのに https://aaaaaaaaaaaaaa.github.io/page1に遷移してしまう。\n\n      \n        \n        <Link href=\"/page1\">\n  <a>リンク</a>\n</Link>\n\n\n      \n      \n 解決策\n\n GitHub 側\nGitHub の...",
          "link": "https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377",
          "publishedOn": "2021-09-06T09:06:53.000Z",
          "wordCount": 63,
          "title": "Next jsをGitHub Pageにデプロイしたときにnext/linkが正しく遷移するようにする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SWKNprER--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:mochi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next%2520js%25E3%2582%2592GitHub%2520Page%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25ABnext%252Flink%25E3%2581%258C%25E6%25AD%25A3%25E3%2581%2597%25E3%2581%258F%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%2599%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fM2ZhMTczNDliYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kamy112/articles/67ea5fca437d05",
          "author": "Kamy",
          "description": "Incremental Static Regeneration とは\nIncremental Static Regeneration（ISR）はNext.jsのビルドパターンの内の１つです。\n直訳すると\"段階的な静的再生成\"ですね。簡単に説明すると、\n\nクライアント側のリクエストに対し静的にビルドされたページを返す\n有効期限を越えた後にアクセスがあった場合、バックグラウンドで静的ページを再生成する\n次回のアクセス時に、再生成されたページを表示する\n\nという流れとなります。\n俗に言うstale-while-revalidateというキャッシュ戦略をNext.js上で実現可能にしたもので...",
          "link": "https://zenn.dev/kamy112/articles/67ea5fca437d05",
          "publishedOn": "2021-09-06T01:46:54.000Z",
          "wordCount": 137,
          "title": "Next.jsの Incremental Static Regenerationを試してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8jhm1sKN--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kamy%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%25E3%2581%25AE%2520Incremental%2520Static%2520Regeneration%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGEzMmIwOGQ2Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kimura141899/articles/ad3bfa42f25724",
          "author": "taku",
          "description": "React Hook Formとは？\n公式\n\nhttps://react-hook-form.com/jp/\n\nReact Hookを利用した柔軟かつ拡張可能な使いやすいフォームバリデーションライブラリ。\n\n 導入するメリット\n\nバリデーションが比較的簡単に実装できる\nレンダリングが抑えられる⇒パフォーマンス向上\n依存性が少ない\n軽量なパッケージ\n公式のドキュメントが豊富&日本語\nなどがあげられるようです。\n\n\n 環境構築\n\nNext.js\nTypeScript\nreact-hook-form \"^7.14.2\"\nMaterialUI(別記事予定)\n\n今回はreact-hoo...",
          "link": "https://zenn.dev/kimura141899/articles/ad3bfa42f25724",
          "publishedOn": "2021-09-05T11:24:40.000Z",
          "wordCount": 531,
          "title": "React Hook Form使ってみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--KafOcDaI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:taku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520Hook%2520Form%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKekh4b2laRnZsajhoaDgyTkFZYko0NFdPaS0wVkVEeUR1NVQ2a1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "author": "みずねこ",
          "description": "この記事について\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nApexChartsをNext.jsで使う方法\nデータをべた書きしてグラフ化\nデータをFirestoreから取得してグラフ化\n\n\n 参考にした記事\n\nhttps://qiita.com/IchiLab/ite...",
          "link": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "publishedOn": "2021-09-05T10:10:46.000Z",
          "wordCount": 760,
          "title": "Cloud Firestore×Apexchartsでグラフ描画する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vcRhejeS--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Cloud%2520Firestore%25C3%2597Apexcharts%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "author": "みずねこ",
          "description": "この記事について\n初めまして、みずねこです。\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nFirebaseのアプリ作成と初期設定\nFirebase Authenticationで認証機能を実装\nMateria-UIで認証画面のデザイン\n\n\n 参考に...",
          "link": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "publishedOn": "2021-09-05T04:36:15.000Z",
          "wordCount": 400,
          "title": "Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9s_NIaOG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%25E3%2581%25A8Firebase%2520%2520Authentication%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%25BB%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%258D%25E8%25A8%25BC%2528Cookie%2529%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "author": "Kyohei",
          "description": "Jikan API(public API)を使ってTypescriptを勉強します。\n基本は検索機能を使ってAnime Objectを取得します。\n検索はカスタムフックを作ります。(importは省略してます。)\n\n      \n        \n        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {\n    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...",
          "link": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "publishedOn": "2021-09-04T16:04:27.000Z",
          "wordCount": 164,
          "title": "Typescript + React + Jikan API で練習プロジェクト",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NOQZSbVk--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%2520%252B%2520React%2520%252B%2520Jikan%2520API%2520%25E3%2581%25A7%25E7%25B7%25B4%25E7%25BF%2592%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/f13b2608f682aa",
          "author": "ぺい",
          "description": "Next.jsでの状態管理が気になったのでメモ。\n\nNext.js の状態管理 2020\n\nによく纏まっていた\n\n Context API\nhttps://robinvdvleuten.nl/blog/how-to-use-react-context/\n\n Redux\n\nRedux 入門 〜Reduxの基礎を理解する〜\n\n\n\n サンプル実装\nサンプルの実装は公式のがわかりやすい\n\nhttps://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md\n\n\n Recoil\nFacebook製\n\nRecoilは20...",
          "link": "https://zenn.dev/peg/articles/f13b2608f682aa",
          "publishedOn": "2021-09-04T13:05:11.000Z",
          "wordCount": 26,
          "title": "Next.jsでの状態管理",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LIKHyKPI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Next.js%25E3%2581%25A7%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "author": "Ren Shimosawa",
          "description": "ページ内の文字列を検索して、それだけ残す\n\n こんなかんじに検索して、絞り込むものを作ります。\n\n\n前提として、環境は\n・Next.js\n・TypeScript\nとなっています。\n※アイコンとかは違うコンポーネントなので省略して書きます。\n\n      \n        index.tsx\n        import styles from './SearchForm.module.scss'\nimport cn from 'classnames'\n\nexport interface Props = {\n  placeholder?: string\n  className?: st...",
          "link": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "publishedOn": "2021-09-03T13:05:34.000Z",
          "wordCount": 141,
          "title": "ページ内の文字列を検索してフィルタリングするコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--go-MzjS5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Ren%2520Shimosawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E5%2586%2585%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E6%25A4%259C%25E7%25B4%25A2%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ptcmlXRGR5UjRXLUdpUHd4eUZHbGphX1Q0cUVRS3hqcXhNU1NPPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Nuxt.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/nuxtjs/feed",
      "siteUrl": "https://zenn.dev/topics/nuxtjs",
      "articles": [
        {
          "id": "https://zenn.dev/manalink/articles/manalink-lighthouse-score-top-page",
          "author": "マナリンク Tech Blog",
          "description": "オンライン家庭教師マナリンクのトップページのLighthouseスコアを28点前後から55点前後まで上げた話をします。\n\n 背景説明\n\n 対象読者\n\nNuxt.jsでアプリケーション開発の経験がある方\n開発しているサービスのスコアが50点未満の方\n実際に運用されていて50点未満のサービスのLighthouseスコアをどうやって上げるのか興味がある方\nフロントエンドのパフォーマンス改善について網羅的にざっくり知りたい方\n\n\n 環境\n\nNuxt.js 2.15系\nLighthouse 8.3系を利用して測定\nピボット前の時期も含めると、2年半ほど運用されているNuxtアプリケーション\n\n\n ...",
          "link": "https://zenn.dev/manalink/articles/manalink-lighthouse-score-top-page",
          "publishedOn": "2021-09-29T09:13:26.000Z",
          "wordCount": 427,
          "title": "Nuxt製WebサービスのLighthouseスコアを28点→55点に上げた話",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--rum28ck6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%259E%25E3%2583%258A%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%2520Tech%2520Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%25E8%25A3%25BDWeb%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2581%25AELighthouse%25E3%2582%25B9%25E3%2582%25B3%25E3%2582%25A2%25E3%2582%259228%25E7%2582%25B9%25E2%2586%259255%25E7%2582%25B9%25E3%2581%25AB%25E4%25B8%258A%25E3%2581%2592%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODNjZWUyZDUxMy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mh4gf/articles/674cfdcf1e5d89d75d09",
          "author": "Miyagi Hirotaka",
          "description": "起きたこと\nUniversalモードのNuxt.jsアプリをVercelにデプロイし、ページを開くとエラーが出る。\nfunctionのログを見ると以下のログが残っていた。\n\n      \n        \n        [GET] /\n13:10:38:35\n2021-09-25T04:10:38.643Z\tundefined\tERROR\tUncaught Exception \t{\"errorType\":\"Error\",\"errorMessage\":\"Could not load Nuxt configuration. Make sure all dependencies are ...",
          "link": "https://zenn.dev/mh4gf/articles/674cfdcf1e5d89d75d09",
          "publishedOn": "2021-09-27T07:09:57.000Z",
          "wordCount": 161,
          "title": "Vercel上のNuxt.jsで`Could not load Nuxt configuration.` が出た",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Yvt8q8iT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Miyagi%2520Hirotaka%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Vercel%25E4%25B8%258A%25E3%2581%25AENuxt.js%25E3%2581%25A7%2560Could%2520not%2520load%2520Nuxt%2520configuration.%2560%2520%25E3%2581%258C%25E5%2587%25BA%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTU5MDA4ZjMyZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "author": "kata",
          "description": "jestとは\nJestはJavaScriptの単体テストのフレームワークです。\n単体テスト（ユニット(Unit)テストとも言います）とは、ボタンやセレクトボックスなど個々の機能を正しく果たしているかどうかを検証するテストの事を指します。\nこの記事はJavaScriptのテストフレームワークでよく使われているjestをNuxt.jsを使ってとりあえず試してみたものになります。\n\n バージョン\nnuxt.js: 2.15.8\nnode.js:16.6.0\n\n nuxtcliでプロジェクト作成\n\n      \n        \n        ❯ yarn create nuxt-app ...",
          "link": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "publishedOn": "2021-09-20T11:51:49.000Z",
          "wordCount": 638,
          "title": "nuxt.jsでjestを使ってテストを始める",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--KvEMYRrl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:nuxt.js%25E3%2581%25A7jest%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWRjMjM1OTE3Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "author": "Yu Watanabe",
          "description": "Jest とは\nhttps://jestjs.io/ja/\nJestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール\nJest には\n\nテストランナー\nカバレッジ計測\nモック\nアサーション\n\nなど テストの実行を含めた 様々な機能がオールインワンで提供されているため\n今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる\nvueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる\n\n Jest の設定について\n\n実行環境設定\n\nどの環境で テストを動作させ...",
          "link": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "publishedOn": "2021-09-09T06:18:50.000Z",
          "wordCount": 150,
          "title": "[まとめ] Jest について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1mm64zHv--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yu%2520Watanabe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%255B%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%255D%2520Jest%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsNHlOeEpMd3FVcTNfeXMyWTFPNHFHNng0cmlUTWRsVVNBYXNPPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "author": "博ノ助",
          "description": "これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）\n\n これダメ\n\n      \n        sample.vue\n        <script>\n  setTimeout(function() {\n    this.data = false;\n  }, 1000);\n</script>\n\n\n      \n      \n JavaScriptだったら\n\n      \n        sample.v...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "publishedOn": "2021-09-08T12:56:33.000Z",
          "wordCount": 46,
          "title": "無名関数内でNuxt.jsのthisを利用したい。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ENKkN4M0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%2584%25A1%25E5%2590%258D%25E9%2596%25A2%25E6%2595%25B0%25E5%2586%2585%25E3%2581%25A7Nuxt.js%25E3%2581%25AEthis%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "author": "博ノ助",
          "description": "触れる回数は多いけどいまだに覚えられないのでメモ\nこれよりいい方法いっぱいあると思います\n\n コマンド\n\n      \n        コマンドライン\n        $ npm install --save-dev jquery @types/jquery\n\n\n      \n      \n nuxt.config.js\n\n      \n        nuxt.config.js\n        + const webpack = require('webpack')\n\nexport default {\n// ...省略...\n// Build Configuration: https...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "publishedOn": "2021-09-08T12:44:09.000Z",
          "wordCount": 75,
          "title": "Nuxt.js+TypeScriptにjQueryを導入するルーティン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eRmbKyyh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt.js%252BTypeScript%25E3%2581%25ABjQuery%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「TypeScript」のフィード",
      "feedUrl": "https://zenn.dev/topics/typescript/feed",
      "siteUrl": "https://zenn.dev/topics/typescript",
      "articles": [
        {
          "id": "https://zenn.dev/kenara/articles/645c955a67ac08",
          "author": "KenAra",
          "description": "記事を書いているときのバージョン7.7.0（@types/react-tableは7.7.5）にて、\nソート機能がなかなか実装できなかったので、できるまでを書いていきます。\n\n 普通に実装した際の問題点\nまず、公式のガイド通りに実装してみると、\nソート機能を有効化させるプロパティは存在しないエラーが出てしまいます。\n\n      \n        \n        Property 'getSortByToggleProps' does not exist on type 'HeaderGroup<CategoryTable | TagTable>'.ts(2339)\n\n\n ...",
          "link": "https://zenn.dev/kenara/articles/645c955a67ac08",
          "publishedOn": "2021-10-01T13:50:29.000Z",
          "wordCount": 379,
          "title": "react-tableでソート機能を実装（TypeScript）",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--5nFC8ZDj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:KenAra%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:react-table%25E3%2581%25A7%25E3%2582%25BD%25E3%2583%25BC%25E3%2583%2588%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25EF%25BC%2588TypeScript%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fM2NjNWVkZjFlNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/af45822a7cd01c",
          "author": "hanetsuki",
          "description": "先日開催されたジャムジャムJamstackで登壇させていただいた時の記事になります。\nhttps://speakerdeck.com/hanetsuki/next-dot-jstezheng-eru-tesaintorositukufalsefen-li\n簡易構成のリポジトリを作成しましたので、参考になればと思います。\nhttps://github.com/tsuki-lab/split-view-and-hook\n\n 経緯\n\nメディアサイトを作成することになった\n\nデザイナーコーダー ×1\nフロントエンドエンジニア ×1（ワイ）\n\n\nNext.jsとmicroCMSでSSGしてverc...",
          "link": "https://zenn.dev/rabbit/articles/af45822a7cd01c",
          "publishedOn": "2021-10-01T08:29:38.000Z",
          "wordCount": 319,
          "title": "Next.jsで整える。デザインとロジックの分離",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--d-zKEf48--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%25E3%2580%2582%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25A8%25E3%2583%25AD%25E3%2582%25B8%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E5%2588%2586%25E9%259B%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yukiyada/articles/053722ddadd18a",
          "author": "yukiyada",
          "description": "1.はじめに\n作る経験はコピーできない。技術書を読むだけではわからなかったことが、「実際に手を動かし、作る」という作業を経て、一本の線がつながるように理解できるようになった。そんな経験は、エンジニアであれば誰もが一度はあると思います。\nタイトルにもあるとおり、今回取り組んだことはTypescriptによるニューラルネットのスクラッチ実装( データセットはMNIST )です。最近、機械学習の理論的背景をより深く理解したいなぁ、と思っていたので、勉強がてらやってみることにしました。以下は実装したリポジトリになります。\nhttps://github.com/YadaYuki/neural_...",
          "link": "https://zenn.dev/yukiyada/articles/053722ddadd18a",
          "publishedOn": "2021-10-01T06:50:09.000Z",
          "wordCount": 874,
          "title": "Typescriptでゼロから作るニューラルネット",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kuw1cAcm--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yukiyada%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%25E3%2581%25A7%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E4%25BD%259C%25E3%2582%258B%25E3%2583%258B%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25A9%25E3%2583%25AB%25E3%2583%258D%25E3%2583%2583%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsveS5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/wok/articles/0020_bundle-webworker",
          "author": "wok",
          "description": "はじめに\nこれまで様々な機械学習モデルをWebWorkderで動かすnpmパッケージを作成してきたのですが、どうにもTypeScriptで作成したWebWorkerを単一のファイルにバンドルする方法がわかりませんでした。なので、npm install後にWebWorkerのスクリプトをpublicフォルダにコピーしてもらうようなインストール方法をReadmeに記載していました。\nたとえば、次のような感じ。\n\n      \n        \n        $ npx create-react-app demo  --template typescript\n$ cd demo/\n$ n...",
          "link": "https://zenn.dev/wok/articles/0020_bundle-webworker",
          "publishedOn": "2021-10-01T02:11:32.000Z",
          "wordCount": 223,
          "title": "WebWorkerをnpmパッケージにバンドルする方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zO6RuqVT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:wok%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:WebWorker%25E3%2582%2592npm%25E3%2583%2591%25E3%2583%2583%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B8%25E3%2581%25AB%25E3%2583%2590%25E3%2583%25B3%25E3%2583%2589%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hZemxmeFk4WFJDTHJzM1VvRWI2YmI0cEVhem1kTDg5ejFXQnFZdVE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hamchance/articles/01d76ed7fa0754",
          "author": "ham",
          "description": "フロントエンド開発をしている時にpxをremに変換することが多かったので変換表を作ってみました。\nググったらpxを1つずつ計算するサイトは見つかったのですが、つど計算するのは面倒なのでfont-sizeを入力したら1〜1500pxに対応するpxとremの対応表を表示するようにしました。\nまた、個人開発でインフラコストがかかるとツライのでFirebaseを使ってインフラコストゼロで構築しました。\nhttps://table-of-px-to-rem.web.app\n\nfont-size(px)を入力すると、1pxから1,500pxに対応するremを表示します。\n値をクリックすると、クリップ...",
          "link": "https://zenn.dev/hamchance/articles/01d76ed7fa0754",
          "publishedOn": "2021-09-30T13:24:35.000Z",
          "wordCount": 179,
          "title": "Reactの実践練習を兼ねてPX→REM変換表のWEBサイトを作ってみた。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--C1j9_Qof--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ham%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%25AE%25E5%25AE%259F%25E8%25B7%25B5%25E7%25B7%25B4%25E7%25BF%2592%25E3%2582%2592%25E5%2585%25BC%25E3%2581%25AD%25E3%2581%25A6PX%25E2%2586%2592REM%25E5%25A4%2589%25E6%258F%259B%25E8%25A1%25A8%25E3%2581%25AEWEB%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k5aWR4d3BOWVBZU2NJdUR6Q19GRG0wTlVGaGZYd1hvZkdPSnRtM0hrPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/umezo/articles/48c20a1d77a6d7",
          "author": "umezo",
          "description": "ユニオンから type: aの型だけ抜き出したい。\nExtractでできます。\n\n      \n        \n        type Payload = {\n    type: 'a',\n    data: number;\n} | {\n    type: 'b',\n    data: string;\n};\n\ntype PayloadA = Extract<Payload, {type: 'a'}>; // <- ここ\n\n\n      \n      コード部分では、こう。\n\n      \n        \n        // no error\nconst pa...",
          "link": "https://zenn.dev/umezo/articles/48c20a1d77a6d7",
          "publishedOn": "2021-09-30T09:40:12.000Z",
          "wordCount": 89,
          "title": "TypescriptのExtractでオブジェクトユニオンから1個とりだす",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BF8wUowW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:umezo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%25E3%2581%25AEExtract%25E3%2581%25A7%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25A6%25E3%2583%258B%25E3%2582%25AA%25E3%2583%25B3%25E3%2581%258B%25E3%2582%25891%25E5%2580%258B%25E3%2581%25A8%25E3%2582%258A%25E3%2581%25A0%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hmRUZCbmZtcERXLXlGRUtmOUR0MUF0MDZJR3lNdlJWY0pGYnV4Q0E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/articles/3aa67a5981f4c0",
          "author": "k_touge",
          "description": "はじめに\n2021 年 9 月、MUI (旧 material-ui) v5 がリリースされました。\nこれを使って App Shell を作ってみます。\nhttps://mui.com/\nMaterial UI が MUI へと変更された経緯や変更点などについては、よしさんによる記事が詳しいです。\nhttps://zenn.dev/h_yoshikawa0724/articles/2021-09-26-material-ui-v5\n\n App Shell is 何？\n↓ こんなやつのことです。\n\nhttps://developers.google.com/web/fundamenta...",
          "link": "https://zenn.dev/sprout2000/articles/3aa67a5981f4c0",
          "publishedOn": "2021-09-30T07:20:11.000Z",
          "wordCount": 1300,
          "title": "MUI (Material UI) v5 で App Shell をつくる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pMuJCtLg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k_touge%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:MUI%2520%2528Material%2520UI%2529%2520v5%2520%25E3%2581%25A7%2520App%2520Shell%2520%25E3%2582%2592%25E3%2581%25A4%25E3%2581%258F%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTkyNDAwNGE0Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/b4a35f89e2c843",
          "author": "nekoniki",
          "description": "概要\n今回はReact Nativeで、App StoreやGoogle Play Storeなどのアプリストアに遷移する方法について紹介します。\nアプリストアに遷移する目的としては、ユーザに対してアプリのレビューを促したい場合や、強制アップデートを行わせたい場合などが挙げられます。\n\n 前提：そもそもアプリストアのURLはどうなっているか\niOSないしAndoridを使う場合、ホーム画面からApp StoreやGoogle Play Storeのアプリケーションを立ち上げて、その中でキーワードやジャンルなどからアプリを検索するため、あまりURLは意識されません。\n今回react-n...",
          "link": "https://zenn.dev/nekoniki/articles/b4a35f89e2c843",
          "publishedOn": "2021-09-30T04:30:05.000Z",
          "wordCount": 115,
          "title": "【RN】アプリストアを開く",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--4OCob3XI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E3%2580%2590RN%25E3%2580%2591%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25A2%25E3%2582%2592%25E9%2596%258B%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yoshiko/articles/0994f518015c04",
          "author": "よしこ",
          "description": "こんにちは、よしこです。\nこの記事は 2020年に立ち上げたWebフロントエンド構成の振り返り の「linter/formatter」項の詳細記事です。単体でも読めますが、よければ元記事もあわせてどうぞ！\n\nこの記事では、今わたしが 株式会社ナレッジワーク というスタートアップで開発・運用しているプロジェクトにおいて便利だったLint/Format関連の設定についてご紹介していきます。\n使っているのは、TSのlintのためにESLint, CSSのlintのためにStylelint, 主なファイルのformatのためにPrettierです。\n\n ESLint\npluginsとextend...",
          "link": "https://zenn.dev/yoshiko/articles/0994f518015c04",
          "publishedOn": "2021-09-30T01:00:10.000Z",
          "wordCount": 363,
          "title": "React+TSプロジェクトで便利だったLint/Format設定紹介",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--aE2ioMd5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2588%25E3%2581%2597%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%252BTS%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259FLint%252FFormat%25E8%25A8%25AD%25E5%25AE%259A%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kwU3JDUjBpVERyUHpqWnF4YjJLZ0tueHgtamE0N253SEE0NGE4RDhrPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hk_206/articles/c0e1925a92d8e9",
          "author": "hokuto",
          "description": "こんにちは、Another works フロントエンドエンジニアのみやぞんです。\nつい最近、Reactのアップデートを行ったので React v17 での変更で学んだことについて紹介したいと思います。\n\n アップデート内容\n\n新機能 “なし”\n段階的なアップグレードが可能になった\n\n公式：https://ja.reactjs.org/blog/2020/10/20/react-v17.html\n\n 破壊的変更があった部分\nアップデート内容にもあった「段階的なアップグレード」を実現するための変更が「Event Delegationの変更」です。React v17 における最も大きな変更と言...",
          "link": "https://zenn.dev/hk_206/articles/c0e1925a92d8e9",
          "publishedOn": "2021-09-30T00:29:17.000Z",
          "wordCount": 111,
          "title": "React v17から学んだEvent Delegationについて",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--4LbPf3Jj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hokuto%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520v17%25E3%2581%258B%25E3%2582%2589%25E5%25AD%25A6%25E3%2582%2593%25E3%2581%25A0Event%2520Delegation%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzJmZGU0YTBhOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nszknao/articles/d94060914046e7f40e07",
          "author": "Nishizaka Naoto",
          "description": "こんにちは、にしざかです。\n普段はWebのインフラからフロントまで薄く広く開発しています。デザインはできないです。\n最近のNFTプロジェクトの盛り上がりを感じる中で、自分もクリエイターとして作品作りをしたいな、でも何のメディアで作ろうかなと漠然と考えていました。いわゆる2次元のキャンバスに描かれるようなアート作品を0から作ることは、自分のスキルとマッチしていないのが明らかなので何から手をつけようか調べていました。\nそんな時にGenerative Artという分野があることを知りました。ソフトウェアのアルゴリズムを使って、人工物とも自然物とも言えない有機的な作品を作ることができます。これな...",
          "link": "https://zenn.dev/nszknao/articles/d94060914046e7f40e07",
          "publishedOn": "2021-09-29T12:16:03.000Z",
          "wordCount": 283,
          "title": "p5.jsのExamplesをReactで写経してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--L4dzUeAA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Nishizaka%2520Naoto%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:p5.js%25E3%2581%25AEExamples%25E3%2582%2592React%25E3%2581%25A7%25E5%2586%2599%25E7%25B5%258C%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzZmYzEzOTRjMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hugtech/articles/28f7245723a3b8",
          "author": "hugtech",
          "description": "expect.extend({\n  toBeXDaysAfter (received, x, epochType = 'milliseconds') {\n    const recv = (epochType === 'seconds') ? new Date(received * 1000).valueOf() : new Date(received).valueOf()\n    const today = Date.now()\n    const dur = recv - today\n    const durDays = Math....",
          "link": "https://zenn.dev/hugtech/articles/28f7245723a3b8",
          "publishedOn": "2021-09-29T11:47:17.000Z",
          "wordCount": 124,
          "title": "[jest] check x days later",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--O7D1qfiY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hugtech%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255Bjest%255D%2520check%2520x%2520days%2520later%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzc3MTRmYTM3YS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/38e9f804474668",
          "author": "azukiazusa",
          "description": "この記事の内容は RFC を元に作成されており、将来によって機能が変更になる可能性があります。\n\n\n はじめに\n現在リリースされている Vuex の最新のバージョンは Vuex 4 です。\nこれは Vuex 3 と互換性のあるバージョンで Vue 3 で使用するためのバージョンであり、 Vuex 3 と同じ API となっています。\nそのために現状 Vuex の問題点としてよくあげられている TypeScript サポートの問題点を解決できていません。\nVuex 5 は Vue 3 において Composition API による Reactivity API が登場したことにより R...",
          "link": "https://zenn.dev/azukiazusa/articles/38e9f804474668",
          "publishedOn": "2021-09-29T10:18:50.000Z",
          "wordCount": 1157,
          "title": "Vuex 5でどのように変わるのか？",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1hV6IrGy--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vuex%25205%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E5%25A4%2589%25E3%2582%258F%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ratmie/articles/855250b71e7b40",
          "author": "ratmie",
          "description": "TL;DR\nBoltではApp.stop()でサーバーを閉じることができる。\n\n やりたいこと\nSlackアプリのnodeフレームワークであるBoltにて、サーバーを終了処理を実装する。\n\n もう少し詳しく\nBoltがexpressReceiverを用いているとき、App.stop()はexpress.close()をラップしている。\nexpressはhttp(s).serverを持っているので、最終的にnet.server.close()が呼ばれ、リクエストの待受を停止する。\n\n 参考リンク\nhttps://nodejs.org/api/net.html#net_server_cl...",
          "link": "https://zenn.dev/ratmie/articles/855250b71e7b40",
          "publishedOn": "2021-09-29T08:31:37.000Z",
          "wordCount": 15,
          "title": "Boltでサーバーを閉じる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sQKU9iJm--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ratmie%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Bolt%25E3%2581%25A7%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2582%2592%25E9%2596%2589%25E3%2581%2598%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvci5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/randd/articles/0cf27dc77c7b6b",
          "author": "株式会社R&D",
          "description": "伊藤です、いろいろな言語に触っていると分からなくなりますが、定義の形くらいは覚えたいものです。\n\n アロー関数\n\n      \n        \n        //アロー関数\nexport const logMessage = (message: string): void => {\n    console.log(message)\n}\n\n\n      \n      \n 名前付き関数\n\n      \n        \n        //名前付き関数\nexport function logMessage2(message: string): void {\n    console....",
          "link": "https://zenn.dev/randd/articles/0cf27dc77c7b6b",
          "publishedOn": "2021-09-28T06:01:35.000Z",
          "wordCount": 118,
          "title": "TypeScriptの関数定義について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--DiltNCQ7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E6%25A0%25AA%25E5%25BC%258F%25E4%25BC%259A%25E7%25A4%25BER%2526D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AE%25E9%2596%25A2%25E6%2595%25B0%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E3%2580%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMGZmZTZiYzM4NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aa/articles/101b9ccec20984",
          "author": "Kuuubo",
          "description": "コード\n以下のコードで求めます。\n\n      \n        \n        // gcd(Gratest common devisior)\nfunction gcd(a: number, b: number): number {\n  const q = Math.floor(a / b);\n  const r = a % b;\n  if (r == 0) {\n    return b;\n  } else {\n    return gcd(b, r);\n  }\n}\n\n\n      \n      \n 結果\n\n      \n        \n        console.log(...",
          "link": "https://zenn.dev/aa/articles/101b9ccec20984",
          "publishedOn": "2021-09-28T03:38:02.000Z",
          "wordCount": 57,
          "title": "Typescriptでユークリッド互除法で最大公約数を求める関数(Euclidean Algorithm By Typescript)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vEfJIrkF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kuuubo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:Typescript%25E3%2581%25A7%25E3%2583%25A6%25E3%2583%25BC%25E3%2582%25AF%25E3%2583%25AA%25E3%2583%2583%25E3%2583%2589%25E4%25BA%2592%25E9%2599%25A4%25E6%25B3%2595%25E3%2581%25A7%25E6%259C%2580%25E5%25A4%25A7%25E5%2585%25AC%25E7%25B4%2584%25E6%2595%25B0%25E3%2582%2592%25E6%25B1%2582%25E3%2582%2581%25E3%2582%258B%25E9%2596%25A2%25E6%2595%25B0%2528Euclidean%2520Algorithm%2520By%2520Typescript%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d5VWU1SEJPTnlqMU9VN0tJMVVVYnk0T1JaNnUyVU9EMk5kTGx3cUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/magicmoment/articles/react-ga4-202109",
          "author": "Magic Moment Tech Blog",
          "description": "Agenda\n\nはじめに\nGoogle Analytics の導入\n\nグローバルサイトタグの設置\nページビューイベントの送信\nUser 属性の送信\nデバッグ方法\n\n\nまとめ\n\n\n はじめに\nはじめまして。Magic Moment でエンジニアをしている栗原と申します。\nMagic Moment では Magic Moment Playbook をリリースし半年が経ち、多くのお客様にお使い頂くようになりました。\nお客様が増えたことで UI/UX に関してご意見を頂くようになりましたが、実際にどのように使われているかがわからず、正しく改善できない状態でした。\nそこで、データに基づく UI...",
          "link": "https://zenn.dev/magicmoment/articles/react-ga4-202109",
          "publishedOn": "2021-09-28T00:15:01.000Z",
          "wordCount": 315,
          "title": "React/TypeScript のプロダクトに GA4 を導入しようとしたら思ったより大変だった話",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--baPP0o_J--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Magic%2520Moment%2520Te...%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:React%252FTypeScript%2520%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2580%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AB%2520GA4%2520%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2582%2589%25E6%2580%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2588%25E3%2582%258A%25E5%25A4%25A7%25E5%25A4%2589%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25E8%25A9%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDhiOTA2NDRlZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuitosato/articles/7bd35f601c1e13",
          "author": "Yuito Sato",
          "description": "はじめに\nTypeScriptでもパイプライン演算子が使いたい！！！\nはい、ということでネタ記事を書きました。\nTypeScriptではよくクラスではなくオブジェクトを使う人がいると思います。\n自分もオブジェクト派です。\nスプレッド演算子が便利だったり、フロントエンド特有の状態管理ストアへの書き込みが楽だったりするからです。\nしかし当たり前ですがオブジェクトだとふるまいを保持できないため外出しの関数を脇に置く形になると思います。\n\n      \n        user.ts\n        type User = {\n  userId: number;\n  userName: st...",
          "link": "https://zenn.dev/yuitosato/articles/7bd35f601c1e13",
          "publishedOn": "2021-09-27T14:17:49.000Z",
          "wordCount": 204,
          "title": "TypeScriptでパイプを作ってみる【※ネタです】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--poFsHkpq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuito%2520Sato%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E3%2583%2591%25E3%2582%25A4%25E3%2583%2597%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25E3%2580%2590%25E2%2580%25BB%25E3%2583%258D%25E3%2582%25BF%25E3%2581%25A7%25E3%2581%2599%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDk1YjBmYTViNS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/engstt/articles/bcdd5c4c3f5b29",
          "author": "issei",
          "description": "導入\nadmin dashboardのtemplateを探していたところたまたまプロジェクトをコピーするタイプではなくライブラリ形式で提供している react-admin を見つけました。\nこれがとてつもなく作業効率が良かったため使い方を備忘録として記録します。\nまた、知っている人には蛇足な情報も多分に含みますため、不要な方はお手数ですが適宜読み飛ばしていただければと思います。\n\n 概要\nUIコンポーネントなどをライブラリの形式で提供している管理画面作成用OSS。\n画面に表示するデータはAPI（Server side）から取得することが前提の設計になっており、外部通信専用プラグインも...",
          "link": "https://zenn.dev/engstt/articles/bcdd5c4c3f5b29",
          "publishedOn": "2021-09-27T04:03:26.000Z",
          "wordCount": 471,
          "title": "react-adminを使って5分で作るハイカラDashboard",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EIOqXwPH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:issei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:react-admin%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A65%25E5%2588%2586%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258B%25E3%2583%258F%25E3%2582%25A4%25E3%2582%25AB%25E3%2583%25A9Dashboard%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2haYWdvMnZmLTJTTGVUc3k3bXZWclNHdm1zSXJJLVRBVFVQV2FHTnc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yoshiko/articles/32371c83e68cbe",
          "author": "よしこ",
          "description": "こんにちは、よしこです。\n株式会社ナレッジワーク というスタートアップで、2020年4月の創業時から一人目のフロントエンドエンジニアをしています。\n初期に考えて組み上げたスタックで1年半ほど開発・運用してみて、なかなか快適に日々開発ができているので\n\n新規開発のプロダクト立ち上げ時にどのようにフロントエンドを構築したのか？\n立ち上げから1年以上開発・運用を続けてきた今、それらの選択はどうだったのか？\n\nを記事にして振り返り、公開したいなと思いました。\n（プロダクトの内容はステルスで進めていてあまり対外的な発信ができないので、かわりに技術的なところはどんどんオープンにしていきたいなという気...",
          "link": "https://zenn.dev/yoshiko/articles/32371c83e68cbe",
          "publishedOn": "2021-09-27T03:30:10.000Z",
          "wordCount": 262,
          "title": "2020年に立ち上げたWebフロントエンド構成の振り返り",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bQFeA8RV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2588%25E3%2581%2597%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:2020%25E5%25B9%25B4%25E3%2581%25AB%25E7%25AB%258B%25E3%2581%25A1%25E4%25B8%258A%25E3%2581%2592%25E3%2581%259FWeb%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AE%25E6%258C%25AF%25E3%2582%258A%25E8%25BF%2594%25E3%2582%258A%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2kwU3JDUjBpVERyUHpqWnF4YjJLZ0tueHgtamE0N253SEE0NGE4RDhrPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/c871421864af4b",
          "author": "dozo",
          "description": "nightlyは当たり前\n関連記事:\n\nrollup.jsに爆速esbuildを組み込む方法\nRustのimage::load_from_memory遅すぎ問題\n\nRustが征くシリーズ過去記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\nSvelteでWebAssemblyでTypeScriptでRollupで...",
          "link": "https://zenn.dev/dozo/articles/c871421864af4b",
          "publishedOn": "2021-09-27T00:01:49.000Z",
          "wordCount": 181,
          "title": "Webassemblyマルチスレッド用crateを調べる: Rustが征く(7)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--H0llP6Pa--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Webassembly%25E3%2583%259E%25E3%2583%25AB%25E3%2583%2581%25E3%2582%25B9%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E7%2594%25A8crate%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2582%258B%253A%2520Rust%25E3%2581%258C%25E5%25BE%2581%25E3%2581%258F%25287%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/1fad65eb8beb1c",
          "author": "nekoniki",
          "description": "はじめに\n今回はReact Nativeアプリにジオコーディング機能を盛り込む方法について紹介します。\nジオコーディングについて簡単に説明しておくと、「静岡駅」といった文字列から位置情報(緯度、経度)への変換を指します。\n今回はreact-native-geocodingというライブラリを使って行います。\nhttps://github.com/marlove/react-native-geocoding\n注意点ですが、内部的にはGoogle Cloud Platform(以下長いのでGCP)を用いるため、GCP側でのAPI KEYの発行や課金登録(ジオコーディングは従量課金のため、要...",
          "link": "https://zenn.dev/nekoniki/articles/1fad65eb8beb1c",
          "publishedOn": "2021-09-26T23:54:35.000Z",
          "wordCount": 149,
          "title": "【RN】react-native-geocodingでジオコーディングを実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9TZDxprP--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590RN%25E3%2580%2591react-native-geocoding%25E3%2581%25A7%25E3%2582%25B8%25E3%2582%25AA%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/chida/articles/bba2b5346414ed",
          "author": "chida",
          "description": "今回はNestJSを使って、TODOリストを題材にCRUDのロジックを実装します。\nOSはMacを使います。NodeとYarnが既にインストールされていることを前提に進めます。今回の記事で扱うツールなどのバージョンは以下の通りです。\n\n\n\nNode\nyarn\nNestJS\nMySQL\n\n\n\n\n16.4.2\n1.22.11\n16.4.2\n8.0.26\n\n\n\n\n プロジェクトの作成\nnestコマンドを実行できるように@nestjs/cliをインストールします。\nそしてnest newコマンドを実行し、nest-todolistプロジェクトを作成します。作成途中で「どのパッケージマネージャーを...",
          "link": "https://zenn.dev/chida/articles/bba2b5346414ed",
          "publishedOn": "2021-09-26T23:54:14.000Z",
          "wordCount": 1307,
          "title": "【NestJS】TODOリストでCRUDの処理を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W_28bpPX--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:chida%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590NestJS%25E3%2580%2591TODO%25E3%2583%25AA%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25A7CRUD%25E3%2581%25AE%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjVjNjA3YmIyOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/katoaki/articles/2f23ec42de7f6b",
          "author": "katoaki",
          "description": "はじめに\nTSのconstructorを書いていて、一部awaitで値をセットしようとしたらできませんでした。\nということで、初期化用の非同期メソッドを用意して、その中でawaitを使う処理を行うように変更して返すことにしました。\nこれ、よくやるのですが、たまに忘れるので備忘録として記事にしておこうと思います。\n\n 結論\n\nconstructorにはasyncに利用できない\n\n\n'async' modifier cannot appear on a constructor declaration.(1089) が発生する\n\n\n初期化時に非同期処理（外部APIをコールした結果を取得する...",
          "link": "https://zenn.dev/katoaki/articles/2f23ec42de7f6b",
          "publishedOn": "2021-09-26T23:12:20.000Z",
          "wordCount": 267,
          "title": "TypeScriptのconstructorで非同期処理をしたくなったら",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--x12aiyiH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:katoaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AEconstructor%25E3%2581%25A7%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2581%2597%25E3%2581%259F%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTU0ZTYyMTc2OC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hitoshiasano/articles/f27ce8788d2452",
          "author": "ひとし",
          "description": "概要\n副作用フックの使い方を下記の公式ドキュメントの例を用いて説明します。\n下記の例はカウンターを表示します。ボタンをクリックすると、カウンターの値が増えます。また、クリック回数を含んだカスタムのメッセージをドキュメントのタイトルに設定しています。\nhttps://ja.reactjs.org/docs/hooks-effect.html\nuseEffectとは関数を渡すことでレンダリング時に渡した関数を処理することができます。\nReact コンポーネントにおける副作用フックには 2 種類あります。クリーンアップコードを必要としない副作用と、必要とする副作用です。これらの違いについて...",
          "link": "https://zenn.dev/hitoshiasano/articles/f27ce8788d2452",
          "publishedOn": "2021-09-26T16:49:21.000Z",
          "wordCount": 196,
          "title": "【useEffect】副作用フックの使い方",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Q6TafuDU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B2%25E3%2581%25A8%25E3%2581%2597%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590useEffect%25E3%2580%2591%25E5%2589%25AF%25E4%25BD%259C%25E7%2594%25A8%25E3%2583%2595%25E3%2583%2583%25E3%2582%25AF%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjk4OGQ4NDhiOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/estra/articles/obsidian-plugin-dev_1",
          "author": "PADAone🐕",
          "description": "はじめに\n久しぶりのZennの記事ですが、Obsidian October 2021のイベント開催を記念してObsidianでのプラグインの作り方を紹介したいと思います。偶然なのですが、ちょうど自分も初のプラグインを作成しコミュニティプラグインとしてリリースしたので、自分自身のアウトプットも兼ねてプラグイン開発についてゼロから説明する記事にしたいと思います。\n今回は、初心者の方がプラグインを作ってみたいと思った時に役立つ開発のやり方と公開までのロードマップを初歩から解説します。長い話になるので複数回の記事にする予定で、これが第一回目となります。\n\nObsidian October 2...",
          "link": "https://zenn.dev/estra/articles/obsidian-plugin-dev_1",
          "publishedOn": "2021-09-26T14:59:19.000Z",
          "wordCount": 301,
          "title": "ゼロから始めるObsidianプラグイン開発-01",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eUJ2eUNq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:PADAone%2520%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25BC%25E3%2583%25AD%25E3%2581%258B%25E3%2582%2589%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258BObsidian%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E9%2596%258B%25E7%2599%25BA-01%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOWRhMGFkMTFhYS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mone9610/articles/f4548546fb8e81",
          "author": "mone",
          "description": "react_mui_comment_list_mock\n\n はじめに\n\n この記事について\nReactとMaterial-UIを用いて、Youtubeのコメント欄ライクなUIを作る方法について解説します。\n\n 完成イメージ\n\n\n 前提\n\n 使用するデータについて\n実際の開発では、「投稿」と「ユーザー」のオブジェクトを別々のテーブルとして、DB上で管理しているケースが多いかと思います。\n今回に関しては、APIサーバーからデータを取得するケースを想定します。\n「投稿」を意味するデータである\"Post\"というjson配列、\n「ユーザー」を意味するデータの\"User\"というjson配列を用い...",
          "link": "https://zenn.dev/mone9610/articles/f4548546fb8e81",
          "publishedOn": "2021-09-26T06:28:50.000Z",
          "wordCount": 488,
          "title": "React * TypeScript * Material-UIで、 Youtubeのコメント欄ライクなUIを作る方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--u4joWanJ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:mone%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:React%2520%252A%2520TypeScript%2520%252A%2520Material-UI%25E3%2581%25A7%25E3%2580%2581%2520Youtube%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%25E6%25AC%2584%25E3%2583%25A9%25E3%2582%25A4%25E3%2582%25AF%25E3%2581%25AAUI%25E3%2582%2592%25E4%25BD%259C%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTAxYWM1OTJlNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/h_yoshikawa0724/articles/2021-09-26-material-ui-v5",
          "author": "よし",
          "description": "どうもよしです。久しぶりの投稿になります。\n元々、Material Design をベースとした UI コンポーネントライブラリである、Material UI の v5 が遂にリリースされました！\nv4 からどう変わったのか自分でも試すなど、さらっと見てみたので、ここにまとめてみました。\n\nこの記事は、個人ブログへ投稿した記事の転載です。\n\n\n Material UI とは？\n元々、Google の Material Design をベースに開発された、UI コンポーネントライブラリです。\nMaterial UI の概要や v4 の機能に関しては、以前に記事を書いていますので、よろしけれ...",
          "link": "https://zenn.dev/h_yoshikawa0724/articles/2021-09-26-material-ui-v5",
          "publishedOn": "2021-09-26T03:58:52.000Z",
          "wordCount": 2917,
          "title": "こんにちはMUI！ 新しくなったMaterial UI v5",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--3okbZ3F---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2588%25E3%2581%2597%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2581%2593%25E3%2582%2593%25E3%2581%25AB%25E3%2581%25A1%25E3%2581%25AFMUI%25EF%25BC%2581%2520%25E6%2596%25B0%25E3%2581%2597%25E3%2581%258F%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259FMaterial%2520UI%2520v5%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3RDVWRUhGaUh0Nmw1SEhtQ3FfVkFGSnRKS21NMmtVd2VicFp4PXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/t723/articles/a76c583084f383",
          "author": "T_723",
          "description": "octokit/restを利用してリポジトリのコンテンツを参照\n\n Typescript用のGithub APIを利用するライブラリ\noctokit/rest\n\n インストール\nnpm i @octokit/rest\n\n 使い方\n\n      \n        \n        import { Octokit } from \"@octokit/rest\";\n\n\n      \n      ドキュメント\n\n 認証\nGithub APIを利用しているとアクセス制限にかかるので認証(GITHUB_TOKEN)を取得し宣言しておきます。\n私の場合は、リポジトリのコンテンツにアクセスしたかった...",
          "link": "https://zenn.dev/t723/articles/a76c583084f383",
          "publishedOn": "2021-09-26T00:07:00.000Z",
          "wordCount": 72,
          "title": "Next.jsでGithub APIを使用する方法(octokit/rest)Typescript",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--jQSbtbGV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:T_723%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%25E3%2581%25A7Github%2520API%25E3%2582%2592%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2528octokit%252Frest%2529Typescript%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKd1NNNk9sQ2lfRXh6M2Q1MUh0aHB1ckVsaW9UTnlXWnJQZEltR3g9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/t723/articles/f63785a12e3280",
          "author": "T_723",
          "description": "Next.jsのバージョン\n執筆時点(2021/9/25)でのバージョン11.1.2の最新を使っています。\n\n トレイリングスラッシュ設定とUrlの関係について\nnext.config.jsに下記のように記載がある場合はトレイリングスラッシュが設定されています。\n\n      \n        \n        module.exports = {\n  trailingSlash: true,\n}\n\n\n      \n      この設定をしていると/posts/hello.html -> /posts/hello/index.htmlでアクセスできるようになります。\n404ペー...",
          "link": "https://zenn.dev/t723/articles/f63785a12e3280",
          "publishedOn": "2021-09-25T12:29:15.000Z",
          "wordCount": 98,
          "title": "Next.jsのトレイリングスラッシュ設定により404ページをNetlifyで表示できない場合の対処方法(Typescript)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--3lrr1VxR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:T_723%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:Next.js%25E3%2581%25AE%25E3%2583%2588%25E3%2583%25AC%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25B9%25E3%2583%25A9%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%25AB%25E3%2582%2588%25E3%2582%258A404%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E3%2582%2592Netlify%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25AE%25E5%25AF%25BE%25E5%2587%25A6%25E6%2596%25B9%25E6%25B3%2595%2528Typescript%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKd1NNNk9sQ2lfRXh6M2Q1MUh0aHB1ckVsaW9UTnlXWnJQZEltR3g9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/books/76a279bb90c3f3",
          "author": "k_touge",
          "description": "React と TypeScript でつくるプログレッシブ・ウェブアプリ入門",
          "link": "https://zenn.dev/sprout2000/books/76a279bb90c3f3",
          "publishedOn": "2021-09-25T07:51:49.000Z",
          "wordCount": 85,
          "title": "React Hooks と TypeScript でつくる Todo PWA アプリ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--qnh55JQJ--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci84MzY4Yzc5MjA5LmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/nisitin/articles/42d8afd7203282",
          "author": "ニシティン",
          "description": "はじめに\nRecoil歴の短い若造なので間違っている点・こうしたほうがパフォーマンスにも良さそう！などがあればコメントいただけると助かります。\nコメントの数だけスクワットします。冗談です。\n\n Recoilの環境構築と主要機能\n\n      \n        \n        yarn add recoil\n\n\n      \n      \n インストールできたけどRecoilって何者なの？？\nRecoilは2020年5月にFacebookによって開発された状態管理ライブラリです。RecoilはReduxと同様にState管理ができるライブラリでもあります。\n状態管理とは何か？？という...",
          "link": "https://zenn.dev/nisitin/articles/42d8afd7203282",
          "publishedOn": "2021-09-25T06:03:50.000Z",
          "wordCount": 64,
          "title": "Recoil入門① 主要機能の説明",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--DRhhJF_n--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%258B%25E3%2582%25B7%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Recoil%25E5%2585%25A5%25E9%2596%2580%25E2%2591%25A0%2520%25E4%25B8%25BB%25E8%25A6%2581%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%25AE%25E8%25AA%25AC%25E6%2598%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDZhYWQ1MWFjNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tsugitta/articles/concurrency-lock",
          "author": "tsugitta",
          "description": "Promise.all で同時に実行される数を制限したい\n\n\nPromise Pool のようなライブラリがある\n\n\nそれに加えて、100 並行で動かすとして突然 100 個の処理を実行し始めるのでなく、少しずつ 100 に向けて増やしていきたい\n\n例えば最小実行間隔を設けるようにしたい\n\n\n\n\n 実装\n\n      \n        \n        export class ConcurrencyLock {\n  private readonly concurrency: number;\n  private readonly interval: number;\n\n  privat...",
          "link": "https://zenn.dev/tsugitta/articles/concurrency-lock",
          "publishedOn": "2021-09-25T05:36:58.000Z",
          "wordCount": 321,
          "title": "Promise.all で同時に実行される数を制限したい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_e9AYeJ0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:tsugitta%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Promise.all%2520%25E3%2581%25A7%25E5%2590%258C%25E6%2599%2582%25E3%2581%25AB%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E6%2595%25B0%25E3%2582%2592%25E5%2588%25B6%25E9%2599%2590%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMWMxNzE3MmEzZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/fagai/articles/7f76a3b3b5a415",
          "author": "fagai",
          "description": "プロジェクトで、同じ型を別のファイルで使うことがあり、共通のinterfaceやtypeをどこかに定義して自動で読みたいなーと思い、調べてみました。\n調べてみると、最初はtypeRootsの話が出てきたのですがどうやら私がしたいものはそうではないようです。(///から始まったりする型定義ファイルを書くのがtypeRoots)\nどうやらtsconfig.jsonのpathsに書けば良いらしい。\n\n      \n        tsconfig.json\n        {\n  \"compilerOptions: {\n    \"paths\": {\n      \"*\": [\"./types/*...",
          "link": "https://zenn.dev/fagai/articles/7f76a3b3b5a415",
          "publishedOn": "2021-09-24T16:26:48.000Z",
          "wordCount": 34,
          "title": "TypeScriptでグローバルな型定義ファイルを用意する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sqN5CzAK--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:fagai%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25AB%25E3%2581%25AA%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E7%2594%25A8%25E6%2584%258F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZmExZWU1OGIzMy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryoka419319/articles/4518625e1b5b74",
          "author": "ITEEK 上川",
          "description": "はじめに\n前回、Next.js について調べてみたので、今回はよく使うアカウント認証について、アプリケーションを作ってみようと思います。\nNext.js を開発している Vercel が作っている NextAuth.js を使用します。\n\n アプリを作ってみる\nsample という名前でアカウント認証付きのアプリケーションを作成します。\n\n 1. まずは、Hello world！\n\n      \n        \n        $ yarn create next-app --typescript\n$ cd sample\n$ yarn add next-auth\n$ yarn a...",
          "link": "https://zenn.dev/ryoka419319/articles/4518625e1b5b74",
          "publishedOn": "2021-09-24T12:46:52.000Z",
          "wordCount": 331,
          "title": "Next.js で SNS アカウント認証！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AP_9owfQ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ITEEK%2520%25E4%25B8%258A%25E5%25B7%259D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25A7%2520SNS%2520%25E3%2582%25A2%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E8%25AA%258D%25E8%25A8%25BC%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dIb1d3OGQ2eEFsUjVlamxTNy13Q1BhdVBPUkxpUFp0YVdDblJ4Tmc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/676d88675e4e74",
          "author": "azukiazusa",
          "description": "<script setup> 構文とは\nVue.js 3.2 から <script setup> 構文が使えるようになりました。これは単一ファイルコンポーネント(SFC)内で Composition API を使用している際に使える糖衣構文です。下記のようなメリットを得ることができ、公式からも使用が推奨されています。\n\nポイラープレートが減りより簡潔になる\nprops と emit を定義する際に純粋な TypeScript の構文が使える\nランタイムのパフォーマンスが向上する\nIDE のパフォーマンスが向上する\n\n\n 基本的な構文\n<script se...",
          "link": "https://zenn.dev/azukiazusa/articles/676d88675e4e74",
          "publishedOn": "2021-09-24T08:15:03.000Z",
          "wordCount": 785,
          "title": "【Vue.js 3.2】`<script setup>` 構文がすごくすごい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8tj9fRo8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue.js%25203.2%25E3%2580%2591%2560%253Cscript%2520setup%253E%2560%2520%25E6%25A7%258B%25E6%2596%2587%25E3%2581%258C%25E3%2581%2599%25E3%2581%2594%25E3%2581%258F%25E3%2581%2599%25E3%2581%2594%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c",
          "author": "oubakiou",
          "description": "クリスマスまでには出版される予定になっている",
          "link": "https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c",
          "publishedOn": "2021-09-24T03:47:24.000Z",
          "wordCount": 31,
          "title": "出来る100%TypeScript   作って学ぶNext.js + GraphQL + Prisma(下) - GCP編",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ClxhHh4o--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9kMjMyMTBmMTYwLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/oubakiou/books/181b750dfb6838",
          "author": "oubakiou",
          "description": "クライアントサイドでは広く普及したTypeScriptですが、その一方サーバーサイドでは比較すると緩やかな採用拡大に留まっています。もしも両方を一貫してTypeScriptでの開発が出来たら？\n\n本書ではTypeScriptの強みである静的型の力を最大限活かした構成でのアプリケーション開発について、SNS開発を題材に学べる実践的なチュートリアルです。",
          "link": "https://zenn.dev/oubakiou/books/181b750dfb6838",
          "publishedOn": "2021-09-24T03:46:49.000Z",
          "wordCount": 22,
          "title": "出来る100%TypeScript  作って学ぶNext.js + GraphQL + Prisma(上) - GCP編",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYdqMh0g--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9jOTQzZjk0NmVlLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d",
          "author": "Kimura Kazuki",
          "description": "やりたいこと\n.svg を .tsx の拡張子に変換したい\n\n 技術選定\n\nReact\nTypeScript\nNext.js\n\n\n 実現方法\nSVGRというツールを用いることで簡単に実現できた\n\n 前提知識\n\n SVGRとは何か？\n\n      \n        \n        svgファイル から Reactコンポーネント にコマンド1つで簡単に変換できる CLI ツール\n\n\n      \n      \n SVGR の基本構成\n\n      \n        \n        svgファイル（.svg） → SVGR → React Component（.jsx | .tsx）\n...",
          "link": "https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d",
          "publishedOn": "2021-09-23T20:48:45.000Z",
          "wordCount": 319,
          "title": "svgファイルをReactコンポーネントに変換する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--oXF0_pL---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kimura%2520Kazuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:svg%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592React%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E5%25A4%2589%25E6%258F%259B%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzYwMmFkYjExZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gari8/articles/af95c50a2b688b",
          "author": "gari8",
          "description": "なぜ作ったか\n最近フロントが面白くてNext.jsだのReact.jsを書いていたんですが、サーバーを作るまでモックを内部コードに抱えながら書いていました。\nしかしそうすると、API通信周りが軒並みTODOになってしまい、最終的なコード改修が割と多くなってしまいます ↓。\n\n      \n         hoge.ts\n        import * as mock from \"./data.json\"\n\n// データを全権取得\nconst getDataList = (): Data[] => {\n   const list =  mock.list;\n   // TOD...",
          "link": "https://zenn.dev/gari8/articles/af95c50a2b688b",
          "publishedOn": "2021-09-23T15:00:22.000Z",
          "wordCount": 248,
          "title": "テストサーバー建てるの面倒くさいからモックサーバーツールを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--jmaSKjcU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:gari8%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E5%25BB%25BA%25E3%2581%25A6%25E3%2582%258B%25E3%2581%25AE%25E9%259D%25A2%25E5%2580%2592%25E3%2581%258F%25E3%2581%2595%25E3%2581%2584%25E3%2581%258B%25E3%2582%2589%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lmZWxpNHFHcGhZZXdyNVdWNUNFUklfMk0wZWVLX2FKUHlvMjgyMlE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sbleru/articles/450d98407312ba",
          "author": "ぶれる",
          "description": "WHY\nオブジェクトのリストに対して、SQLのようにgroup byしてcountしたオブジェクトが欲しかった\n\n HOW\n\nオブジェクトのパラメータにcountを追加するのではなく、ひとつ階層を増やして、dataに元のオブジェクトを、count にカウント数を入れるようにした。\n\nlistに渡されるオブジェクトは同じ型を持ったオブジェクトである想定\n\n\nreduceでカウントして、最後mapで整形\n\n\n      \n        \n        export const groupBy = <T, K extends keyof T>(\n  list: T[],\n ...",
          "link": "https://zenn.dev/sbleru/articles/450d98407312ba",
          "publishedOn": "2021-09-23T09:11:14.000Z",
          "wordCount": 101,
          "title": "jsでgroup byするメモ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BRmDxPaq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B6%25E3%2582%258C%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:js%25E3%2581%25A7group%2520by%25E3%2581%2599%25E3%2582%258B%25E3%2583%25A1%25E3%2583%25A2%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODYzMjcyMGI3ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/terrierscript/articles/2021-09-16-expo-ota-with-publish-set",
          "author": "terrierscript",
          "description": "Expoはビルドをサーバーで行ってくれたり、React nativeにまつわる様々な問題を対処してくれるとても良いツールだ。\nExpoにはOTAの機能もついており、デフォルトで動作するようになっているが、若干便利さが重視されており、プロダクション向けに使うには色々考えることが必要だった。\nexpoをオレオレバージョニングしながら色々やりくりしていたが、やはりリリースサイクルを早めたくなるとOTAをちゃんと使っていきたいという気持ちになったので考えた。\nなお、ExpoのOTAの基礎的な部分については解説を省略している箇所があるため、詳細な点など知りたい場合は下記の記事などが手助けになるだろ...",
          "link": "https://zenn.dev/terrierscript/articles/2021-09-16-expo-ota-with-publish-set",
          "publishedOn": "2021-09-23T04:55:05.000Z",
          "wordCount": 369,
          "title": "expoのOTAを--no-publishとpublish:setを使ってなるべく安全に扱う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--QSzj_PYG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terrierscript%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:expo%25E3%2581%25AEOTA%25E3%2582%2592--no-publish%25E3%2581%25A8publish%253Aset%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258F%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E6%2589%25B1%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGE3MmMyMTRjZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/4498ad794002c3",
          "author": "空雲",
          "description": "１．getInitialPropsの終焉\n\n 1.1. Next.jsではgetInitialPropsのSSRが終わったことにされている\nNext.jsの9.3以降、getStaticPropsやgetServerSidePropsが登場し、現在ではgetInitialPropsを使ったSSRが終焉を迎えたかのような風潮となっています。しかしgetStaticPropsとgetServerSidePropsは、実際の所で大きな欠点を抱えています。\ngetStaticPropsはSSG前提で使うなら全く問題ありません。しかし、ある程度の更新頻度をもつシステムやリアルタイムな編集機能と...",
          "link": "https://zenn.dev/sora_kumo/articles/4498ad794002c3",
          "publishedOn": "2021-09-23T04:39:31.000Z",
          "wordCount": 379,
          "title": "Next.jsでSSRを限界まで簡単に実現する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--P1V4DtNj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7SSR%25E3%2582%2592%25E9%2599%2590%25E7%2595%258C%25E3%2581%25BE%25E3%2581%25A7%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/7f38cab4792446",
          "author": "空雲",
          "description": "※ ジョーク記事です\n※ ジョークですが、プログラムはきちんと動きます\nソースコード https://github.com/SoraKumo001/next-context\n動作確認 https://next-context-ten.vercel.app/\n\n コンテキストについて\n下記の公式ドキュメントでコンテキストはこのように説明されています。\n\nコンテクストは各階層で手動でプロパティを下に渡すことなく、コンポーネントツリー内でデータを渡す方法を提供します。\n\nつまり、ツリー内で有効となるデータ領域です。\nそれ以上を期待すると残念なことになるので、とにかくタダのデータ領域だと思いまし...",
          "link": "https://zenn.dev/sora_kumo/articles/7f38cab4792446",
          "publishedOn": "2021-09-23T00:48:25.000Z",
          "wordCount": 426,
          "title": "React コンテキストの真の使い方（useContext）",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--neIUJTXG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2582%25AD%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E7%259C%259F%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E6%2596%25B9%25EF%25BC%2588useContext%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hk_206/articles/a4abda20d8b14d",
          "author": "hokuto",
          "description": "TypeScript？\n\n 型付けできるJavaScript\n\n      \n        \n        let age: number = 0;\n\nage = 28;\n\nage = \"ぞんぞん\"; //エラー\n\n\n      \n      \n いろんな型\n\n\n\n型\n意味\n例\n\n\n\n\nstring\n文字列\n'ぞんぞん'\n\n\nnumber\n数値\n28\n\n\nboolean\n真偽値\ntrue\n\n\n[]\n配列\nstring[] → ['aaa', 'bbb', 'ccc']\n\n\nany\n制約なし\n\n\n\n\n\n オブジェクトの型は？\n\n 普通に書くと読みづらい、管理しづらい🥺(ぱおん)\n\n...",
          "link": "https://zenn.dev/hk_206/articles/a4abda20d8b14d",
          "publishedOn": "2021-09-23T00:08:50.000Z",
          "wordCount": 201,
          "title": "【TypeScript】type派？interface派？僕はもちろんtype派",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--mKs4JZwF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hokuto%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590TypeScript%25E3%2580%2591type%25E6%25B4%25BE%25EF%25BC%259Finterface%25E6%25B4%25BE%25EF%25BC%259F%25E5%2583%2595%25E3%2581%25AF%25E3%2582%2582%25E3%2581%25A1%25E3%2582%258D%25E3%2582%2593type%25E6%25B4%25BE%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzJmZGU0YTBhOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yutaro_elk/articles/c65052449a6212",
          "author": "yutaro_elk",
          "description": "三行まとめ\n\nnpm i aspida\n\ntype DefineMethods<T extends AspidaMethods> = T;を定義\n\nDefineMethodsでより型安全な世界\n\n\n frourio はとっても型安全\nfrourio は Methods として API の型を一つだけ定義すればフロントエンド、バックエンド間の疎通を TypeScript で静的に検査できるフルスタックフレームワークです。\n例えば、\n\n      \n        index.ts\n        export type Methods = {\n  get: {\n    re...",
          "link": "https://zenn.dev/yutaro_elk/articles/c65052449a6212",
          "publishedOn": "2021-09-22T23:35:08.000Z",
          "wordCount": 180,
          "title": "frourio の Methods を型安全に定義する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--N7tJI1Ep--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yutaro_elk%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:frourio%2520%25E3%2581%25AE%2520Methods%2520%25E3%2582%2592%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2UxNDI1YzAwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9",
          "author": "minguu",
          "description": "はじめに\nこの記事では TypeScript で書かれた Next アプリに Firebase JavaScript SDK v9 を利用して Google ログインを実装する方法について書きます. 認証するユーザは Recoil で管理します. Context API で管理する方法はこちらの記事で書いています.\nまた, 前述した記事に載っていますので, この記事では Firebase プロジェクトの作成, Google プロバイダの有効化などの詳しい手順は省略させて頂きます.\nこの記事が他の人の参考になれば幸いです.\nまた, この記事の内容に間違った記載がありましたら, 指摘して...",
          "link": "https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9",
          "publishedOn": "2021-09-22T13:23:52.000Z",
          "wordCount": 620,
          "title": "Firebase SDK v9, Recoil で Next.js アプリの Google ログインを実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--79iO3zKf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:minguu%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Firebase%2520SDK%2520v9%252C%2520Recoil%2520%25E3%2581%25A7%2520Next.js%2520%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%2520Google%2520%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lMaU1RSm1OSlUyZXBOWldpcWpTOTV6eXBVeFQxSDRjU2FVVUNvbVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kanoi/articles/f3a86f99cdce44",
          "author": "カノイ",
          "description": "二次元配列の回転や反転は、ゲームなどを作るときにたま～に使うので備忘録として記します。\n\n サンプルコード\nサンプルコードを用意しました。分かりやすいように二次元配列に対応した図形を表示しており、回転,反転ボタンを押すことで二次元配列が回転,反転し、その結果図形も回転,反転したものが表示されるようにしています。\nこちらのコードは、React＋TypeScriptを使用していますが、ロジック部分は素のJavaScriptとほとんど変わりません。\n\n\n 回転\nサンプルコードの中から、二次元配列を右に90度回転させた配列を生成する部分だけを抜き出しました。\n\n      \n        \n ...",
          "link": "https://zenn.dev/kanoi/articles/f3a86f99cdce44",
          "publishedOn": "2021-09-22T10:27:09.000Z",
          "wordCount": 87,
          "title": "二次元配列を回転や反転させる方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fxwIF3tH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%25AB%25E3%2583%258E%25E3%2582%25A4%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E4%25BA%258C%25E6%25AC%25A1%25E5%2585%2583%25E9%2585%258D%25E5%2588%2597%25E3%2582%2592%25E5%259B%259E%25E8%25BB%25A2%25E3%2582%2584%25E5%258F%258D%25E8%25BB%25A2%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2haekpqS185S2RISjJVb09mRkIwU3pHYU92NDdJbDNTMDF3Z09RangwPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kawarimidoll/articles/a30d49f46bd773",
          "author": "kawarimidoll",
          "description": "本記事はtoranoana.deno #1の発表資料です。\nhttps://yumenosora.connpass.com/event/223214/\n\nDeno Deployで動くSSGを作りました。\nその名もDiplodocusです。\nhttps://github.com/kawarimidoll/deno-diplodocus\n名前のDiplodocusはDeploy docsからの連想です。\nhttps://ja.wikipedia.org/wiki/ディプロドクス\n\n なぜつくったか\nDenoモジュールや関連プロダクトは増えていますが、解説ドキュメントをGitHub Pages...",
          "link": "https://zenn.dev/kawarimidoll/articles/a30d49f46bd773",
          "publishedOn": "2021-09-22T10:15:07.000Z",
          "wordCount": 204,
          "title": "Deno Deploy専用のSSGを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--g_aS1Dx0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kawarimidoll%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%2520Deploy%25E5%25B0%2582%25E7%2594%25A8%25E3%2581%25AESSG%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM3OWFjOGQ4Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tikashi/articles/fe6d57c4a1f5be",
          "author": "tikashi",
          "description": "antd pro-formのshchema-form\nを使っていたら下記のコードで詰まった。\n\n      \n        \n        const userEnum = {\n  1: 'ユーザー１',\n  2: 'ユーザー2',\n  3: 'ユーザー3',\n};\n\ntype Task = {\n  id: number\n  name: string\n  userId: number\n}\n\n<BetaSchemaForm<Task>\n        trigger={<a>登録</a>}\n        layoutType=\"Embed\"\n...",
          "link": "https://zenn.dev/tikashi/articles/fe6d57c4a1f5be",
          "publishedOn": "2021-09-22T02:19:31.000Z",
          "wordCount": 146,
          "title": "andのpro-formの type=\"select\"がちゃんと表示されない... ...",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sE32t6lg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:tikashi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:and%25E3%2581%25AEpro-form%25E3%2581%25AE%2520type%253D%2522select%2522%25E3%2581%258C%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25A8%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584...%2520...%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTE5NTgwMjdiZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/14b76b561f3b45",
          "author": "dozo",
          "description": "wasm-optを設定する\n関連記事:\nRustが征くシリーズ過去記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\nSvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)\nWASMのサイズでかすぎね？: Rustが征く(6)     ← イマココ\n\n\nWebでWebAs...",
          "link": "https://zenn.dev/dozo/articles/14b76b561f3b45",
          "publishedOn": "2021-09-22T01:10:33.000Z",
          "wordCount": 165,
          "title": "WASMのサイズでかすぎね？: Rustが征く(6)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--xu58GeyT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:WASM%25E3%2581%25AE%25E3%2582%25B5%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%25A7%25E3%2581%258B%25E3%2581%2599%25E3%2581%258E%25E3%2581%25AD%25EF%25BC%259F%253A%2520Rust%25E3%2581%258C%25E5%25BE%2581%25E3%2581%258F%25286%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dove/articles/e046bd69a93464",
          "author": "ハトすけ",
          "description": "DRY(Don't Repeat Yourself!)原則ありますね。昔はコードの二重化をなくすことと考えられていましたが、現在では「知識」の二重化なくす原則と考えられています。達人プログラマーでも以下のように述べられています。\n\nコードの二重化すべてが知識の二重化というわけではないワインの注文アプリで、顧客の年齢を認証し、注文本数を受け付けるモジュールを開発していると考えてください。\n\n\n      \n        \n        def  validate_age(value):\n  validate_type(value,:integer)\n  validate_min_int...",
          "link": "https://zenn.dev/dove/articles/e046bd69a93464",
          "publishedOn": "2021-09-21T13:45:15.000Z",
          "wordCount": 1220,
          "title": "DRYを間違って適応するとどうなるのか",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sXHAMb3Q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%258F%25E3%2583%2588%25E3%2581%2599%25E3%2581%2591%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:DRY%25E3%2582%2592%25E9%2596%2593%25E9%2581%2595%25E3%2581%25A3%25E3%2581%25A6%25E9%2581%25A9%25E5%25BF%259C%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%25A9%25E3%2581%2586%25E3%2581%25AA%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQyM2U3ZDgzMy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kaorun343/articles/654a9673863388",
          "author": "kaorun343",
          "description": "動機\nElectronのIPC通信は特にメインプロセスとレンダラープロセスでデータのやりとりをする場合に使われます。昨今のセキュリティ向上の流れでレンダラープロセスからメインプロセスで使うモジュールを直接呼び出すことは避けられるようになり、IPC通信を介して実現することが多くなっています。\nしかしながらIPC通信の種類が増えるとその管理が非常に大変になります。特に引数やキーワードのチェックがなく、正しいデータを送受信しているのか確認するのが大変です。\nそこで今回はIPC通信にGraphQLを使ってみようと思います。これによりGraphQLの機能で上記の課題を解決できます。\n\n 方法\n...",
          "link": "https://zenn.dev/kaorun343/articles/654a9673863388",
          "publishedOn": "2021-09-21T10:42:35.000Z",
          "wordCount": 289,
          "title": "ElectronのIPC通信にGraphQLを使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--oI_6te3j--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kaorun343%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Electron%25E3%2581%25AEIPC%25E9%2580%259A%25E4%25BF%25A1%25E3%2581%25ABGraphQL%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dVZklPMktRZzdjMWFRTVNpaW1PMUt4RzRtZlBBcDFwLVpWMndsPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kaito_takase/articles/f334ada1dadf6b",
          "author": "kaito takase",
          "description": "経緯\n普段はwebpackでthree.jsを読み込んで使用していましたが、Nuxtだとどのように読み込むのかわからなかったので試してみました。\n\n バージョン\nnode v16.5.0\nNuxt v2.15.3\nthree.js v0.130.1\ntypescript v2.15.3\n\n 読み込む3Dデータ\nglTF形式（.gltf）のモデリングデータを読み込みます。\n\n 読み込み方法\n\n      \n        nuxt.config.ts\n        // 一部省略\n     :\n    // Plugins to run before rendering page: ...",
          "link": "https://zenn.dev/kaito_takase/articles/f334ada1dadf6b",
          "publishedOn": "2021-09-21T08:04:59.000Z",
          "wordCount": 161,
          "title": "Nuxtでthree.jsを使って3Dモデルを読み込みたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--xyQ4mXsM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kaito%2520takase%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%25E3%2581%25A7three.js%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A63D%25E3%2583%25A2%25E3%2583%2587%25E3%2583%25AB%25E3%2582%2592%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pxNWhMQkd2MDNiRmgwSWNDS2tMc09OdE1vYTMxb2dqYllFd3RqPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gamin/articles/c58b8fb43c8a75",
          "author": "gamine🍑",
          "description": "code の例 1\n\n      \n        \n        const func = (key: string) => computed(() => (toggle.value === true ? key : 'false'))\n\n\n      \n      \n code の例 2\nこんなのでも与えられるらしい。\n\n      \n        \n        <template>\n\t{{ hoge('Momo') }}\t\n</template>\n\n\n      \n      \n      \n        \n        cons...",
          "link": "https://zenn.dev/gamin/articles/c58b8fb43c8a75",
          "publishedOn": "2021-09-21T01:29:51.000Z",
          "wordCount": 53,
          "title": "computed に引数を与えたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--r4cRkBF6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:gamine%2520%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:computed%2520%25E3%2581%25AB%25E5%25BC%2595%25E6%2595%25B0%25E3%2582%2592%25E4%25B8%258E%25E3%2581%2588%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDE0MDRhMWYwOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "author": "aiji42",
          "description": "はじめに\nNext.js には SSR するための getServerSideProps と SSG/ISR のための getStaticProps というデータフェッチファンクションが用意されています。\n一般的な getServerSideProps は、次のようにレンダリングに必要な props を返却することが主な用途です。\n\n      \n        \n        export async function getServerSideProps(context) {\n  const data = await fetch('...').then((res) => ...",
          "link": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "publishedOn": "2021-09-20T16:03:30.000Z",
          "wordCount": 267,
          "title": "【Next.js】getServerSidePropsをリバースプロキシ化して遊ぼう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bgvRilVw--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Next.js%25E3%2580%2591getServerSideProps%25E3%2582%2592%25E3%2583%25AA%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25AD%25E3%2582%25B7%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E9%2581%258A%25E3%2581%25BC%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/eringiv3/books/a85174531fd56a",
          "author": "Eringi_V3",
          "description": "この本では、TypeScriptで型安全にGraphQLサーバーを構築する方法をハンズオン形式で学習することができます。\nTodoアプリの開発を通して、GraphQLスキーマの扱いやCLIツールの設定方法、TypeScriptのORMであるPrismaの基本的な使用方法、CI/CDパイプラインの構築によるマイグレーションの自動化などを体験します。\nGraphQLサーバー実装の素振りをしておきたい方や、フロントエンドからGraphQL APIを使用したことはあるけど自分でAPIを実装したことはないようなバックエンドの開発初心者の方に向けた内容となっております。",
          "link": "https://zenn.dev/eringiv3/books/a85174531fd56a",
          "publishedOn": "2021-09-20T13:26:40.000Z",
          "wordCount": 26,
          "title": "Apollo ServerとPrismaではじめるGraphQL API開発入門",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2BFbdGWQ--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci80ZmZmNDlhOGExLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/aota/articles/49410ad98b33c7",
          "author": "aota",
          "description": "個人開発でco-metubというスタブAPIを共有できるGUIツールを作りました。\nバックエンドとフロントエンドのチームで、スタブAPIを良い感じに共有したい時にお使いください。\nhttps://github.com/solaoi/co-metub\n\n 使い方\n\n インストール方法\nDockerが入った環境であれば、下記コマンドを実行するだけです。\n空いてるサーバをスタブAPIサーバにしてしまいましょう。\n\n      \n        \n        # 公開したいポートを決めます。\nHOST_PORT=8080\n# httpで公開するなら、セキュア属性クッキーの無効化をtrueに設...",
          "link": "https://zenn.dev/aota/articles/49410ad98b33c7",
          "publishedOn": "2021-09-20T13:07:53.000Z",
          "wordCount": 143,
          "title": "共有できるスタブAPIツールを公開してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2sYMmT3G--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aota%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E5%2585%25B1%25E6%259C%2589%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%2596API%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2k1R254U0xMeVM4ZjlpQUZlMG5mcVF3a09iS1k4SUhQWDVBck5LNUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "author": "kata",
          "description": "jestとは\nJestはJavaScriptの単体テストのフレームワークです。\n単体テスト（ユニット(Unit)テストとも言います）とは、ボタンやセレクトボックスなど個々の機能を正しく果たしているかどうかを検証するテストの事を指します。\nこの記事はJavaScriptのテストフレームワークでよく使われているjestをNuxt.jsを使ってとりあえず試してみたものになります。\n\n バージョン\nnuxt.js: 2.15.8\nnode.js:16.6.0\n\n nuxtcliでプロジェクト作成\n\n      \n        \n        ❯ yarn create nuxt-app ...",
          "link": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "publishedOn": "2021-09-20T11:51:49.000Z",
          "wordCount": 638,
          "title": "nuxt.jsでjestを使ってテストを始める",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--KvEMYRrl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:nuxt.js%25E3%2581%25A7jest%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWRjMjM1OTE3Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "author": "空雲",
          "description": "Next.jsの初回queryのundefined現象\n\nsrc/pages/[q].tsx\n\n\n      \n        \n        import { useRouter } from 'next/router'\nimport React from 'react'\n\nconst Page = () => {\n  const router = useRouter()\n  const q = router.query['q']\n  console.log(\"q:\",q)\n  return <div>{q}</div>\n}\n\nexport defa...",
          "link": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "publishedOn": "2021-09-20T04:26:09.000Z",
          "wordCount": 81,
          "title": "[Next.js]router.queryから初回のundefinedを消し去る方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W26cShMZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%255BNext.js%255Drouter.query%25E3%2581%258B%25E3%2582%2589%25E5%2588%259D%25E5%259B%259E%25E3%2581%25AEundefined%25E3%2582%2592%25E6%25B6%2588%25E3%2581%2597%25E5%258E%25BB%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/petamoriken/articles/a211183011cd58",
          "author": "petamoriken",
          "description": "この記事は Qiita からコピーされたものです。\n\n\n Annex B について\nJavaScript の言語仕様には Annex B という項目があります。ここには Web 互換性のために残されているレガシーな機能の仕様について記述してあり、新たに ECMAScript のコードを書く際にこれらの機能を使用したり、その存在を前提にしたりしてはいけないと明記されています。\nhttps://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\nString#big などの今となっては全く実用性のないメソ...",
          "link": "https://zenn.dev/petamoriken/articles/a211183011cd58",
          "publishedOn": "2021-09-19T16:45:17.000Z",
          "wordCount": 396,
          "title": "ECMAScript Annex B と型定義、ついでに ES2022 __proto__",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BsT5lbsp--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:petamoriken%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:ECMAScript%2520Annex%2520B%2520%25E3%2581%25A8%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2580%2581%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A7%25E3%2581%25AB%2520ES2022%2520__proto__%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTUwZjE2MTc1Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/petamoriken/articles/ab9a7d7f654a79",
          "author": "petamoriken",
          "description": "この記事は Qiita からコピーされたものです。\n\n\n はじめに\n個人的に TC39 meeting をウォッチしてまとめている @petamoriken です。\nESNext の Decorators の提案は何度も改定しています。その割にあまり知れ渡っていません。この記事ではその変遷と2021年7月現在における最新の Decorators について簡単にまとめようと思います。\nhttps://github.com/tc39/proposal-decorators\nこちらの発表スライドを見ると流れがわかりやすいかもしれません。\n\n\n 最初の提案（2014年~2015年頃）\n最初の提...",
          "link": "https://zenn.dev/petamoriken/articles/ab9a7d7f654a79",
          "publishedOn": "2021-09-19T16:32:49.000Z",
          "wordCount": 827,
          "title": "Stage 2 Decorators の変遷と最新仕様",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--diQwGZxJ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:petamoriken%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Stage%25202%2520Decorators%2520%25E3%2581%25AE%25E5%25A4%2589%25E9%2581%25B7%25E3%2581%25A8%25E6%259C%2580%25E6%2596%25B0%25E4%25BB%2595%25E6%25A7%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTUwZjE2MTc1Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yonda/articles/5366cb9beb312d",
          "author": "yonda",
          "description": "Pythonで時系列解析をしたい(時系列クラスタリング)\nDTW(Dynamic Time Warping)で台風軌道をクラスタリングする\nこんなふうに時系列データの分類をJavaScript（TypeScript）でしてみたい。\nでも調べるとほとんどみんなPythonのtslean、sklearnやRを使っています。\n調べればJavaScriptライブラリがあるのでしょうが、理屈の勉強がてら自分で実装（TypeScript）してみます。\n\n 分類法\n分類法においてメジャーなのはK-meansとK-medoids。\n2つを比べたとき外れ値やノイズに強いとされている、また時系列データ同士の...",
          "link": "https://zenn.dev/yonda/articles/5366cb9beb312d",
          "publishedOn": "2021-09-19T16:31:06.000Z",
          "wordCount": 2106,
          "title": "JavaScriptで時系列データのクラスタリングがしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SKFWtfrU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yonda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:JavaScript%25E3%2581%25A7%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%258C%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDhmYzUwNTBkYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/0da7851314cacd",
          "author": "Kyohei",
          "description": "時間があったのでDiscord Botを作ってみました。\nSpotifyのAPIはSpotify Web API Nodeという素晴らしいラッパーライブラリがあるのでそれを使いました。\n\naxiosやらなんやらで直接URLを叩いてもいいのですがせっかくライブラリがあるのでそっちを使いました。使わなくてもSpotify APIは使えます。\n\nとりあえず基本のmessageCreateイベントでloginと入力されたらログイン用のURLを返すようにします。(Spotify APIのAuthenticationの関係でここだけはブラウザを開かないといけないっぽいです。もし間違ってたら教えていた...",
          "link": "https://zenn.dev/kyohei1212/articles/0da7851314cacd",
          "publishedOn": "2021-09-19T08:18:12.000Z",
          "wordCount": 231,
          "title": "Spotify APIとDiscord.jsでBotを作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W2fefVk8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Spotify%2520API%25E3%2581%25A8Discord.js%25E3%2581%25A7Bot%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/c5fb4ccf0a06b2",
          "author": "ぺい",
          "description": "TypeScriptの型レベルコードについてあまり慣れてないので勉強を始めた。\n以下のコードのItemFormがどういう型を持つのか。\n\n      \n        \n        type Item = {\n  id: string;\n  title: string;\n  body: string;\n};\n\n\ntype ItemForm = Item & {\n  edit: boolean;\n};\n\n\n      \n      &はintersection type（交差型）という。\n\nIntersection types are closely related t...",
          "link": "https://zenn.dev/peg/articles/c5fb4ccf0a06b2",
          "publishedOn": "2021-09-19T06:55:54.000Z",
          "wordCount": 161,
          "title": "TypeScriptの交差型",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Hmq4w-2O--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:TypeScript%25E3%2581%25AE%25E4%25BA%25A4%25E5%25B7%25AE%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "author": "shingo.sasaki",
          "description": "Chart.js 3 について\nChart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。\nv3 は従来の v2 と比べ、以下のような大きな改善が行われています。\n\nwebworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上\n細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化\n\nmoment など、日付操作用のライブラリへの依存の撤廃\nCSSインジェクションの廃止\n膨大な数のバグフィックス\n\nただし、多くの破壊的変更を...",
          "link": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "publishedOn": "2021-09-19T03:32:58.000Z",
          "wordCount": 526,
          "title": "Vue2 / Vue3 でも Chart.js 3 を使いたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2Fm5gHTt--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shingo.sasaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%2520%252F%2520Vue3%2520%25E3%2581%25A7%25E3%2582%2582%2520Chart.js%25203%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODQ1ZmE3NWJhOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tkm_kj/articles/111ef98ed6297e",
          "author": "Takumi Kaji",
          "description": "背景\nnode + TypeScript で MySQL に繋いで少しだけデータ操作をする場面があったのですが、あまり記事無くて苦戦したので備忘録として残しておきます。\n\n 実装方針\n\nO/Rマッパーのような大きいライブラリじゃなくても済む規模だったので mysql を使用して生クエリで対応\nコールバック地獄にならないようにしたい\nしっかりトランザクションはかけておきたい\n\n\n バージョン\n\nnode: v14.17\nmysql(ライブラリ): 2.18.1\nMySQL(DB): 5.7\n\n\n 実装\n\n 接続\n\n      \n        \n        import { cre...",
          "link": "https://zenn.dev/tkm_kj/articles/111ef98ed6297e",
          "publishedOn": "2021-09-18T20:40:45.000Z",
          "wordCount": 359,
          "title": "Node + TypeScript で MySQL に接続して Read, Write してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cyPJ4Ji5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takumi%2520Kaji%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Node%2520%252B%2520TypeScript%2520%25E3%2581%25A7%2520MySQL%2520%25E3%2581%25AB%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2597%25E3%2581%25A6%2520Read%252C%2520Write%2520%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hELWlkLU1hRzQtdF8zN29QMUh3dGVlN3ZhbDdVYmN2dVhDS2VlbGc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "author": "aiji42",
          "description": "はじめに\nNext.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。\nここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。\n例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…\n\n一般ユーザ向けページは誰でもアクセス可能\nマイページはログイン済みのユーザのみアクセス可能\nログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる\n\nた...",
          "link": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "publishedOn": "2021-09-18T17:11:31.000Z",
          "wordCount": 460,
          "title": "【Next.js】アクセスコントロールパターン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fXFmupwO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/type-guard-arrow-function",
          "author": "anozon",
          "description": "この記事では アロー関数で Type Guard について紹介します。\nTypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript\n\n      \n        \n        type Nigiri = {\n  category: 'nigiri'\n  neta: string\n}\ntype Gunkan = {\n  category: 'gunkan'\n  neta: string\n  nori: number\n}\ntype Sushi = Nigiri | Gunkan...",
          "link": "https://zenn.dev/anozon/articles/type-guard-arrow-function",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 109,
          "title": "アロー関数とfunction それぞれの Type Guard 書き方",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_XnPNiWI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25A8function%2520%25E3%2581%259D%25E3%2582%258C%25E3%2581%259E%25E3%2582%258C%25E3%2581%25AE%2520Type%2520Guard%2520%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "author": "anozon",
          "description": "この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。\nGist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx\n\n pages/_app.tsx\nこちらは Function Component でかけるのでシンプルです。\n\n      \n        \n        import { AppProps } from 'next/app'\nimport Head from 'next/head'\n\nconst...",
          "link": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 145,
          "title": "Next.js with TypeScript で最小限の _app.tsx, _document.tsx",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uLCP34vU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%2520with%2520TypeScript%2520%25E3%2581%25A7%25E6%259C%2580%25E5%25B0%258F%25E9%2599%2590%25E3%2581%25AE%2520_app.tsx%252C%2520_document.tsx%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/sort-without-head",
          "author": "anozon",
          "description": "js で配列の 2 行目以降のみをソートする方法のメモです。\nrepl: https://repl.it/@anozon/sortbody#index.ts\n\n ソート対象の配列\n\n      \n        \n        // js\nconst elems = [\n  { name: 'primary', count: 10 }, // ソートしないで！\n  { name: 'b', count: 2 },\n  { name: 'd', count: 12 },\n  { name: 'a', count: 1 },\n  { name: 'c', count: 11 },\n]\n\n/...",
          "link": "https://zenn.dev/anozon/articles/sort-without-head",
          "publishedOn": "2021-09-18T13:58:12.000Z",
          "wordCount": 381,
          "title": "js で先頭以外(n行目以降)をソートする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EEI9PCSe--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:js%2520%25E3%2581%25A7%25E5%2585%2588%25E9%25A0%25AD%25E4%25BB%25A5%25E5%25A4%2596%2528n%25E8%25A1%258C%25E7%259B%25AE%25E4%25BB%25A5%25E9%2599%258D%2529%25E3%2582%2592%25E3%2582%25BD%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-transition-props-bg",
          "author": "anozon",
          "description": "props で指定された URL が変わったら フェードアウト し、\n新しい URL 画像で フェードイン しながら表示するコンポーネントを作りました。\nreact-transition-group を使います。\n\n デモ\n<iframe src=\"https://codesandbox.io/embed/react-animation-background-image-jznjc?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\nstyle=\"width:100%; height:210px; bo...",
          "link": "https://zenn.dev/anozon/articles/react-transition-props-bg",
          "publishedOn": "2021-09-18T13:58:10.000Z",
          "wordCount": 252,
          "title": "React で URL props が変わったら fade アニメーションで 背景を変える",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Ww7V54_6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:React%2520%25E3%2581%25A7%2520URL%2520props%2520%25E3%2581%258C%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2589%2520fade%2520%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%2520%25E8%2583%258C%25E6%2599%25AF%25E3%2582%2592%25E5%25A4%2589%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-set-props",
          "author": "anozon",
          "description": "React で特定の props を固定した特化コンポーネントを定義する方法をいくつかまとめました。\nDEMO です。\nreact-set-props - CodeSandbox\n以下の Message という自作コンポーネントと Star というライブラリのコンポーネントを例に使います。\nStar は `material-ui の icon コンポーネントです。\n\n      \n        \n        import Star from '@material-ui/icons/Star'\n\nconst Message = (props) => <p>mes: ...",
          "link": "https://zenn.dev/anozon/articles/react-set-props",
          "publishedOn": "2021-09-18T13:58:10.000Z",
          "wordCount": 323,
          "title": "React で特定の props を固定した特化コンポーネントを定義する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--m2bzQnS6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%2520props%2520%25E3%2582%2592%25E5%259B%25BA%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259F%25E7%2589%25B9%25E5%258C%2596%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component",
          "author": "anozon",
          "description": "同じ div に useSize と useHover の両方を使いたいとがあった。\nしかしどちらも ref を渡さなければいけなかったのでその方法です。\nShare ref with multiple ref handlers · Issue #13029 · facebook/react\n\n useCombinedRefs\nref を合成する関数を用意する。\n参考: https://github.com/facebook/react/issues/13029#issuecomment-497641073\n\n      \n        \n        export const us...",
          "link": "https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 130,
          "title": "React で複数の ref を 1つのコンポーネントにセットする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--86OXzkpm--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%2520ref%2520%25E3%2582%2592%25201%25E3%2581%25A4%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-memory-ruler",
          "author": "anozon",
          "description": "メモリ付きの定規、ルーラーコンポーネントのサンプルです。\n\n\n コード\nruler-with-memory - CodeSandbox\n\n      \n        title=Ruler.tsx\n        <Ruler\n  memories={[1, 2, 4, 8, 16, 32, 64, 128]}\n  colors={['#333', '#444', '#555', '#666', '#777', '#888', '#999']}\n/>\n\n\n      \n      \n      \n        \n        function Ruler({ memor...",
          "link": "https://zenn.dev/anozon/articles/react-memory-ruler",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 338,
          "title": "React と display grid でメモリ付き定規",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dl-50b8j--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A8%2520display%2520grid%2520%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E4%25BB%2598%25E3%2581%258D%25E5%25AE%259A%25E8%25A6%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-fc-with-function",
          "author": "anozon",
          "description": "この記事では children を持つ Component を function で書くときの型定義する方法を説明します。\n\n 書き方\nReact.PropsWithChildren<Props> を使うことで書けます。\nSample PropsWithChildren - CodeSandbox\n\n      \n        \n        type Props = {}\nfunction Component(props: React.PropsWithChildren<Props>) {}\n\n\n      \n      \n それぞれの書き方\n\n      ...",
          "link": "https://zenn.dev/anozon/articles/react-fc-with-function",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 165,
          "title": "children を持つ Component を normal function で書くときの型定義",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Vg-BYSti--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:children%2520%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A4%2520Component%2520%25E3%2582%2592%2520normal%2520function%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-canvas-to-img",
          "author": "anozon",
          "description": "この記事では React (と TypeScript で) canvas から画像生成する方法を紹介します。\n文字描画や色変更をサンプルに説明していきます。\n\n React で Canvas を使うベースのコード\n\n      \n        \n        import React, { useEffect, useState } from 'react'\nconst width = 255\nconst height = 255\n\nfunction App() {\n  const [png, setPng] = useState<string | null>(null)...",
          "link": "https://zenn.dev/anozon/articles/react-canvas-to-img",
          "publishedOn": "2021-09-18T13:58:08.000Z",
          "wordCount": 262,
          "title": "React で canvas から画像生成する最小コード",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LrDSRHc5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%2520canvas%2520%25E3%2581%258B%25E3%2582%2589%25E7%2594%25BB%25E5%2583%258F%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/python-typing-literal",
          "author": "anozon",
          "description": "TypeScript の UnionType は以下のように定義できます。\n\n      \n        \n        type Color = 'red' | 'green'\n\n\n      \n      Python の type でも同じようなことができるのか調べました。\nちなみに typeing.Union というのがありますが別です。\n\n typeing.Literal を使う\n\n      \n        \n        from typing import Literal, get_args\n\nCOLOR = Literal['red', 'green', 'bl...",
          "link": "https://zenn.dev/anozon/articles/python-typing-literal",
          "publishedOn": "2021-09-18T13:58:08.000Z",
          "wordCount": 127,
          "title": "Python で TypeScript の UnionType を使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IahdwvqC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Python%2520%25E3%2581%25A7%2520TypeScript%2520%25E3%2581%25AE%2520UnionType%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "author": "anozon",
          "description": "next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。\njsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。\nSSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。\n(/pages 直下で export するコンポーネント)\n\n コード\n\n      \n        \n        import { createConte...",
          "link": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "publishedOn": "2021-09-18T13:58:05.000Z",
          "wordCount": 143,
          "title": "Next.js export 実行時のタイムスタンプをコンポーネントで使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_ZPfgWAW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520export%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2583%2597%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/layer-react-counterapp",
          "author": "anozon",
          "description": "経年劣化に耐える ReactComponent の書き方 - Qiita\nが良さそうだったので TypeScript で書く場合を試してみた。\n\n コード\nCodeSandbox\n\n      \n        \n        import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\ntype Props = {\n  className?: string\n  count: number\n  handleCountUp: () => void\n  handleCountDown: ...",
          "link": "https://zenn.dev/anozon/articles/layer-react-counterapp",
          "publishedOn": "2021-09-18T13:58:01.000Z",
          "wordCount": 282,
          "title": "5層 ReactComponent と TypeScript でカウンター書いてみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--RJYDRHsx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:5%25E5%25B1%25A4%2520ReactComponent%2520%25E3%2581%25A8%2520TypeScript%2520%25E3%2581%25A7%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin",
          "author": "anozon",
          "description": "css animation の 100% や 0% などのキーワードに対して ts-styled-plugin のエラーが出たので対処しました。\nstyled-components で animation を扱う場合以下のように書きます。 (styled-components@5.2.1)\n\n      \n        \n        import styled, { keyframes } from 'styled-components'\n\nconst invert = keyframes`\n0% {\n\tbackground: white;\n\tcolor: black;\n}\n100...",
          "link": "https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin",
          "publishedOn": "2021-09-18T13:58:00.000Z",
          "wordCount": 103,
          "title": "styled-components の keyframes で ts-styled-plugin のエラーが出る",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--B3IbILWF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:styled-components%2520%25E3%2581%25AE%2520keyframes%2520%25E3%2581%25A7%2520ts-styled-plugin%2520%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/get-props-type-from-component",
          "author": "anozon",
          "description": "Storybook で props 型が必要だけど export したくなかったので。\n\n 方法 1\n\n      \n        \n        import { ComponentProps } from 'react'\n\ntype Props = ComponentProps<typeof TargetComponent>\n\n\n      \n      \n 方法 2(古い)\n\n      \n        \n        type Props = Parameters<typeof TargetComponent>[0]",
          "link": "https://zenn.dev/anozon/articles/get-props-type-from-component",
          "publishedOn": "2021-09-18T13:57:52.000Z",
          "wordCount": 42,
          "title": "component から props の型を取得する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--TRBimX2I--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:component%2520%25E3%2581%258B%25E3%2582%2589%2520props%2520%25E3%2581%25AE%25E5%259E%258B%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/gatsby-to-typescript",
          "author": "anozon",
          "description": "GatsbyJS で書いているこのブログを Typescript 移行しました。\n主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。\nGatsby.js を完全 TypeScript 化する - Qiita\n\n GraphQL Data, Page Component に型をつける\ngatsby-plugin-graphql-codegen を使用する方法と @graphql-codegen/typescript を使用する方法がありましたが前者を選びました。セットアップが簡潔に済んだので。\n\n PageQuery\n\n      \n        \n...",
          "link": "https://zenn.dev/anozon/articles/gatsby-to-typescript",
          "publishedOn": "2021-09-18T11:29:37.000Z",
          "wordCount": 97,
          "title": "GatsbyJS を Typescript に移行した際の Type 付け",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eTdFOYgC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:GatsbyJS%2520%25E3%2582%2592%2520Typescript%2520%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%25E9%259A%259B%25E3%2581%25AE%2520Type%2520%25E4%25BB%2598%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/fitty-in-react",
          "author": "anozon",
          "description": "fitty はコンテナに合わせてテキストのフォントサイズをフィットしてくれるライブラリです。\nrikschennink/fitty: ✨ Makes text fit perfectly\nそれを React で使うための hooks を書いた。\nGist fitty for react\n\n コード\n\n      \n        \n        import { useEffect, useRef } from 'react'\nimport fitty from 'fitty'\n\nexport function useFitty() {\n  const ref = useRef<...",
          "link": "https://zenn.dev/anozon/articles/fitty-in-react",
          "publishedOn": "2021-09-18T11:29:34.000Z",
          "wordCount": 113,
          "title": "fitty を React で使う useFitty hook",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NlK4FCvd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:fitty%2520%25E3%2582%2592%2520React%2520%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2520useFitty%2520hook%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/emoji-moji-count",
          "author": "anozon",
          "description": "アプリ\n文字頻度カウント(絵文字対応)\n\n\n 絵文字対応\n\"text\".split('') では絵文字が 1 文字として分割できません。\n\n      \n        \n        > \"😔\"\n'😔'\n> \"😔\".split('')\n[ '�', '�' ]\n\n\n      \n      punycode.js を使います。\n\n      \n        \n        const punySplit = (s: string) =>\n  punycode.ucs2.decode(s).map((v) => punycode.ucs2.encode(...",
          "link": "https://zenn.dev/anozon/articles/emoji-moji-count",
          "publishedOn": "2021-09-18T11:29:32.000Z",
          "wordCount": 147,
          "title": "絵文字を含めて文字数カウントするWebアプリ作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W3lvhCdf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%25B5%25B5%25E6%2596%2587%25E5%25AD%2597%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2581%25E3%2581%25A6%25E6%2596%2587%25E5%25AD%2597%25E6%2595%25B0%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2581%2599%25E3%2582%258BWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/clasp-init-feels",
          "author": "anozon",
          "description": "この記事では Clasp を使って GoogleAppScript のコードを手元で管理する方法を紹介します。\nClasp Command Line Interface using clasp | Google Developers\n\n 手順 1. 初期化する\n管理するディレクトリに移動してしてパッケージをインストールします。\nその後 Google アカウントでログインします。\n\n      \n        \n        yarn add @google/clasp -D\nclasp login\n\n\n      \n      プロジェクトのみに入れてる場合は以降の clasp ho...",
          "link": "https://zenn.dev/anozon/articles/clasp-init-feels",
          "publishedOn": "2021-09-18T11:29:30.000Z",
          "wordCount": 146,
          "title": "【Clasp】GoogleAppScript のコードをローカルで開発する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--qMrBgdQR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Clasp%25E3%2580%2591GoogleAppScript%2520%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/arrow-function-generics",
          "author": "anozon",
          "description": "エディタなどによってうまくハイライトされなかったときはこうする。\n\n      \n        \n        const double = <T>(v: T): [T, T] => [v, v]\nconst hello = () => <p>Hello</p>\n// ↑ハイライトがおかしい\n\n\n      \n      <T>を<T,>にする。\n\n\n      \n        \n        const double = <T,>(v: T): [T, T] => [v, v]\nconst...",
          "link": "https://zenn.dev/anozon/articles/arrow-function-generics",
          "publishedOn": "2021-09-18T11:29:28.000Z",
          "wordCount": 60,
          "title": "Arrow function で generics にすると HTML タグとして認識されてしまうときの tips",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cRTe8suZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Arrow%2520function%2520%25E3%2581%25A7%2520generics%2520%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%2520HTML%2520%25E3%2582%25BF%25E3%2582%25B0%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E8%25AA%258D%25E8%25AD%2598%25E3%2581%2595%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%2520tips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mura_chan/articles/93c6027b176ce6",
          "author": "mm1995tk",
          "description": "ことの発端\n\n      \n        \n        <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n  <Alert.Heading>...</Alert.Heading>\n  <p>\n    str...\n  </p>\n</Alert>\n\n\n      \n      React Bootstrapを使用している時にこんなコードを目にし、私はこう思いました。\n<Alert.Heading> ってなん...",
          "link": "https://zenn.dev/mura_chan/articles/93c6027b176ce6",
          "publishedOn": "2021-09-16T19:22:48.000Z",
          "wordCount": 138,
          "title": "Reactのライブラリでたまに見る<Component.Content />みたいなやつを調べた。~雰囲気でJSを書いている仲間へ届け~",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pakzO6Ov--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:mm1995tk%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:React%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25A7%25E3%2581%259F%25E3%2581%25BE%25E3%2581%25AB%25E8%25A6%258B%25E3%2582%258B%253CComponent.Content%2520%252F%253E%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2582%2584%25E3%2581%25A4%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%259F%25E3%2580%2582%7E%25E9%259B%25B0%25E5%259B%25B2%25E6%25B0%2597%25E3%2581%25A7JS%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BB%25B2%25E9%2596%2593%25E3%2581%25B8%25E5%25B1%258A%25E3%2581%2591%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dvRGRPZUxRTGV3TWRYYVg4c0RmelFtaXFVZFRPaThQQ3MxenMtZ3c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite",
          "author": "Takashi Toyofuku",
          "description": "ハマったのでメモ。\n以下のような Text Component があるとする。\nこのコンポーネントでは div をラップしているので、Props には HTMLDivElement の attributes をユニオンしており、onClick などをいちいち定義しなくてよいようにしている。\n\n      \n        \n        export type Props = React.HTMLAttributes<HTMLDivElement> & {\n  size: number;\n  weight?: Weight;\n  align?: Align;\n  c...",
          "link": "https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite",
          "publishedOn": "2021-09-16T13:32:34.000Z",
          "wordCount": 132,
          "title": "Reactでpropsにスプレッド構文を使った場合にclassNameが意図通り適用されない",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--aMYVvwBq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takashi%2520Toyofuku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:React%25E3%2581%25A7props%25E3%2581%25AB%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E6%25A7%258B%25E6%2596%2587%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25ABclassName%25E3%2581%258C%25E6%2584%258F%25E5%259B%25B3%25E9%2580%259A%25E3%2582%258A%25E9%2581%25A9%25E7%2594%25A8%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDE5M2Y3MTBiOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/beeeyan/articles/4e0737146199d7",
          "author": "beeeyan",
          "description": "完成形はこんな感じ\n\n動かして中途半端な位置だと他のパズルが動かせないのでご注意ください。\n完成すると、「完成!! Congratulations!!」と表示されます。\n私のポートフォリオサイトでも試せます。\n\n 本記事内容\nソースコードは公開しているので（上記のcodesandbox内のものも含め）実装方法についてはあまり触れていません。（コメントは残したつもり）\n参考情報とか、もしこのソースコードを利用する場合の注意点とか書いてます。\nどっちかって言うと、「作ってみた」要素が強いです\n\n 作った経緯\nReactで「コンポーネントをドラッグで動かす」をやってみたかった。\n動かせるU...",
          "link": "https://zenn.dev/beeeyan/articles/4e0737146199d7",
          "publishedOn": "2021-09-16T11:07:38.000Z",
          "wordCount": 240,
          "title": "Reactのinteractjsを使って3×3のスライドパズルを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--G2E1gsZ---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:beeeyan%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%25AEinteractjs%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A63%25C3%25973%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E3%2583%2591%25E3%2582%25BA%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTg0NTA1OGQzYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/manalink/articles/manalink-react-hook-form-v7",
          "author": "マナリンク Tech Blog",
          "description": "本記事ではReact Hook Form(v7)を使ったコンポーネント設計のアイデアについて話します。\nhttps://react-hook-form.com/jp/\nReact Hook Formはその名の通り、Hooksをベースにフォームのバリデーション設定を記述できるライブラリで、特にv7で大きな変更が入りました。そのため、本記事ではv7前提であることをタイトルで明記しています。\nHooksにフォームのロジックが切り離されることにより、理論的には、TSXで記述されたView層と、バリデーションを司るロジック層を切り離して実装することができるはずです。\nオンライン家庭教師マナリンクで...",
          "link": "https://zenn.dev/manalink/articles/manalink-react-hook-form-v7",
          "publishedOn": "2021-09-16T09:22:21.000Z",
          "wordCount": 408,
          "title": "React Hook Form(v7)を使ったコンポーネント設計案",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--lKYHIL5m--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%259E%25E3%2583%258A%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%2520Tech%2520Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520Hook%2520Form%2528v7%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E8%25A8%25AD%25E8%25A8%2588%25E6%25A1%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODNjZWUyZDUxMy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/d4bd396476c107",
          "author": "nekoniki",
          "description": "概要\n今回はNestJSからfirebase-adminを使って端末にプッシュ通知を送るモックを作成する手順の私的メモです。\n同様の構成でプッシュ通知の導通を試したい方もいるかなと思い記事にしました。\n前提条件としてFirebaseのプロジェクトは作成済みで、アプリ側にもFirebaseは組み込み済み(=プッシュ通知を受け取る準備ができている)ものとします。\n\n NestJSとは\n以下公式サイトです。\nhttps://nestjs.com/\n以下のような説明があります。\n\nA progressive Node.js framework for building efficient, ...",
          "link": "https://zenn.dev/nekoniki/articles/d4bd396476c107",
          "publishedOn": "2021-09-16T08:37:28.000Z",
          "wordCount": 336,
          "title": "【TS】NestJSでFirebaseを使ってプッシュ通知を送るモック作成",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--FCo8b4Py--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590TS%25E3%2580%2591NestJS%25E3%2581%25A7Firebase%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2597%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E9%2580%259A%25E7%259F%25A5%25E3%2582%2592%25E9%2580%2581%25E3%2582%258B%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794",
          "author": "ぴよまる",
          "description": "NestJSで構築した、ServerlessFrameworkを使ってデプロイするようなアプリケーションについて、普通のエンドポイントと別にバッチ処理を動かしたいことがありました。\n結論から言うとbatch処理用のhandlerを用意して\n\n 手法の比較\nバッチ処理というキーワードだけだと\n\nNestJSのTask Scheculingを使う\nNestJSにAPIの口を普通に作って、APIを定期実行するLambdaを外で作る\nAPIを定期実行するLambdaをserverlessで新しく用意する\nserverlessに新しいfunctionsの口を生やす\n\nみたいな手法が自分にはぱっと思...",
          "link": "https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794",
          "publishedOn": "2021-09-16T06:15:42.000Z",
          "wordCount": 101,
          "title": "NestJS + serverlessのアプリの一部にバッチ処理を入れる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--C7PNB1bL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B4%25E3%2582%2588%25E3%2581%25BE%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:NestJS%2520%252B%2520serverless%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E3%2581%25AB%25E3%2583%2590%25E3%2583%2583%25E3%2583%2581%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%2585%25A5%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWE2ZDhjM2Y2MC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/panda_program/articles/typescript-compiler-api",
          "author": "Panda_Program",
          "description": "Compiler API で yaml から型を自動生成する\nこの記事は TypeScript Compiler API を実際に使って TypeScript の型を自動生成する方法を紹介しています。\n記事内では Google Analytics のイベントの型の自動生成にトライしています。\n題材として GA を選んだのは、以前 Next.js に Google Analytics（GA） を導入する方法を紹介した記事でGA のイベントで使う型を yaml から自動生成するのはどうか と書いていたからです。\n正直なところ、GA のイベントに馴染みのない方もいらっしゃると思うので、最初...",
          "link": "https://zenn.dev/panda_program/articles/typescript-compiler-api",
          "publishedOn": "2021-09-16T02:00:57.000Z",
          "wordCount": 4051,
          "title": "TypeScript Compiler API で型を自動生成する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--HO6E0qz_--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Panda_Program%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%2520Compiler%2520API%2520%25E3%2581%25A7%25E5%259E%258B%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l6MVBBTkFPNzhHNkI2bGJoTUx2Q2xrWHRweU9vWXd1S3gyNjI2Rmc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/katoaki/articles/37a8cff3a8a32a",
          "author": "katoaki",
          "description": "はじめに\nブラケット記法でプロパティへアクセスしようとしたら「Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'xxx'. No index signature with a parameter of type 'string' was found on type 'xxx'」のエラーが出ました。\n対応について整理しました。\n\n やってみたこと\n\n エラーの再現\nエラーになった時のソースはこんな感じでした。\n\n      \n    ...",
          "link": "https://zenn.dev/katoaki/articles/37a8cff3a8a32a",
          "publishedOn": "2021-09-16T00:54:48.000Z",
          "wordCount": 274,
          "title": "TypeScriptでブラケット記法を使うときにハマったこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--7YkfaPun--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:katoaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25B1%25E3%2583%2583%25E3%2583%2588%25E8%25A8%2598%25E6%25B3%2595%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTU0ZTYyMTc2OC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/okmttdhr/articles/96506133e4efa0",
          "author": "okmttdhr",
          "description": "モノレポ管理のツールを検討したときのメモ\n\n Background\n自分が所属するチームで開発する JavaScript/TypeScript のプロダクトが増えてきて、同じような内容のリポジトリがいくつも存在している（n個とする）。\n変更を加えていくにつれて、それぞれの差分が大きくなり、以下のような問題が発生する。\n\n開発が止まっているプロジェクトの構成が古くなり、修正コストが発生する\n開発が複数同時進行している場合、同じような実装を手動で同期する必要がある\n\nこれらは共通の基盤等があれば効率的に（理想的にはn分の1の労力で）開発が可能であり、将来的なコストを考えると、いまのうちにその...",
          "link": "https://zenn.dev/okmttdhr/articles/96506133e4efa0",
          "publishedOn": "2021-09-15T22:44:41.000Z",
          "wordCount": 444,
          "title": "[TypeScript]モノレポ管理ツール比較検討",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1bTIVWgU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:okmttdhr%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AC%25E3%2583%259D%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E6%25AF%2594%25E8%25BC%2583%25E6%25A4%259C%25E8%25A8%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjk2ZmUyNzhhNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0",
          "author": "magurotuna",
          "description": "Copyright (c) 2018-2021 the Deno authors. MIT License.\n日本時間の昨日（2021 年 9 月 15 日）に Deno の v1.14.0 がリリースされました。\nhttps://deno.com/blog/v1.14\n詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。\n\n\nWeb Crypto API の追加\n\ndeno lint と deno fmt に対するカスタマイズオプションの追加\n\nURLPattern の実装\nネイティブ実装されたサーバーサイド WebSocket API の...",
          "link": "https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0",
          "publishedOn": "2021-09-15T17:25:27.000Z",
          "wordCount": 713,
          "title": "Deno 1.14.0 がリリースされたので新機能や変更点の紹介",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kZXFSi7V--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:magurotuna%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25201.14.0%2520%25E3%2581%258C%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E6%2596%25B0%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2584%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNUGF0cWN1MUh1d1dEcG5uVzRETFVxZlI5aDlOM1NFc3FmaWdYZkE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sunnyone/articles/40a60f08eb391e",
          "author": "sunnyone",
          "description": "TypeScriptでは、オーバーロードが行われていたりして、素直に定義したくない関数の型があったりする。例えば、こういう型。\n\n      \n        \n            interface LogFn {\n        <T extends object>(obj: T, msg?: string, ...args: any[]): void;\n        (msg: string, ...args: any[]): void;\n    }\n\n\n      \n      例えばこういう関数を何かしつつ呼びたいというとき、組み込みの型関数Parameter...",
          "link": "https://zenn.dev/sunnyone/articles/40a60f08eb391e",
          "publishedOn": "2021-09-15T15:39:05.000Z",
          "wordCount": 32,
          "title": "値を中継する関数の引数の型にParameters<T>を使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--nGSbBbko--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:sunnyone%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E5%2580%25A4%25E3%2582%2592%25E4%25B8%25AD%25E7%25B6%2599%25E3%2581%2599%25E3%2582%258B%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25ABParameters%253CT%253E%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKek9vWHNpcElZcTJGYmVnTXRTSnl0REIwNmMyalhqU1N4Z1g3OUY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2876c8f98eca56",
          "author": "空雲",
          "description": "MicroCMSとTypeScript\nMicroCMSのAPIをTypeScript上で扱う場合、設定したスキーマに沿って自分で型を書かなければなりません。\nこの作業はそれなりに手間がかかるので、自動化していきたいと思います。\n\n 今回使用しているソースコード\nhttps://github.com/SoraKumo001/microcms-test\n\n MicroCMSの設定\n\n サービスの作成\nまずはMicroCMS上でサービスを作成します。\n名前は早い者勝ち方式のようなので、空いている名前を設定します。\n\n開発確認用なのでプランは無料を選びます\n\n\n APIの作成\n今回はAPI...",
          "link": "https://zenn.dev/sora_kumo/articles/2876c8f98eca56",
          "publishedOn": "2021-09-15T14:42:47.000Z",
          "wordCount": 442,
          "title": "MicroCMSのAPIをTypeScriptで型カッチリに実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Mvi9GblA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:MicroCMS%25E3%2581%25AEAPI%25E3%2582%2592TypeScript%25E3%2581%25A7%25E5%259E%258B%25E3%2582%25AB%25E3%2583%2583%25E3%2583%2581%25E3%2583%25AA%25E3%2581%25AB%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kawarimidoll/articles/db250a329c2f22",
          "author": "kawarimidoll",
          "description": "Deno標準ライブラリのバージョン0.107.0が公開されました。\nhttps://github.com/denoland/deno_std/releases/tag/0.107.0\nこちらで増強されたcollectionsというモジュールを紹介します。\nhttps://deno.land/std@0.107.0/collections\nその名の通り、集合の扱いを支援してくれるモジュールです。\n本記事では0.107.0のリリースで追加された関数を紹介します。\n既存のものは以下の記事で解説していますので、あわせてご覧ください。\nhttps://zenn.dev/kawarimidoll/a...",
          "link": "https://zenn.dev/kawarimidoll/articles/db250a329c2f22",
          "publishedOn": "2021-09-15T04:40:43.000Z",
          "wordCount": 924,
          "title": "Deno標準ライブラリ0.107.0で増強されたcollectionsの紹介",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AewYH8k8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kawarimidoll%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25E6%25A8%2599%25E6%25BA%2596%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA0.107.0%25E3%2581%25A7%25E5%25A2%2597%25E5%25BC%25B7%25E3%2581%2595%25E3%2582%258C%25E3%2581%259Fcollections%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM3OWFjOGQ4Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/uki00a/articles/web-storage-api-in-deno",
          "author": "uki00a",
          "description": "はじめに\nDenoはv1.10からWeb Storage APIをサポートしています。\nこの記事ではDenoにおけるWeb Storage APIのサポートについて解説します。\n\n 前提\nこの記事はDeno v1.14を想定して記述されています。\n\n 基本的な使い方\n\n localStorage\nまず、localStorageの使い方について解説します。\n\n      \n        main.ts\n        localStorage.setItem(\"foo\", \"bar\");\nconsole.assert(localStorage.getItem(\"foo\") === \"...",
          "link": "https://zenn.dev/uki00a/articles/web-storage-api-in-deno",
          "publishedOn": "2021-09-14T22:38:56.000Z",
          "wordCount": 127,
          "title": "DenoのWeb Storage APIサポートとその将来について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0WjSW63l--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:uki00a%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25E3%2581%25AEWeb%2520Storage%2520API%25E3%2582%25B5%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E5%25B0%2586%25E6%259D%25A5%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGUzODk3MWRmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc",
          "author": "wok",
          "description": "この記事は、こちらの記事を改変したものになります。\nhttps://cloud.flect.co.jp/entry/2021/09/14/105249\n\nこんにちは。\n前回の記事では、Amazon Chime SDK JSを用いたビデオ会議システムやゲーム配信システム(Among us auto mute)において、複数ユーザのビデオ映像を単一の映像に合成することでデータ通信量を削減する方法をご紹介しました。\n今回は、データ通信量を削減する別の方法として、ビデオ映像の送信時には解像度を落として受信後に超解像技術を用いる方法を試みてみましたので、これを紹介したいと思います。\n下図が実際に...",
          "link": "https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc",
          "publishedOn": "2021-09-14T01:54:45.000Z",
          "wordCount": 134,
          "title": "WebRTC(Amazon Chime SDK JS)で超解像を使ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OztpcbK7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:wok%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:WebRTC%2528Amazon%2520Chime%2520SDK%2520JS%2529%25E3%2581%25A7%25E8%25B6%2585%25E8%25A7%25A3%25E5%2583%258F%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hZemxmeFk4WFJDTHJzM1VvRWI2YmI0cEVhem1kTDg5ejFXQnFZdVE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "author": "空雲",
          "description": "Firebaseを使えるようにするまで\n\n Firebaseでプロジェクトを作成\nFirebaseを利用すると、無料で以下のサービスに対応した認証を行えます。\n自力で一つ一つ対応するより遙かに簡単です。\n\n上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。\n\n Google認証の有効化\nFirebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。\n先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。\n\n\n アプリケーションの登録\n歯車ボタンからプロジェクトを設定を選びま...",
          "link": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "publishedOn": "2021-09-14T00:01:35.000Z",
          "wordCount": 342,
          "title": "Next.jsでFirebase経由でGoogle認証を利用する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYVZRDtq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Firebase%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7Google%25E8%25AA%258D%25E8%25A8%25BC%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/918416f96ee652",
          "author": "dozo",
          "description": "要素多過ぎ問題\n関連記事:\nRustが征くシリーズ過去記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\nSvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)  ← イマココ\n\n\n前回の記事でTypeScriptとrollup.js、WebAssemblyを繋いだ。\n次...",
          "link": "https://zenn.dev/dozo/articles/918416f96ee652",
          "publishedOn": "2021-09-13T21:52:39.000Z",
          "wordCount": 398,
          "title": "SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--N9SIwuvX--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Svelte%25E3%2581%25A7WebAssembly%25E3%2581%25A7TypeScript%25E3%2581%25A7Rollup%25E3%2581%25A7%253A%2520Rust%25E3%2581%258C%25E5%25BE%2581%25E3%2581%258F%25285%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "author": "azukiazusa",
          "description": "Vue 3が正式リリースされてから約1年が経過しました。\nVuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？\nこの記事ではVue 2からVue 3への移行手順を記述していきます。\n参考用のプロジェクトとして以下レポジトリを用意しました。\nhttps://github.com/azukiazusa1/vue3-migrate-test\nVue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。\n\n 移行ビルドを使用する\nVue 2からVue 3へ移行す...",
          "link": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "publishedOn": "2021-09-13T12:25:39.000Z",
          "wordCount": 953,
          "title": "Vue2のプロジェクトをVue3へマイグレーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WO_KQunr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592Vue3%25E3%2581%25B8%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b",
          "author": "Katsuma Narisawa",
          "description": "最近開発しているBtoB SaaSサービスの技術スタックを、RailsからNode.jsに移行した。\nこれにより、フロントエンドもバックエンドも全てをTypeScriptで統一することができた。\n特にNode.jsのWebバックエンドの構成について、まだまだ世の中に知見が少ない気がしているので記事にしておく。\n\n Webバックエンド - Node.js(TypeScript)\n\n Nexus/Apollo Server (Webサーバー)\nGraphQLサーバーとして、コードファーストなアプローチのApollo ServerラッパーであるNexusを使っている。\nhttps://nexu...",
          "link": "https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b",
          "publishedOn": "2021-09-13T01:01:28.000Z",
          "wordCount": 282,
          "title": "TypeScriptでWebサービス開発（Apollo Server/Prisma/Next.js etc...)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bymI1cDo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Katsuma%2520Narisawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:TypeScript%25E3%2581%25A7Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E9%2596%258B%25E7%2599%25BA%25EF%25BC%2588Apollo%2520Server%252FPrisma%252FNext.js%2520etc...%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dGd2NYR1FfN2V4bjdjdjY0OVh1cXBJMUZtcFF5ejQ1aTNIbE81Z3c9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117",
          "author": "みつよし",
          "description": "type UniqueId = string\ntype Obj = ...\n\nconst numberKeyMap = new Map<number, UniqueId>()\nconst stringKeyMap = new Map<string, UniqueId>()\nconst map = new Map<UniqueId, Obj>()\n\nfunction getObjByNumberKey(key: number): Obj | undefined {\n  const id = numberK...",
          "link": "https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117",
          "publishedOn": "2021-09-12T12:36:27.000Z",
          "wordCount": 70,
          "title": "[TypeScript] 複数のKeyから引くMap",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9B4jl2rx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%25A4%25E3%2582%2588%25E3%2581%2597%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%2520%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AEKey%25E3%2581%258B%25E3%2582%2589%25E5%25BC%2595%25E3%2581%258FMap%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvbS5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63",
          "author": "空雲",
          "description": "非同期処理の並列実行数に関して\n大量の処理をAPIに投げるような場合、非同期処理が行われているとすぐに次の処理の実行が可能になります。そのためDoS攻撃のようなリクエストを投げてしまう場合があります。かといって一件ずつ処理待ちをしていると、待機時間が馬鹿になりません。\nこういう場合に必要になってくるのが並列実行回数の制限です。\n\n よくある非同期待ちに関して\n最大並列実行数を制御する場合、よくある処理としては実行処理そのものをキューに積んで、最大数を制限しながらキューの中の処理を実行していく方式です。この方法の問題点は、処理内容が10万件とか大規模な処理が必要な場合に、10万件の実行...",
          "link": "https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63",
          "publishedOn": "2021-09-12T01:55:08.000Z",
          "wordCount": 141,
          "title": "[TypeScript]非同期処理(promise)の最大並列実行数を5行で制限",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--44Pko8Ur--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%2528promise%2529%25E3%2581%25AE%25E6%259C%2580%25E5%25A4%25A7%25E4%25B8%25A6%25E5%2588%2597%25E5%25AE%259F%25E8%25A1%258C%25E6%2595%25B0%25E3%2582%25925%25E8%25A1%258C%25E3%2581%25A7%25E5%2588%25B6%25E9%2599%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mackay/articles/1e8fcce329336d",
          "author": "マッケイ",
          "description": "こんにちは\nマッケイです。\nまとめまで書き終わった後に突如ページが消えて、まっさらのページを見ながら、それでもなお不屈の精神で書き上げた記事になります。\n\n はじめに\n僕が運営するReact Bootcampというコミュニティにて、useEffect has amissing dependencyというwarningを解消したいという声を聞きました。\n僕自身も体系だった情報がないかと探したところ、見当たらなかったのでこの記事を執筆しました。\n\n なぜwarningが発生する？\nそもそもなぜこのwarningが発生しているのでしょうか？\nこのwarningを出している本体は、ESLintで...",
          "link": "https://zenn.dev/mackay/articles/1e8fcce329336d",
          "publishedOn": "2021-09-11T16:20:49.000Z",
          "wordCount": 126,
          "title": "useEffect has amissing dependencyのwarningを解消する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IiiEdGiV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B1%25E3%2582%25A4%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:useEffect%2520has%2520amissing%2520dependency%25E3%2581%25AEwarning%25E3%2582%2592%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTI3Mjk1ZGZiZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/laiso/articles/715543d2cd5552",
          "author": "laiso",
          "description": "概要\nLaravel標準のフロントエンド環境を自分好みにカスタマイズします\n\n 方針\n\nReact+TypeScriptで画面を書く\nLaravel Jetstream、Breezeを使わない(Livewire/Inertia.jsやAlpine.js、Blade Componentsが付属して入ってくるので)\nBladeテンプレートは画面構成に使わない\nSPAにする\nSSRはしない\nLaravel Mixでアセットを管理する\n\nなぜこうするかというとフロントエンドの環境だけ分離できる状態を維持しておいて、あとで複数人開発への移行やデプロイ分割をしたいためです。\n\n NPMモジュール...",
          "link": "https://zenn.dev/laiso/articles/715543d2cd5552",
          "publishedOn": "2021-09-11T15:56:43.000Z",
          "wordCount": 218,
          "title": "Laravel 8のフロントエンド環境をReact+TypeScriptにする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dRH23dpK--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:laiso%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Laravel%25208%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592React%252BTypeScript%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDhlOThiNTFhNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gakuzzzz/articles/1fa87342be1f82",
          "author": "gakuzzzz",
          "description": "はじめに\n世のプログラミング言語には「分割代入(Destructuring Assignment)」と呼ばれる機構を持つものがあります。\nメジャーな所では ECMAScript/TypeScript や Python, PHP, Ruby などでしょうか。\n実のところ Scala と Kotlin はこの分割代入という言語機構を持っていません。代わりに別の機構によって似たような目的を達成しています。\nこの記事では両者がとったアプローチを比較してそれぞれの違いについて紹介します。\n使用する言語のバージョンは以下の通りです。\n\nTypeScript 4.4\n\nScala 3.0.2\n\nK...",
          "link": "https://zenn.dev/gakuzzzz/articles/1fa87342be1f82",
          "publishedOn": "2021-09-11T15:48:18.000Z",
          "wordCount": 461,
          "title": "ScalaとKotlinの分割代入(っぽい機構)の比較",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--XAb7PGOE--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:gakuzzzz%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Scala%25E3%2581%25A8Kotlin%25E3%2581%25AE%25E5%2588%2586%25E5%2589%25B2%25E4%25BB%25A3%25E5%2585%25A5%2528%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25E6%25A9%259F%25E6%25A7%258B%2529%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDI3ZDVkOWZjMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/bokutano26/articles/442f11f4ec69bf",
          "author": "bokutano26",
          "description": "こんにちは。この記事ではjavaScriptにおける等価演算子（==）と厳密等価演算子（===）の違いについて解説していきます。実際の現場では、等価演算子は非推奨としているところが多い印象です。その理由も以下の解説を読むことで理解できるかと思います。\n\n 等価演算子（==）と厳密等価演算子（===）の違い\nまず初めにMDNを見てみましょう。\nMDNには、等価演算子と厳密等価演算子の説明が以下のようにされています。\n\n 等価演算子(==)\n\n等価演算子 (==) は、二つのオペランドが等しいことを検査し、論理値で結果を返します。厳密等価演算子とは異なり、オペランドの型が異なる場合には型の変...",
          "link": "https://zenn.dev/bokutano26/articles/442f11f4ec69bf",
          "publishedOn": "2021-09-11T13:56:16.000Z",
          "wordCount": 62,
          "title": "==（等価演算子）と===（厳密等価演算子）の違い",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--p90GwqT4--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:bokutano26%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%253D%253D%25EF%25BC%2588%25E7%25AD%2589%25E4%25BE%25A1%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25EF%25BC%2589%25E3%2581%25A8%253D%253D%253D%25EF%25BC%2588%25E5%258E%25B3%25E5%25AF%2586%25E7%25AD%2589%25E4%25BE%25A1%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25EF%25BC%2589%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDdjYzVlNTc4Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuitosato/articles/fdbc464f31c292",
          "author": "Yuito Sato",
          "description": "はじめに\nas-safelyというライブラリを作成しました。\nこのライブラリを使うと、型判定に失敗したときはその場で例外を投げてくれます。\n危険なas(型Assertion)を撲滅し、真にタイプセーフなType Script環境を手に入れましょう。\nhttps://github.com/YuitoSato/as-safely\n\n      \n        \n        const str1: string = asSafely('1' as unknown, isString);\n// => OK\n\nconst str2: string = asSafely(1 as u...",
          "link": "https://zenn.dev/yuitosato/articles/fdbc464f31c292",
          "publishedOn": "2021-09-11T08:02:46.000Z",
          "wordCount": 458,
          "title": "TypeScriptの全てのasを撲滅するas-safelyというOSSを作ったゾォォ〜",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--mG3T6XoH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuito%2520Sato%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:TypeScript%25E3%2581%25AE%25E5%2585%25A8%25E3%2581%25A6%25E3%2581%25AEas%25E3%2582%2592%25E6%2592%25B2%25E6%25BB%2585%25E3%2581%2599%25E3%2582%258Bas-safely%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586OSS%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25BE%25E3%2582%25A9%25E3%2582%25A9%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDk1YjBmYTViNS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rpf_nob/articles/vscode-extension-js-console",
          "author": "のふのふ🀄",
          "description": "はじめに\nこの記事は以下を目的としています。\n\nVSCodeの拡張機能を作って公開する方法の簡単な説明\n作った拡張機能の宣伝\n\n\n どういうものを作ったのか❓\nJavaScript(TypeScript)でconsole.logなどの構文を簡単に挿入できるものを作りました。今まで使用していたほぼ同じような拡張機能があり、ちょっと機能追加したかったのですが、しばらく更新されていないようだったので自身で作り直して公開してみることにしました。\nここからインストールできますのでよかったらインストールして試してみてください🙇‍♂️\nhttps://marketplace.visualstudi...",
          "link": "https://zenn.dev/rpf_nob/articles/vscode-extension-js-console",
          "publishedOn": "2021-09-11T06:41:27.000Z",
          "wordCount": 252,
          "title": "【VSCode Extension】JavaScriptのconsoleを簡単に挿入できる拡張機能を作って公開してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ATKpl1pd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AE%25E3%2581%25B5%25E3%2581%25AE%25E3%2581%25B5%2520%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590VSCode%2520Extension%25E3%2580%2591JavaScript%25E3%2581%25AEconsole%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E6%258C%25BF%25E5%2585%25A5%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ljOVRTTU5ma1RXM2dfTTdFWFFwQ2kteFlLT2ZhcEVJZjhHazJmSWc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mamushi/articles/multiple_transfer",
          "author": "Daigo Wakabayashi",
          "description": "こんにちは、ダイゴと申します。\n先日、StripeAPI を使った山分けの決済（ 顧客：送金先 = １：n ）を実装する機会があったので、\nインプットした情報を忘れないうちに整理しておきたい、と思い記事にしました。\nどなたかの参考になれば幸いです。\n\n 実装する機能\nプラットフォーム型サービスで、以下のような決済要件を持つものとします。\n\n決済総額のうち、10%をプラットフォーム手数料として徴収\n残り 90%を複数の送金先へ均等に山分けする\n\n\n サービス全体のイメージ\n\n\n Customer\n顧客。購入者でありお金を支払うユーザー。上の図で緑。\n\n Platform\nその名の通りプラッ...",
          "link": "https://zenn.dev/mamushi/articles/multiple_transfer",
          "publishedOn": "2021-09-11T04:31:02.000Z",
          "wordCount": 423,
          "title": "【StripeAPI】複数の送金先への山分けを実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1qy0BDms--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Daigo%2520Wakabayashi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590StripeAPI%25E3%2580%2591%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E9%2580%2581%25E9%2587%2591%25E5%2585%2588%25E3%2581%25B8%25E3%2581%25AE%25E5%25B1%25B1%25E5%2588%2586%25E3%2581%2591%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dBM3BNMUQyWl85LXpWcWx5NVp6ci1mbldzQUpSWGY5M3FjZWxtPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuku/articles/4d2f665cf42385",
          "author": "Yuku Kotani",
          "description": "Namespace Import に補完を効かせる TypeScript Language Service Plugin[1]、typescript-plugin-namespace-import を作りました。\nそのモチベーションと使い方を紹介します。\n\n\nこの記事・製作物は Named Export と Default Export の是非について主張をするものではなく、それらの話題に関連して作ったものでもありません\n\n\n TL;DR\n\n普通のオブジェクトを名前空間として用いると Tree Shaking が効かずバンドルサイズが膨らむ\nNamespace Import を用いれば ...",
          "link": "https://zenn.dev/yuku/articles/4d2f665cf42385",
          "publishedOn": "2021-09-10T02:27:35.000Z",
          "wordCount": 280,
          "title": "Namespace Import に補完を効かせる TypeScript プラグインを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--smq8RmXo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuku%2520Kotani%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Namespace%2520Import%2520%25E3%2581%25AB%25E8%25A3%259C%25E5%25AE%258C%25E3%2582%2592%25E5%258A%25B9%25E3%2581%258B%25E3%2581%259B%25E3%2582%258B%2520TypeScript%2520%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lEQVVDNDRXNTlSbWgyMjVIR2ZycENZQmRlNUJNZ0VCaDl3TGY0PXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "author": "hanetsuki",
          "description": "2021/09/時点での Next.js + TypeScript の環境構築忘備録です。\n主な環境のバージョン\n\nnext: v11.1.0\ntypescript: v4.3.5\neslint: v7.32.0\n@emotion/react: v11.4.1\n\n\n 1.Next.jsの環境を作成\nhttps://nextjs.org/docs#setup\ntpescript用の環境作成コマンドよしなにやってくれる便利なやつ。\n\n      \n        \n        yarn create next-app --typescript\n\n\n      \n      \n ディレクト...",
          "link": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "publishedOn": "2021-09-09T10:47:54.000Z",
          "wordCount": 383,
          "title": "Next.js + TypeScript 環境構築 v11.1",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1TuHkiZq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520TypeScript%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520v11.1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takayuri/articles/af583f251ed64d",
          "author": "Take",
          "description": "Storybook、React初心者です。\nStoryook内でuseSelector部分をモックにして表示パターンを作成した時のメモです。\n(そもそもStorybookでそんなことするのが適切でないかもしれません。)\n\n 前提\n\n\"react\": 16.13.1\n\"storybook\": 5.3.19\n\"react-redux\": 7.2.0\n\n\n      \n        Fooコンポーネント(一部抜粋)\n        import * as selectors from \"src/selectors\"; // Stateのデータを加工してる関数がまとまっている\n\nexport ...",
          "link": "https://zenn.dev/takayuri/articles/af583f251ed64d",
          "publishedOn": "2021-09-09T08:49:27.000Z",
          "wordCount": 290,
          "title": "StorybookでuseSelectorのモックを追加",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--h1GHtOK3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Take%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Storybook%25E3%2581%25A7useSelector%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDIyOGRkNmY5Zi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "author": "博ノ助",
          "description": "触れる回数は多いけどいまだに覚えられないのでメモ\nこれよりいい方法いっぱいあると思います\n\n コマンド\n\n      \n        コマンドライン\n        $ npm install --save-dev jquery @types/jquery\n\n\n      \n      \n nuxt.config.js\n\n      \n        nuxt.config.js\n        + const webpack = require('webpack')\n\nexport default {\n// ...省略...\n// Build Configuration: https...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "publishedOn": "2021-09-08T12:44:09.000Z",
          "wordCount": 75,
          "title": "Nuxt.js+TypeScriptにjQueryを導入するルーティン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eRmbKyyh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt.js%252BTypeScript%25E3%2581%25ABjQuery%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryo_kawamata/articles/github-trending-bot",
          "author": "ryo_kawamata",
          "description": "📦 作ったもの\nGitHub Trendingに掲載されたリポジトリを定期的につぶやく Twitter Bot を作りました。\n全体のトレンドをつぶやく@gh_trending_と、JavaScript・TypeScript のトレンドをつぶやく@gh_trending_jsの 2 種類があります。\n\n\n\n@gh_trending_\n@gh_trending_js\n\n\n\n\n\n\n\n\n\n仕様はこちらです。\n\n30 分から 1 時間おきに GitHub Trending に掲載されているリポジトリをツイート\n一度ツイートたリポジトリは再度掲載されていても 1 週間はつぶやかない\n投稿内容は...",
          "link": "https://zenn.dev/ryo_kawamata/articles/github-trending-bot",
          "publishedOn": "2021-09-08T03:35:07.000Z",
          "wordCount": 668,
          "title": "GitHub Trendingを定期的につぶやくTwitter BotをFirebaseで作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0-72P1Us--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryo_kawamata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:GitHub%2520Trending%25E3%2582%2592%25E5%25AE%259A%25E6%259C%259F%25E7%259A%2584%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25B6%25E3%2582%2584%25E3%2581%258FTwitter%2520Bot%25E3%2582%2592Firebase%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTY3Y2IxMjRlZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/qsf/articles/65afdf6a71bbc6",
          "author": "たふみ",
          "description": "TL;DR\nNoInfer のような物があればいいのだが，ないのでこれを使う\nhttps://github.com/microsoft/TypeScript/issues/14829#issuecomment-322267089\n\n      \n        \n        export type NoInfer<T> = T & {[K in keyof T]: T[K]}\n\n\n      \n      \n Background\nものは違いますが，ReactのCustom Hooksを作っていて詰まりました．\n以下の例を見てください．\n\n      \n   ...",
          "link": "https://zenn.dev/qsf/articles/65afdf6a71bbc6",
          "publishedOn": "2021-09-07T18:25:35.000Z",
          "wordCount": 332,
          "title": "TypeScriptで型変数に期待していない型推論がきいてしまうとき",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cfeklSC---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%259F%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E5%259E%258B%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AB%25E6%259C%259F%25E5%25BE%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2584%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%258C%25E3%2581%258D%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g4ZUl0bk9kaXNIRnpLdjB4VG4wc2E0endabi1IZDZCWWowTHNMUkg0PXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuhr/articles/668dba202726bf",
          "author": "yuhr",
          "description": "TypeScriptの話です。default exportを使うことが有害であるかのような言説に異議を唱えるためにこの記事を書きました。\nあらかじめ断っておきますが、この記事はTypeScriptを使っているプロジェクトのモジュール構成に関する話です。npmに上げられているようなNode.jsパッケージ間でのimport/exportはまた別のエコシステムが関わってくる話なので、分けて考えてください。Denoにおけるimport/exportに関しては、この記事での議論がそのまま通用します。\n\n 基本的にdefault exportのみを使うべき\n筆者の考えでは、named export...",
          "link": "https://zenn.dev/yuhr/articles/668dba202726bf",
          "publishedOn": "2021-09-07T16:22:44.000Z",
          "wordCount": 361,
          "title": "named exportは有害だと考えられます",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YFMhcexC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yuhr%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:named%2520export%25E3%2581%25AF%25E6%259C%2589%25E5%25AE%25B3%25E3%2581%25A0%25E3%2581%25A8%25E8%2580%2583%25E3%2581%2588%25E3%2582%2589%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l2U2lnclBGSkhIOTRLRnhjWDk1d3Z1d3pMZnVKc091MUI4Nkg2PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/bull/articles/8f1d28c8cfcdf1",
          "author": "bull",
          "description": "基地局の位置情報を取得できる API を公開しました！\nに記載されているAPIを利用して位置情報を取得してみます。\n\n はじめに\n\n Soracom APIの使い方\nリファレンスが公開されているのでこちらから使い方を試してみることが可能です\nhttps://users.soracom.io/ja-jp/tools/api/reference/\n\n SoracomのAPIから基地局情報を取得するために必要なAPI\n少なくとも以下の3つのAPIを実行する必要がありました。\n\nAPIトークンの取得(認証キーを利用してAPIを実行してトークンを取得します)\n3G の場合： MCC（Mobile ...",
          "link": "https://zenn.dev/bull/articles/8f1d28c8cfcdf1",
          "publishedOn": "2021-09-06T14:02:36.000Z",
          "wordCount": 405,
          "title": "TypeScriptでSoracomの基地局の位置情報を取得できるAPIを実行する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Dl5gJF6l--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:bull%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:TypeScript%25E3%2581%25A7Soracom%25E3%2581%25AE%25E5%259F%25BA%25E5%259C%25B0%25E5%25B1%2580%25E3%2581%25AE%25E4%25BD%258D%25E7%25BD%25AE%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258BAPI%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g2MllRUHZOMXdGR25zMmFxNEpvOWI0VW96UTY4b3NfdlBOOFFqZUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "author": "matsutoba",
          "description": "nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。\n先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。\n\n やりたいこと\n\nボタンを押したらテキストが変わるコンポーネントを作る。\nボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい\n\n\n 動かした環境\n\nmacOS 11.5.2\nNode.js 14.17.0\nyarn 1.22.10\n\n後述の cr...",
          "link": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "publishedOn": "2021-09-06T11:24:10.000Z",
          "wordCount": 636,
          "title": "nextjs + typescript + jest + enzyme の最小サンプルを動かしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gNRMktEh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsutoba%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:nextjs%2520%252B%2520typescript%2520%252B%2520jest%2520%252B%2520enzyme%2520%25E3%2581%25AE%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM5ZDk0NGY4My5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/9b439fb4278ab9",
          "author": "hanetsuki",
          "description": "Gatsby.jsにEmotionを導入した際の忘備録です。\n今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。\nhttps://github.com/tsuki-lab/gatsby-emotion-sample\n\nEmotionの導入以降を参照したい場合は 1.Emotionをインストール から読み進めてください。\n\n\n本記事は、javascriptベースのGatsby.jsを対象としていますが、typescriptの環境でも同様に導入可能です。最後に、typescript対応の追記をしてあります。\n\nこの記事は以下のバージョン時点の情報です。...",
          "link": "https://zenn.dev/rabbit/articles/9b439fb4278ab9",
          "publishedOn": "2021-09-06T04:19:33.000Z",
          "wordCount": 276,
          "title": "Gatsby.js + Emotion で環境構築",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ri-yVb_q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Gatsby.js%2520%252B%2520Emotion%2520%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/articles/a4c59a294dcbae",
          "author": "k_touge",
          "description": "サマリー\nDocker Desktop （docker デーモン）を起動させておいて…\n\n      \n        zsh\n        % git clone https://github.com/sprout2000/react-ts.git\n% cd react-ts\n% docker-compose up\n\n\n      \n      localhost:3000 を開きましょう。これだけです。\nローカルに Node.js がインストールされていなかったり、インストールされていてもこのコンテナで利用されているバージョンとは異なっていたりしても同じ（仮想）環境でプロジェク...",
          "link": "https://zenn.dev/sprout2000/articles/a4c59a294dcbae",
          "publishedOn": "2021-09-06T03:23:34.000Z",
          "wordCount": 1054,
          "title": "Docker で React + TypeScript の開発環境",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LHKCVT0m--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k_touge%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Docker%2520%25E3%2581%25A7%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTkyNDAwNGE0Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/14bc23b488c95a",
          "author": "dozo",
          "description": "load_from_memoryを迂回すればなんとかなる\n関連記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\n\n\nこんな記事がある\nhttps://qiita.com/yokra9/items/f9e98a9b47fe2d1234b0\n(^_^;)煽ってんなぁ。。。\nVanillaJS(素のJSのこと), WA...",
          "link": "https://zenn.dev/dozo/articles/14bc23b488c95a",
          "publishedOn": "2021-09-05T23:55:11.000Z",
          "wordCount": 326,
          "title": "Rustのimage::load_from_memory遅すぎ問題",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--H2Uu7Js7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Rust%25E3%2581%25AEimage%253A%253Aload_from_memory%25E9%2581%2585%25E3%2581%2599%25E3%2581%258E%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/296u/articles/7175641f1c4492",
          "author": "296u",
          "description": "この記事について\nReactをtypescriptで始めたはいいものの、テストを書こうとすると、どういったテストを書けば良いのか、書いてもtypeエラーになることがままある。\nその度にドキュメントを読みに行ったり、エラー文を検索したりするのだが、毎回解決に時間がかかっていた。（特に最初の頃はJestの構文を間違えているのが問題なのか、enzymeの構文を間違えているのが問題なのかもわからず）\nそこで一度Jest側を体系的に勉強しなおそうと思い至った。\nせっかくなので、ドキュメンのうち「はじめに」部分の内容について、若干コードを付け足しながら記事にしてみようと思う。\n\n はじめに\n対象...",
          "link": "https://zenn.dev/296u/articles/7175641f1c4492",
          "publishedOn": "2021-09-05T23:48:26.000Z",
          "wordCount": 2308,
          "title": "[Typescript]Jest入門を進めてみる（前半）",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--UZHUGvdq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:296u%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypescript%255DJest%25E5%2585%25A5%25E9%2596%2580%25E3%2582%2592%25E9%2580%25B2%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25EF%25BC%2588%25E5%2589%258D%25E5%258D%258A%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOTM5YzBkZWU0Ny5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/eagle/articles/functor-in-ts",
          "author": "eagle",
          "description": "本記事について\nIMappableというインターフェースを定義することを動機として\n型レベル関数という概念を導入します。\n後半では型レベル関数を用いてApplicativeやMonadに相当するインターフェースの定義や、\n2引数以上の型レベル関数の定義を行ってその実用可能性を示します。\n\n IMappable導入の動機と障害\n次の2つの関数を考えます。\n\n      \n        \n        const mapArray: <A, B>(f: (a: A) => B) => (fa: A[]) => B[] =\n  (f) => (fa)...",
          "link": "https://zenn.dev/eagle/articles/functor-in-ts",
          "publishedOn": "2021-09-05T10:53:35.000Z",
          "wordCount": 1350,
          "title": "TypeScriptでIMappable(Functor)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pUJ5asaT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:eagle%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7IMappable%2528Functor%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTFmZjAxNGQyZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "author": "みずねこ",
          "description": "この記事について\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nApexChartsをNext.jsで使う方法\nデータをべた書きしてグラフ化\nデータをFirestoreから取得してグラフ化\n\n\n 参考にした記事\n\nhttps://qiita.com/IchiLab/ite...",
          "link": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "publishedOn": "2021-09-05T10:10:46.000Z",
          "wordCount": 760,
          "title": "Cloud Firestore×Apexchartsでグラフ描画する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vcRhejeS--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Cloud%2520Firestore%25C3%2597Apexcharts%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sterashima78/books/9dd0db90a6e532",
          "author": "sterashima78",
          "description": "Typescript での開発を普段行っている方向けに関数型プログラミングの要素の一部を紹介するものです。\n関数型言語やその背景にある理論を紹介することは意図していません。\nそのあたりのポリシーは『はじめに』に記載しているので御覧ください。\n\n有料設定にしていますが基本的にはすべての章を無料で公開するつもりです。\n気が向いた方や内容の充実を希望する方は支援いただけると幸いです。",
          "link": "https://zenn.dev/sterashima78/books/9dd0db90a6e532",
          "publishedOn": "2021-09-05T09:09:21.000Z",
          "wordCount": 18,
          "title": "[WIP] Typescriptで書く関数型プログラミング",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NwVWwFv1--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8yMmE4OTg5OGMwLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/2dea91c4949604",
          "author": "hanetsuki",
          "description": "以前まで、Emotion を用いてGatsby.jsを使っていたのですが、\niricoさんの「ReactのCSSの選択肢を比較してみた」という記事を読んで、Linariaに興味を持ち始めました。\nzero runtimeとのことで、パフォーマンス向上が期待できるのは嬉しい点です。\nhttps://linaria.dev/\n今回は、LinariaとGatsbyの組み合わせでの記事が少なかったので忘備録としてこの記事を残します。\n今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。\nhttps://github.com/tsuki-lab/gatsby-...",
          "link": "https://zenn.dev/rabbit/articles/2dea91c4949604",
          "publishedOn": "2021-09-05T08:36:45.000Z",
          "wordCount": 402,
          "title": "Gatsby.js + TypeScript + Linaria で環境構築",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zT421Ur1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Gatsby.js%2520%252B%2520TypeScript%2520%252B%2520Linaria%2520%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/b5dc5e642e8d4e",
          "author": "arark",
          "description": "以前超型安全firestoreができたと言った者なんですが、クエリも型安全にできたので紹介します。\n例えばfirestoreでクエリするとき、where(age, ==, 30)したからtypescriptでもage:30で型ついてくんねえかな〜〜〜〜〜〜〜〜〜〜って思ったことある人人いませんか。これができます。さらに、firestore特有のクエリの制限、例えばage > 30とheight < 150を同時にできないみたいなそういうのも検知します。\n\n 準備\n\n      \n        \n        npm i firefuse firebase@9\n\n\n    ...",
          "link": "https://zenn.dev/arark/articles/b5dc5e642e8d4e",
          "publishedOn": "2021-09-05T07:44:14.000Z",
          "wordCount": 403,
          "title": "firestoreの型安全クエリができた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--u_LHo7hL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:firestore%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "author": "みずねこ",
          "description": "この記事について\n初めまして、みずねこです。\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nFirebaseのアプリ作成と初期設定\nFirebase Authenticationで認証機能を実装\nMateria-UIで認証画面のデザイン\n\n\n 参考に...",
          "link": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "publishedOn": "2021-09-05T04:36:15.000Z",
          "wordCount": 400,
          "title": "Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9s_NIaOG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%25E3%2581%25A8Firebase%2520%2520Authentication%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%25BB%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%258D%25E8%25A8%25BC%2528Cookie%2529%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/356a13c38a612b",
          "author": "arark",
          "description": "準備\n\n      \n        \n        export type Extends<E, A> = A extends E ? true : false;\nexport type NotExtends<E, A> = A extends E ? false : true;\nexport type Exact<A, B> = Extends<A, B> extends true\n  ? Extends<B, A> extends true\n    ? true\n    : false\n  : false;\nexpo...",
          "link": "https://zenn.dev/arark/articles/356a13c38a612b",
          "publishedOn": "2021-09-05T03:19:16.000Z",
          "wordCount": 533,
          "title": "型レベルユニットテストのススメ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ixRNN1X3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsuei/articles/908278e0c22eec",
          "author": "matsuei",
          "description": "FirestoreではDocumentのSnapShotから、そのDocumentに紐づくSubCollectionを取得出来ないようになっています。\nクエリで特定のDocumentのSnapShotを取得した後にSubCollectionを取得するには一手間必要なので、その方法を紹介します。\n\n 例に使うデータ構造\nルートにUsersコレクションを持ち、各ユーザードキュメントがSubCollectionでPetsを持つデータ構造を考えます。\n\n\n\nCollection\nDocument\nData(key)\nData(value)\nSubCollection\nDocument\nData(...",
          "link": "https://zenn.dev/matsuei/articles/908278e0c22eec",
          "publishedOn": "2021-09-05T02:30:12.000Z",
          "wordCount": 92,
          "title": "FirestoreでDocumentのSnapShotからSubCollectionを取得する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--VUDl2dn0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsuei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Firestore%25E3%2581%25A7Document%25E3%2581%25AESnapShot%25E3%2581%258B%25E3%2582%2589SubCollection%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzAxNzlhNjMwYS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/stomita/articles/9d1408c3447cd3",
          "author": "Shinichi Tomita",
          "description": "概要\nCamelCase<S>を TypeScriptのtemplate literal typesで実装するのは、ネット上にいくつかサンプルコードであがっているのを見たが、見つけたものはすべて不完全だった。types-festに含まれているCamelCase<S>もやはりおかしい。\nとはいえ正確なCamelizationの定義というものがあるのかどうかもよく知らない。なので、npmで公開されているcamelcase の動作に近づけたCamelCase<S>の型定義を作成してみた。\nポイントは以下\n\n複数区切り文字('-', '_', '.')に対...",
          "link": "https://zenn.dev/stomita/articles/9d1408c3447cd3",
          "publishedOn": "2021-09-04T23:09:06.000Z",
          "wordCount": 168,
          "title": "正確なCamelCaseのTemplate Literal Type定義を目指した",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8zNQs2C8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Shinichi%2520Tomita%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E6%25AD%25A3%25E7%25A2%25BA%25E3%2581%25AACamelCase%25E3%2581%25AETemplate%2520Literal%2520Type%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E7%259B%25AE%25E6%258C%2587%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNMC1DR0FuaEc0TmQ2R2NGREtPUUp6ZHRqYzhNaTYzU21IRVp1c1E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "author": "Kyohei",
          "description": "Jikan API(public API)を使ってTypescriptを勉強します。\n基本は検索機能を使ってAnime Objectを取得します。\n検索はカスタムフックを作ります。(importは省略してます。)\n\n      \n        \n        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {\n    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...",
          "link": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "publishedOn": "2021-09-04T16:04:27.000Z",
          "wordCount": 164,
          "title": "Typescript + React + Jikan API で練習プロジェクト",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NOQZSbVk--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%2520%252B%2520React%2520%252B%2520Jikan%2520API%2520%25E3%2581%25A7%25E7%25B7%25B4%25E7%25BF%2592%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87",
          "author": "nimusuke6",
          "description": "Node.js（+Yarn）のインストール\n\n\nanyenvをインストール\nanyenvでnodenvをインストール\nnodenvでNode.jsをインストール\n\nYarnをインストール\n\n\n      \n        \n        npm install -g yarn\n\n\n      \n      \n Reactプロジェクトの作成\n\n      \n        \n        npx create-react-app my-app --template typescript\ncd my-app\nyarn start\n\n\n      \n      \n      \n    ...",
          "link": "https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87",
          "publishedOn": "2021-09-04T12:44:25.000Z",
          "wordCount": 112,
          "title": "PhpStormでReact開発環境を整える",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uynC6bOl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nimusuke6%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:PhpStorm%25E3%2581%25A7React%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pqWktNZjVMUU9ZMERGMGd6eGZvU29jV003TndXV0xXMUhwWEFOZVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/fujiyama/articles/bf26790ed81964",
          "author": "Fujiyamayama",
          "description": "Qsって何？\n\nnpm公式\n\nクエリの解析，文字列化をするライブラリです．\n使っていて非常に便利なので一旦まとめようと思います．\n\n 基本的な使い方\n\n      \n        \n        import qs from 'qs';  // (以下省略)\n\nconst obj = qs.parse('a=c');  // { a: 'c' }\n\nconst str = qs.stringify(obj);  // 'a=c'\n\n\n      \n      簡単に言うと，parseはURLなどの文字列をオブジェクトに変換するメソッドで， stringifyはオブジェクトをURL...",
          "link": "https://zenn.dev/fujiyama/articles/bf26790ed81964",
          "publishedOn": "2021-09-04T12:30:58.000Z",
          "wordCount": 700,
          "title": "URLを解析するQsを丁寧に説明してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Ru1s29JN--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Fujiyamayama%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:URL%25E3%2582%2592%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%2599%25E3%2582%258BQs%25E3%2582%2592%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODY3NDIzNGYyYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gomi_ningen/articles/f1c285f586215b",
          "author": "ゴミ人間",
          "description": "Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする際の記述方法がわからなくて 30 分くらい溶けたのでメモっておきます。\n\n 配列\n\n      \n        \n        export interface AppParameters {\n    items: string[]\n}\n\nconst AppParametersSchema: JTDSchemaType<AppParameters> = {\n    properties: {\n        items: { elements: { type: 'string' }...",
          "link": "https://zenn.dev/gomi_ningen/articles/f1c285f586215b",
          "publishedOn": "2021-09-04T07:30:17.000Z",
          "wordCount": 433,
          "title": "Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--I0DWSHVd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%25B4%25E3%2583%259F%25E4%25BA%25BA%25E9%2596%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Ajv%2520%25E3%2581%25AE%2520JTDSchemaType%2520%25E3%2581%25A7%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AA%2520JSON%2520%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pVQm9rTjV0TTBhUzgycGdtX3FSNV9BLVZiZGNJekNGNHhBaUZ6PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "author": "Ren Shimosawa",
          "description": "ページ内の文字列を検索して、それだけ残す\n\n こんなかんじに検索して、絞り込むものを作ります。\n\n\n前提として、環境は\n・Next.js\n・TypeScript\nとなっています。\n※アイコンとかは違うコンポーネントなので省略して書きます。\n\n      \n        index.tsx\n        import styles from './SearchForm.module.scss'\nimport cn from 'classnames'\n\nexport interface Props = {\n  placeholder?: string\n  className?: st...",
          "link": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "publishedOn": "2021-09-03T13:05:34.000Z",
          "wordCount": 141,
          "title": "ページ内の文字列を検索してフィルタリングするコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--go-MzjS5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Ren%2520Shimosawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E5%2586%2585%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E6%25A4%259C%25E7%25B4%25A2%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ptcmlXRGR5UjRXLUdpUHd4eUZHbGphX1Q0cUVRS3hqcXhNU1NPPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb",
          "author": "k_touge",
          "description": "サマリー\nDocker Desktop （docker デーモン）を起動させておいて…\n\n      \n        zsh\n        % git clone https://github.com/sprout2000/cra.git\n% cd cra\n% docker-compose up\n\n\n      \n      localhost:3000 を開きましょう。これだけです。\nhttps://github.com/sprout2000/cra\n\nこのコンテナの実行を停止するには以下のようにしてください。\n\n      \n        bash\n        ^C  ...",
          "link": "https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb",
          "publishedOn": "2021-09-03T09:08:44.000Z",
          "wordCount": 485,
          "title": "Docker で React + TypeScript の開発環境【入門編】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--t5X1G3Zg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k_touge%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Docker%2520%25E3%2581%25A7%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2580%2590%25E5%2585%25A5%25E9%2596%2580%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTkyNDAwNGE0Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/umezo/articles/dc452d9a1a24f2",
          "author": "umezo",
          "description": "やりたいこと\n\n      \n        \n        type T1 = {\n    a: {\n        a1: string;\n\ta2: number;\n    };\n    b: {\n        b1: string;\n        b2: number;\n    }[];\n};\n\ntype T2: DeepPartial<T1>;\n\nconst t2: T2 = {\n    a: {\n        a2: \"1\",\n    },\n    b: [\n        {\n\t    b2: 1\n\t}\n    ],\n};\n\n\n      \n     ...",
          "link": "https://zenn.dev/umezo/articles/dc452d9a1a24f2",
          "publishedOn": "2021-09-03T07:14:04.000Z",
          "wordCount": 72,
          "title": "TypeScriptのPartialを再帰的にするやつ。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9mXxMU1P--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:umezo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AEPartial%25E3%2582%2592%25E5%2586%258D%25E5%25B8%25B0%25E7%259A%2584%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hmRUZCbmZtcERXLXlGRUtmOUR0MUF0MDZJR3lNdlJWY0pGYnV4Q0E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/umezo/articles/06bd73b3a02be3",
          "author": "umezo",
          "description": "やりたいこと\nこういうことをしたい。\n\n      \n        \n        type T1 = {\n    a: number,\n    b: string,\n};\n\ntype T2 = PickUpByType<T1, number>;\n\nconst t2: T2 = {\n    a: 1,\n};\n\n\n      \n      \n 解決\n実装はこう\n\n      \n        \n        type KeysByType<T, Type> = {\n  [key in keyof T]: T[key] extends Type ? key ...",
          "link": "https://zenn.dev/umezo/articles/06bd73b3a02be3",
          "publishedOn": "2021-09-03T06:42:39.000Z",
          "wordCount": 119,
          "title": "TypeScriptのPickをTypeで指定できるやつ。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kIATZRjC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:umezo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AEPick%25E3%2582%2592Type%25E3%2581%25A7%25E6%258C%2587%25E5%25AE%259A%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hmRUZCbmZtcERXLXlGRUtmOUR0MUF0MDZJR3lNdlJWY0pGYnV4Q0E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rgbkids/articles/3ab4c91b3b028c",
          "author": "vteacher",
          "description": "原文を元に、会話風（入門編によくある感じ）にしたてあげました。\nわかりにくいところは説明を足しています。\n原文：\nhttps://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html\n\n あいさつ\n🙍‍♀️「TypeScriptを使用して簡単なWebアプリケーションを構築することから始めましょう」\n🙂「うう…TypeScriptって、使っていないとなんとなくマウントを取られた感じがするあれですね」\n🙍‍♀️「そうですね。小さいストレスでもバグの元。フロントエンドの開発にTypeScriptは必須...",
          "link": "https://zenn.dev/rgbkids/articles/3ab4c91b3b028c",
          "publishedOn": "2021-09-03T03:50:41.000Z",
          "wordCount": 346,
          "title": "「5分でTypeScript」を会話風に説明してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W2-24eUx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:vteacher%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%258C5%25E5%2588%2586%25E3%2581%25A7TypeScript%25E3%2580%258D%25E3%2582%2592%25E4%25BC%259A%25E8%25A9%25B1%25E9%25A2%25A8%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZZXAwYXhYZ084ZHlWVVJsbndsanVacFlaRmF4ZU14YV92Z3JDSHc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/26dfda35b90377",
          "author": "nekoniki",
          "description": "はじめに\n今回はReactNativeアプリから端末のカレンダーへイベントを登録する方法について紹介します。\n会議やイベント情報などを表示するようなタイプのアプリでは、OSのカレンダーと同期を行いたいケースも多いので役立つかと思います。\n\n 使用するライブラリ\n使用するライブラリはreact-native-calendar-eventsです。\n端末内のカレンダー情報の取得から、そこにイベントを追加するまでを行うことができます。\nhttps://github.com/wmcmahan/react-native-calendar-events\n\n インストール\n以下コマンドでインストール...",
          "link": "https://zenn.dev/nekoniki/articles/26dfda35b90377",
          "publishedOn": "2021-09-03T01:20:02.000Z",
          "wordCount": 209,
          "title": "【RN】端末のカレンダーにイベントを追加する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gmAljGGz--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590RN%25E3%2580%2591%25E7%25AB%25AF%25E6%259C%25AB%25E3%2581%25AE%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%25E3%2581%25AB%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/heavenosk/articles/headless-ui-drawer",
          "author": "へぶん",
          "description": "Headless UI + Tailwind CSS を組み合わせてドロワーを楽に実装できたので紹介します。\n以下のような Twitter っぽいのドロワーを作成しました。\nhttps://twitter.com/heavenOSK/status/1433431433146605571?s=20\n\n Headless UI とは\nHeadless UI はスタイルを排除したコンポーネント集で、Tailwind CSS と相性がいいとのことです。\nhttps://headlessui.dev/\n\n スタイルを排除した設計\n各コンポーネントのスタイルを切り替えるタイミングを抽象化してくれてい...",
          "link": "https://zenn.dev/heavenosk/articles/headless-ui-drawer",
          "publishedOn": "2021-09-02T17:40:36.000Z",
          "wordCount": 444,
          "title": "Headless UI + Tailwind CSS で Twitter 風のドロワーを作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wxOlXCoD--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B8%25E3%2581%25B6%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Headless%2520UI%2520%252B%2520Tailwind%2520CSS%2520%25E3%2581%25A7%2520Twitter%2520%25E9%25A2%25A8%25E3%2581%25AE%25E3%2583%2589%25E3%2583%25AD%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hoMWZIZ0JrazVrQ3N2c2dQYS10azVkMG0yTk02ZHBDM3BBWXdKPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Vim」のフィード",
      "feedUrl": "https://zenn.dev/topics/vim/feed",
      "siteUrl": "https://zenn.dev/topics/vim",
      "articles": [
        {
          "id": "https://zenn.dev/hasu_83/articles/how-to-use-skk-in-vim",
          "author": "はす",
          "description": "突然ですが、昨日こんなツイートをしました。\nhttps://twitter.com/83_hasu/status/1443533878401011712\nこのツイートが筆者の想像よりも反応があったので、今回はvimにSKKという日本語IME環境を構築する方法を記事にしていきます。\n\n SKKってなんぞや？？\n多分これを見ている読者のほとんどがSKKを知らないと思います(筆者もvim-jpに入るまで知らなかった)\n\nSKK（エスケイケイ、Simple Kana to Kanji conversion program）とは、オープンソースで開発されている日本語入力システム（日本語入力メソッド...",
          "link": "https://zenn.dev/hasu_83/articles/how-to-use-skk-in-vim",
          "publishedOn": "2021-09-30T23:01:27.000Z",
          "wordCount": 198,
          "title": "詳説 最新のVim+SKKで日本語入力する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--J8gwTU1d--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AF%25E3%2581%2599%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E8%25A9%25B3%25E8%25AA%25AC%2520%25E6%259C%2580%25E6%2596%25B0%25E3%2581%25AEVim%252BSKK%25E3%2581%25A7%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%25E5%2585%25A5%25E5%258A%259B%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjRhYmVjN2IwOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/abcd/articles/55660f68a6a113",
          "author": "ryo",
          "description": "初めに\nVimのテーマをforkしていじったものの、その変更がちゃんと反映されなかったので覚え書き。\n\n 環境\n\n      \n        \n        OS: WSL2 Ubuntu 20.04.3 LTS\nVim: 8.1\nプラグインマネージャー: dein.vim\n\n\n      \n      \n 解決方法\n~/.cache/dein/repos/github.com/ユーザー名/リポジトリ名 を削除する。\nおそらく編集する前に一度cloneしたものが残っていた。\n削除した後にVimを開くことでもう一度cloneされ、最新のものが適用された。\n:call dein#re...",
          "link": "https://zenn.dev/abcd/articles/55660f68a6a113",
          "publishedOn": "2021-09-29T14:39:04.000Z",
          "wordCount": 32,
          "title": "Vimのプラグインの変更が反映されない(dein.vim)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vJ6H9fzh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vim%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25AE%25E5%25A4%2589%25E6%259B%25B4%25E3%2581%258C%25E5%258F%258D%25E6%2598%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2528dein.vim%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2d4OGdOWl9rTy00M0J0dTdUdUg2dFVxdXdCZ2dpTlppX2ExdmJjVlE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tdrk18/articles/xcode-13-vim-mode",
          "author": "tdrk18",
          "description": "Xcode 13 で vim mode を使う\nXcode 13 で公式に vim mode がサポートされました。\nhttps://developer.apple.com/xcode/\n\nVim mode\nMany common key combinations and editing modes familiar to Vim users are supported directly within the code editor, using the new bottom bar to show mode indicators.\n\n\n vim mode を有効にする\nEditor...",
          "link": "https://zenn.dev/tdrk18/articles/xcode-13-vim-mode",
          "publishedOn": "2021-09-26T11:44:06.000Z",
          "wordCount": 77,
          "title": "Xcode 13 vim mode",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--JgwdhYXO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:tdrk18%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Xcode%252013%2520vim%2520mode%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lHSmhpODY5RjY2UjVGQk0tczB2VTlsNnRlV242TFl2OU90SFkzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kato_k/articles/3aa7217a1636ca",
          "author": "kat0h",
          "description": "初めに\nVim/NeoVim両対応のMarkdownプレビュープラグインを作成しました。\nこの記事では作った経緯とこのプラグインについて紹介します。\n\nhttps://github.com/kat0h/dps-bufpreview.vim\n\n 使い方\n\n インストール\nこのプラグインはDenoとdenops.vimに依存しています。\n初めにDenoを公式のインストールからインストールしてください。\ndenops.vimは通常のVimプラグインと同じようにインストールしてください。\nPlug-Vim:\n\n      \n        \n        Plug 'vim-denops...",
          "link": "https://zenn.dev/kato_k/articles/3aa7217a1636ca",
          "publishedOn": "2021-09-26T10:31:19.000Z",
          "wordCount": 76,
          "title": "Vim/NeoVimでMarkdownをプレビューするプラグインを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2kJktU2s--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kat0h%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vim%252FNeoVim%25E3%2581%25A7Markdown%25E3%2582%2592%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2581%2599%25E3%2582%258B%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDA1MWRmMmFlMi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hisasann/articles/neovim-fvim-neovide",
          "author": "Yoshiyuki Hisamatsu",
          "description": "ふだんは Neovim でドキュメントを書いたりプログラミングをしたりしていますが、ちょっと前に見て放置していた Neovide という Neovim の GUI のカーソル移動がとにかくかっこいいので試してみました。\n\n neovide\nneovide/neovide: No Nonsense Neovim Client in Rust\nhttps://www.youtube.com/watch?v=uMtfl6vpT-Q\n動画を撮ってみました。\nどうですか？雰囲気は伝わったかなーと思います。\n一部アイコンフォントが当たっていませんがいったんは気にしないでおきます。\nカーソルがかっちょ...",
          "link": "https://zenn.dev/hisasann/articles/neovim-fvim-neovide",
          "publishedOn": "2021-09-22T13:20:53.000Z",
          "wordCount": 163,
          "title": "カーソル移動がとにかく気持ちいいNeovim - Neovide",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--l-Kh4lV2--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yoshiyuki%2520Hisam...%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25AB%25E3%2583%25BC%25E3%2582%25BD%25E3%2583%25AB%25E7%25A7%25BB%25E5%258B%2595%25E3%2581%258C%25E3%2581%25A8%25E3%2581%25AB%25E3%2581%258B%25E3%2581%258F%25E6%25B0%2597%25E6%258C%2581%25E3%2581%25A1%25E3%2581%2584%25E3%2581%2584Neovim%2520-%2520Neovide%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2c2Q2JhUk5IRFRFSUwtSDRvSU9mWDkyUUxfQzJILVhKLWlDb0NxWHc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener",
          "author": "oppara",
          "description": "はじめに\nthinca/vim-quickrun をアップデート後、実行時に水平分割できなくなっていたので対応。\n\n 動かなくなった設定\n\n      \n        \n        let g:quickrun_config = {'*': {'split': ''}}\n\n\n      \n      \n 水平分割できるようにした設定\n\n      \n        \n        let g:quickrun_config = get(g:, 'quickrun_config', {})\nlet g:quickrun_config._ = {\n      \\ 'outputt...",
          "link": "https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener",
          "publishedOn": "2021-09-19T01:05:24.000Z",
          "wordCount": 78,
          "title": "vim-quickrun 実行時に水平分割で表示する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NPBBJaQn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:oppara%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim-quickrun%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AB%25E6%25B0%25B4%25E5%25B9%25B3%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyYTRKSGo5UzNEckZ0dTlwcUd5d0V4ZEZZTjZmS0JUQjBkTkthdFE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vimfilter-rename",
          "author": "anozon",
          "description": "vimfiler の rename 機能が便利で、複数ファイルを自由自在にリネームできます。\nShougo/vimfiler.vim: Powerful file explorer implemented by Vim script\n\n やってみる\n\n.js ファイルを .tsx に書き換えます。\n\n 動画\noembed: https://www.youtube.com/watch?v=BxSkWfem7uI&feature=youtu.be\n\n\nvim target/dir ディレクトリを開く\n\n* 全ファイル選択\n\nr リネームモード\n\nvim 編集の例 1 解説\n\n\n/js...",
          "link": "https://zenn.dev/anozon/articles/vimfilter-rename",
          "publishedOn": "2021-09-18T13:58:17.000Z",
          "wordCount": 82,
          "title": "vim でディレクトリ内のファイルを一括リネームする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_IgjCWJH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E5%2586%2585%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25B8%2580%25E6%258B%25AC%25E3%2583%25AA%25E3%2583%258D%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vim-macro-save",
          "author": "anozon",
          "description": "1 度作ったマクロを保存して、 vim を開き直したときも使いまわしたいときの方法。\nマクロ @b に保存する例で説明します。\n\n .vimrc に保存する\n\n q で macro を記録する\nqb → 操作 → q で記録。\n\n .vimrc に追記する\n\n      \n        \n        let @b = 'Gk$F_lvEygg$p\n\n\n      \n      \n (外部クリップボードにコピーしたりしたいとき)\n\n      \n        \n        \"bpyy\n\n\n      \n      \"b b を選択 →p 貼り付け → yy コピーで外部クリップ...",
          "link": "https://zenn.dev/anozon/articles/vim-macro-save",
          "publishedOn": "2021-09-18T13:58:16.000Z",
          "wordCount": 59,
          "title": "vim の q マクロを保存して使いまわす",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--hQdyanqP--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25AE%2520q%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%2592%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25BE%25E3%2582%258F%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vim-cannot-paste",
          "author": "anozon",
          "description": "恐らく visual mode で選択した範囲がコピーされています。\nclipboard に autoselect が設定されているときの挙動です。\n\n 設定\n\n      \n        \n        -set clipboard=unnamed,autoselect\n+set clipboard=unnamed",
          "link": "https://zenn.dev/anozon/articles/vim-cannot-paste",
          "publishedOn": "2021-09-18T13:58:16.000Z",
          "wordCount": 33,
          "title": "vim の visual mode で選択した範囲に paste できないとき",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IMR2zPHh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25AE%2520visual%2520mode%2520%25E3%2581%25A7%25E9%2581%25B8%25E6%258A%259E%25E3%2581%2597%25E3%2581%259F%25E7%25AF%2584%25E5%259B%25B2%25E3%2581%25AB%2520paste%2520%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/surround-vim-tutorial",
          "author": "anozon",
          "description": "公式リポジトリ https://github.com/tpope/vim-surround\n\n why\n\n周囲(クウォート, 括弧, タグ ...)の操作が楽になる\nVim plugin にデフォルトでついてることが多いのですぐ使える\n\nVSCodeVim(VSCode), IdeaVIM(JetBrains)\n\n      \n        \n        Plug 'tpope/vim-surround'\n\n\n      \n      \n demos\n公式の Introduction にそって基本コマンドを紹介します。\nvim-surround/surround.txt at ma...",
          "link": "https://zenn.dev/anozon/articles/surround-vim-tutorial",
          "publishedOn": "2021-09-18T13:58:14.000Z",
          "wordCount": 104,
          "title": "surround.vim 入門【vim中級者向け】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--g0Pd8DIX--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:surround.vim%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2590vim%25E4%25B8%25AD%25E7%25B4%259A%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ssh-vim-copy",
          "author": "anozon",
          "description": "vim で mouse を off にする\n\n      \n        \n        :set mouse=\n\n\n      \n      \n iTerm2 の設定",
          "link": "https://zenn.dev/anozon/articles/ssh-vim-copy",
          "publishedOn": "2021-09-18T13:58:12.000Z",
          "wordCount": 31,
          "title": "ssh 接続先の vim でマウスの選択範囲をコピーする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--caOe7Phx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:ssh%2520%25E6%258E%25A5%25E7%25B6%259A%25E5%2585%2588%25E3%2581%25AE%2520vim%2520%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25A6%25E3%2582%25B9%25E3%2581%25AE%25E9%2581%25B8%25E6%258A%259E%25E7%25AF%2584%25E5%259B%25B2%25E3%2582%2592%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nazo6/articles/410be6ec751f9e",
          "author": "nz",
          "description": "やり方\nplenary.nvimのprofilerを使います\nplenary.nvimがインストールしてあれば使いかたは簡単で、計測したい範囲を\n\n      \n        \n        require'plenary.profile'.start(\"profile.log\")\n\n-- code to be profiled\n\nrequire'plenary.profile'.stop()\n\n\n      \n      のように囲むだけです。\nこれでinit.luaであれば~/.config/nvim以下にprofile.logができます。\n\n グラフにする\nが、このログは超...",
          "link": "https://zenn.dev/nazo6/articles/410be6ec751f9e",
          "publishedOn": "2021-09-04T16:09:37.000Z",
          "wordCount": 56,
          "title": "neovim luaのパフォーマンス計測方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bRppWNnZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nz%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:neovim%2520lua%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E8%25A8%2588%25E6%25B8%25AC%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hxcDBncFdKRUpUUWRWNkQxMWFtVWYxY1R6YnFUakVtX3hGT1Z5ZUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp",
          "author": "matsui54",
          "description": "はじめに\nddc.vimのLSPまわりの設定が良い感じになってきたので共有します。\n前提として、補完ソースに関してはこちらを入れてください。\nhttps://github.com/Shougo/ddc-nvim-lsp\n最終的にはこんな感じで使えるようになります。\n\n\n 補完候補のプレビュー & signature help\n以下のgifにあるような機能で、前者は、補完候補を選択したときにその詳細情報をfloating windowに表示します。signature helpは、補完候補を選択して関数の中身を書いているときに、引数などの情報を表示する機能です。\n\nvim-lsp...",
          "link": "https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp",
          "publishedOn": "2021-09-04T09:04:12.000Z",
          "wordCount": 135,
          "title": "ddc.vimのlsp機能を強くする with nvim-lsp",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ZE7iSpjj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsui54%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:ddc.vim%25E3%2581%25AElsp%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25BC%25B7%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%2520with%2520nvim-lsp%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2habGgtTFpaYTFPZXJIaUpZMVhwTHdKa2hGR2xUTHFUN3NYUzhWbEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kato_k/articles/753b36262b3213",
          "author": "kato-k",
          "description": "はじめに\nVim上での日本語入力の手段としてeskk.vimを導入しましたので自分用のメモも兼ねて残します。\nSKK・eskk.vim共にこれまで使ったことがないので、参考程度に見てください。\n\n インストール\n\n eskk.vim\nhttps://github.com/tyru/eskk.vim\n好みのプラグインマネージャでeskkを導入してください。\n\n 辞書\nskkを使うには読みとの対応が列挙された辞書が必要になるので、ダウンロードしてeskkに教えてあげる必要があります。\n辞書ファイルはこちら↓などで公開されている物を利用しましょう。\nhttps://skk-dev.gith...",
          "link": "https://zenn.dev/kato_k/articles/753b36262b3213",
          "publishedOn": "2021-09-02T15:04:12.000Z",
          "wordCount": 168,
          "title": "Vimにeskkをインストールする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_sBVbMm1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kato-k%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vim%25E3%2581%25ABeskk%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDA1MWRmMmFlMi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Vue.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/vue/feed",
      "siteUrl": "https://zenn.dev/topics/vue",
      "articles": [
        {
          "id": "https://zenn.dev/gz/articles/59095a390da895",
          "author": "walking_on_ice",
          "description": "Styleを動的に指定するのは割と簡単にできます。しかし、より複雑のCSSを使いたい、そして、Deep Selectorも使いたい場合、ちょっとした工夫が必要ですが、それでも簡単にできました。\n\n      \n        \n        //template\n<div :class=\"getMyClass()\" />\n\n//methods\ngetMyClass: function() {\n  if(condition1) {\n    return 'class1'\n  }\n  return 'class2'\n}\n\n//style\n<style scoped>...",
          "link": "https://zenn.dev/gz/articles/59095a390da895",
          "publishedOn": "2021-09-30T15:13:38.000Z",
          "wordCount": 37,
          "title": "Vuejsで動的にCSSをスイッチ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Zry8SYUa--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:walking_on_ice%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vuejs%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%25E3%2581%25ABCSS%25E3%2582%2592%25E3%2582%25B9%25E3%2582%25A4%25E3%2583%2583%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTZhZjc2YmQ3Yy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nice2have/articles/120b1df8fcea2a",
          "author": "Nakajima",
          "description": "初めて作った個人開発サービスで海外進出しようという無謀な挑戦\n以下の記事の通り、9月頭に2goというサービスを作って公開しました。サービスの詳細は以下のURLから見てもらえればと思いますが、いくつかの理由から世界での公開を元から視野に入れていました。\nhttps://zenn.dev/nice2have/articles/aa15eccd13a23c\n\n\n英語圏のユーザーも含めたほうがサービスの規模感が大きくなる\nサービス内容が日本だけに留まらない共通の需要があると思った\nどこかで挑戦しなくてはならないのなら、ここで挑戦しようと思った（無謀）\n\nこういった背景があり、全てのインターフ...",
          "link": "https://zenn.dev/nice2have/articles/120b1df8fcea2a",
          "publishedOn": "2021-09-29T22:16:23.000Z",
          "wordCount": 336,
          "title": "海外進出を目指して、ProductHuntへ個人開発サービスを投稿するまでにやったこと&やった結果を全面的にシェアする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--koDXbfkf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Nakajima%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E6%25B5%25B7%25E5%25A4%2596%25E9%2580%25B2%25E5%2587%25BA%25E3%2582%2592%25E7%259B%25AE%25E6%258C%2587%25E3%2581%2597%25E3%2581%25A6%25E3%2580%2581ProductHuntw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTM5ZjY5NDZlNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/38e9f804474668",
          "author": "azukiazusa",
          "description": "この記事の内容は RFC を元に作成されており、将来によって機能が変更になる可能性があります。\n\n\n はじめに\n現在リリースされている Vuex の最新のバージョンは Vuex 4 です。\nこれは Vuex 3 と互換性のあるバージョンで Vue 3 で使用するためのバージョンであり、 Vuex 3 と同じ API となっています。\nそのために現状 Vuex の問題点としてよくあげられている TypeScript サポートの問題点を解決できていません。\nVuex 5 は Vue 3 において Composition API による Reactivity API が登場したことにより R...",
          "link": "https://zenn.dev/azukiazusa/articles/38e9f804474668",
          "publishedOn": "2021-09-29T10:18:50.000Z",
          "wordCount": 1157,
          "title": "Vuex 5でどのように変わるのか？",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1hV6IrGy--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vuex%25205%25E3%2581%25A7%25E3%2581%25A9%25E3%2581%25AE%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E5%25A4%2589%25E3%2582%258F%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258B%25EF%25BC%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/75dadb9e6d5632",
          "author": "おしうみなおき",
          "description": "ページ内リンクでぬるっとスクロールするやつを実装したく、vue-scrolltoというライブラリを試してみました。\nするとめちゃめちゃ簡単に実装できましたので、メモ程度に共有します。\n\n vue-scrolltoをインストールする\nまずは普通にインストールします\n\n      \n        \n        npm install --save vue-scrollto\n\n\n      \n      \n vue-scrolltoをインポートする\n僕はLaravel×vue.jsを使っているので、app.jsにインポートします。\n\n      \n        \n        imp...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/75dadb9e6d5632",
          "publishedOn": "2021-09-29T00:24:46.000Z",
          "wordCount": 56,
          "title": "vue-scrolltoで超簡単にページ内リンクのスムーススクロールを実現する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ZcQTd-56--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vue-scrollto%25E3%2581%25A7%25E8%25B6%2585%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E5%2586%2585%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%25A0%25E3%2583%25BC%25E3%2582%25B9%25E3%2582%25B9%25E3%2582%25AF%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/56945521c61341",
          "author": "おしうみなおき",
          "description": "HTMLとCSSでセレクトボックスの装飾をするの意外と面倒ですよね。\nなんとか簡単にセレクトボックス作れないかな〜〜と調べたら、ありました。\n僕はvue.jsをよく使うので「vue-select」という良さそうなライブラリを使ってみます。\n\n vue-selectをインストールする\nvue-selectをインストールします。\n\n      \n        \n        npm install vue-select\n\n\n      \n      \n vue-selectをインポートします\n僕はLaravelとVueを使っているので、app.jsでインポートします\n\n      \n  ...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/56945521c61341",
          "publishedOn": "2021-09-26T23:21:17.000Z",
          "wordCount": 75,
          "title": "vue-selectでいい感じのセレクトボックスを実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IRlHk1ze--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vue-select%25E3%2581%25A7%25E3%2581%2584%25E3%2581%2584%25E6%2584%259F%25E3%2581%2598%25E3%2581%25AE%25E3%2582%25BB%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%259C%25E3%2583%2583%25E3%2582%25AF%25E3%2582%25B9%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kon_karin/articles/75b9808778e362",
          "author": "こんかりん",
          "description": "令和も3年だというのに、仕事でどうしても Internet Explorer 11 と戦わなければならないこと、あると思います。\nIE 11 への対応は巷の記事で様々取り扱われていますが、どうも情報が古かったり、とっ散らかってる印象がありました。\nそこで、最新の Vue 2.x の環境はどうなんだろう？と思い、Vue/CLI と Nuxt.js の最新バージョン（2021-09-22時点）の Babel によるトランスパイルと Polyfill についてまとめました。\n正直、IE 11 について記事を書くのはこれが最後にしたいですね。\n今後、可能な限り各 OSS のアップデートに合わせて...",
          "link": "https://zenn.dev/kon_karin/articles/75b9808778e362",
          "publishedOn": "2021-09-26T12:30:45.000Z",
          "wordCount": 298,
          "title": "Vue/CLI と Nuxt.js で IE11 と戦うための知識",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SEIDSjiz--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%2593%25E3%2582%2593%25E3%2581%258B%25E3%2582%258A%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%252FCLI%2520%25E3%2581%25A8%2520Nuxt.js%2520%25E3%2581%25A7%2520IE11%2520%25E3%2581%25A8%25E6%2588%25A6%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%259F%25A5%25E8%25AD%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDU5ZDU2M2Q0YS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/676d88675e4e74",
          "author": "azukiazusa",
          "description": "<script setup> 構文とは\nVue.js 3.2 から <script setup> 構文が使えるようになりました。これは単一ファイルコンポーネント(SFC)内で Composition API を使用している際に使える糖衣構文です。下記のようなメリットを得ることができ、公式からも使用が推奨されています。\n\nポイラープレートが減りより簡潔になる\nprops と emit を定義する際に純粋な TypeScript の構文が使える\nランタイムのパフォーマンスが向上する\nIDE のパフォーマンスが向上する\n\n\n 基本的な構文\n<script se...",
          "link": "https://zenn.dev/azukiazusa/articles/676d88675e4e74",
          "publishedOn": "2021-09-24T08:15:03.000Z",
          "wordCount": 785,
          "title": "【Vue.js 3.2】`<script setup>` 構文がすごくすごい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8tj9fRo8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue.js%25203.2%25E3%2580%2591%2560%253Cscript%2520setup%253E%2560%2520%25E6%25A7%258B%25E6%2596%2587%25E3%2581%258C%25E3%2581%2599%25E3%2581%2594%25E3%2581%258F%25E3%2581%2599%25E3%2581%2594%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yamabiko/articles/jetstream-socialite",
          "author": "やまびこ",
          "description": "はじめに\nこの記事を読むと、Laravel JetstreamでSocialiteによりSNS認証できるようになります。\nまた、Jetstream全ての機能でパスワード確認を必要としないシングルサイオンを実現できるようになります。\nそれだけではなく、SNS認証後に二段階認証をすることが可能になります。\n\n 対象となる読者\nSocialiteの知識があり、Jetstreamに導入したい方向け\n\n 前提\n\nJetstreamのフロントエンド実装としてVueを使用しています\nチーム機能を有効化しています\n多言語化(i18n)対応済みです\nこの記事ではSNSの例としてGitHub、GitLa...",
          "link": "https://zenn.dev/yamabiko/articles/jetstream-socialite",
          "publishedOn": "2021-09-24T06:26:10.000Z",
          "wordCount": 1449,
          "title": "Laravel Jetstream+SocialiteでSNS認証",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YTN8nE5g--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2584%25E3%2581%25BE%25E3%2581%25B3%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Laravel%2520Jetstream%252BSocialite%25E3%2581%25A7SNS%25E8%25AA%258D%25E8%25A8%25BC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYmFiMDQ1MjY4NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/masa0317/articles/3f09fce580302e",
          "author": "masa",
          "description": "去年の末から開発しているWEBアプリでVue3を利用してます。\nここ数年のWEB開発はずっとReactを使っていましたが、色々と不満が蓄積していたので、思い切って他のフレームワークを利用することにしました。\nそして、色々なフレームワークを検証して分かったのは、\nいまや、React以外のフレームワークでもフロント開発は問題ない\nということでした。\nこの記事では、ReactからVue3に移行した理由、ReactからVue3にして良かった点と悪かった点を記載します。\n\n React\nフロントの開発でReactを使うのは、ここ数年のフロントエンドでは最も標準的な選択です。\n私が初めてReactに...",
          "link": "https://zenn.dev/masa0317/articles/3f09fce580302e",
          "publishedOn": "2021-09-24T00:29:23.000Z",
          "wordCount": 170,
          "title": "ReactからVue3に移行した理由と感想",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sjg7OjNE--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:masa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%258B%25E3%2582%2589Vue3%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%25E7%2590%2586%25E7%2594%25B1%25E3%2581%25A8%25E6%2584%259F%25E6%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMGU0NzQ4MDhiMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/wataru72v/books/wataru72v-vuepress-portfolio",
          "author": "wataru72v",
          "description": "Vuepressでポートフォリオ作成ハンズオン",
          "link": "https://zenn.dev/wataru72v/books/wataru72v-vuepress-portfolio",
          "publishedOn": "2021-09-23T15:40:12.000Z",
          "wordCount": 22,
          "title": "Vuepressでポートフォリオ作成ハンズオン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zw88_1Da--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9jM2U1OTIxZGM5LmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/karaageeeee/articles/80dff29498e925",
          "author": "からあげ",
          "description": "Let's try\n\n テンプレ生成ツール\nvue-web-extensionというツールを使うと、Vue.jsを使ったChrome Extensionのテンプレを生成することができます。\nvueのcliをインストールしていない場合はまず以下のコマンドを実行。\n\n      \n        \n        npm i -g @vue/cli-init\n\n\n      \n      次のコマンドで、Chrome Extensionのテンプレを生成\n\n      \n        \n        vue init kocal/vue-web-extension helloworld...",
          "link": "https://zenn.dev/karaageeeee/articles/80dff29498e925",
          "publishedOn": "2021-09-22T16:07:41.000Z",
          "wordCount": 335,
          "title": "Vue.js x Chrome Extension x Salesforceで便利ツールを開発",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--I-qqOp84--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258B%25E3%2582%2589%25E3%2581%2582%25E3%2581%2592%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Vue.js%2520x%2520Chrome%2520Extension%2520x%2520Salesforce%25E3%2581%25A7%25E4%25BE%25BF%25E5%2588%25A9%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%2592%25E9%2596%258B%25E7%2599%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKek5HS2sta3ZFNjJtbURqTXBEdlVTd0JscGRqa2pNcmZxVnlfek49czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/karaageeeee/articles/9ba4228248efe2",
          "author": "からあげ",
          "description": "Vue Routerを導入する\nまずはnpmでVue Routerをインストールしましょう。\n\n      \n        \n        npm install vue-router\n\n\n      \n      切り替えるページコンポーネントを簡単に作ります。\nresources/jsにpagesディレクトリを作成しその中にIndex.vueとAbout.vueを作ります。\nIndex.vue\n\n      \n        \n        <template>\n    <div>\n        Index\n    </div>\n<...",
          "link": "https://zenn.dev/karaageeeee/articles/9ba4228248efe2",
          "publishedOn": "2021-09-22T15:39:19.000Z",
          "wordCount": 157,
          "title": "Laravel x VueにVue Routerを導入しコンポーネントを切り替える",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--GXRmZCLU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258B%25E3%2582%2589%25E3%2581%2582%25E3%2581%2592%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Laravel%2520x%2520Vue%25E3%2581%25ABVue%2520Router%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2597%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%2588%2587%25E3%2582%258A%25E6%259B%25BF%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKek5HS2sta3ZFNjJtbURqTXBEdlVTd0JscGRqa2pNcmZxVnlfek49czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/coder_ka/articles/275b551d662e35",
          "author": "koeda",
          "description": "使ってわかる、Vueへの恨み、つらつらと（随時更新）\n\nコンポーネントのローカルスコープでコンポーネントを定義しようとするとJSXが必要\nJSXが嫌でReactを使わないならSvelteがあり、SvelteはゼロオーバーヘッドでVueより速い\nReact+JSXと違って、マークアップをJavaScriptのデータ構造として扱えない上、TypeScriptとの相性も悪い\nSlotに渡す引数の型が指定できない（TypeScript）\nジェネリックなコンポーネントが作れない（TypeScript）\nPropsに関数を指定したいときもあるのに、イベントをemitするパターンが推奨されている為、仕...",
          "link": "https://zenn.dev/coder_ka/articles/275b551d662e35",
          "publishedOn": "2021-09-21T06:49:30.000Z",
          "wordCount": 22,
          "title": "2021年現在Vueを選択すべきでないと思う理由",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_LUUWdap--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:koeda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:2021%25E5%25B9%25B4%25E7%258F%25BE%25E5%259C%25A8Vue%25E3%2582%2592%25E9%2581%25B8%25E6%258A%259E%25E3%2581%2599%25E3%2581%25B9%25E3%2581%258D%25E3%2581%25A7%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E6%2580%259D%25E3%2581%2586%25E7%2590%2586%25E7%2594%25B1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYmM3ZWU2OTdhMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gamin/articles/c58b8fb43c8a75",
          "author": "gamine🍑",
          "description": "code の例 1\n\n      \n        \n        const func = (key: string) => computed(() => (toggle.value === true ? key : 'false'))\n\n\n      \n      \n code の例 2\nこんなのでも与えられるらしい。\n\n      \n        \n        <template>\n\t{{ hoge('Momo') }}\t\n</template>\n\n\n      \n      \n      \n        \n        cons...",
          "link": "https://zenn.dev/gamin/articles/c58b8fb43c8a75",
          "publishedOn": "2021-09-21T01:29:51.000Z",
          "wordCount": 53,
          "title": "computed に引数を与えたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--r4cRkBF6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:gamine%2520%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:computed%2520%25E3%2581%25AB%25E5%25BC%2595%25E6%2595%25B0%25E3%2582%2592%25E4%25B8%258E%25E3%2581%2588%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDE0MDRhMWYwOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/599baba4a32e14",
          "author": "azukiazusa",
          "description": "Vue.js3.2からは、JavaScriptの変数をCSS変数としてバインドできるようになりました。\nつまりは、CSSの値を動的に設定できるということです。\nものは試しのやってみましょう。\n\n      \n        \n        <script setup lang=\"ts\">\nimport { ref } from \"@vue/reactivity\";\nconst color = ref(\"#000000\");\n</script>\n\n<template>\n  <h1 class=\"title\">タイトル</h1>\n...",
          "link": "https://zenn.dev/azukiazusa/articles/599baba4a32e14",
          "publishedOn": "2021-09-20T04:03:39.000Z",
          "wordCount": 464,
          "title": "【Vue3.2】styleタグ内でJavaScript変数をバインドできる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--J2__d1x8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue3.2%25E3%2580%2591style%25E3%2582%25BF%25E3%2582%25B0%25E5%2586%2585%25E3%2581%25A7JavaScript%25E5%25A4%2589%25E6%2595%25B0%25E3%2582%2592%25E3%2583%2590%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2589%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kai/articles/nuxt-payload-generate",
          "author": "カイ",
          "description": "Nuxt の generate の改善を職場ですることがあったので、そこで学んだことを備忘録的に書いてきます。\n\n 環境\nnuxt v2.15.7\n\n Qiita の API について\nQiita api を使って実際にやってみます。\n(Zenn に記事書いてるのに Qiita で申し訳ないですが、サンプルにちょうどよかったので。)\nQiita の API のドキュメントはこちら\n一覧の取得のドキュメントはこちら\n特定の記事の取得のドキュメントはこちら\n100 件の記事を取得するには以下のような感じす。\nhttps://qiita.com/api/v2/items?page=1&...",
          "link": "https://zenn.dev/kai/articles/nuxt-payload-generate",
          "publishedOn": "2021-09-20T02:06:13.000Z",
          "wordCount": 440,
          "title": "NuxtのSSGのgenerateの改善~payloadちゃんと使えてますか？~",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cgmoNH1x--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%25AB%25E3%2582%25A4%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%25E3%2581%25AESSG%25E3%2581%25AEgenerate%25E3%2581%25AE%25E6%2594%25B9%25E5%2596%2584%7Epayload%25E3%2581%25A1%25E3%2582%2583%25E3%2582%2593%25E3%2581%25A8%25E4%25BD%25BF%25E3%2581%2588%25E3%2581%25A6%25E3%2581%25BE%25E3%2581%2599%25E3%2581%258B%25EF%25BC%259F%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMTllM2UwYWYxOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8",
          "author": "おしうみなおき",
          "description": "jQueryのslideUp, slideDownをvueで作る際に、transitionを使用するやり方があったのですが、高さを指定しないといけない？とかなんとかでよくわからなくてやめちゃったのですが、\n結論から言うとライブラリを使用する方法が死ぬほど簡単でした。\n\n ライブラリインストール\nvue-slide-up-downをインストールします\n\n      \n        \n        npm i vue-slide-up-down\n\n\n      \n      \n インポートする\nLaravelとvueをセットで使っているので、 僕はapp.jsというところでインポートしま...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8",
          "publishedOn": "2021-09-20T00:44:32.000Z",
          "wordCount": 48,
          "title": "vueでjQueryのslideUp, slideDownを一瞬で実装しちゃう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wA7o3iR1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vue%25E3%2581%25A7jQuery%25E3%2581%25AEslideUp%252C%2520slideDown%25E3%2582%2592%25E4%25B8%2580%25E7%259E%25AC%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A1%25E3%2582%2583%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "author": "shingo.sasaki",
          "description": "Chart.js 3 について\nChart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。\nv3 は従来の v2 と比べ、以下のような大きな改善が行われています。\n\nwebworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上\n細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化\n\nmoment など、日付操作用のライブラリへの依存の撤廃\nCSSインジェクションの廃止\n膨大な数のバグフィックス\n\nただし、多くの破壊的変更を...",
          "link": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "publishedOn": "2021-09-19T03:32:58.000Z",
          "wordCount": 526,
          "title": "Vue2 / Vue3 でも Chart.js 3 を使いたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2Fm5gHTt--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shingo.sasaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%2520%252F%2520Vue3%2520%25E3%2581%25A7%25E3%2582%2582%2520Chart.js%25203%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODQ1ZmE3NWJhOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/63bbb2c0fbb7b1",
          "author": "てんてる",
          "description": "@capacitor-community/capacitor-googlemaps-nativeをVue3で利用する際の手順と各種説明です。\n\nこのライブラリはエミュレータもしくは実機でのみ確認できます。\n\n\n現段階で未検証（実装されていない機能など）は説明を記載していません。\n\n\n 環境\n\n\n\n項目名\nバージョン\n\n\n\n\nvue\n^3.0.0\n\n\n@capacitor/core\n^3.2.2\n\n\n@capacitor/android\n^3.2.2\n\n\n@capacitor/ios\n^3.2.2\n\n\n@capacitor-community/capacitor-googlemaps-na...",
          "link": "https://zenn.dev/tentel/articles/63bbb2c0fbb7b1",
          "publishedOn": "2021-09-18T06:28:44.000Z",
          "wordCount": 971,
          "title": "【Vue3】@capacitor-community/capacitor-googlemaps-native まとめ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zn8xr30j--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590Vue3%25E3%2580%2591%2540capacitor-community%252Fcapacitor-googlemaps-native%2520%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yamabiko/articles/jetstream-i18n",
          "author": "やまびこ",
          "description": "はじめに\nこの記事を読むと、Laravel Jetstream+Vue環境をja.json等のファイルによって多言語化(i18n)できるようになります。\n多言語化にはvue-i18nを使用します。\nJetstreamではフロントエンドとして、livewireまたはVueを選択できます。\nlivewireバージョンは既に多言語化対応されています。\nしかし、現状、Vueバージョンの方は多言語化対応されていません。\nこの記事ではフロントエンドとしてvueを選択した場合の多言語化(i18n)について解説します。\n\n 多言語化(i18n)\n\n １．ja.jsonファイル作成\n以下のコマンドを実...",
          "link": "https://zenn.dev/yamabiko/articles/jetstream-i18n",
          "publishedOn": "2021-09-17T03:41:29.000Z",
          "wordCount": 320,
          "title": "Laravel Jetstream+Vueの多言語化(i18n)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--tv_jCXev--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2584%25E3%2581%25BE%25E3%2581%25B3%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Laravel%2520Jetstream%252BVue%25E3%2581%25AE%25E5%25A4%259A%25E8%25A8%2580%25E8%25AA%259E%25E5%258C%2596%2528i18n%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYmFiMDQ1MjY4NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuichkun/articles/e4e8c7e633439c",
          "author": "yuichkun",
          "description": "作ったもの\n記事タイトルの通り、Vue.jsで再描画が走ったコンポーネントの輪郭をフラッシュしてハイライトしてくれるChrome拡張 + npmパッケージを作りました。\n\nGitHub: yuichkun/vue-devtool-flash-updates\n\n 背景\nVueの開発をする上で、Vue.js devtools を使っている人は多いと思います。\nReact Developer Tools では以前から再描画されたコンポーネントを光らせてくれる機能があり、パフォーマンス問題の解消などに役立っていたのですが、どうやらVue devtoolsにはそれがないらしいことをissueな...",
          "link": "https://zenn.dev/yuichkun/articles/e4e8c7e633439c",
          "publishedOn": "2021-09-15T11:07:35.000Z",
          "wordCount": 93,
          "title": "Vueの再描画されたコンポーネントをハイライトするChrome拡張を作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wCzKxzfi--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yuichkun%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%25E3%2581%25AE%25E5%2586%258D%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E3%2583%258F%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2588%25E3%2581%2599%25E3%2582%258BChrome%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3ME45ck5wZWlxSERKTTUwWVlWT3J2ZFE5UW1xRjB4VFI1WDNxUFNnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/imaginelab/articles/c59db2aa20aecf",
          "author": "ima",
          "description": "はじめに\n個人開発しているWEBサービスにキーボードショートカットを追加しました。その時に使ったnpmパッケージがお手軽で素晴らしかったので記事にすることにしました。\n\n hotkey by GitHub\nキーボードショートカットを実現するJSライブラリなどを探して、何を使うか検討していたところ、GitHub社が開発するnpmパッケージを見つけました。\nhttps://github.com/github/hotkey\nGitHubのサイトのHTMLソースを見ると、data-hotkey というhotkey由来の記述が発見できたので、GitHubのサービス内で実際に使っているようです。...",
          "link": "https://zenn.dev/imaginelab/articles/c59db2aa20aecf",
          "publishedOn": "2021-09-14T08:29:26.000Z",
          "wordCount": 129,
          "title": "GitHub風のキーボードショートカットをお手軽に追加する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IQ-FkXHo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ima%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:GitHub%25E9%25A2%25A8%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25AB%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E3%2581%258A%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzg4M2FhMTMxYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "author": "azukiazusa",
          "description": "Vue 3が正式リリースされてから約1年が経過しました。\nVuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？\nこの記事ではVue 2からVue 3への移行手順を記述していきます。\n参考用のプロジェクトとして以下レポジトリを用意しました。\nhttps://github.com/azukiazusa1/vue3-migrate-test\nVue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。\n\n 移行ビルドを使用する\nVue 2からVue 3へ移行す...",
          "link": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "publishedOn": "2021-09-13T12:25:39.000Z",
          "wordCount": 953,
          "title": "Vue2のプロジェクトをVue3へマイグレーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WO_KQunr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592Vue3%25E3%2581%25B8%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/chabatake_i/articles/headlessui_introduction",
          "author": "k-shigehito",
          "description": "はじめに\nHeadless UIはTailwind CSSを開発しているTailwind Labsを中心に開発されているUIライブラリです。特徴として、スタイルは実装者側で自由に制御できること、アクセシビリティはライブラリ側で確保してくれること等が上げられます。React用とVue.js用がそれぞれ用意されていますが、今回はVue.jsでUIコンポーネントを作成してみました。\n全体のコードは以下のリポジトリに公開しています。\nhttps://github.com/K-shigehito/headlessui-example\n\n本記事は学習ノートとして投稿させて頂きます。\n内容に誤り等...",
          "link": "https://zenn.dev/chabatake_i/articles/headlessui_introduction",
          "publishedOn": "2021-09-11T16:53:36.000Z",
          "wordCount": 762,
          "title": "Headless UI + Vue3で作るUIコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--H_vOJv96--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k-shigehito%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Headless%2520UI%2520%252B%2520Vue3%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258BUI%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMGFhMjNkMjE5ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/satohjohn/articles/b064cf966a9e20",
          "author": "佐藤慧太",
          "description": "前提\nNuxt.jsでVuexを使っているのでそのときに\nhttps://github.com/ktsn/vuex-type-helper\n以下を利用させてもらっていました\nただ、モジュールのstore場合利用時にtypeがうまくはまらないから、どうするんだろうとか色々見てたのですがあんまりいい手段が見つからなく、自分で型定義でテンプレートリテラル部分書いたらどうなんだろうとおもってやってみました。\n正直もっと良い手段があると思いますが、今回は自分の勉強踏まえの備忘録。\nそして、多分Vue3対応とかが入ったらちゃんと動いていくんだと思うので、後で書き換えればいいし、現状型の問題だけな...",
          "link": "https://zenn.dev/satohjohn/articles/b064cf966a9e20",
          "publishedOn": "2021-09-11T04:37:38.000Z",
          "wordCount": 199,
          "title": "Vuexの型定義でモジュールでの型解決してくれるようにしてみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EpVXGSET--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E4%25BD%2590%25E8%2597%25A4%25E6%2585%25A7%25E5%25A4%25AA%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vuex%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A7%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AE%25E5%259E%258B%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDlkNTdlODEyNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/open_sesame/articles/2f6442ccdddb1b",
          "author": "open sesame",
          "description": "ゲーム\n世の中的には、プログラミングする人＝ゲーマー という方程式があるようで(思い込みか?)\n長いことプログラミングをしていますが、パソコンは購入しますが、ゲーム機なるものを購入したこともパソコンやスマホでゲームをすることもありません。\n\n ゲームと脳\n何かを獲得したときや何かをやっつけたときに脳が快楽物質であるドーパミンを大量に分泌するらしいですね。\nどうも自分には、これが不要なようで...\nゲームをすることに興味がありませヌ。\n\n 本題に\n小学生低学年に算数を楽しんで憶えてしかもドーパミンを大量にあびてもらおうと思い。\n1995年ころ京都の幼稚園で実際に使われていたアプリをVu...",
          "link": "https://zenn.dev/open_sesame/articles/2f6442ccdddb1b",
          "publishedOn": "2021-09-11T01:10:07.000Z",
          "wordCount": 35,
          "title": "算数インベーダー(1)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sdnjjIHH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:open%2520sesame%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E7%25AE%2597%25E6%2595%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2599%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25281%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2Y3OGJlZDlkOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "author": "Yu Watanabe",
          "description": "Jest とは\nhttps://jestjs.io/ja/\nJestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール\nJest には\n\nテストランナー\nカバレッジ計測\nモック\nアサーション\n\nなど テストの実行を含めた 様々な機能がオールインワンで提供されているため\n今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる\nvueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる\n\n Jest の設定について\n\n実行環境設定\n\nどの環境で テストを動作させ...",
          "link": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "publishedOn": "2021-09-09T06:18:50.000Z",
          "wordCount": 150,
          "title": "[まとめ] Jest について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1mm64zHv--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yu%2520Watanabe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%255B%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%255D%2520Jest%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsNHlOeEpMd3FVcTNfeXMyWTFPNHFHNng0cmlUTWRsVVNBYXNPPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "author": "博ノ助",
          "description": "これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）\n\n これダメ\n\n      \n        sample.vue\n        <script>\n  setTimeout(function() {\n    this.data = false;\n  }, 1000);\n</script>\n\n\n      \n      \n JavaScriptだったら\n\n      \n        sample.v...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "publishedOn": "2021-09-08T12:56:33.000Z",
          "wordCount": 46,
          "title": "無名関数内でNuxt.jsのthisを利用したい。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ENKkN4M0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%2584%25A1%25E5%2590%258D%25E9%2596%25A2%25E6%2595%25B0%25E5%2586%2585%25E3%2581%25A7Nuxt.js%25E3%2581%25AEthis%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/shlia/articles/a6c2fb22ab7c6e",
          "author": "shira79",
          "description": "概要\n業務で触れる技術はバックエンド関連が主で、フロントエンドを関連の技術に触れることが少ないのですが、勉強を兼ねてVue.jsとContentfulで作成したブログをSPAで、Netlifyにホスティングしていました。\nその後、パフォーマンスの向上+OGPの設定を目的として、Nuxt.jsのSSG機能を使って書き換えてみました。\n\n リンク\n\n リプレイス後\nhttps://github.com/shira79/MyBlog\nhttps://shira-nuxt-static.netlify.app/\n使用技術は以下です。\nNuxt.js or Next.js + Contenfu...",
          "link": "https://zenn.dev/shlia/articles/a6c2fb22ab7c6e",
          "publishedOn": "2021-09-07T10:16:24.000Z",
          "wordCount": 205,
          "title": "フロントエンド初心者がVueで作ったブログをNuxtのSSGで作り直した時につまずいたこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--FkZykG9c--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shira79%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258CVue%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592Nuxt%25E3%2581%25AESSG%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258A%25E7%259B%25B4%25E3%2581%2597%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%259A%25E3%2581%2584%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzhmMmVhYTkzNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nice2have/articles/aa15eccd13a23c",
          "author": "Nakajima",
          "description": "はじめに\n今回初めて個人開発で作ったサービスを公開します。今までも何回かトライしていたのですが、なかなか公開までに至らないうちに、なにか問題にぶちあたったり、時間がかかりすぎて情熱が冷めてしまったりしていたので、今回はまずはスモールスタートで公開して改善していくことを心がけました。大体今回の公開まで、開発を始めてから1ヶ月程度になります。毎日朝4時半に起きて、子どもたちが起きる7時過ぎまでを開発時間として取り組んできました。\n\n\n どんな人向け？\n自分で作っているサービスの開発ロードマップをユーザーに公開するために、都度ブログを書いたりするのも大変ですよね。もし、自分のサービスのソー...",
          "link": "https://zenn.dev/nice2have/articles/aa15eccd13a23c",
          "publishedOn": "2021-09-07T07:58:36.000Z",
          "wordCount": 52,
          "title": "Github Issuesをキレイに外部公開するサービス「2go」作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OclLDDjr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Nakajima%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Github%2520Issues%25E3%2582%2592%25E3%2582%25AD%25E3%2583%25AC%25E3%2582%25A4%25E3%2581%25AB%25E5%25A4%2596%25E9%2583%25A8%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2580%258C2go%25E3%2580%258D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTM5ZjY5NDZlNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057",
          "author": "にしはら",
          "description": "Nuxtの動的ルーティングの静的サイトジェネレート（SSG）と静的サイトホスティングサービス（Netlify、Vercel、GitHub Pages）の404ページの挙動について調べました。\n結論からすると、存在しない動的ルーティングで404ページを表示させたい場合はvalidate関数()を設置する必要があります。\n\nデモはこちら\nコードはこちら\n\n\n やりたいこと\n静的ジェネレート後、存在しないIDのURL（例：/blog/9999）の場合は404ページに飛ばしたいです。\n\n 前提\n/blog/以下が動的ルーティングになっています。動的ルーティングのID番号を拾ってAPIから該当デー...",
          "link": "https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057",
          "publishedOn": "2021-09-05T14:44:24.000Z",
          "wordCount": 43,
          "title": "Nuxtの動的ルーティングのSSGと静的サイトホスティングの404",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Zh7wglab--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25AF%25E3%2582%2589%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%25E3%2581%25AE%25E5%258B%2595%25E7%259A%2584%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AESSG%25E3%2581%25A8%25E9%259D%2599%25E7%259A%2584%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE404%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWY3YjY0NWRlOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/736bfeaaa60ab3",
          "author": "てんてる",
          "description": "Vue3.2からSFCの<style>内でのv-bind利用が実験的機能では無くなり、正式に導入されました。\n\n 概要\nSFCのdataもしくはsetup内で宣言した値を<style>で利用できます。\n\n実際の値はハッシュ化されたCSS変数として書き出されるため、CSSは静的な状態です。\nまた、値が変更された場合はハッシュ化されたCSS変数が書き換えられるため、リアクティブです。\n\n\n 書き方\n書き方はシンプルで、<script>内で宣言した変数名を以下のようにv-bind()に渡すことで、<style>内で利用可能です。\n\n      \n...",
          "link": "https://zenn.dev/tentel/articles/736bfeaaa60ab3",
          "publishedOn": "2021-09-04T21:47:11.000Z",
          "wordCount": 74,
          "title": "【Vue3】Vueで宣言した変数の値をCSSで読み込む",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pXh8_Zei--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue3%25E3%2580%2591Vue%25E3%2581%25A7%25E5%25AE%25A3%25E8%25A8%2580%25E3%2581%2597%25E3%2581%259F%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AE%25E5%2580%25A4%25E3%2582%2592CSS%25E3%2581%25A7%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/886dc6b615528f",
          "author": "てんてる",
          "description": "Vue3.2からv-memoディレクティブが追加されました。\nv-memoディレクティブを利用することで、不要な再レンダリングを省略することができるので、パフォーマンスの向上につながります。\n\n 概要\nv-memoディレクティブは、指定したすべての値が最後のレンダリング結果と同じであれば、サブツリー全体の再レンダリングをスキップします。\n\nDOMの更新だけでなく、仮想DOMのVNodeの作成もスキップされます。\n\n\n v-memoディレクティブの書き方\n以下のように、コンポーネントが再レンダリングされた際に、配列に指定したvalueA及びvalueBが、最後のレンダリング時と同じ値の場合...",
          "link": "https://zenn.dev/tentel/articles/886dc6b615528f",
          "publishedOn": "2021-09-04T06:27:40.000Z",
          "wordCount": 349,
          "title": "【Vue3】v-memoディレクティブでレンダリングを最適化する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wTPLUAPe--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue3%25E3%2580%2591v-memo%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25A7%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rgbkids/articles/694a5a491494b8",
          "author": "vteacher",
          "description": "原文を元に、会話風（入門編によくある感じ）にしたてあげました。\nわかりにくいところは説明を足しています。\n原文：\nhttps://v3.ja.vuejs.org/guide/introduction.html\n\n Vue.js とは？\n🙍‍♀️「Vue (発音はビュー) は、ユーザーインターフェイスを構築するためのプログレッシブフレームワークです。Vue は少しずつ適用していけるように設計されています」\n🙂「SPAだから、Reactと類似の技術ってことですね」\n🙍‍♀️「その通りです。Vueの最新バージョンは3です。Vue3の説明をしていきます」\n\n はじめに\n🙍‍♀️「Vue.js を...",
          "link": "https://zenn.dev/rgbkids/articles/694a5a491494b8",
          "publishedOn": "2021-09-04T03:03:55.000Z",
          "wordCount": 197,
          "title": "Vue 3のエッセンシャルガイドを会話風に説明してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--yj0yTYJK--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:vteacher%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%25203%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AB%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25E3%2582%2592%25E4%25BC%259A%25E8%25A9%25B1%25E9%25A2%25A8%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZZXAwYXhYZ084ZHlWVVJsbndsanVacFlaRmF4ZU14YV92Z3JDSHc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    }
  ],
  "cliVersion": "1.11.2"
}