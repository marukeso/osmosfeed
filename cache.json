{
  "sources": [
    {
      "title": "Release notes from osmosfeed",
      "feedUrl": "https://github.com/osmoscraft/osmosfeed/releases.atom",
      "siteUrl": "https://github.com/osmoscraft/osmosfeed/releases",
      "articles": [
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1",
          "author": null,
          "description": "Fixed: Unexpected nested element in author field crashes the parser\nThank you @ad-m",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1",
          "publishedOn": "2021-09-16T06:39:32.000Z",
          "wordCount": 343,
          "title": "v1.11.1"
        }
      ]
    },
    {
      "title": "JSer.info",
      "feedUrl": "http://jser.info/rss",
      "siteUrl": "https://jser.info/",
      "articles": [
        {
          "id": "https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/",
          "author": null,
          "description": "JSer.info #557 - Node.js 16.9.0リリース。\nNode v16.9.0 (Current) | Node.js\nプロジェクトごとにnpm/yarn/pnpmなどのパッケージマネージャを切り替えて利用できるCorepackのサポートが実験的に追加されています。Corepackが有効時は、どのパッケージマネージャを使うかをpackage.json の packageManager フィールドで指定して、透過的にインストールや実行できるようになります。\nまた実験的であるため、利用するにはcorepack enable yarnなどのコマンドがオプトインで必要となっています。\nCorepack | Node.js v16.9.0 Documentation\ncorepack is 何?\nその他には、V8 9.3へアップデートしObject.hasOwnとError Causeをサポート、stream.composeの追加などが含まれています。\nV8 release v9.3 · V8\nSpook.jsという、投機的実行を利用したsame-siteでのサイドチャネル攻撃についての論文が公開されています。\nsame-site/cross-site, same-origin/cross-originをちゃんと理解する\n以前、GoogleがSpectreの概念を説明するものとしてhttps://leaky.page/というサイトを公開しています。\nGoogle Online Security Blog: A Spectre proof-of-concept for a Spectre-proof web\nSpook.jsは、これをより実践的に検証した論文で、BitbucketやTumblrなどのユーザーコンテンツがサブドメインにあるサイト同士でのデモ、Googl…",
          "link": "https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/",
          "publishedOn": "2021-09-14T01:00:58.000Z",
          "wordCount": 527,
          "title": "2021-09-14のJS: Node v16.9.0(Corepack)、Spook.js(Same-Siteでのサイドチャネル攻撃)"
        },
        {
          "id": "https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/",
          "author": null,
          "description": "JSer.info #556 - Electron 14.0.0がリリースされました。\nElectron 14.0.0 | Electron Blog\n依存がそれぞれChromium 93、Node.js 14.17.0、V8 9.3へとアップデートされています。\napp.allowRendererProcessReuseオプションの削除、worldSafeExecuteJavaScriptオプションを削除(trueがデフォルト)されています。\nまた、Electron 12でDeprecatedとなっていたremoteモジュールを削除し、@electron/remoteという外部モジュールへと変更されています。\ncontextBridgeを使っていく方向になっています。\nElectron（v.14.0.0 現在）の IPC 通信入門 - よりセキュアな方法への変遷 - Qiita\nNode.jsでのFetch APIのpolyfillライブラリであるnode-fetch 3.0.0がリリースされました。\nRelease v3.0.0 · node-fetch/node-fetch\n破壊的な変更として、Node.jsのESMのサポート、Node.js 12未満のサポート終了されています。\ntimeoutオプションは不要となったため削除されています。\nShould we deprecate timeout in favor of AbortController? · Issue #523 · node-fetch/node-fetch\n一方で、非標準なhighWaterMarkオプションの追加されています。\nWhen users clone(), automatically create streams with custom highWaterMark · Issue #38…",
          "link": "https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/",
          "publishedOn": "2021-09-07T01:36:56.000Z",
          "wordCount": 417,
          "title": "2021-09-07のJS: Electron 14.0.0、node-fetch 3.0.0、replace-jquery"
        },
        {
          "id": "https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/",
          "author": null,
          "description": "JSer.info #555 - TypeScript 4.4が正式にリリースされました。\nAnnouncing TypeScript 4.4 | TypeScript\nControl Flow Analysisの改善、Index SignaturesにSymbolやTemplate Stringを利用できるようになっています。\nunknown型にするuseUnknownInCatchVariablesオプションと\nundefined値の区別をするexactOptionalPropertyTypesオプションの追加されています。\nuseUnknownInCatchVariablesはstrictオプションが有効の場合は自動的にONとなります。\nexactOptionalPropertyTypesはstrictオプションとは別途設定が必要になります。\nまた、ES Proposal Stage 3のclass static blockがサポートされています。\ntsc --helpの表示を改善、ビルドパフォーマンスの改善も含まれています。\nWhy lab and field data can be different (and what to do about it)という記事では、PageSpeed Insightsなどに表示される\"lab data\"と\"field data\"の違いについて解説しています。\nLab dataは、ネットワークは実行環境を固定したSynthetic モニタリングのデータとなっています。\nChrome User Experience Reportで収集されたChromeユーザーのRUMデータを元にしています。\nこの2つのデータの違い、どのようなケースで値に違いがでるかなどを解説しています。\nPackemonはnpmで公開するパッケージ向けのビルドツー…",
          "link": "https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/",
          "publishedOn": "2021-08-30T22:46:59.000Z",
          "wordCount": 511,
          "title": "2021-08-31のJS: TypeScript 4.4、PageSpeed InsightsのLab/Field data、Packemon(ライブラリ向けビルドツール)"
        },
        {
          "id": "https://jser.info/2021/08/25/browser-compat-datadeno-mobile-first-and-desktop-first-create-react-appnext.js/",
          "author": null,
          "description": "JSer.info #554 - MDNなどが利用するブラウザ実装の互換データを管理している @mdn/browser-compat-data 4.0.0がリリースされました。\nRelease v4.0.0 · mdn/browser-compat-data\n互換リストにDenoのデータが追加されています。\nDeno on MDN | Deno Blog\nスキーマにpreviewとaccepts_flagsの追加、XPathとXSLTのデータが不完全であるため削除などの変更も含まれています・\nThe State Of Mobile First and Desktop First - Ahmad Shadeedという記事では、CSSを書くときにMobileとDesktop向けのどちらを先に書くかについて書かれています。\nMobileとDesktopのどちらかを先に書いて、もう一方をMedia Queryで上書きしたときのコード量や拡張性の違いについて比較しています。\nFrom Create-React-App to Next | Kitty Giraudelという記事ではCreate React App(CRA)からNext.jsへの移行をどのようにしたかについて書かれています。\n<head>やスタイリングなどの項目ごとに、CRAからNext.jsにどのように移植したのかが書かれています。\n<Link>以外はどちらの環境でも実行できたため、移行の動作確認として両方の環境で動かしてテストする方法についても書かれています。\nヘッドライン\nAnnouncing React Native 0.65 · React Native\nreactnative.dev/blog/2021/08/17/version-065\nReact iOS Android\n\n\nReact Native 0.…",
          "link": "https://jser.info/2021/08/25/browser-compat-datadeno-mobile-first-and-desktop-first-create-react-appnext.js/",
          "publishedOn": "2021-08-25T02:44:57.000Z",
          "wordCount": 458,
          "title": "2021-08-25のJS: browser-compat-dataにDenoを追加、Mobile First and Desktop First、create-react-appからNext.jsに移行"
        }
      ]
    },
    {
      "title": "Zennの「Next.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/nextjs/feed",
      "siteUrl": "https://zenn.dev/topics/nextjs",
      "articles": [
        {
          "id": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "author": "aiji42",
          "description": "はじめに\nNext.js には SSR するための getServerSideProps と SSG/ISR のための getStaticProps というデータフェッチファンクションが用意されています。\n一般的な getServerSideProps は、次のようにレンダリングに必要な props を返却することが主な用途です。\n\n      \n        \n        export async function getServerSideProps(context) {\n  const data = await fetch('...').then((res) => ...",
          "link": "https://zenn.dev/aiji42/articles/30116d3ffdb329",
          "publishedOn": "2021-09-20T16:03:30.000Z",
          "wordCount": 267,
          "title": "【Next.js】getServerSidePropsをリバースプロキシ化して遊ぼう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bgvRilVw--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Next.js%25E3%2580%2591getServerSideProps%25E3%2582%2592%25E3%2583%25AA%25E3%2583%2590%25E3%2583%25BC%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25AD%25E3%2582%25B7%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E9%2581%258A%25E3%2581%25BC%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "author": "空雲",
          "description": "Next.jsの初回queryのundefined現象\n\nsrc/pages/[q].tsx\n\n\n      \n        \n        import { useRouter } from 'next/router'\nimport React from 'react'\n\nconst Page = () => {\n  const router = useRouter()\n  const q = router.query['q']\n  console.log(\"q:\",q)\n  return <div>{q}</div>\n}\n\nexport defa...",
          "link": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "publishedOn": "2021-09-20T04:26:09.000Z",
          "wordCount": 81,
          "title": "[Next.js]router.queryから初回のundefinedを消し去る方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W26cShMZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%255BNext.js%255Drouter.query%25E3%2581%258B%25E3%2582%2589%25E5%2588%259D%25E5%259B%259E%25E3%2581%25AEundefined%25E3%2582%2592%25E6%25B6%2588%25E3%2581%2597%25E5%258E%25BB%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "author": "aiji42",
          "description": "はじめに\nNext.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。\nここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。\n例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…\n\n一般ユーザ向けページは誰でもアクセス可能\nマイページはログイン済みのユーザのみアクセス可能\nログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる\n\nた...",
          "link": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "publishedOn": "2021-09-18T17:11:31.000Z",
          "wordCount": 460,
          "title": "【Next.js】アクセスコントロールパターン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fXFmupwO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "author": "anozon",
          "description": "この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。\nGist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx\n\n pages/_app.tsx\nこちらは Function Component でかけるのでシンプルです。\n\n      \n        \n        import { AppProps } from 'next/app'\nimport Head from 'next/head'\n\nconst...",
          "link": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 145,
          "title": "Next.js with TypeScript で最小限の _app.tsx, _document.tsx",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uLCP34vU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%2520with%2520TypeScript%2520%25E3%2581%25A7%25E6%259C%2580%25E5%25B0%258F%25E9%2599%2590%25E3%2581%25AE%2520_app.tsx%252C%2520_document.tsx%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "author": "anozon",
          "description": "next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。\njsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。\nSSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。\n(/pages 直下で export するコンポーネント)\n\n コード\n\n      \n        \n        import { createConte...",
          "link": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "publishedOn": "2021-09-18T13:58:05.000Z",
          "wordCount": 143,
          "title": "Next.js export 実行時のタイムスタンプをコンポーネントで使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_ZPfgWAW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520export%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2583%2597%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/localhost-apphost-dev",
          "author": "anozon",
          "description": "複数のアプリを同じ localhost:3000 で開発すると切り替えるたびにキャッシュが競合するので /etc/hosts で変える案です。\n\n /etc/hosts\n\n      \n        \n        sudo vim /etc/hosts\n\n\n      \n      \n      \n        \n        127.0.0.1 localhost.appname\n127.0.0.1 localhost.othername\n127.0.0.1 localhost.hoge\n127.0.0.1 localhost.fuga\n\n\n      \n      \n フロ...",
          "link": "https://zenn.dev/anozon/articles/localhost-apphost-dev",
          "publishedOn": "2021-09-18T13:58:02.000Z",
          "wordCount": 59,
          "title": "localhost.{appname}:3000 で開発してブラウザキャッシュを活用する案",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--tUolYE7d--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:localhost.%257Bappname%257D%253A3000%2520%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25A6%25E3%2582%25B6%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E3%2582%2592%25E6%25B4%25BB%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%25E6%25A1%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochinozenn/articles/173dd93e19ba18",
          "author": "RyosukeMochizuki",
          "description": "useStateで全てのstateを定義している人なら、ぶち当たるであろう「コードの肥大化問題」。\nuseStateで一つずつ定義していくのは、stateが１つか２つならいいんですけど、\n増えてくると、同じような記述がたくさんでてきてコードが肥大化します。(例えば、入力フォームなど)\n入力フォームの例↓\n\n      \n        \n        export default function Home () {\n\tconst [name, setName] = useState(\"\");\n\tconst [age, setAge] = useState(0);\n\tconst [ge...",
          "link": "https://zenn.dev/mochinozenn/articles/173dd93e19ba18",
          "publishedOn": "2021-09-18T02:33:00.000Z",
          "wordCount": 114,
          "title": "useStateの使いすぎで、収集つかなくなりそうになった時のためのリファクタリング方法🧹",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--58BOpZJU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:RyosukeMochizuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:useState%25E3%2581%25AE%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%2599%25E3%2581%258E%25E3%2581%25A7%25E3%2580%2581%25E5%258F%258E%25E9%259B%2586%25E3%2581%25A4%25E3%2581%258B%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258A%25E3%2581%259D%25E3%2581%2586%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AE%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E6%2596%25B9%25E6%25B3%2595%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeGpEQVZkWlVLRnFGM193cFRwaHQ1TjhZTmVxYXlIdmF4dGVzRS09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler",
          "author": "terrierscript",
          "description": "next.jsで同じエンドポイントをハンドラとして使い回すとちょっと便利だった\n\n ユースケース1: URLを変更したい場合\nAPIのURLを変更したいが後方互換を保ちたいようなケースがあるだろう。\nリダイレクトを設定したり、Custom Serverを利用しても良いが、ちょっとそこまでやりたくないがコピペもしたくないようなときに利用できる\n例えばこんなAPIが/api/greetとしてあったとする\n\n      \n        \n        // /api/greet.ts\n\nimport { NextApiHandler } from \"next\"\n\nconst handler...",
          "link": "https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler",
          "publishedOn": "2021-09-17T14:07:30.000Z",
          "wordCount": 256,
          "title": "next.jsで複数のAPIエンドポイントで同じhandlerを使う小技",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bytwYQ9a--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terrierscript%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:next.js%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AEAPI%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E3%2583%259D%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E5%2590%258C%25E3%2581%2598handler%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E5%25B0%258F%25E6%258A%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGE3MmMyMTRjZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochinozenn/articles/8218f316e704e7",
          "author": "RyosukeMochizuki",
          "description": "現在携わっているプロジェクトが、フロントNext.js, バックエンドrailsのジャムスタック構成です。\nそこで、rails側で生成したsessionがブラウザのcookieに保存されない事件が起こり、解決に時間がかかったため、備忘録です。\n(1ヶ月ほど時間が空いてしまったので、試したところは、覚えているものだけです、少し前後しているかも🙇‍♂️)\n認証情報はブラウザのsessionで管理したいというものが前提のものです。\n\n 問題の発端\nユーザー新規登録した際に、sessionを生成し、ブラウザのcookieに保存して、ユーザー情報を扱いたかった。\nそのため、railsのinitia...",
          "link": "https://zenn.dev/mochinozenn/articles/8218f316e704e7",
          "publishedOn": "2021-09-17T00:41:23.000Z",
          "wordCount": 95,
          "title": "vercelのプレビューURLでは、sessionの保存ができないみたい🤔",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0HKJMbUT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:RyosukeMochizuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vercel%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BCURL%25E3%2581%25A7%25E3%2581%25AF%25E3%2580%2581session%25E3%2581%25AE%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKeGpEQVZkWlVLRnFGM193cFRwaHQ1TjhZTmVxYXlIdmF4dGVzRS09czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kanon_code/articles/4384426f8f8a80",
          "author": "kanon_code",
          "description": "【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと\nフロント：Next.js\nホスティング：vercel\nこの記事ではOGPの説明は割愛します。\n\n 参考記事一覧\nNext.jsにおけるSSG（静的サイト生成）とISRについて（自分の）限界まで丁寧に説明する\nnextjsのISRを使うときのfallback指定について理解するまでの話\nfallbackに関して【公式】\n\n 下調べが足りなかった箇所\n\nOGPで表示される画像の拡張子\nOGPで表示される画像の最小サイズ\nfallbackの挙動についての理解\n\n\n OGPに関すること\nこれは自分がドキ...",
          "link": "https://zenn.dev/kanon_code/articles/4384426f8f8a80",
          "publishedOn": "2021-09-14T03:00:14.000Z",
          "wordCount": 225,
          "title": "【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AgvvVgOA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kanon_code%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9Kanon%2520Code%25E3%2581%25A7OGP%25E8%25A8%25AD%25E5%25AE%259A%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzRjMjEwNDA1Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "author": "空雲",
          "description": "Firebaseを使えるようにするまで\n\n Firebaseでプロジェクトを作成\nFirebaseを利用すると、無料で以下のサービスに対応した認証を行えます。\n自力で一つ一つ対応するより遙かに簡単です。\n\n上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。\n\n Google認証の有効化\nFirebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。\n先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。\n\n\n アプリケーションの登録\n歯車ボタンからプロジェクトを設定を選びま...",
          "link": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "publishedOn": "2021-09-14T00:01:35.000Z",
          "wordCount": 342,
          "title": "Next.jsでFirebase経由でGoogle認証を利用する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYVZRDtq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Firebase%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7Google%25E8%25AA%258D%25E8%25A8%25BC%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cacbahbj/articles/4e72e38872d67f",
          "author": "terry",
          "description": "概要\n2021/09/01に開催された下記勉強会のメモです\nhttps://mercari.connpass.com/event/221978/\nhttps://www.youtube.com/watch?v=YNLvIkqRC-g\nhttps://engineering.mercari.com/blog/entry/20210823-a57631d32e/\n\n パネルディスカッション\n\n メルカリShopsの画面構成\n\nメルカリトップからwebアプリケーションで埋め込み\n\nタブの中がメルカリShopsのWebView\nおすすめの商品をタップで商品画面を出す個別のWebView\n\n検...",
          "link": "https://zenn.dev/cacbahbj/articles/4e72e38872d67f",
          "publishedOn": "2021-09-13T16:15:39.000Z",
          "wordCount": 109,
          "title": "Souzoh Tech Talk #03: Frontend",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--CPnG8PmF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terry%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Souzoh%2520Tech%2520Talk%2520%252303%253A%2520Frontend%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hKejB3ejZmdXM2N25DX1NTZzdDa2YxNXUwc1J3b0tBNmdjMmZBPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kanon_code/articles/b3019ec509d6f5",
          "author": "kanon_code",
          "description": "CtoCのコードレビューサービス Kanon Codeをリリースしました\n\n本サイト\nKanon Code\n\n どんなサービス？\nレビューして欲しい人がコードを投稿し、自由にレビューしてもらえるサービスです。\nユーザー登録でレビュイーにもレビュワーにもなれます。\nまた、レビューは販売することも可能で、販売システムはnoteを参考にしています。\nもちろん無料でのレビューも可能です。\n\n 技術スタック\n\nNext.js\nLambda(node.js)\nDynamoDB\nvercel\nSAM\nMaterial UI\nstyled-component\n\n\n 実際の画面\n\nトップ画面はこのよう...",
          "link": "https://zenn.dev/kanon_code/articles/b3019ec509d6f5",
          "publishedOn": "2021-09-13T10:38:44.000Z",
          "wordCount": 97,
          "title": "【個人開発】CtoCのコードレビューサービス Kanon Code",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NXm7AVhq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kanon_code%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591CtoC%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2583%25AC%25E3%2583%2593%25E3%2583%25A5%25E3%2583%25BC%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%2520Kanon%2520Code%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzRjMjEwNDA1Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kin/articles/658b06a3233e60",
          "author": "Fiddler25",
          "description": "はじめに\nミチビク株式会社で開発に携わっております、Fiddler25と申します。\n最近業務でreact-pdf, react-konvaを使う機会がありました。\n画面上にPDFを表示し、PDF上で画像をドラッグ & ドロップする機能が必要だったのですが、Next.jsではインポートして利用できるようにするまでいくつかハマりポイントがあったため、解決方法を記したいと思います。\n記事の最後にreact-pdf + react-konvaの簡単なサンプルコードを載せました。\nこちらのコードで以下のような機能を作ることができます。\n\nPDFはpdf.jsのExamplesにあるhe...",
          "link": "https://zenn.dev/kin/articles/658b06a3233e60",
          "publishedOn": "2021-09-12T23:56:42.000Z",
          "wordCount": 669,
          "title": "Next.jsでreact-pdf + react-konvaを使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YYbo1p0q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Fiddler25%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7react-pdf%2520%252B%2520react-konva%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyYjQzRUh6NGhkbmxLTmZyclduaE43Z0M3V1hPMUQtRW5oVTh3PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takepepe/articles/nextjs-error-handling",
          "author": "Takepepe",
          "description": "Next.js には組み込みのエラーフォールバック機構が存在します。pages/404.tsxとpages/500.tsx、Unhandled Error を捉えるpages/_error.tsxが組み込みフォールバックです。https://nextjs.org/docs/advanced-features/custom-error-page\n実アプリケーションにおいてはこれだけでは不十分なケースが多く、意図的なもの・そうでないものをハンドリングしログ収集に繋げるなど、きちんとエラー設計をしたいところです。\n\n TypeScript 4.4 で try catch の推論が変更になった\n...",
          "link": "https://zenn.dev/takepepe/articles/nextjs-error-handling",
          "publishedOn": "2021-09-12T16:39:51.000Z",
          "wordCount": 569,
          "title": "Next.js の Error を丁寧に扱う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--hq9pZrJB--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takepepe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25AE%2520Error%2520%25E3%2582%2592%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E6%2589%25B1%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dpejh1QmdoVHJXUHhiRlRFdm9IVHJ5WDNhRkdmdlJCLUtVVTl6SUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/qaynam/articles/c4794537a163d2",
          "author": "qaynam",
          "description": "フォームに入力中のデータがの残っていて、ページ遷移する前に注意(window.confirm())を出したくて、色々ハマりましたので、書き残しておきます。\n結論から言う、beforeunloadはwindow.location.hrefやF5ようなページの再読み込むが発生する時には発火しますが、Next.jsのRouterのような ブラウザーのhistory APIでの画面遷移の場合は発火しないようです。\n解決策をいくつか見つかったので、全部書いておきます。\n\n 解決策1\n\n      \n        \n        import SingletonRouter, { Router ...",
          "link": "https://zenn.dev/qaynam/articles/c4794537a163d2",
          "publishedOn": "2021-09-12T14:30:16.000Z",
          "wordCount": 160,
          "title": "Next.JSでページ遷移する前にbeforeunloadはさみたい時",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SjaSIAcI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:qaynam%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.JS%25E3%2581%25A7%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%2599%25E3%2582%258B%25E5%2589%258D%25E3%2581%25ABbeforeunload%25E3%2581%25AF%25E3%2581%2595%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E6%2599%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lqMTRfSGhpb09SazlXcGlSV29ZUjJDdWVHRW9ab3NwcFFER24zPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/dff5c97e5c41b0",
          "author": "ぺい",
          "description": "課題としては、SPAでのアクセス制御。\n\nユーザーがログインしたら特定の画面にアクセスできる\nログインしてない場合はアクセスできないようにする。\nログインしている時はログイン画面からリダイレクトする\n\nなどなど。\nhttps://zenn.dev/nus3/scraps/d04f5026bab361\nhttps://zenn.dev/catnose99/articles/2169dae14b58b6\n\n リダイレクトする前に画面が見えてしまう。\nfunctional componentでuseEffectで制御しようとすると、見せたくない画面が一瞬表示される。\nhttps://davec...",
          "link": "https://zenn.dev/peg/articles/dff5c97e5c41b0",
          "publishedOn": "2021-09-12T07:00:06.000Z",
          "wordCount": 67,
          "title": "ReactとかNext.jsのアクセス制御",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Eu3tSa_Y--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%25A8%25E3%2581%258BNext.js%25E3%2581%25AE%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E5%2588%25B6%25E5%25BE%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/61440985120417",
          "author": "ぺい",
          "description": "Nextjsでの認証のタイミングがどうなのか調べた。\n\n 記事1\nhttps://www.mikealche.com/software-development/how-to-implement-authentication-in-next-js-without-third-party-libraries\n\nIn this way, if you don’t check for authentication on the server, you can prevent adding getServerSideProps to your pages.\n\n\nAnd if your pages ...",
          "link": "https://zenn.dev/peg/articles/61440985120417",
          "publishedOn": "2021-09-12T06:59:39.000Z",
          "wordCount": 135,
          "title": "Nextjsでの認証の記事を読んだ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OVaHN1zx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Nextjs%25E3%2581%25A7%25E3%2581%25AE%25E8%25AA%258D%25E8%25A8%25BC%25E3%2581%25AE%25E8%25A8%2598%25E4%25BA%258B%25E3%2582%2592%25E8%25AA%25AD%25E3%2582%2593%25E3%2581%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/maztak/articles/0a59c556ce4b83",
          "author": "Takuya Matsuda",
          "description": "Llike this👇\n\n      \n        \n        {router.pathname !== '/' && (\n    <div className=''>\n\t...\n    </div>\n)}\n\n\n      \n      \n Properties of router\nHere is a example that shows what are propeties of router. This url is /search?q=aaa, not / so that we can understand. So don't us...",
          "link": "https://zenn.dev/maztak/articles/0a59c556ce4b83",
          "publishedOn": "2021-09-12T05:14:41.000Z",
          "wordCount": 91,
          "title": "How to chechk is home with useRouter in Next.js(React)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--k2B5V_bM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takuya%2520Matsuda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:How%2520to%2520chechk%2520is%2520home%2520with%2520useRouter%2520in%2520Next.js%2528React%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pneVNwNkxqcEZSMEVzVXhmb2pzTVZHblBjYUVSNnRKRVhuY1NzNXc9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyo9bo/articles/9909ba89c42a77",
          "author": "kyosuke kubo",
          "description": "やったこと\nstorybook + chromatic + githubActionでUIのテストを自動化させました。\n今回mainとdevelopブランチにpull requestが行われた場合に実行させるようにしたので、手順を記事にします。\n\n 手順\n\n chromaticのセットアップ\nchromaticとは、storybookのメンテナーが作っているstorybookをホスティングするサービスです。加えてgithubと連携することで、PRと連携してUIのreviewを効率化してくれます。\n現状、似たようなサービスとしてNetlifyがよく使われているように思われますが、sto...",
          "link": "https://zenn.dev/kyo9bo/articles/9909ba89c42a77",
          "publishedOn": "2021-09-11T09:02:23.000Z",
          "wordCount": 140,
          "title": "ChromaticとstorybookでUIのテストを自動化してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Nixvpepg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kyosuke%2520kubo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Chromatic%25E3%2581%25A8storybook%25E3%2581%25A7UI%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmY1Nzk1ZDI3OC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/itomise/articles/72ab332bb8f506",
          "author": "itomise",
          "description": "本記事の構成は、CIなどは使わずにすべてローカルで完結することを前提としています。\n\n\n モチベーション\n自分の前回の記事で、Next.jsの画像最適化モジュール「next-optimized-images」を使った環境などについて書いたのですが、\n実際に使っていていくつか問題があったため結局実務では使っていません...。\n問題としては、\n\nほぼ空のプロジェクトでも、next-optimized-imagesを使っただけで生成ファイルのサイズが200kbほど増えてしまっていた（詳しくは調べていませんが）\nビルド毎に画像生成を行うので毎回ビルドが遅い\n\nということがありました。\n画像最適...",
          "link": "https://zenn.dev/itomise/articles/72ab332bb8f506",
          "publishedOn": "2021-09-11T07:31:24.000Z",
          "wordCount": 243,
          "title": "ディレクトリ構造を保ったままwebp生成するNode.js/webp対応について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BpMkflje--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:itomise%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E9%2580%25A0%25E3%2582%2592%25E4%25BF%259D%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25BE%25E3%2581%25BEwebp%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258BNode.js%252Fwebp%25E5%25AF%25BE%25E5%25BF%259C%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2E1Y2RlZmViYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/052hide/articles/e1b9f90013c7f2",
          "author": "Hidetoshi Ota",
          "description": "Next.jsアプリ作成\n\n      \n        \n        npx create-next-app --ts\n\n# What is your project named?\nnextjs-ssr-amplify-sample\n\n\n      \n      コードが生成されるまで待つ！\n\n GitHubにあげる\n省略\nhttps://github.com/052hide/nextjs-ssr-amplify-sample\n\n Amplifyにデプロイ\n\n AWSにログインしてAmplify Consoleを開く\nhttps://ap-northeast-1.console...",
          "link": "https://zenn.dev/052hide/articles/e1b9f90013c7f2",
          "publishedOn": "2021-09-10T16:15:21.000Z",
          "wordCount": 46,
          "title": "[Next.js] AmplifyでSSRデプロイする方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--JtM3lLeG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Hidetoshi%2520Ota%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BNext.js%255D%2520Amplify%25E3%2581%25A7SSR%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjFlZjgxZDE0NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507",
          "author": "ichigo",
          "description": "Next.jsにおけるSPA的遷移の考え方\n\n 背景\nインターン先で既存SSR(React)プロジェクトをNext.jsに移行する際に、プロフィールページのタブやモーダルといった箇所でコンポーネントの切り替えと共にURLも変わるようなSPA的遷移の実装を移行するのに苦労した\n具体的にはreact-routerのhistory.push()にあたる機能が Next.js ですぐに見つけられなかった\n今まではタブなどの切り替え時にhistory.push()をすることで実装していたが、\nそれがNext.jsではどのようにすれば実装できるかについて議論する\n\n 単語定義\n\n SPA的遷移\n...",
          "link": "https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507",
          "publishedOn": "2021-09-10T10:28:59.000Z",
          "wordCount": 101,
          "title": "Next.jsにおけるSPA的遷移の考え方",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--p6q_SUpF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ichigo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258BSPA%25E7%259A%2584%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%25AE%25E8%2580%2583%25E3%2581%2588%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dJbjVqVFhfRGlKc2tiUjVzUkxXVnNUby03dFRWTkpCcUFvMWlLPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/stacklive/articles/bccf6d9a6d0806",
          "author": "StackLive",
          "description": "配信を予約して事前に告知することが可能になりました\n今回のアップデートでは配信をする日時を予約することが可能になり、視聴者に事前にお知らせできるようになりました。予約配信機能により、「いきなり配信をしても視聴者が集まらない」「配信内容に需要があるかわからない」などの不安も軽減されより気軽に配信していただければと思います。\n\n\n 配信予約をする方法\n\n右上のLIVEボタンをクリック\n通常の配信通りにタイトルと概要を記入\n配信予約をONにする\n配信予約日時を設定して予約する\n\n\n配信を予約すると、ホーム画面にある予約配信の箇所に表示されるようになります。\nまた、自分が予約している配信はマ...",
          "link": "https://zenn.dev/stacklive/articles/bccf6d9a6d0806",
          "publishedOn": "2021-09-10T03:40:19.000Z",
          "wordCount": 25,
          "title": "エンジニア向けライブ配信サービスに配信予約機能が追加されました！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dEbxJXQn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:StackLive%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%25E5%2590%2591%25E3%2581%2591%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E9%2585%258D%25E4%25BF%25A1%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2581%25AB%25E9%2585%258D%25E4%25BF%25A1%25E4%25BA%2588%25E7%25B4%2584%25E6%25A9%259F%25E8%2583%25BD%25E3%2581%258C%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMWFkOGFlNzRmMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nitaking/articles/9ff4fca3e8e62e",
          "author": "nitaking",
          "description": "何がおきたか\n\n\npages/index.tsxの内容が、pages/[hoge].tsxに一瞬表示される\n\n\n なぜか\n\nSPAはWEBサーバーからindex.html受け取る\n\nこれがデフォルトの表示に関係している？？？\n\n\n\n\n どうしたか\n\n      \n        \n          /**\n   * dynamic-pathなどの場合、`pages/index.tsx`がSSRのデフォルトとして読み込まれるため、\n   * SSRではそのまま、CSRではリダイレクトする.\n   *\n   *  SSR: Rootがレンダリング -> Contentがレンダリン...",
          "link": "https://zenn.dev/nitaking/articles/9ff4fca3e8e62e",
          "publishedOn": "2021-09-09T14:24:03.000Z",
          "wordCount": 71,
          "title": "【Next.js】dynamic-pathでindex.tsxのComponentが一瞬表示される",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SnqrommY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nitaking%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Next.js%25E3%2580%2591dynamic-path%25E3%2581%25A7index.tsx%25E3%2581%25AEComponent%25E3%2581%258C%25E4%25B8%2580%25E7%259E%25AC%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pDTWQ2V3JtNEFxOTluQ2xBTXQ1NHVJZTBPdnVYX05Fd1BZNElLUnc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "author": "hanetsuki",
          "description": "2021/09/時点での Next.js + TypeScript の環境構築忘備録です。\n主な環境のバージョン\n\nnext: v11.1.0\ntypescript: v4.3.5\neslint: v7.32.0\n@emotion/react: v11.4.1\n\n\n 1.Next.jsの環境を作成\nhttps://nextjs.org/docs#setup\ntpescript用の環境作成コマンドよしなにやってくれる便利なやつ。\n\n      \n        \n        yarn create next-app --typescript\n\n\n      \n      \n ディレクト...",
          "link": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "publishedOn": "2021-09-09T10:47:54.000Z",
          "wordCount": 383,
          "title": "Next.js + TypeScript 環境構築 v11.1",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1TuHkiZq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520TypeScript%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520v11.1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takasing/articles/parameter-extensions",
          "author": "Takashi Toyofuku",
          "description": "シェル芸をする際にいつも何でググればよいかわからなくなるあれのことを Parameter expansion というらしい。\n変数が存在しない際にデフォルト値設定したり、変数が存在する場合に変わりの文字を入れたりするあれ。\nNext.js のアプリケーションを Vercel にデプロイする際に.env.localをうまく拡張する際に必要になったので一部だけ整理しとく。 .env.localでうまく展開されませんでした。。。\n\n      \n        \n        #!/bin/bash\n\nNO_VARIABLES=\nVARIABLES=var\n\necho \"- operator...",
          "link": "https://zenn.dev/takasing/articles/parameter-extensions",
          "publishedOn": "2021-09-08T06:12:38.000Z",
          "wordCount": 158,
          "title": "BashのParameter expansionの一部について整理",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pv1rcV-V--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takashi%2520Toyofuku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Bash%25E3%2581%25AEParameter%2520expansion%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E6%2595%25B4%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDE5M2Y3MTBiOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/byanbyan/articles/supabase_swr",
          "author": "ゆゆゆ",
          "description": "Supabase で swr 使えるのだろうか、、、\nやってみたのでまとめ。\n参考 🐈 Github\nhttps://github.com/supabase/supabase/discussions/764\nSWR\nhttps://swr.vercel.app/ja\nSupabase\nhttps://app.supabase.io/\n\n\nプロジェクト内に\npages/apiフォルダを作成し、supabase からデータ取得する処理を書く。\n\n\nuseSWR を使って、pages/apiからデータを取得する。\n\n\n\n 0.supabase のクライアントの設定\nhttps://supaba...",
          "link": "https://zenn.dev/byanbyan/articles/supabase_swr",
          "publishedOn": "2021-09-07T08:07:18.000Z",
          "wordCount": 227,
          "title": "Supabaseでuseswrを使ってみる。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2usexuJs--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2586%25E3%2582%2586%25E3%2582%2586%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Supabase%25E3%2581%25A7useswr%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2U3NDQzNzU4NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "author": "matsutoba",
          "description": "nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。\n先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。\n\n やりたいこと\n\nボタンを押したらテキストが変わるコンポーネントを作る。\nボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい\n\n\n 動かした環境\n\nmacOS 11.5.2\nNode.js 14.17.0\nyarn 1.22.10\n\n後述の cr...",
          "link": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "publishedOn": "2021-09-06T11:24:10.000Z",
          "wordCount": 636,
          "title": "nextjs + typescript + jest + enzyme の最小サンプルを動かしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gNRMktEh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsutoba%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:nextjs%2520%252B%2520typescript%2520%252B%2520jest%2520%252B%2520enzyme%2520%25E3%2581%25AE%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM5ZDk0NGY4My5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377",
          "author": "mochi",
          "description": "状況\nNextjs のプロジェクトで GitHub Pages にデプロイし 下のようなコードを書いた時に https://aaaaaaaaaaaaaa.github.io/bbbbbbbbbbbb/page1に遷移してほしいのに https://aaaaaaaaaaaaaa.github.io/page1に遷移してしまう。\n\n      \n        \n        <Link href=\"/page1\">\n  <a>リンク</a>\n</Link>\n\n\n      \n      \n 解決策\n\n GitHub 側\nGitHub の...",
          "link": "https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377",
          "publishedOn": "2021-09-06T09:06:53.000Z",
          "wordCount": 63,
          "title": "Next jsをGitHub Pageにデプロイしたときにnext/linkが正しく遷移するようにする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SWKNprER--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:mochi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next%2520js%25E3%2582%2592GitHub%2520Page%25E3%2581%25AB%25E3%2583%2587%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25A4%25E3%2581%2597%25E3%2581%259F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25ABnext%252Flink%25E3%2581%258C%25E6%25AD%25A3%25E3%2581%2597%25E3%2581%258F%25E9%2581%25B7%25E7%25A7%25BB%25E3%2581%2599%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fM2ZhMTczNDliYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kamy112/articles/67ea5fca437d05",
          "author": "Kamy",
          "description": "Incremental Static Regeneration とは\nIncremental Static Regeneration（ISR）はNext.jsのビルドパターンの内の１つです。\n直訳すると\"段階的な静的再生成\"ですね。簡単に説明すると、\n\nクライアント側のリクエストに対し静的にビルドされたページを返す\n有効期限を越えた後にアクセスがあった場合、バックグラウンドで静的ページを再生成する\n次回のアクセス時に、再生成されたページを表示する\n\nという流れとなります。\n俗に言うstale-while-revalidateというキャッシュ戦略をNext.js上で実現可能にしたもので...",
          "link": "https://zenn.dev/kamy112/articles/67ea5fca437d05",
          "publishedOn": "2021-09-06T01:46:54.000Z",
          "wordCount": 137,
          "title": "Next.jsの Incremental Static Regenerationを試してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8jhm1sKN--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kamy%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%25E3%2581%25AE%2520Incremental%2520Static%2520Regeneration%25E3%2582%2592%25E8%25A9%25A6%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGEzMmIwOGQ2Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kimura141899/articles/ad3bfa42f25724",
          "author": "taku",
          "description": "React Hook Formとは？\n公式\n\nhttps://react-hook-form.com/jp/\n\nReact Hookを利用した柔軟かつ拡張可能な使いやすいフォームバリデーションライブラリ。\n\n 導入するメリット\n\nバリデーションが比較的簡単に実装できる\nレンダリングが抑えられる⇒パフォーマンス向上\n依存性が少ない\n軽量なパッケージ\n公式のドキュメントが豊富&日本語\nなどがあげられるようです。\n\n\n 環境構築\n\nNext.js\nTypeScript\nreact-hook-form \"^7.14.2\"\nMaterialUI(別記事予定)\n\n今回はreact-hoo...",
          "link": "https://zenn.dev/kimura141899/articles/ad3bfa42f25724",
          "publishedOn": "2021-09-05T11:24:40.000Z",
          "wordCount": 531,
          "title": "React Hook Form使ってみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--KafOcDaI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:taku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520Hook%2520Form%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKekh4b2laRnZsajhoaDgyTkFZYko0NFdPaS0wVkVEeUR1NVQ2a1E9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "author": "みずねこ",
          "description": "この記事について\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nApexChartsをNext.jsで使う方法\nデータをべた書きしてグラフ化\nデータをFirestoreから取得してグラフ化\n\n\n 参考にした記事\n\nhttps://qiita.com/IchiLab/ite...",
          "link": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "publishedOn": "2021-09-05T10:10:46.000Z",
          "wordCount": 760,
          "title": "Cloud Firestore×Apexchartsでグラフ描画する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vcRhejeS--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Cloud%2520Firestore%25C3%2597Apexcharts%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "author": "みずねこ",
          "description": "この記事について\n初めまして、みずねこです。\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nFirebaseのアプリ作成と初期設定\nFirebase Authenticationで認証機能を実装\nMateria-UIで認証画面のデザイン\n\n\n 参考に...",
          "link": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "publishedOn": "2021-09-05T04:36:15.000Z",
          "wordCount": 400,
          "title": "Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9s_NIaOG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%25E3%2581%25A8Firebase%2520%2520Authentication%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%25BB%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%258D%25E8%25A8%25BC%2528Cookie%2529%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "author": "Kyohei",
          "description": "Jikan API(public API)を使ってTypescriptを勉強します。\n基本は検索機能を使ってAnime Objectを取得します。\n検索はカスタムフックを作ります。(importは省略してます。)\n\n      \n        \n        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {\n    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...",
          "link": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "publishedOn": "2021-09-04T16:04:27.000Z",
          "wordCount": 164,
          "title": "Typescript + React + Jikan API で練習プロジェクト",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NOQZSbVk--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%2520%252B%2520React%2520%252B%2520Jikan%2520API%2520%25E3%2581%25A7%25E7%25B7%25B4%25E7%25BF%2592%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/f13b2608f682aa",
          "author": "ぺい",
          "description": "Next.jsでの状態管理が気になったのでメモ。\n\nNext.js の状態管理 2020\n\nによく纏まっていた\n\n Context API\nhttps://robinvdvleuten.nl/blog/how-to-use-react-context/\n\n Redux\n\nRedux 入門 〜Reduxの基礎を理解する〜\n\n\n\n サンプル実装\nサンプルの実装は公式のがわかりやすい\n\nhttps://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md\n\n\n Recoil\nFacebook製\n\nRecoilは20...",
          "link": "https://zenn.dev/peg/articles/f13b2608f682aa",
          "publishedOn": "2021-09-04T13:05:11.000Z",
          "wordCount": 26,
          "title": "Next.jsでの状態管理",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LIKHyKPI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Next.js%25E3%2581%25A7%25E3%2581%25AE%25E7%258A%25B6%25E6%2585%258B%25E7%25AE%25A1%25E7%2590%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "author": "Ren Shimosawa",
          "description": "ページ内の文字列を検索して、それだけ残す\n\n こんなかんじに検索して、絞り込むものを作ります。\n\n\n前提として、環境は\n・Next.js\n・TypeScript\nとなっています。\n※アイコンとかは違うコンポーネントなので省略して書きます。\n\n      \n        index.tsx\n        import styles from './SearchForm.module.scss'\nimport cn from 'classnames'\n\nexport interface Props = {\n  placeholder?: string\n  className?: st...",
          "link": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "publishedOn": "2021-09-03T13:05:34.000Z",
          "wordCount": 141,
          "title": "ページ内の文字列を検索してフィルタリングするコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--go-MzjS5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Ren%2520Shimosawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E5%2586%2585%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E6%25A4%259C%25E7%25B4%25A2%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ptcmlXRGR5UjRXLUdpUHd4eUZHbGphX1Q0cUVRS3hqcXhNU1NPPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/creamstew/articles/674a0e2208a2befc131f",
          "author": "creamstew",
          "description": "ある特定の条件を満たすまで、定期的にデータフェッチしたかった。\nSWRとReact hooksを使って、ある程度簡単に処理が書けたので紹介します。\n例えば、すごく時間がかかる処理（動画のアップロードとか）を今どのくらいまで処理が進んでるのかユーザーにステータス画面として表示したい場合などに使えると思います。\n\n 完成形\nこれで条件を満たすまで、定期的なデータフェッチを実現しています。\n\n      \n        \n        import useSWR from 'swr'\nimport { useEffect, useState } from 'react';\n\nfunctio...",
          "link": "https://zenn.dev/creamstew/articles/674a0e2208a2befc131f",
          "publishedOn": "2021-09-01T14:52:24.000Z",
          "wordCount": 100,
          "title": "SWRとReact hooksで条件を満たすまで定期的にデータフェッチする処理を実現",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--XEL2Q6U0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:creamstew%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:SWR%25E3%2581%25A8React%2520hooks%25E3%2581%25A7%25E6%259D%25A1%25E4%25BB%25B6%25E3%2582%2592%25E6%25BA%2580%25E3%2581%259F%25E3%2581%2599%25E3%2581%25BE%25E3%2581%25A7%25E5%25AE%259A%25E6%259C%259F%25E7%259A%2584%25E3%2581%25AB%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2595%25E3%2582%25A7%25E3%2583%2583%25E3%2583%2581%25E3%2581%2599%25E3%2582%258B%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E7%258F%25BE%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvYy5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yknight/articles/1e46d3754e7f3b",
          "author": "y_Knight",
          "description": "node-sassの終了アナウンスから、dart-sassを使う\nSass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。\n\n node-sassの終了に関してはこちらの記事を参照\n\n\n前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。\n\n\n sass-loaderに依存するNext.js（v11系）と、Storybook（v6.3.7）へ、「dart-sassの導入」...",
          "link": "https://zenn.dev/yknight/articles/1e46d3754e7f3b",
          "publishedOn": "2021-09-01T07:40:37.000Z",
          "wordCount": 887,
          "title": "【Sass】Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル (2021/09)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--DskL2IEH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:y_Knight%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:%25E3%2580%2590Sass%25E3%2580%2591Next.js%2528v11%2529%2520%252FTypescript%25E3%2581%25A8Storybook%25E3%2581%25A7sass%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%25A8%2540use%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%2520%25282021%252F09%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjk2NzljOWNhZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd",
          "author": "okunokentaro",
          "description": "こんにちは、クレスウェア株式会社の奥野賢太郎 ( @okunokentaro ) です。\n今回はAuth0が提供する、ログインフローを拡張する仕組みであるActionsと、さらに強力な機能であるonContinuePostLogin()について紹介します。Auth0は認証認可の機能を扱うIDaaSのひとつで、サービス自体の詳解は省略します。\nAuth0 Actionsは2021年5月にGAされた比較的新しい機能であるため、日本語情報どころか英語圏の情報がそもそも少ないため、頼りになるのは公式ドキュメント、及び試行錯誤の結果となります。今回紹介するonContinuePostLogin()...",
          "link": "https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd",
          "publishedOn": "2021-09-01T00:07:02.000Z",
          "wordCount": 518,
          "title": "Auth0 の onContinuePostLogin を理解して Actions を柔軟に実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--iQHgEsPJ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:okunokentaro%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Auth0%2520%25E3%2581%25AE%2520onContinuePostLogin%2520%25E3%2582%2592%25E7%2590%2586%25E8%25A7%25A3%25E3%2581%2597%25E3%2581%25A6%2520Actions%2520%25E3%2582%2592%25E6%259F%2594%25E8%25BB%259F%25E3%2581%25AB%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzU1MThkNWFjNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/1878a6d6661295",
          "author": "ぺい",
          "description": "Next.jsにExpressを使うという記事を見かけて???となったので調べた。\nまずこの記事をコピペしてやってみた。\nhttps://www.forcia.com/blog/001559.html\n\nNext.jsはデフォルトではパスと一致するpagesディレクトリ配下の各ファイルにルーティングされます。 このルーティングに独自実装を組み込みたい場合にカスタムサーバを利用します。 例えば、特定のパスの場合のCookie操作やリダイレクト処理の実装などが挙げられます。\n参考: https://nextjs-ja-translation-docs.vercel.app/docs/adva...",
          "link": "https://zenn.dev/peg/articles/1878a6d6661295",
          "publishedOn": "2021-08-30T08:06:42.000Z",
          "wordCount": 563,
          "title": "Next.js BFFとかExpress記事",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Q79fDVk6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520BFF%25E3%2581%25A8%25E3%2581%258BExpress%25E8%25A8%2598%25E4%25BA%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/otanu/articles/f0a0b2bd0d9c44",
          "author": "otanu",
          "description": "先日、Next.js 11.1がリリースされました。\nhttps://nextjs.org/blog/next-11-1\nStorybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。\n構成は以下のようになっています。\n\nyarn\nNext.js v11.1.0\nESLint v7.32.0(Next.js v11.1から含まれるように)\nTypeScript v4.4.2\nTailwind v2.2.8\nStorybook v6.3\nPrettier v2.3.2\nJest v27.1.0\n\nコー...",
          "link": "https://zenn.dev/otanu/articles/f0a0b2bd0d9c44",
          "publishedOn": "2021-08-29T10:19:30.000Z",
          "wordCount": 540,
          "title": "Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--yxWEstlL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:otanu%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:Next.js%2528v11.1%2529%252BTypeScript%252BTailwind%252BSASS%252BStorybook%252BJest%25E3%2581%25AE%25E3%2583%259C%25E3%2582%25A4%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzM0ZjNjYTg5OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/crea7/articles/5b2fde4be6b6f3",
          "author": "Crea7",
          "description": "以前Crea7というタイムラインとブログ機能を持ったサイトを作成した時に、Next.js + microCMS + Tailwind CSSで実装を行いました。\n\n 問題点\n記事の詳細画面では、microCMSのリッチエディタで作成した記事を、HTML形式で取得しinnerHTMLで表示を行なっています。\n\n      \n        \n        <div\nclassName=\"text-black pt-7\"\ndangerouslySetInnerHTML={{ __html: `${article.body}` }}\n></div>\n\n\n      \n...",
          "link": "https://zenn.dev/crea7/articles/5b2fde4be6b6f3",
          "publishedOn": "2021-08-29T09:57:18.000Z",
          "wordCount": 80,
          "title": "microCMS + TailwindCSSでのHTMLコンテンツに対するスタイル適用",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EPjxoynv--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Crea7%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:microCMS%2520%252B%2520TailwindCSS%25E3%2581%25A7%25E3%2581%25AEHTML%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2586%25E3%2583%25B3%25E3%2583%2584%25E3%2581%25AB%25E5%25AF%25BE%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AB%25E9%2581%25A9%25E7%2594%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNGU2MjZkZDdmNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/bca7b0ba13bce3",
          "author": "ぺい",
          "description": "https://qiita.com/G-awa/items/639f4f83aa4d97bc1f0d\nこちらのサンプルプロジェクトを利用。\nserveパッケージで静的ファイルをホスティングするローカルサーバーを立ち上げる。\n\n      \n        \n        yarn add -D serve\n\n\n      \n      \nhttps://qiita.com/Nossa/items/bdc6a9705e89ea8fc250\nhttps://rennnosukesann.hatenablog.com/entry/2018/03/19/233245\n\nexport, serv...",
          "link": "https://zenn.dev/peg/articles/bca7b0ba13bce3",
          "publishedOn": "2021-08-28T14:20:08.000Z",
          "wordCount": 470,
          "title": "NextJSでSSR/SSGの挙動を確認する。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zepKBlqG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:NextJS%25E3%2581%25A7SSR%252FSSG%25E3%2581%25AE%25E6%258C%2599%25E5%258B%2595%25E3%2582%2592%25E7%25A2%25BA%25E8%25AA%258D%25E3%2581%2599%25E3%2582%258B%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/thirosue/books/13ac92fc34ae22",
          "author": "Thirosue",
          "description": "Next.jsで管理画面のボイラーテンプレートを作成してみました。\n本書では、利用した技術などを紹介していきます。\n\n1. はじめに\n2. プロジェクトセットアップ\n3. 自動デプロイ（CI/CD）\n4. バックエンドの準備\n5. コンポーネント作成（Atomic Design）\n6. 共通処理\n7. 入力フォーム\n8. 状態管理\n9. 非同期処理（react-query）\n10. レンダリングオプション（CSR/SSG/SSR/ISR）\n11. 単体テスト",
          "link": "https://zenn.dev/thirosue/books/13ac92fc34ae22",
          "publishedOn": "2021-08-28T12:44:02.000Z",
          "wordCount": 38,
          "title": "Next.jsで作成する管理画面作成チュートリアル",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2s_F8f3P--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci9mNDkxYzEwMGQxLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/shuri/articles/d63c5d242859d9",
          "author": "ヴィジュアル系エンジニア",
          "description": "問題\nNext.js初心者です\nyarn dev後、Google Chromeで Next.jsの開発サーバーを動かしていると、\n\n      \n        \n        ・ リンクを押しても動作しない\n・ リロードすると永遠にページの読み込み中になる\n・ HMRも動いてない\n\n\n      \n      の問題が起きてました\n\n 解決方法\n\n      \n        \n        ・ Google chromeで chrome://serviceworker-internals/ を開く\n・ Scope: localhost:3000 の記載があるサービスワーカーを...",
          "link": "https://zenn.dev/shuri/articles/d63c5d242859d9",
          "publishedOn": "2021-08-28T07:49:22.000Z",
          "wordCount": 47,
          "title": "Next.jsの開発サーバー（dev server）が動かなくなる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--rKs1YUzq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%25B4%25E3%2582%25A3%25E3%2582%25B8%25E3%2583%25A5%25E3%2582%25A2%25E3%2583%25AB%25E7%25B3%25BB%25E3%2582%25A8%25E3%2583%25B3%25E3%2582%25B8%25E3%2583%258B%25E3%2582%25A2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2590%25E3%2583%25BC%25EF%25BC%2588dev%2520server%25EF%25BC%2589%25E3%2581%258C%25E5%258B%2595%25E3%2581%258B%25E3%2581%25AA%25E3%2581%258F%25E3%2581%25AA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTAyYmE5M2RlZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9",
          "author": "きじくん",
          "description": "はじめに\n普段はPython、React、Next.js等を中心に勉強していますが、個人的に今最も注目しているフレームワークであるBlitz.jsの勉強も最近始めました。ここでは私がBlitz.jsを学んでいく過程で、自身の学習記録兼日本語ドキュメント感覚で今後書いていこうと思っています。\n\n 1. blitz generate\n\n      \n        \n        blitz generate [type] [model]\n\n\n      \n      もしくは\n\n      \n        \n        blitz g [type] [model]\n\n\n    ...",
          "link": "https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9",
          "publishedOn": "2021-08-27T14:59:06.000Z",
          "wordCount": 323,
          "title": "Blitz.js 学習記録 #1 - blitz generate",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WW2Gwpwr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258D%25E3%2581%2598%25E3%2581%258F%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Blitz.js%2520%25E5%25AD%25A6%25E7%25BF%2592%25E8%25A8%2598%25E9%258C%25B2%2520%25231%2520-%2520blitz%2520generate%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjliOTM3ZWExNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/e7376c9fce90db",
          "author": "hanetsuki",
          "description": "Next.jsの環境でEmotionのcss関数でスタイリングを行う際に少し手間取ったのでその忘備録。\n\n 設定する\n\n emotionを追加\n\n      \n        \n        yarn add @emotion/react\n\n\n      \n      https://emotion.sh/docs/@emotion/react\ntsconfig.jsonにjsxImportSourceパラメーターを追加する。\n※ これが設定できていないとcss属性をpropできないので詰む。\n\n      \n        \n        {\n  \"compilerOptions\"...",
          "link": "https://zenn.dev/rabbit/articles/e7376c9fce90db",
          "publishedOn": "2021-08-27T14:02:12.000Z",
          "wordCount": 135,
          "title": "Next.js + Emotion(css関数) でスタイリングする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WQ_WyzHV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520Emotion%2528css%25E9%2596%25A2%25E6%2595%25B0%2529%2520%25E3%2581%25A7%25E3%2582%25B9%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/5b031d682d3fe2",
          "author": "空雲",
          "description": "Web-WorkerとWeb-Assemblyの連携に関して\nWeb-Workerを使えば、並列化による恩恵で総合的な動作速度の向上が見込めます\n対してWeb-Assemblyを使えば、演算速度のような直列的な向上が見込めます\nならば「二つを合わせれば、さらなるパフォーマンスアップが見込める」というのは誰でも思うことでしょう\nしかしこの二つの技術、いざ使おうとするとそれなりに面倒で敷居が高く感じます\nその辺りを簡単に実現するための方法を紹介します\n\n サンプル置き場\nhttps://github.com/SoraKumo001/next-worker3\nhttps://next-wo...",
          "link": "https://zenn.dev/sora_kumo/articles/5b031d682d3fe2",
          "publishedOn": "2021-08-27T12:32:02.000Z",
          "wordCount": 391,
          "title": "Next.jsでWeb-WorkerからWeb-Assembly呼び出す",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s---mG3_wf---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Web-Worker%25E3%2581%258B%25E3%2582%2589Web-Assembly%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/catnose99/articles/49c12f84182bdf",
          "author": "CatNose",
          "description": "前提: TypeScript + Next.js + svgrでSVGをインポートする\n自分の関わっているNext.js製アプリケーションでは、svgrを導入することによりSVGを他のReactコンポーネントと同じ形でimportできるようにしています。\nこの記事の本筋からそれますが、svgrは以下のようにNext.jsへの導入できます。\n↓ インストール\n\n      \n        \n        $ npm install --save-dev @svgr/webpack\n\n\n      \n      ↓ @svgr/webpackをWebpackのloaderとして設定し...",
          "link": "https://zenn.dev/catnose99/articles/49c12f84182bdf",
          "publishedOn": "2021-08-27T06:12:13.000Z",
          "wordCount": 225,
          "title": "Next.js + TypeScriptでimportしたSVGの型がanyになってしまう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--s4l7BZUT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:CatNose%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Next.js%2520%252B%2520TypeScript%25E3%2581%25A7import%25E3%2581%2597%25E3%2581%259FSVG%25E3%2581%25AE%25E5%259E%258B%25E3%2581%258Cany%25E3%2581%25AB%25E3%2581%25AA%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzZjNjE0YTFmYS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kijikunnn/articles/0c06902611964d",
          "author": "きじくん",
          "description": "はじめに\n初投稿です。勉強したことをアウトプットして残していきたいと思い、投稿を始めました。\n普段は学生でPythonによる機械学習で研究をしている一方で、プライベートではReactやNext.jsを勉強しています。\n今回は、ReactのフルスタックフレームワークであるBlitz.jsが先日、v1.0に向けた大きな修正が終了したと発信していたことを機に、久しぶりに触れてみました。\n\n過去にチュートリアルだけやったことはあったのですが、その時はデータベースがローカル環境のSQLiteもしくはPostgreSQLの2択だったため、「開発時だったら良いかもしれないけれど、実際にデプロイした...",
          "link": "https://zenn.dev/kijikunnn/articles/0c06902611964d",
          "publishedOn": "2021-08-26T15:48:36.000Z",
          "wordCount": 185,
          "title": "Blitz.jsでSupabaseのデータベースに接続する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--5_4Z5kyO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258D%25E3%2581%2598%25E3%2581%258F%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Blitz.js%25E3%2581%25A7Supabase%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AB%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjliOTM3ZWExNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/uttk/articles/f48fc75120f018",
          "author": "uttk",
          "description": "この記事について\nFirebase AuthenticationとNext.jsのgetServerSideProps()を使って、Cookieを使ったセッション管理方法を、この場を借りて共有したいと思います💪\nまた、この記事の内容は基本的に以下の記事の内容を踏襲したものとなっています。そのため、内容やソースコードに引用などが含まれますので、予めご了承ください🙇‍♂️\nhttps://firebase.google.com/docs/auth/admin/manage-cookies?hl=ja\nそれでは行きましょう🛴\n\n 環境構築\n\nこの記事ではFirebaseの環境構築については...",
          "link": "https://zenn.dev/uttk/articles/f48fc75120f018",
          "publishedOn": "2021-08-26T08:41:39.000Z",
          "wordCount": 1088,
          "title": "Next.jsとFirebaseでCookieを使った認証処理を実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1XXPVF4i--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:uttk%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A8Firebase%25E3%2581%25A7Cookie%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E8%25AA%258D%25E8%25A8%25BC%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzdkM2Q1NTAxNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/soberhiko/articles/aed491ed167bad",
          "author": "eyama",
          "description": "概要\nNext.js のアプリケーションで、CMS などから取得したコンテンツによって動的に生成される URL と、静的な URL の両方がある場合に、サイトマップをどのように自動生成させるかについての記事です。\nZenn に投稿されている記事など、先行事例も見られますが、以下の要件を満たすサイトマップの生成方法については見当たらなかったため、その共有を目的としています。\n\n対象 URL は Next.js の動的/静的ルーティングの両方を含む\n\n動的 URL のページはコンテンツ追加のタイミングでビルドが走らない\n\n\nサイトマップファイルはいくつかに分割し、インデックスファイルも生...",
          "link": "https://zenn.dev/soberhiko/articles/aed491ed167bad",
          "publishedOn": "2021-08-24T05:47:46.000Z",
          "wordCount": 524,
          "title": "Next.js で動的/静的ルーティングのサイトマップを生成する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Em8s-QYB--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:eyama%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%25E3%2581%25A7%25E5%258B%2595%25E7%259A%2584%252F%25E9%259D%2599%25E7%259A%2584%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDIyMGM3YmU0MC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/shimotaroo/articles/c8f2e751cd7877",
          "author": "ゆーたろー",
          "description": "概要\n以下の記事でNext.jsにESlint（JSのコードが正しいか検証してくれるツール）を導入した時に\n\n      \n        \n        Parsing error: Cannot find module 'next/babel'\n\n\n      \n      が出たので解決方法を残しておきます。\nhttps://fwywd.com/tech/next-eslint-prettier\n上記エラー出力が確認できたのは以下のファイル（Tailwind CSSを導入済み）\n\nnext.config.js\ntailwind.config.js\npostcss.config...",
          "link": "https://zenn.dev/shimotaroo/articles/c8f2e751cd7877",
          "publishedOn": "2021-08-23T09:44:44.000Z",
          "wordCount": 51,
          "title": "【Next.js】Parsing error: Cannot find module 'next/babel'の解決",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ZJJdyzyf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2586%25E3%2583%25BC%25E3%2581%259F%25E3%2582%258D%25E3%2583%25BC%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590Next.js%25E3%2580%2591Parsing%2520error%253A%2520Cannot%2520find%2520module%2520%2527next%252Fbabel%2527%25E3%2581%25AE%25E8%25A7%25A3%25E6%25B1%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pMR2wxeDJfQXlDeXh5aHBSS3pRREFYc3pSeEZqeTc5cFNwZTRRbmc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takepepe/articles/testing-with-nextjs",
          "author": "Takepepe",
          "description": "先日、Next.js で開発するアプリケーションテスト手法について、公式ドキュメントが追加され話題になりました。\nhttps://twitter.com/delba_oliveira/status/1427307677709967362\n取り上げられている 2 者はよく知られており、いずれかに触れたことがある方も多いかと思います。この公式ドキュメントページでは「何を使って」を紹介しているのみなので、どちらを選ぶべきか悩んだ方もいるのではないでしょうか？\n\nCypress\nJest & React Testing Library\n\nこの判断についてはドキュメントに書かれていなかった...",
          "link": "https://zenn.dev/takepepe/articles/testing-with-nextjs",
          "publishedOn": "2021-08-22T13:29:53.000Z",
          "wordCount": 355,
          "title": "Testing with Next.js",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--6o_elqxP--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takepepe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Testing%2520with%2520Next.js%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dpejh1QmdoVHJXUHhiRlRFdm9IVHJ5WDNhRkdmdlJCLUtVVTl6SUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Nuxt.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/nuxtjs/feed",
      "siteUrl": "https://zenn.dev/topics/nuxtjs",
      "articles": [
        {
          "id": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "author": "kata",
          "description": "jestとは\nJestはJavaScriptの単体テストのフレームワークです。\n単体テスト（ユニット(Unit)テストとも言います）とは、ボタンやセレクトボックスなど個々の機能を正しく果たしているかどうかを検証するテストの事を指します。\nこの記事はJavaScriptのテストフレームワークでよく使われているjestをNuxt.jsを使ってとりあえず試してみたものになります。\n\n バージョン\nnuxt.js: 2.15.8\nnode.js:16.6.0\n\n nuxtcliでプロジェクト作成\n\n      \n        \n        ❯ yarn create nuxt-app ...",
          "link": "https://zenn.dev/kata_n/articles/0e1c640c4d6680",
          "publishedOn": "2021-09-20T11:51:49.000Z",
          "wordCount": 638,
          "title": "nuxt.jsでjestを使ってテストを始める",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--KvEMYRrl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:nuxt.js%25E3%2581%25A7jest%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWRjMjM1OTE3Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "author": "Yu Watanabe",
          "description": "Jest とは\nhttps://jestjs.io/ja/\nJestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール\nJest には\n\nテストランナー\nカバレッジ計測\nモック\nアサーション\n\nなど テストの実行を含めた 様々な機能がオールインワンで提供されているため\n今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる\nvueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる\n\n Jest の設定について\n\n実行環境設定\n\nどの環境で テストを動作させ...",
          "link": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "publishedOn": "2021-09-09T06:18:50.000Z",
          "wordCount": 150,
          "title": "[まとめ] Jest について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1mm64zHv--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yu%2520Watanabe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%255B%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%255D%2520Jest%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsNHlOeEpMd3FVcTNfeXMyWTFPNHFHNng0cmlUTWRsVVNBYXNPPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "author": "博ノ助",
          "description": "これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）\n\n これダメ\n\n      \n        sample.vue\n        <script>\n  setTimeout(function() {\n    this.data = false;\n  }, 1000);\n</script>\n\n\n      \n      \n JavaScriptだったら\n\n      \n        sample.v...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "publishedOn": "2021-09-08T12:56:33.000Z",
          "wordCount": 46,
          "title": "無名関数内でNuxt.jsのthisを利用したい。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ENKkN4M0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%2584%25A1%25E5%2590%258D%25E9%2596%25A2%25E6%2595%25B0%25E5%2586%2585%25E3%2581%25A7Nuxt.js%25E3%2581%25AEthis%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "author": "博ノ助",
          "description": "触れる回数は多いけどいまだに覚えられないのでメモ\nこれよりいい方法いっぱいあると思います\n\n コマンド\n\n      \n        コマンドライン\n        $ npm install --save-dev jquery @types/jquery\n\n\n      \n      \n nuxt.config.js\n\n      \n        nuxt.config.js\n        + const webpack = require('webpack')\n\nexport default {\n// ...省略...\n// Build Configuration: https...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "publishedOn": "2021-09-08T12:44:09.000Z",
          "wordCount": 75,
          "title": "Nuxt.js+TypeScriptにjQueryを導入するルーティン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eRmbKyyh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt.js%252BTypeScript%25E3%2581%25ABjQuery%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sengosha/articles/95f3ec0d62fba8",
          "author": "ユウ",
          "description": "Nuxt2.15.x以降のコンポーネントimportに関して\n\n\n@nuxt/components はバージョン 2 が使えるようになります\nコンポーネント名にディレクトリ名を付与したタグを使うことができるようになり、コンポーネントの import や宣言などの記述を省略することができます (記述の省略は 2.14 でも可能でしたが 2.15 で先の記述の使用が可能となりました)\n\n\n ディレクト名付きのコンポーネント名\n例えば下記のフォルダー構造\n\n      \n        \n        | components/\n---| my/\n------| form/\n------...",
          "link": "https://zenn.dev/sengosha/articles/95f3ec0d62fba8",
          "publishedOn": "2021-08-24T08:37:01.000Z",
          "wordCount": 223,
          "title": "アトミックデザインにおけるコンポーネントのAuto importの問題について色々と調査した件",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LfcdNoL3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%25A6%25E3%2582%25A6%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2582%25A2%25E3%2583%2588%25E3%2583%259F%25E3%2583%2583%25E3%2582%25AF%25E3%2583%2587%25E3%2582%25B6%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AEAuto%2520import%25E3%2581%25AE%25E5%2595%258F%25E9%25A1%258C%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%25E8%2589%25B2%25E3%2580%2585%25E3%2581%25A8%25E8%25AA%25BF%25E6%259F%25BB%25E3%2581%2597%25E3%2581%259F%25E4%25BB%25B6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「TypeScript」のフィード",
      "feedUrl": "https://zenn.dev/topics/typescript/feed",
      "siteUrl": "https://zenn.dev/topics/typescript",
      "articles": [
        {
          "id": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "author": "空雲",
          "description": "Next.jsの初回queryのundefined現象\n\nsrc/pages/[q].tsx\n\n\n      \n        \n        import { useRouter } from 'next/router'\nimport React from 'react'\n\nconst Page = () => {\n  const router = useRouter()\n  const q = router.query['q']\n  console.log(\"q:\",q)\n  return <div>{q}</div>\n}\n\nexport defa...",
          "link": "https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7",
          "publishedOn": "2021-09-20T04:26:09.000Z",
          "wordCount": 81,
          "title": "[Next.js]router.queryから初回のundefinedを消し去る方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W26cShMZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%255BNext.js%255Drouter.query%25E3%2581%258B%25E3%2582%2589%25E5%2588%259D%25E5%259B%259E%25E3%2581%25AEundefined%25E3%2582%2592%25E6%25B6%2588%25E3%2581%2597%25E5%258E%25BB%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/petamoriken/articles/a211183011cd58",
          "author": "petamoriken",
          "description": "この記事は Qiita からコピーされたものです。\n\n\n Annex B について\nJavaScript の言語仕様には Annex B という項目があります。ここには Web 互換性のために残されているレガシーな機能の仕様について記述してあり、新たに ECMAScript のコードを書く際にこれらの機能を使用したり、その存在を前提にしたりしてはいけないと明記されています。\nhttps://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\nString#big などの今となっては全く実用性のないメソ...",
          "link": "https://zenn.dev/petamoriken/articles/a211183011cd58",
          "publishedOn": "2021-09-19T16:45:17.000Z",
          "wordCount": 396,
          "title": "ECMAScript Annex B と型定義、ついでに ES2022 __proto__",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BsT5lbsp--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:petamoriken%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:ECMAScript%2520Annex%2520B%2520%25E3%2581%25A8%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2580%2581%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A7%25E3%2581%25AB%2520ES2022%2520__proto__%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTUwZjE2MTc1Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/petamoriken/articles/ab9a7d7f654a79",
          "author": "petamoriken",
          "description": "この記事は Qiita からコピーされたものです。\n\n\n はじめに\n個人的に TC39 meeting をウォッチしてまとめている @petamoriken です。\nESNext の Decorators の提案は何度も改定しています。その割にあまり知れ渡っていません。この記事ではその変遷と2021年7月現在における最新の Decorators について簡単にまとめようと思います。\nhttps://github.com/tc39/proposal-decorators\nこちらの発表スライドを見ると流れがわかりやすいかもしれません。\n\n\n 最初の提案（2014年~2015年頃）\n最初の提...",
          "link": "https://zenn.dev/petamoriken/articles/ab9a7d7f654a79",
          "publishedOn": "2021-09-19T16:32:49.000Z",
          "wordCount": 827,
          "title": "Stage 2 Decorators の変遷と最新仕様",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--diQwGZxJ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:petamoriken%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Stage%25202%2520Decorators%2520%25E3%2581%25AE%25E5%25A4%2589%25E9%2581%25B7%25E3%2581%25A8%25E6%259C%2580%25E6%2596%25B0%25E4%25BB%2595%25E6%25A7%2598%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTUwZjE2MTc1Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yonda/articles/5366cb9beb312d",
          "author": "yonda",
          "description": "Pythonで時系列解析をしたい(時系列クラスタリング)\nDTW(Dynamic Time Warping)で台風軌道をクラスタリングする\nこんなふうに時系列データの分類をJavaScript（TypeScript）でしてみたい。\nでも調べるとほとんどみんなPythonのtslean、sklearnやRを使っています。\n調べればJavaScriptライブラリがあるのでしょうが、理屈の勉強がてら自分で実装（TypeScript）してみます。\n\n 分類法\n分類法においてメジャーなのはK-meansとK-medoids。\n2つを比べたとき外れ値やノイズに強いとされている、また時系列データ同士の...",
          "link": "https://zenn.dev/yonda/articles/5366cb9beb312d",
          "publishedOn": "2021-09-19T16:31:06.000Z",
          "wordCount": 2106,
          "title": "JavaScriptで時系列データのクラスタリングがしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--SKFWtfrU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yonda%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:JavaScript%25E3%2581%25A7%25E6%2599%2582%25E7%25B3%25BB%25E5%2588%2597%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2581%25AE%25E3%2582%25AF%25E3%2583%25A9%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%258C%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDhmYzUwNTBkYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/0da7851314cacd",
          "author": "Kyohei",
          "description": "時間があったのでDiscord Botを作ってみました。\nSpotifyのAPIはSpotify Web API Nodeという素晴らしいラッパーライブラリがあるのでそれを使いました。\n\naxiosやらなんやらで直接URLを叩いてもいいのですがせっかくライブラリがあるのでそっちを使いました。使わなくてもSpotify APIは使えます。\n\nとりあえず基本のmessageCreateイベントでloginと入力されたらログイン用のURLを返すようにします。(Spotify APIのAuthenticationの関係でここだけはブラウザを開かないといけないっぽいです。もし間違ってたら教えていた...",
          "link": "https://zenn.dev/kyohei1212/articles/0da7851314cacd",
          "publishedOn": "2021-09-19T08:18:12.000Z",
          "wordCount": 231,
          "title": "Spotify APIとDiscord.jsでBotを作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W2fefVk8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Spotify%2520API%25E3%2581%25A8Discord.js%25E3%2581%25A7Bot%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/peg/articles/c5fb4ccf0a06b2",
          "author": "ぺい",
          "description": "TypeScriptの型レベルコードについてあまり慣れてないので勉強を始めた。\n以下のコードのItemFormがどういう型を持つのか。\n\n      \n        \n        type Item = {\n  id: string;\n  title: string;\n  body: string;\n};\n\n\ntype ItemForm = Item & {\n  edit: boolean;\n};\n\n\n      \n      &はintersection type（交差型）という。\n\nIntersection types are closely related t...",
          "link": "https://zenn.dev/peg/articles/c5fb4ccf0a06b2",
          "publishedOn": "2021-09-19T06:55:54.000Z",
          "wordCount": 161,
          "title": "TypeScriptの交差型",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Hmq4w-2O--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BA%25E3%2581%2584%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:TypeScript%25E3%2581%25AE%25E4%25BA%25A4%25E5%25B7%25AE%25E5%259E%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjU2OGRmNDg3OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "author": "shingo.sasaki",
          "description": "Chart.js 3 について\nChart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。\nv3 は従来の v2 と比べ、以下のような大きな改善が行われています。\n\nwebworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上\n細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化\n\nmoment など、日付操作用のライブラリへの依存の撤廃\nCSSインジェクションの廃止\n膨大な数のバグフィックス\n\nただし、多くの破壊的変更を...",
          "link": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "publishedOn": "2021-09-19T03:32:58.000Z",
          "wordCount": 526,
          "title": "Vue2 / Vue3 でも Chart.js 3 を使いたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2Fm5gHTt--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shingo.sasaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%2520%252F%2520Vue3%2520%25E3%2581%25A7%25E3%2582%2582%2520Chart.js%25203%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODQ1ZmE3NWJhOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tkm_kj/articles/111ef98ed6297e",
          "author": "Takumi Kaji",
          "description": "背景\nnode + TypeScript で MySQL に繋いで少しだけデータ操作をする場面があったのですが、あまり記事無くて苦戦したので備忘録として残しておきます。\n\n 実装方針\n\nO/Rマッパーのような大きいライブラリじゃなくても済む規模だったので mysql を使用して生クエリで対応\nコールバック地獄にならないようにしたい\nしっかりトランザクションはかけておきたい\n\n\n バージョン\n\nnode: v14.17\nmysql(ライブラリ): 2.18.1\nMySQL(DB): 5.7\n\n\n 実装\n\n 接続\n\n      \n        \n        import { cre...",
          "link": "https://zenn.dev/tkm_kj/articles/111ef98ed6297e",
          "publishedOn": "2021-09-18T20:40:45.000Z",
          "wordCount": 359,
          "title": "Node + TypeScript で MySQL に接続して Read, Write してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cyPJ4Ji5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takumi%2520Kaji%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Node%2520%252B%2520TypeScript%2520%25E3%2581%25A7%2520MySQL%2520%25E3%2581%25AB%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2597%25E3%2581%25A6%2520Read%252C%2520Write%2520%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hELWlkLU1hRzQtdF8zN29QMUh3dGVlN3ZhbDdVYmN2dVhDS2VlbGc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "author": "aiji42",
          "description": "はじめに\nNext.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。\nここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。\n例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…\n\n一般ユーザ向けページは誰でもアクセス可能\nマイページはログイン済みのユーザのみアクセス可能\nログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる\n\nた...",
          "link": "https://zenn.dev/aiji42/articles/450ce962cc225a",
          "publishedOn": "2021-09-18T17:11:31.000Z",
          "wordCount": 460,
          "title": "【Next.js】アクセスコントロールパターン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fXFmupwO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:aiji42%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Next.js%25E3%2580%2591%25E3%2582%25A2%25E3%2582%25AF%25E3%2582%25BB%25E3%2582%25B9%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%2588%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTczOGQyOGQwMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/type-guard-arrow-function",
          "author": "anozon",
          "description": "この記事では アロー関数で Type Guard について紹介します。\nTypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript\n\n      \n        \n        type Nigiri = {\n  category: 'nigiri'\n  neta: string\n}\ntype Gunkan = {\n  category: 'gunkan'\n  neta: string\n  nori: number\n}\ntype Sushi = Nigiri | Gunkan...",
          "link": "https://zenn.dev/anozon/articles/type-guard-arrow-function",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 109,
          "title": "アロー関数とfunction それぞれの Type Guard 書き方",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_XnPNiWI--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2582%25A2%25E3%2583%25AD%25E3%2583%25BC%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25A8function%2520%25E3%2581%259D%25E3%2582%258C%25E3%2581%259E%25E3%2582%258C%25E3%2581%25AE%2520Type%2520Guard%2520%25E6%259B%25B8%25E3%2581%258D%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "author": "anozon",
          "description": "この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。\nGist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx\n\n pages/_app.tsx\nこちらは Function Component でかけるのでシンプルです。\n\n      \n        \n        import { AppProps } from 'next/app'\nimport Head from 'next/head'\n\nconst...",
          "link": "https://zenn.dev/anozon/articles/ts-nextjs-pages",
          "publishedOn": "2021-09-18T13:58:15.000Z",
          "wordCount": 145,
          "title": "Next.js with TypeScript で最小限の _app.tsx, _document.tsx",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uLCP34vU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%2520with%2520TypeScript%2520%25E3%2581%25A7%25E6%259C%2580%25E5%25B0%258F%25E9%2599%2590%25E3%2581%25AE%2520_app.tsx%252C%2520_document.tsx%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/sort-without-head",
          "author": "anozon",
          "description": "js で配列の 2 行目以降のみをソートする方法のメモです。\nrepl: https://repl.it/@anozon/sortbody#index.ts\n\n ソート対象の配列\n\n      \n        \n        // js\nconst elems = [\n  { name: 'primary', count: 10 }, // ソートしないで！\n  { name: 'b', count: 2 },\n  { name: 'd', count: 12 },\n  { name: 'a', count: 1 },\n  { name: 'c', count: 11 },\n]\n\n/...",
          "link": "https://zenn.dev/anozon/articles/sort-without-head",
          "publishedOn": "2021-09-18T13:58:12.000Z",
          "wordCount": 381,
          "title": "js で先頭以外(n行目以降)をソートする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EEI9PCSe--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:js%2520%25E3%2581%25A7%25E5%2585%2588%25E9%25A0%25AD%25E4%25BB%25A5%25E5%25A4%2596%2528n%25E8%25A1%258C%25E7%259B%25AE%25E4%25BB%25A5%25E9%2599%258D%2529%25E3%2582%2592%25E3%2582%25BD%25E3%2583%25BC%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-transition-props-bg",
          "author": "anozon",
          "description": "props で指定された URL が変わったら フェードアウト し、\n新しい URL 画像で フェードイン しながら表示するコンポーネントを作りました。\nreact-transition-group を使います。\n\n デモ\n<iframe src=\"https://codesandbox.io/embed/react-animation-background-image-jznjc?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\nstyle=\"width:100%; height:210px; bo...",
          "link": "https://zenn.dev/anozon/articles/react-transition-props-bg",
          "publishedOn": "2021-09-18T13:58:10.000Z",
          "wordCount": 252,
          "title": "React で URL props が変わったら fade アニメーションで 背景を変える",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Ww7V54_6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:React%2520%25E3%2581%25A7%2520URL%2520props%2520%25E3%2581%258C%25E5%25A4%2589%25E3%2582%258F%25E3%2581%25A3%25E3%2581%259F%25E3%2582%2589%2520fade%2520%25E3%2582%25A2%25E3%2583%258B%25E3%2583%25A1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25A7%2520%25E8%2583%258C%25E6%2599%25AF%25E3%2582%2592%25E5%25A4%2589%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-set-props",
          "author": "anozon",
          "description": "React で特定の props を固定した特化コンポーネントを定義する方法をいくつかまとめました。\nDEMO です。\nreact-set-props - CodeSandbox\n以下の Message という自作コンポーネントと Star というライブラリのコンポーネントを例に使います。\nStar は `material-ui の icon コンポーネントです。\n\n      \n        \n        import Star from '@material-ui/icons/Star'\n\nconst Message = (props) => <p>mes: ...",
          "link": "https://zenn.dev/anozon/articles/react-set-props",
          "publishedOn": "2021-09-18T13:58:10.000Z",
          "wordCount": 323,
          "title": "React で特定の props を固定した特化コンポーネントを定義する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--m2bzQnS6--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%25E7%2589%25B9%25E5%25AE%259A%25E3%2581%25AE%2520props%2520%25E3%2582%2592%25E5%259B%25BA%25E5%25AE%259A%25E3%2581%2597%25E3%2581%259F%25E7%2589%25B9%25E5%258C%2596%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component",
          "author": "anozon",
          "description": "同じ div に useSize と useHover の両方を使いたいとがあった。\nしかしどちらも ref を渡さなければいけなかったのでその方法です。\nShare ref with multiple ref handlers · Issue #13029 · facebook/react\n\n useCombinedRefs\nref を合成する関数を用意する。\n参考: https://github.com/facebook/react/issues/13029#issuecomment-497641073\n\n      \n        \n        export const us...",
          "link": "https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 130,
          "title": "React で複数の ref を 1つのコンポーネントにセットする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--86OXzkpm--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%2520ref%2520%25E3%2582%2592%25201%25E3%2581%25A4%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25AB%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-memory-ruler",
          "author": "anozon",
          "description": "メモリ付きの定規、ルーラーコンポーネントのサンプルです。\n\n\n コード\nruler-with-memory - CodeSandbox\n\n      \n        title=Ruler.tsx\n        <Ruler\n  memories={[1, 2, 4, 8, 16, 32, 64, 128]}\n  colors={['#333', '#444', '#555', '#666', '#777', '#888', '#999']}\n/>\n\n\n      \n      \n      \n        \n        function Ruler({ memor...",
          "link": "https://zenn.dev/anozon/articles/react-memory-ruler",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 338,
          "title": "React と display grid でメモリ付き定規",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dl-50b8j--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A8%2520display%2520grid%2520%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25A2%25E3%2583%25AA%25E4%25BB%2598%25E3%2581%258D%25E5%25AE%259A%25E8%25A6%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-fc-with-function",
          "author": "anozon",
          "description": "この記事では children を持つ Component を function で書くときの型定義する方法を説明します。\n\n 書き方\nReact.PropsWithChildren<Props> を使うことで書けます。\nSample PropsWithChildren - CodeSandbox\n\n      \n        \n        type Props = {}\nfunction Component(props: React.PropsWithChildren<Props>) {}\n\n\n      \n      \n それぞれの書き方\n\n      ...",
          "link": "https://zenn.dev/anozon/articles/react-fc-with-function",
          "publishedOn": "2021-09-18T13:58:09.000Z",
          "wordCount": 165,
          "title": "children を持つ Component を normal function で書くときの型定義",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Vg-BYSti--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:children%2520%25E3%2582%2592%25E6%258C%2581%25E3%2581%25A4%2520Component%2520%25E3%2582%2592%2520normal%2520function%2520%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258F%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/react-canvas-to-img",
          "author": "anozon",
          "description": "この記事では React (と TypeScript で) canvas から画像生成する方法を紹介します。\n文字描画や色変更をサンプルに説明していきます。\n\n React で Canvas を使うベースのコード\n\n      \n        \n        import React, { useEffect, useState } from 'react'\nconst width = 255\nconst height = 255\n\nfunction App() {\n  const [png, setPng] = useState<string | null>(null)...",
          "link": "https://zenn.dev/anozon/articles/react-canvas-to-img",
          "publishedOn": "2021-09-18T13:58:08.000Z",
          "wordCount": 262,
          "title": "React で canvas から画像生成する最小コード",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LrDSRHc5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%25E3%2581%25A7%2520canvas%2520%25E3%2581%258B%25E3%2582%2589%25E7%2594%25BB%25E5%2583%258F%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/python-typing-literal",
          "author": "anozon",
          "description": "TypeScript の UnionType は以下のように定義できます。\n\n      \n        \n        type Color = 'red' | 'green'\n\n\n      \n      Python の type でも同じようなことができるのか調べました。\nちなみに typeing.Union というのがありますが別です。\n\n typeing.Literal を使う\n\n      \n        \n        from typing import Literal, get_args\n\nCOLOR = Literal['red', 'green', 'bl...",
          "link": "https://zenn.dev/anozon/articles/python-typing-literal",
          "publishedOn": "2021-09-18T13:58:08.000Z",
          "wordCount": 127,
          "title": "Python で TypeScript の UnionType を使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IahdwvqC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Python%2520%25E3%2581%25A7%2520TypeScript%2520%25E3%2581%25AE%2520UnionType%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "author": "anozon",
          "description": "next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。\njsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。\nSSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。\n(/pages 直下で export するコンポーネント)\n\n コード\n\n      \n        \n        import { createConte...",
          "link": "https://zenn.dev/anozon/articles/next-initial-props-timestmap",
          "publishedOn": "2021-09-18T13:58:05.000Z",
          "wordCount": 143,
          "title": "Next.js export 実行時のタイムスタンプをコンポーネントで使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_ZPfgWAW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520export%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AE%25E3%2582%25BF%25E3%2582%25A4%25E3%2583%25A0%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%25B3%25E3%2583%2597%25E3%2582%2592%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/layer-react-counterapp",
          "author": "anozon",
          "description": "経年劣化に耐える ReactComponent の書き方 - Qiita\nが良さそうだったので TypeScript で書く場合を試してみた。\n\n コード\nCodeSandbox\n\n      \n        \n        import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\ntype Props = {\n  className?: string\n  count: number\n  handleCountUp: () => void\n  handleCountDown: ...",
          "link": "https://zenn.dev/anozon/articles/layer-react-counterapp",
          "publishedOn": "2021-09-18T13:58:01.000Z",
          "wordCount": 282,
          "title": "5層 ReactComponent と TypeScript でカウンター書いてみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--RJYDRHsx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:5%25E5%25B1%25A4%2520ReactComponent%2520%25E3%2581%25A8%2520TypeScript%2520%25E3%2581%25A7%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25BF%25E3%2583%25BC%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin",
          "author": "anozon",
          "description": "css animation の 100% や 0% などのキーワードに対して ts-styled-plugin のエラーが出たので対処しました。\nstyled-components で animation を扱う場合以下のように書きます。 (styled-components@5.2.1)\n\n      \n        \n        import styled, { keyframes } from 'styled-components'\n\nconst invert = keyframes`\n0% {\n\tbackground: white;\n\tcolor: black;\n}\n100...",
          "link": "https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin",
          "publishedOn": "2021-09-18T13:58:00.000Z",
          "wordCount": 103,
          "title": "styled-components の keyframes で ts-styled-plugin のエラーが出る",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--B3IbILWF--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:styled-components%2520%25E3%2581%25AE%2520keyframes%2520%25E3%2581%25A7%2520ts-styled-plugin%2520%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%25A9%25E3%2583%25BC%25E3%2581%258C%25E5%2587%25BA%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/get-props-type-from-component",
          "author": "anozon",
          "description": "Storybook で props 型が必要だけど export したくなかったので。\n\n 方法 1\n\n      \n        \n        import { ComponentProps } from 'react'\n\ntype Props = ComponentProps<typeof TargetComponent>\n\n\n      \n      \n 方法 2(古い)\n\n      \n        \n        type Props = Parameters<typeof TargetComponent>[0]",
          "link": "https://zenn.dev/anozon/articles/get-props-type-from-component",
          "publishedOn": "2021-09-18T13:57:52.000Z",
          "wordCount": 42,
          "title": "component から props の型を取得する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--TRBimX2I--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:component%2520%25E3%2581%258B%25E3%2582%2589%2520props%2520%25E3%2581%25AE%25E5%259E%258B%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/gatsby-to-typescript",
          "author": "anozon",
          "description": "GatsbyJS で書いているこのブログを Typescript 移行しました。\n主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。\nGatsby.js を完全 TypeScript 化する - Qiita\n\n GraphQL Data, Page Component に型をつける\ngatsby-plugin-graphql-codegen を使用する方法と @graphql-codegen/typescript を使用する方法がありましたが前者を選びました。セットアップが簡潔に済んだので。\n\n PageQuery\n\n      \n        \n...",
          "link": "https://zenn.dev/anozon/articles/gatsby-to-typescript",
          "publishedOn": "2021-09-18T11:29:37.000Z",
          "wordCount": 97,
          "title": "GatsbyJS を Typescript に移行した際の Type 付け",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eTdFOYgC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:GatsbyJS%2520%25E3%2582%2592%2520Typescript%2520%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2597%25E3%2581%259F%25E9%259A%259B%25E3%2581%25AE%2520Type%2520%25E4%25BB%2598%25E3%2581%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/fitty-in-react",
          "author": "anozon",
          "description": "fitty はコンテナに合わせてテキストのフォントサイズをフィットしてくれるライブラリです。\nrikschennink/fitty: ✨ Makes text fit perfectly\nそれを React で使うための hooks を書いた。\nGist fitty for react\n\n コード\n\n      \n        \n        import { useEffect, useRef } from 'react'\nimport fitty from 'fitty'\n\nexport function useFitty() {\n  const ref = useRef<...",
          "link": "https://zenn.dev/anozon/articles/fitty-in-react",
          "publishedOn": "2021-09-18T11:29:34.000Z",
          "wordCount": 113,
          "title": "fitty を React で使う useFitty hook",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NlK4FCvd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:fitty%2520%25E3%2582%2592%2520React%2520%25E3%2581%25A7%25E4%25BD%25BF%25E3%2581%2586%2520useFitty%2520hook%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/emoji-moji-count",
          "author": "anozon",
          "description": "アプリ\n文字頻度カウント(絵文字対応)\n\n\n 絵文字対応\n\"text\".split('') では絵文字が 1 文字として分割できません。\n\n      \n        \n        > \"😔\"\n'😔'\n> \"😔\".split('')\n[ '�', '�' ]\n\n\n      \n      punycode.js を使います。\n\n      \n        \n        const punySplit = (s: string) =>\n  punycode.ucs2.decode(s).map((v) => punycode.ucs2.encode(...",
          "link": "https://zenn.dev/anozon/articles/emoji-moji-count",
          "publishedOn": "2021-09-18T11:29:32.000Z",
          "wordCount": 147,
          "title": "絵文字を含めて文字数カウントするWebアプリ作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W3lvhCdf--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%25B5%25B5%25E6%2596%2587%25E5%25AD%2597%25E3%2582%2592%25E5%2590%25AB%25E3%2582%2581%25E3%2581%25A6%25E6%2596%2587%25E5%25AD%2597%25E6%2595%25B0%25E3%2582%25AB%25E3%2582%25A6%25E3%2583%25B3%25E3%2583%2588%25E3%2581%2599%25E3%2582%258BWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/clasp-init-feels",
          "author": "anozon",
          "description": "この記事では Clasp を使って GoogleAppScript のコードを手元で管理する方法を紹介します。\nClasp Command Line Interface using clasp | Google Developers\n\n 手順 1. 初期化する\n管理するディレクトリに移動してしてパッケージをインストールします。\nその後 Google アカウントでログインします。\n\n      \n        \n        yarn add @google/clasp -D\nclasp login\n\n\n      \n      プロジェクトのみに入れてる場合は以降の clasp ho...",
          "link": "https://zenn.dev/anozon/articles/clasp-init-feels",
          "publishedOn": "2021-09-18T11:29:30.000Z",
          "wordCount": 146,
          "title": "【Clasp】GoogleAppScript のコードをローカルで開発する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--qMrBgdQR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Clasp%25E3%2580%2591GoogleAppScript%2520%25E3%2581%25AE%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E3%2582%2592%25E3%2583%25AD%25E3%2583%25BC%25E3%2582%25AB%25E3%2583%25AB%25E3%2581%25A7%25E9%2596%258B%25E7%2599%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/arrow-function-generics",
          "author": "anozon",
          "description": "エディタなどによってうまくハイライトされなかったときはこうする。\n\n      \n        \n        const double = <T>(v: T): [T, T] => [v, v]\nconst hello = () => <p>Hello</p>\n// ↑ハイライトがおかしい\n\n\n      \n      <T>を<T,>にする。\n\n\n      \n        \n        const double = <T,>(v: T): [T, T] => [v, v]\nconst...",
          "link": "https://zenn.dev/anozon/articles/arrow-function-generics",
          "publishedOn": "2021-09-18T11:29:28.000Z",
          "wordCount": 60,
          "title": "Arrow function で generics にすると HTML タグとして認識されてしまうときの tips",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cRTe8suZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Arrow%2520function%2520%25E3%2581%25A7%2520generics%2520%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%2520HTML%2520%25E3%2582%25BF%25E3%2582%25B0%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E8%25AA%258D%25E8%25AD%2598%25E3%2581%2595%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AE%2520tips%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mura_chan/articles/93c6027b176ce6",
          "author": "mm1995tk",
          "description": "ことの発端\n\n      \n        \n        <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n  <Alert.Heading>...</Alert.Heading>\n  <p>\n    str...\n  </p>\n</Alert>\n\n\n      \n      React Bootstrapを使用している時にこんなコードを目にし、私はこう思いました。\n<Alert.Heading> ってなん...",
          "link": "https://zenn.dev/mura_chan/articles/93c6027b176ce6",
          "publishedOn": "2021-09-16T19:22:48.000Z",
          "wordCount": 138,
          "title": "Reactのライブラリでたまに見る<Component.Content />みたいなやつを調べた。~雰囲気でJSを書いている仲間へ届け~",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pakzO6Ov--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:mm1995tk%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:React%25E3%2581%25AE%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA%25E3%2581%25A7%25E3%2581%259F%25E3%2581%25BE%25E3%2581%25AB%25E8%25A6%258B%25E3%2582%258B%253CComponent.Content%2520%252F%253E%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2582%2584%25E3%2581%25A4%25E3%2582%2592%25E8%25AA%25BF%25E3%2581%25B9%25E3%2581%259F%25E3%2580%2582%7E%25E9%259B%25B0%25E5%259B%25B2%25E6%25B0%2597%25E3%2581%25A7JS%25E3%2582%2592%25E6%259B%25B8%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E4%25BB%25B2%25E9%2596%2593%25E3%2581%25B8%25E5%25B1%258A%25E3%2581%2591%7E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dvRGRPZUxRTGV3TWRYYVg4c0RmelFtaXFVZFRPaThQQ3MxenMtZ3c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite",
          "author": "Takashi Toyofuku",
          "description": "ハマったのでメモ。\n以下のような Text Component があるとする。\nこのコンポーネントでは div をラップしているので、Props には HTMLDivElement の attributes をユニオンしており、onClick などをいちいち定義しなくてよいようにしている。\n\n      \n        \n        export type Props = React.HTMLAttributes<HTMLDivElement> & {\n  size: number;\n  weight?: Weight;\n  align?: Align;\n  c...",
          "link": "https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite",
          "publishedOn": "2021-09-16T13:32:34.000Z",
          "wordCount": 132,
          "title": "Reactでpropsにスプレッド構文を使った場合にclassNameが意図通り適用されない",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--aMYVvwBq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Takashi%2520Toyofuku%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:React%25E3%2581%25A7props%25E3%2581%25AB%25E3%2582%25B9%25E3%2583%2597%25E3%2583%25AC%25E3%2583%2583%25E3%2583%2589%25E6%25A7%258B%25E6%2596%2587%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E5%25A0%25B4%25E5%2590%2588%25E3%2581%25ABclassName%25E3%2581%258C%25E6%2584%258F%25E5%259B%25B3%25E9%2580%259A%25E3%2582%258A%25E9%2581%25A9%25E7%2594%25A8%25E3%2581%2595%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDE5M2Y3MTBiOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/beeeyan/articles/4e0737146199d7",
          "author": "beeeyan",
          "description": "完成形はこんな感じ\n\n動かして中途半端な位置だと他のパズルが動かせないのでご注意ください。\n完成すると、「完成!! Congratulations!!」と表示されます。\n私のポートフォリオサイトでも試せます。\n\n 本記事内容\nソースコードは公開しているので（上記のcodesandbox内のものも含め）実装方法についてはあまり触れていません。（コメントは残したつもり）\n参考情報とか、もしこのソースコードを利用する場合の注意点とか書いてます。\nどっちかって言うと、「作ってみた」要素が強いです\n\n 作った経緯\nReactで「コンポーネントをドラッグで動かす」をやってみたかった。\n動かせるU...",
          "link": "https://zenn.dev/beeeyan/articles/4e0737146199d7",
          "publishedOn": "2021-09-16T11:07:38.000Z",
          "wordCount": 240,
          "title": "Reactのinteractjsを使って3×3のスライドパズルを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--G2E1gsZ---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:beeeyan%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%25E3%2581%25AEinteractjs%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A63%25C3%25973%25E3%2581%25AE%25E3%2582%25B9%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2589%25E3%2583%2591%25E3%2582%25BA%25E3%2583%25AB%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTg0NTA1OGQzYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/manalink/articles/manalink-react-hook-form-v7",
          "author": "マナリンク Tech Blog",
          "description": "本記事ではReact Hook Form(v7)を使ったコンポーネント設計のアイデアについて話します。\nhttps://react-hook-form.com/jp/\nReact Hook Formはその名の通り、Hooksをベースにフォームのバリデーション設定を記述できるライブラリで、特にv7で大きな変更が入りました。そのため、本記事ではv7前提であることをタイトルで明記しています。\nHooksにフォームのロジックが切り離されることにより、理論的には、TSXで記述されたView層と、バリデーションを司るロジック層を切り離して実装することができるはずです。\nオンライン家庭教師マナリンクで...",
          "link": "https://zenn.dev/manalink/articles/manalink-react-hook-form-v7",
          "publishedOn": "2021-09-16T09:22:21.000Z",
          "wordCount": 408,
          "title": "React Hook Form(v7)を使ったコンポーネント設計案",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--lKYHIL5m--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%259E%25E3%2583%258A%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%2520Tech%2520Blog%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520Hook%2520Form%2528v7%2529%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E8%25A8%25AD%25E8%25A8%2588%25E6%25A1%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODNjZWUyZDUxMy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/d4bd396476c107",
          "author": "nekoniki",
          "description": "概要\n今回はNestJSからfirebase-adminを使って端末にプッシュ通知を送るモックを作成する手順の私的メモです。\n同様の構成でプッシュ通知の導通を試したい方もいるかなと思い記事にしました。\n前提条件としてFirebaseのプロジェクトは作成済みで、アプリ側にもFirebaseは組み込み済み(=プッシュ通知を受け取る準備ができている)ものとします。\n\n NestJSとは\n以下公式サイトです。\nhttps://nestjs.com/\n以下のような説明があります。\n\nA progressive Node.js framework for building efficient, ...",
          "link": "https://zenn.dev/nekoniki/articles/d4bd396476c107",
          "publishedOn": "2021-09-16T08:37:28.000Z",
          "wordCount": 336,
          "title": "【TS】NestJSでFirebaseを使ってプッシュ通知を送るモック作成",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--FCo8b4Py--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590TS%25E3%2580%2591NestJS%25E3%2581%25A7Firebase%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2583%2597%25E3%2583%2583%25E3%2582%25B7%25E3%2583%25A5%25E9%2580%259A%25E7%259F%25A5%25E3%2582%2592%25E9%2580%2581%25E3%2582%258B%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E4%25BD%259C%25E6%2588%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794",
          "author": "ぴよまる",
          "description": "NestJSで構築した、ServerlessFrameworkを使ってデプロイするようなアプリケーションについて、普通のエンドポイントと別にバッチ処理を動かしたいことがありました。\n結論から言うとbatch処理用のhandlerを用意して\n\n 手法の比較\nバッチ処理というキーワードだけだと\n\nNestJSのTask Scheculingを使う\nNestJSにAPIの口を普通に作って、APIを定期実行するLambdaを外で作る\nAPIを定期実行するLambdaをserverlessで新しく用意する\nserverlessに新しいfunctionsの口を生やす\n\nみたいな手法が自分にはぱっと思...",
          "link": "https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794",
          "publishedOn": "2021-09-16T06:15:42.000Z",
          "wordCount": 101,
          "title": "NestJS + serverlessのアプリの一部にバッチ処理を入れる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--C7PNB1bL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B4%25E3%2582%2588%25E3%2581%25BE%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:NestJS%2520%252B%2520serverless%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2581%25AE%25E4%25B8%2580%25E9%2583%25A8%25E3%2581%25AB%25E3%2583%2590%25E3%2583%2583%25E3%2583%2581%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%2585%25A5%25E3%2582%258C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWE2ZDhjM2Y2MC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/panda_program/articles/typescript-compiler-api",
          "author": "Panda_Program",
          "description": "Compiler API で yaml から型を自動生成する\nこの記事は TypeScript Compiler API を実際に使って TypeScript の型を自動生成する方法を紹介しています。\n記事内では Google Analytics のイベントの型の自動生成にトライしています。\n題材として GA を選んだのは、以前 Next.js に Google Analytics（GA） を導入する方法を紹介した記事でGA のイベントで使う型を yaml から自動生成するのはどうか と書いていたからです。\n正直なところ、GA のイベントに馴染みのない方もいらっしゃると思うので、最初...",
          "link": "https://zenn.dev/panda_program/articles/typescript-compiler-api",
          "publishedOn": "2021-09-16T02:00:57.000Z",
          "wordCount": 4051,
          "title": "TypeScript Compiler API で型を自動生成する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--HO6E0qz_--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Panda_Program%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%2520Compiler%2520API%2520%25E3%2581%25A7%25E5%259E%258B%25E3%2582%2592%25E8%2587%25AA%25E5%258B%2595%25E7%2594%259F%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l6MVBBTkFPNzhHNkI2bGJoTUx2Q2xrWHRweU9vWXd1S3gyNjI2Rmc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/katoaki/articles/37a8cff3a8a32a",
          "author": "katoaki",
          "description": "はじめに\nブラケット記法でプロパティへアクセスしようとしたら「Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'xxx'. No index signature with a parameter of type 'string' was found on type 'xxx'」のエラーが出ました。\n対応について整理しました。\n\n やってみたこと\n\n エラーの再現\nエラーになった時のソースはこんな感じでした。\n\n      \n    ...",
          "link": "https://zenn.dev/katoaki/articles/37a8cff3a8a32a",
          "publishedOn": "2021-09-16T00:54:48.000Z",
          "wordCount": 274,
          "title": "TypeScriptでブラケット記法を使うときにハマったこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--7YkfaPun--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:katoaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E3%2583%2596%25E3%2583%25A9%25E3%2582%25B1%25E3%2583%2583%25E3%2583%2588%25E8%25A8%2598%25E6%25B3%2595%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AB%25E3%2583%258F%25E3%2583%259E%25E3%2581%25A3%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTU0ZTYyMTc2OC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/okmttdhr/articles/96506133e4efa0",
          "author": "okmttdhr",
          "description": "モノレポ管理のツールを検討したときのメモ\n\n Background\n自分が所属するチームで開発する JavaScript/TypeScript のプロダクトが増えてきて、同じような内容のリポジトリがいくつも存在している（n個とする）。\n変更を加えていくにつれて、それぞれの差分が大きくなり、以下のような問題が発生する。\n\n開発が止まっているプロジェクトの構成が古くなり、修正コストが発生する\n開発が複数同時進行している場合、同じような実装を手動で同期する必要がある\n\nこれらは共通の基盤等があれば効率的に（理想的にはn分の1の労力で）開発が可能であり、将来的なコストを考えると、いまのうちにその...",
          "link": "https://zenn.dev/okmttdhr/articles/96506133e4efa0",
          "publishedOn": "2021-09-15T22:44:41.000Z",
          "wordCount": 444,
          "title": "[TypeScript]モノレポ管理ツール比較検討",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1bTIVWgU--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:okmttdhr%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%25E3%2583%25A2%25E3%2583%258E%25E3%2583%25AC%25E3%2583%259D%25E7%25AE%25A1%25E7%2590%2586%25E3%2583%2584%25E3%2583%25BC%25E3%2583%25AB%25E6%25AF%2594%25E8%25BC%2583%25E6%25A4%259C%25E8%25A8%258E%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjk2ZmUyNzhhNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0",
          "author": "magurotuna",
          "description": "Copyright (c) 2018-2021 the Deno authors. MIT License.\n日本時間の昨日（2021 年 9 月 15 日）に Deno の v1.14.0 がリリースされました。\nhttps://deno.com/blog/v1.14\n詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。\n\n\nWeb Crypto API の追加\n\ndeno lint と deno fmt に対するカスタマイズオプションの追加\n\nURLPattern の実装\nネイティブ実装されたサーバーサイド WebSocket API の...",
          "link": "https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0",
          "publishedOn": "2021-09-15T17:25:27.000Z",
          "wordCount": 713,
          "title": "Deno 1.14.0 がリリースされたので新機能や変更点の紹介",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kZXFSi7V--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:magurotuna%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25201.14.0%2520%25E3%2581%258C%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E6%2596%25B0%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2584%25E5%25A4%2589%25E6%259B%25B4%25E7%2582%25B9%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNUGF0cWN1MUh1d1dEcG5uVzRETFVxZlI5aDlOM1NFc3FmaWdYZkE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sunnyone/articles/40a60f08eb391e",
          "author": "sunnyone",
          "description": "TypeScriptでは、オーバーロードが行われていたりして、素直に定義したくない関数の型があったりする。例えば、こういう型。\n\n      \n        \n            interface LogFn {\n        <T extends object>(obj: T, msg?: string, ...args: any[]): void;\n        (msg: string, ...args: any[]): void;\n    }\n\n\n      \n      例えばこういう関数を何かしつつ呼びたいというとき、組み込みの型関数Parameter...",
          "link": "https://zenn.dev/sunnyone/articles/40a60f08eb391e",
          "publishedOn": "2021-09-15T15:39:05.000Z",
          "wordCount": 32,
          "title": "値を中継する関数の引数の型にParameters<T>を使う",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--nGSbBbko--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:sunnyone%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E5%2580%25A4%25E3%2582%2592%25E4%25B8%25AD%25E7%25B6%2599%25E3%2581%2599%25E3%2582%258B%25E9%2596%25A2%25E6%2595%25B0%25E3%2581%25AE%25E5%25BC%2595%25E6%2595%25B0%25E3%2581%25AE%25E5%259E%258B%25E3%2581%25ABParameters%253CT%253E%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EvQUFUWEFKek9vWHNpcElZcTJGYmVnTXRTSnl0REIwNmMyalhqU1N4Z1g3OUY9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2876c8f98eca56",
          "author": "空雲",
          "description": "MicroCMSとTypeScript\nMicroCMSのAPIをTypeScript上で扱う場合、設定したスキーマに沿って自分で型を書かなければなりません。\nこの作業はそれなりに手間がかかるので、自動化していきたいと思います。\n\n 今回使用しているソースコード\nhttps://github.com/SoraKumo001/microcms-test\n\n MicroCMSの設定\n\n サービスの作成\nまずはMicroCMS上でサービスを作成します。\n名前は早い者勝ち方式のようなので、空いている名前を設定します。\n\n開発確認用なのでプランは無料を選びます\n\n\n APIの作成\n今回はAPI...",
          "link": "https://zenn.dev/sora_kumo/articles/2876c8f98eca56",
          "publishedOn": "2021-09-15T14:42:47.000Z",
          "wordCount": 442,
          "title": "MicroCMSのAPIをTypeScriptで型カッチリに実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Mvi9GblA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:MicroCMS%25E3%2581%25AEAPI%25E3%2582%2592TypeScript%25E3%2581%25A7%25E5%259E%258B%25E3%2582%25AB%25E3%2583%2583%25E3%2583%2581%25E3%2583%25AA%25E3%2581%25AB%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kawarimidoll/articles/db250a329c2f22",
          "author": "kawarimidoll",
          "description": "Deno標準ライブラリのバージョン0.107.0が公開されました。\nhttps://github.com/denoland/deno_std/releases/tag/0.107.0\nこちらで増強されたcollectionsというモジュールを紹介します。\nhttps://deno.land/std@0.107.0/collections\nその名の通り、集合の扱いを支援してくれるモジュールです。\n本記事では0.107.0のリリースで追加された関数を紹介します。\n既存のものは以下の記事で解説していますので、あわせてご覧ください。\nhttps://zenn.dev/kawarimidoll/a...",
          "link": "https://zenn.dev/kawarimidoll/articles/db250a329c2f22",
          "publishedOn": "2021-09-15T04:40:43.000Z",
          "wordCount": 924,
          "title": "Deno標準ライブラリ0.107.0で増強されたcollectionsの紹介",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--AewYH8k8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kawarimidoll%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25E6%25A8%2599%25E6%25BA%2596%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2596%25E3%2583%25A9%25E3%2583%25AA0.107.0%25E3%2581%25A7%25E5%25A2%2597%25E5%25BC%25B7%25E3%2581%2595%25E3%2582%258C%25E3%2581%259Fcollections%25E3%2581%25AE%25E7%25B4%25B9%25E4%25BB%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM3OWFjOGQ4Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/uki00a/articles/web-storage-api-in-deno",
          "author": "uki00a",
          "description": "はじめに\nDenoはv1.10からWeb Storage APIをサポートしています。\nこの記事ではDenoにおけるWeb Storage APIのサポートについて解説します。\n\n 前提\nこの記事はDeno v1.14を想定して記述されています。\n\n 基本的な使い方\n\n localStorage\nまず、localStorageの使い方について解説します。\n\n      \n        main.ts\n        localStorage.setItem(\"foo\", \"bar\");\nconsole.assert(localStorage.getItem(\"foo\") === \"...",
          "link": "https://zenn.dev/uki00a/articles/web-storage-api-in-deno",
          "publishedOn": "2021-09-14T22:38:56.000Z",
          "wordCount": 127,
          "title": "DenoのWeb Storage APIサポートとその将来について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0WjSW63l--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:uki00a%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Deno%25E3%2581%25AEWeb%2520Storage%2520API%25E3%2582%25B5%25E3%2583%259D%25E3%2583%25BC%25E3%2583%2588%25E3%2581%25A8%25E3%2581%259D%25E3%2581%25AE%25E5%25B0%2586%25E6%259D%25A5%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGUzODk3MWRmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc",
          "author": "wok",
          "description": "この記事は、こちらの記事を改変したものになります。\nhttps://cloud.flect.co.jp/entry/2021/09/14/105249\n\nこんにちは。\n前回の記事では、Amazon Chime SDK JSを用いたビデオ会議システムやゲーム配信システム(Among us auto mute)において、複数ユーザのビデオ映像を単一の映像に合成することでデータ通信量を削減する方法をご紹介しました。\n今回は、データ通信量を削減する別の方法として、ビデオ映像の送信時には解像度を落として受信後に超解像技術を用いる方法を試みてみましたので、これを紹介したいと思います。\n下図が実際に...",
          "link": "https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc",
          "publishedOn": "2021-09-14T01:54:45.000Z",
          "wordCount": 134,
          "title": "WebRTC(Amazon Chime SDK JS)で超解像を使ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OztpcbK7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:wok%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:WebRTC%2528Amazon%2520Chime%2520SDK%2520JS%2529%25E3%2581%25A7%25E8%25B6%2585%25E8%25A7%25A3%25E5%2583%258F%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hZemxmeFk4WFJDTHJzM1VvRWI2YmI0cEVhem1kTDg5ejFXQnFZdVE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "author": "空雲",
          "description": "Firebaseを使えるようにするまで\n\n Firebaseでプロジェクトを作成\nFirebaseを利用すると、無料で以下のサービスに対応した認証を行えます。\n自力で一つ一つ対応するより遙かに簡単です。\n\n上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。\n\n Google認証の有効化\nFirebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。\n先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。\n\n\n アプリケーションの登録\n歯車ボタンからプロジェクトを設定を選びま...",
          "link": "https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40",
          "publishedOn": "2021-09-14T00:01:35.000Z",
          "wordCount": 342,
          "title": "Next.jsでFirebase経由でGoogle認証を利用する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uYVZRDtq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Firebase%25E7%25B5%258C%25E7%2594%25B1%25E3%2581%25A7Google%25E8%25AA%258D%25E8%25A8%25BC%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/918416f96ee652",
          "author": "dozo",
          "description": "要素多過ぎ問題\n関連記事:\nRustが征くシリーズ過去記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\nSvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)  ← イマココ\n\n\n前回の記事でTypeScriptとrollup.js、WebAssemblyを繋いだ。\n次...",
          "link": "https://zenn.dev/dozo/articles/918416f96ee652",
          "publishedOn": "2021-09-13T21:52:39.000Z",
          "wordCount": 398,
          "title": "SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--N9SIwuvX--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Svelte%25E3%2581%25A7WebAssembly%25E3%2581%25A7TypeScript%25E3%2581%25A7Rollup%25E3%2581%25A7%253A%2520Rust%25E3%2581%258C%25E5%25BE%2581%25E3%2581%258F%25285%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "author": "azukiazusa",
          "description": "Vue 3が正式リリースされてから約1年が経過しました。\nVuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？\nこの記事ではVue 2からVue 3への移行手順を記述していきます。\n参考用のプロジェクトとして以下レポジトリを用意しました。\nhttps://github.com/azukiazusa1/vue3-migrate-test\nVue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。\n\n 移行ビルドを使用する\nVue 2からVue 3へ移行す...",
          "link": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "publishedOn": "2021-09-13T12:25:39.000Z",
          "wordCount": 953,
          "title": "Vue2のプロジェクトをVue3へマイグレーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WO_KQunr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592Vue3%25E3%2581%25B8%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b",
          "author": "Katsuma Narisawa",
          "description": "最近開発しているBtoB SaaSサービスの技術スタックを、RailsからNode.jsに移行した。\nこれにより、フロントエンドもバックエンドも全てをTypeScriptで統一することができた。\n特にNode.jsのWebバックエンドの構成について、まだまだ世の中に知見が少ない気がしているので記事にしておく。\n\n Webバックエンド - Node.js(TypeScript)\n\n Nexus/Apollo Server (Webサーバー)\nGraphQLサーバーとして、コードファーストなアプローチのApollo ServerラッパーであるNexusを使っている。\nhttps://nexu...",
          "link": "https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b",
          "publishedOn": "2021-09-13T01:01:28.000Z",
          "wordCount": 282,
          "title": "TypeScriptでWebサービス開発（Apollo Server/Prisma/Next.js etc...)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bymI1cDo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Katsuma%2520Narisawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:TypeScript%25E3%2581%25A7Web%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E9%2596%258B%25E7%2599%25BA%25EF%25BC%2588Apollo%2520Server%252FPrisma%252FNext.js%2520etc...%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dGd2NYR1FfN2V4bjdjdjY0OVh1cXBJMUZtcFF5ejQ1aTNIbE81Z3c9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117",
          "author": "みつよし",
          "description": "type UniqueId = string\ntype Obj = ...\n\nconst numberKeyMap = new Map<number, UniqueId>()\nconst stringKeyMap = new Map<string, UniqueId>()\nconst map = new Map<UniqueId, Obj>()\n\nfunction getObjByNumberKey(key: number): Obj | undefined {\n  const id = numberK...",
          "link": "https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117",
          "publishedOn": "2021-09-12T12:36:27.000Z",
          "wordCount": 70,
          "title": "[TypeScript] 複数のKeyから引くMap",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9B4jl2rx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%25A4%25E3%2582%2588%25E3%2581%2597%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%2520%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AEKey%25E3%2581%258B%25E3%2582%2589%25E5%25BC%2595%25E3%2581%258FMap%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvbS5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63",
          "author": "空雲",
          "description": "非同期処理の並列実行数に関して\n大量の処理をAPIに投げるような場合、非同期処理が行われているとすぐに次の処理の実行が可能になります。そのためDoS攻撃のようなリクエストを投げてしまう場合があります。かといって一件ずつ処理待ちをしていると、待機時間が馬鹿になりません。\nこういう場合に必要になってくるのが並列実行回数の制限です。\n\n よくある非同期待ちに関して\n最大並列実行数を制御する場合、よくある処理としては実行処理そのものをキューに積んで、最大数を制限しながらキューの中の処理を実行していく方式です。この方法の問題点は、処理内容が10万件とか大規模な処理が必要な場合に、10万件の実行...",
          "link": "https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63",
          "publishedOn": "2021-09-12T01:55:08.000Z",
          "wordCount": 141,
          "title": "[TypeScript]非同期処理(promise)の最大並列実行数を5行で制限",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--44Pko8Ur--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypeScript%255D%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%2528promise%2529%25E3%2581%25AE%25E6%259C%2580%25E5%25A4%25A7%25E4%25B8%25A6%25E5%2588%2597%25E5%25AE%259F%25E8%25A1%258C%25E6%2595%25B0%25E3%2582%25925%25E8%25A1%258C%25E3%2581%25A7%25E5%2588%25B6%25E9%2599%2590%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mackay/articles/1e8fcce329336d",
          "author": "マッケイ",
          "description": "こんにちは\nマッケイです。\nまとめまで書き終わった後に突如ページが消えて、まっさらのページを見ながら、それでもなお不屈の精神で書き上げた記事になります。\n\n はじめに\n僕が運営するReact Bootcampというコミュニティにて、useEffect has amissing dependencyというwarningを解消したいという声を聞きました。\n僕自身も体系だった情報がないかと探したところ、見当たらなかったのでこの記事を執筆しました。\n\n なぜwarningが発生する？\nそもそもなぜこのwarningが発生しているのでしょうか？\nこのwarningを出している本体は、ESLintで...",
          "link": "https://zenn.dev/mackay/articles/1e8fcce329336d",
          "publishedOn": "2021-09-11T16:20:49.000Z",
          "wordCount": 126,
          "title": "useEffect has amissing dependencyのwarningを解消する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IiiEdGiV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%259E%25E3%2583%2583%25E3%2582%25B1%25E3%2582%25A4%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:useEffect%2520has%2520amissing%2520dependency%25E3%2581%25AEwarning%25E3%2582%2592%25E8%25A7%25A3%25E6%25B6%2588%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTI3Mjk1ZGZiZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/laiso/articles/715543d2cd5552",
          "author": "laiso",
          "description": "概要\nLaravel標準のフロントエンド環境を自分好みにカスタマイズします\n\n 方針\n\nReact+TypeScriptで画面を書く\nLaravel Jetstream、Breezeを使わない(Livewire/Inertia.jsやAlpine.js、Blade Componentsが付属して入ってくるので)\nBladeテンプレートは画面構成に使わない\nSPAにする\nSSRはしない\nLaravel Mixでアセットを管理する\n\nなぜこうするかというとフロントエンドの環境だけ分離できる状態を維持しておいて、あとで複数人開発への移行やデプロイ分割をしたいためです。\n\n NPMモジュール...",
          "link": "https://zenn.dev/laiso/articles/715543d2cd5552",
          "publishedOn": "2021-09-11T15:56:43.000Z",
          "wordCount": 218,
          "title": "Laravel 8のフロントエンド環境をReact+TypeScriptにする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--dRH23dpK--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:laiso%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Laravel%25208%25E3%2581%25AE%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592React%252BTypeScript%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDhlOThiNTFhNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gakuzzzz/articles/1fa87342be1f82",
          "author": "gakuzzzz",
          "description": "はじめに\n世のプログラミング言語には「分割代入(Destructuring Assignment)」と呼ばれる機構を持つものがあります。\nメジャーな所では ECMAScript/TypeScript や Python, PHP, Ruby などでしょうか。\n実のところ Scala と Kotlin はこの分割代入という言語機構を持っていません。代わりに別の機構によって似たような目的を達成しています。\nこの記事では両者がとったアプローチを比較してそれぞれの違いについて紹介します。\n使用する言語のバージョンは以下の通りです。\n\nTypeScript 4.4\n\nScala 3.0.2\n\nK...",
          "link": "https://zenn.dev/gakuzzzz/articles/1fa87342be1f82",
          "publishedOn": "2021-09-11T15:48:18.000Z",
          "wordCount": 461,
          "title": "ScalaとKotlinの分割代入(っぽい機構)の比較",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--XAb7PGOE--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:gakuzzzz%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Scala%25E3%2581%25A8Kotlin%25E3%2581%25AE%25E5%2588%2586%25E5%2589%25B2%25E4%25BB%25A3%25E5%2585%25A5%2528%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25E6%25A9%259F%25E6%25A7%258B%2529%25E3%2581%25AE%25E6%25AF%2594%25E8%25BC%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDI3ZDVkOWZjMS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/bokutano26/articles/442f11f4ec69bf",
          "author": "bokutano26",
          "description": "こんにちは。この記事ではjavaScriptにおける等価演算子（==）と厳密等価演算子（===）の違いについて解説していきます。実際の現場では、等価演算子は非推奨としているところが多い印象です。その理由も以下の解説を読むことで理解できるかと思います。\n\n 等価演算子（==）と厳密等価演算子（===）の違い\nまず初めにMDNを見てみましょう。\nMDNには、等価演算子と厳密等価演算子の説明が以下のようにされています。\n\n 等価演算子(==)\n\n等価演算子 (==) は、二つのオペランドが等しいことを検査し、論理値で結果を返します。厳密等価演算子とは異なり、オペランドの型が異なる場合には型の変...",
          "link": "https://zenn.dev/bokutano26/articles/442f11f4ec69bf",
          "publishedOn": "2021-09-11T13:56:16.000Z",
          "wordCount": 62,
          "title": "==（等価演算子）と===（厳密等価演算子）の違い",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--p90GwqT4--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:bokutano26%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%253D%253D%25EF%25BC%2588%25E7%25AD%2589%25E4%25BE%25A1%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25EF%25BC%2589%25E3%2581%25A8%253D%253D%253D%25EF%25BC%2588%25E5%258E%25B3%25E5%25AF%2586%25E7%25AD%2589%25E4%25BE%25A1%25E6%25BC%2594%25E7%25AE%2597%25E5%25AD%2590%25EF%25BC%2589%25E3%2581%25AE%25E9%2581%2595%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDdjYzVlNTc4Ni5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuitosato/articles/fdbc464f31c292",
          "author": "Yuito Sato",
          "description": "はじめに\nas-safelyというライブラリを作成しました。\nこのライブラリを使うと、型判定に失敗したときはその場で例外を投げてくれます。\n危険なas(型Assertion)を撲滅し、真にタイプセーフなType Script環境を手に入れましょう。\nhttps://github.com/YuitoSato/as-safely\n\n      \n        \n        const str1: string = asSafely('1' as unknown, isString);\n// => OK\n\nconst str2: string = asSafely(1 as u...",
          "link": "https://zenn.dev/yuitosato/articles/fdbc464f31c292",
          "publishedOn": "2021-09-11T08:02:46.000Z",
          "wordCount": 458,
          "title": "TypeScriptの全てのasを撲滅するas-safelyというOSSを作ったゾォォ〜",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--mG3T6XoH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuito%2520Sato%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:TypeScript%25E3%2581%25AE%25E5%2585%25A8%25E3%2581%25A6%25E3%2581%25AEas%25E3%2582%2592%25E6%2592%25B2%25E6%25BB%2585%25E3%2581%2599%25E3%2582%258Bas-safely%25E3%2581%25A8%25E3%2581%2584%25E3%2581%2586OSS%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2582%25BE%25E3%2582%25A9%25E3%2582%25A9%25E3%2580%259C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDk1YjBmYTViNS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rpf_nob/articles/vscode-extension-js-console",
          "author": "のふのふ🀄",
          "description": "はじめに\nこの記事は以下を目的としています。\n\nVSCodeの拡張機能を作って公開する方法の簡単な説明\n作った拡張機能の宣伝\n\n\n どういうものを作ったのか❓\nJavaScript(TypeScript)でconsole.logなどの構文を簡単に挿入できるものを作りました。今まで使用していたほぼ同じような拡張機能があり、ちょっと機能追加したかったのですが、しばらく更新されていないようだったので自身で作り直して公開してみることにしました。\nここからインストールできますのでよかったらインストールして試してみてください🙇‍♂️\nhttps://marketplace.visualstudi...",
          "link": "https://zenn.dev/rpf_nob/articles/vscode-extension-js-console",
          "publishedOn": "2021-09-11T06:41:27.000Z",
          "wordCount": 252,
          "title": "【VSCode Extension】JavaScriptのconsoleを簡単に挿入できる拡張機能を作って公開してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ATKpl1pd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AE%25E3%2581%25B5%25E3%2581%25AE%25E3%2581%25B5%2520%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590VSCode%2520Extension%25E3%2580%2591JavaScript%25E3%2581%25AEconsole%25E3%2582%2592%25E7%25B0%25A1%25E5%258D%2598%25E3%2581%25AB%25E6%258C%25BF%25E5%2585%25A5%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E6%258B%25A1%25E5%25BC%25B5%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ljOVRTTU5ma1RXM2dfTTdFWFFwQ2kteFlLT2ZhcEVJZjhHazJmSWc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mamushi/articles/multiple_transfer",
          "author": "Daigo Wakabayashi",
          "description": "こんにちは、ダイゴと申します。\n先日、StripeAPI を使った山分けの決済（ 顧客：送金先 = １：n ）を実装する機会があったので、\nインプットした情報を忘れないうちに整理しておきたい、と思い記事にしました。\nどなたかの参考になれば幸いです。\n\n 実装する機能\nプラットフォーム型サービスで、以下のような決済要件を持つものとします。\n\n決済総額のうち、10%をプラットフォーム手数料として徴収\n残り 90%を複数の送金先へ均等に山分けする\n\n\n サービス全体のイメージ\n\n\n Customer\n顧客。購入者でありお金を支払うユーザー。上の図で緑。\n\n Platform\nその名の通りプラッ...",
          "link": "https://zenn.dev/mamushi/articles/multiple_transfer",
          "publishedOn": "2021-09-11T04:31:02.000Z",
          "wordCount": 423,
          "title": "【StripeAPI】複数の送金先への山分けを実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1qy0BDms--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Daigo%2520Wakabayashi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590StripeAPI%25E3%2580%2591%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E9%2580%2581%25E9%2587%2591%25E5%2585%2588%25E3%2581%25B8%25E3%2581%25AE%25E5%25B1%25B1%25E5%2588%2586%25E3%2581%2591%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dBM3BNMUQyWl85LXpWcWx5NVp6ci1mbldzQUpSWGY5M3FjZWxtPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuku/articles/4d2f665cf42385",
          "author": "Yuku Kotani",
          "description": "Namespace Import に補完を効かせる TypeScript Language Service Plugin[1]、typescript-plugin-namespace-import を作りました。\nそのモチベーションと使い方を紹介します。\n\n\nこの記事・製作物は Named Export と Default Export の是非について主張をするものではなく、それらの話題に関連して作ったものでもありません\n\n\n TL;DR\n\n普通のオブジェクトを名前空間として用いると Tree Shaking が効かずバンドルサイズが膨らむ\nNamespace Import を用いれば ...",
          "link": "https://zenn.dev/yuku/articles/4d2f665cf42385",
          "publishedOn": "2021-09-10T02:27:35.000Z",
          "wordCount": 280,
          "title": "Namespace Import に補完を効かせる TypeScript プラグインを作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--smq8RmXo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuku%2520Kotani%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Namespace%2520Import%2520%25E3%2581%25AB%25E8%25A3%259C%25E5%25AE%258C%25E3%2582%2592%25E5%258A%25B9%25E3%2581%258B%25E3%2581%259B%25E3%2582%258B%2520TypeScript%2520%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lEQVVDNDRXNTlSbWgyMjVIR2ZycENZQmRlNUJNZ0VCaDl3TGY0PXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "author": "hanetsuki",
          "description": "2021/09/時点での Next.js + TypeScript の環境構築忘備録です。\n主な環境のバージョン\n\nnext: v11.1.0\ntypescript: v4.3.5\neslint: v7.32.0\n@emotion/react: v11.4.1\n\n\n 1.Next.jsの環境を作成\nhttps://nextjs.org/docs#setup\ntpescript用の環境作成コマンドよしなにやってくれる便利なやつ。\n\n      \n        \n        yarn create next-app --typescript\n\n\n      \n      \n ディレクト...",
          "link": "https://zenn.dev/rabbit/articles/d7175e62dc56a5",
          "publishedOn": "2021-09-09T10:47:54.000Z",
          "wordCount": 383,
          "title": "Next.js + TypeScript 環境構築 v11.1",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1TuHkiZq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%2520%252B%2520TypeScript%2520%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2520v11.1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/takayuri/articles/af583f251ed64d",
          "author": "Take",
          "description": "Storybook、React初心者です。\nStoryook内でuseSelector部分をモックにして表示パターンを作成した時のメモです。\n(そもそもStorybookでそんなことするのが適切でないかもしれません。)\n\n 前提\n\n\"react\": 16.13.1\n\"storybook\": 5.3.19\n\"react-redux\": 7.2.0\n\n\n      \n        Fooコンポーネント(一部抜粋)\n        import * as selectors from \"src/selectors\"; // Stateのデータを加工してる関数がまとまっている\n\nexport ...",
          "link": "https://zenn.dev/takayuri/articles/af583f251ed64d",
          "publishedOn": "2021-09-09T08:49:27.000Z",
          "wordCount": 290,
          "title": "StorybookでuseSelectorのモックを追加",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--h1GHtOK3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Take%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Storybook%25E3%2581%25A7useSelector%25E3%2581%25AE%25E3%2583%25A2%25E3%2583%2583%25E3%2582%25AF%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDIyOGRkNmY5Zi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "author": "博ノ助",
          "description": "触れる回数は多いけどいまだに覚えられないのでメモ\nこれよりいい方法いっぱいあると思います\n\n コマンド\n\n      \n        コマンドライン\n        $ npm install --save-dev jquery @types/jquery\n\n\n      \n      \n nuxt.config.js\n\n      \n        nuxt.config.js\n        + const webpack = require('webpack')\n\nexport default {\n// ...省略...\n// Build Configuration: https...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450",
          "publishedOn": "2021-09-08T12:44:09.000Z",
          "wordCount": 75,
          "title": "Nuxt.js+TypeScriptにjQueryを導入するルーティン",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eRmbKyyh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt.js%252BTypeScript%25E3%2581%25ABjQuery%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryo_kawamata/articles/github-trending-bot",
          "author": "ryo_kawamata",
          "description": "📦 作ったもの\nGitHub Trendingに掲載されたリポジトリを定期的につぶやく Twitter Bot を作りました。\n全体のトレンドをつぶやく@gh_trending_と、JavaScript・TypeScript のトレンドをつぶやく@gh_trending_jsの 2 種類があります。\n\n\n\n@gh_trending_\n@gh_trending_js\n\n\n\n\n\n\n\n\n\n仕様はこちらです。\n\n30 分から 1 時間おきに GitHub Trending に掲載されているリポジトリをツイート\n一度ツイートたリポジトリは再度掲載されていても 1 週間はつぶやかない\n投稿内容は...",
          "link": "https://zenn.dev/ryo_kawamata/articles/github-trending-bot",
          "publishedOn": "2021-09-08T03:35:07.000Z",
          "wordCount": 668,
          "title": "GitHub Trendingを定期的につぶやくTwitter BotをFirebaseで作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0-72P1Us--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryo_kawamata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:GitHub%2520Trending%25E3%2582%2592%25E5%25AE%259A%25E6%259C%259F%25E7%259A%2584%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25B6%25E3%2582%2584%25E3%2581%258FTwitter%2520Bot%25E3%2582%2592Firebase%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTY3Y2IxMjRlZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/qsf/articles/65afdf6a71bbc6",
          "author": "たふみ",
          "description": "TL;DR\nNoInfer のような物があればいいのだが，ないのでこれを使う\nhttps://github.com/microsoft/TypeScript/issues/14829#issuecomment-322267089\n\n      \n        \n        export type NoInfer<T> = T & {[K in keyof T]: T[K]}\n\n\n      \n      \n Background\nものは違いますが，ReactのCustom Hooksを作っていて詰まりました．\n以下の例を見てください．\n\n      \n   ...",
          "link": "https://zenn.dev/qsf/articles/65afdf6a71bbc6",
          "publishedOn": "2021-09-07T18:25:35.000Z",
          "wordCount": 332,
          "title": "TypeScriptで型変数に期待していない型推論がきいてしまうとき",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cfeklSC---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%259F%25E3%2581%25B5%25E3%2581%25BF%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E5%259E%258B%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AB%25E6%259C%259F%25E5%25BE%2585%25E3%2581%2597%25E3%2581%25A6%25E3%2581%2584%25E3%2581%25AA%25E3%2581%2584%25E5%259E%258B%25E6%258E%25A8%25E8%25AB%2596%25E3%2581%258C%25E3%2581%258D%25E3%2581%2584%25E3%2581%25A6%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2586%25E3%2581%25A8%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g4ZUl0bk9kaXNIRnpLdjB4VG4wc2E0endabi1IZDZCWWowTHNMUkg0PXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuhr/articles/668dba202726bf",
          "author": "yuhr",
          "description": "TypeScriptの話です。default exportを使うことが有害であるかのような言説に異議を唱えるためにこの記事を書きました。\nあらかじめ断っておきますが、この記事はTypeScriptを使っているプロジェクトのモジュール構成に関する話です。npmに上げられているようなNode.jsパッケージ間でのimport/exportはまた別のエコシステムが関わってくる話なので、分けて考えてください。Denoにおけるimport/exportに関しては、この記事での議論がそのまま通用します。\n\n 基本的にdefault exportのみを使うべき\n筆者の考えでは、named export...",
          "link": "https://zenn.dev/yuhr/articles/668dba202726bf",
          "publishedOn": "2021-09-07T16:22:44.000Z",
          "wordCount": 361,
          "title": "named exportは有害だと考えられます",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YFMhcexC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yuhr%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:named%2520export%25E3%2581%25AF%25E6%259C%2589%25E5%25AE%25B3%25E3%2581%25A0%25E3%2581%25A8%25E8%2580%2583%25E3%2581%2588%25E3%2582%2589%25E3%2582%258C%25E3%2581%25BE%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l2U2lnclBGSkhIOTRLRnhjWDk1d3Z1d3pMZnVKc091MUI4Nkg2PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/bull/articles/8f1d28c8cfcdf1",
          "author": "bull",
          "description": "基地局の位置情報を取得できる API を公開しました！\nに記載されているAPIを利用して位置情報を取得してみます。\n\n はじめに\n\n Soracom APIの使い方\nリファレンスが公開されているのでこちらから使い方を試してみることが可能です\nhttps://users.soracom.io/ja-jp/tools/api/reference/\n\n SoracomのAPIから基地局情報を取得するために必要なAPI\n少なくとも以下の3つのAPIを実行する必要がありました。\n\nAPIトークンの取得(認証キーを利用してAPIを実行してトークンを取得します)\n3G の場合： MCC（Mobile ...",
          "link": "https://zenn.dev/bull/articles/8f1d28c8cfcdf1",
          "publishedOn": "2021-09-06T14:02:36.000Z",
          "wordCount": 405,
          "title": "TypeScriptでSoracomの基地局の位置情報を取得できるAPIを実行する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Dl5gJF6l--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:bull%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:TypeScript%25E3%2581%25A7Soracom%25E3%2581%25AE%25E5%259F%25BA%25E5%259C%25B0%25E5%25B1%2580%25E3%2581%25AE%25E4%25BD%258D%25E7%25BD%25AE%25E6%2583%2585%25E5%25A0%25B1%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258BAPI%25E3%2582%2592%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2g2MllRUHZOMXdGR25zMmFxNEpvOWI0VW96UTY4b3NfdlBOOFFqZUE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "author": "matsutoba",
          "description": "nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。\n先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。\n\n やりたいこと\n\nボタンを押したらテキストが変わるコンポーネントを作る。\nボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい\n\n\n 動かした環境\n\nmacOS 11.5.2\nNode.js 14.17.0\nyarn 1.22.10\n\n後述の cr...",
          "link": "https://zenn.dev/matsutoba/articles/fba1e8a7c41181",
          "publishedOn": "2021-09-06T11:24:10.000Z",
          "wordCount": 636,
          "title": "nextjs + typescript + jest + enzyme の最小サンプルを動かしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gNRMktEh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsutoba%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:nextjs%2520%252B%2520typescript%2520%252B%2520jest%2520%252B%2520enzyme%2520%25E3%2581%25AE%25E6%259C%2580%25E5%25B0%258F%25E3%2582%25B5%25E3%2583%25B3%25E3%2583%2597%25E3%2583%25AB%25E3%2582%2592%25E5%258B%2595%25E3%2581%258B%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjM5ZDk0NGY4My5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/9b439fb4278ab9",
          "author": "hanetsuki",
          "description": "Gatsby.jsにEmotionを導入した際の忘備録です。\n今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。\nhttps://github.com/tsuki-lab/gatsby-emotion-sample\n\nEmotionの導入以降を参照したい場合は 1.Emotionをインストール から読み進めてください。\n\n\n本記事は、javascriptベースのGatsby.jsを対象としていますが、typescriptの環境でも同様に導入可能です。最後に、typescript対応の追記をしてあります。\n\nこの記事は以下のバージョン時点の情報です。...",
          "link": "https://zenn.dev/rabbit/articles/9b439fb4278ab9",
          "publishedOn": "2021-09-06T04:19:33.000Z",
          "wordCount": 276,
          "title": "Gatsby.js + Emotion で環境構築",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ri-yVb_q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Gatsby.js%2520%252B%2520Emotion%2520%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/articles/a4c59a294dcbae",
          "author": "k_touge",
          "description": "サマリー\nDocker Desktop （docker デーモン）を起動させておいて…\n\n      \n        zsh\n        % git clone https://github.com/sprout2000/react-ts.git\n% cd react-ts\n% docker-compose up\n\n\n      \n      localhost:3000 を開きましょう。これだけです。\nローカルに Node.js がインストールされていなかったり、インストールされていてもこのコンテナで利用されているバージョンとは異なっていたりしても同じ（仮想）環境でプロジェク...",
          "link": "https://zenn.dev/sprout2000/articles/a4c59a294dcbae",
          "publishedOn": "2021-09-06T03:23:34.000Z",
          "wordCount": 1054,
          "title": "Docker で React + TypeScript の開発環境",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LHKCVT0m--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k_touge%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Docker%2520%25E3%2581%25A7%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTkyNDAwNGE0Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/14bc23b488c95a",
          "author": "dozo",
          "description": "load_from_memoryを迂回すればなんとかなる\n関連記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)\n\n\nこんな記事がある\nhttps://qiita.com/yokra9/items/f9e98a9b47fe2d1234b0\n(^_^;)煽ってんなぁ。。。\nVanillaJS(素のJSのこと), WA...",
          "link": "https://zenn.dev/dozo/articles/14bc23b488c95a",
          "publishedOn": "2021-09-05T23:55:11.000Z",
          "wordCount": 326,
          "title": "Rustのimage::load_from_memory遅すぎ問題",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--H2Uu7Js7--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Rust%25E3%2581%25AEimage%253A%253Aload_from_memory%25E9%2581%2585%25E3%2581%2599%25E3%2581%258E%25E5%2595%258F%25E9%25A1%258C%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/296u/articles/7175641f1c4492",
          "author": "296u",
          "description": "この記事について\nReactをtypescriptで始めたはいいものの、テストを書こうとすると、どういったテストを書けば良いのか、書いてもtypeエラーになることがままある。\nその度にドキュメントを読みに行ったり、エラー文を検索したりするのだが、毎回解決に時間がかかっていた。（特に最初の頃はJestの構文を間違えているのが問題なのか、enzymeの構文を間違えているのが問題なのかもわからず）\nそこで一度Jest側を体系的に勉強しなおそうと思い至った。\nせっかくなので、ドキュメンのうち「はじめに」部分の内容について、若干コードを付け足しながら記事にしてみようと思う。\n\n はじめに\n対象...",
          "link": "https://zenn.dev/296u/articles/7175641f1c4492",
          "publishedOn": "2021-09-05T23:48:26.000Z",
          "wordCount": 2308,
          "title": "[Typescript]Jest入門を進めてみる（前半）",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--UZHUGvdq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:296u%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BTypescript%255DJest%25E5%2585%25A5%25E9%2596%2580%25E3%2582%2592%25E9%2580%25B2%25E3%2582%2581%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%25EF%25BC%2588%25E5%2589%258D%25E5%258D%258A%25EF%25BC%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOTM5YzBkZWU0Ny5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/eagle/articles/functor-in-ts",
          "author": "eagle",
          "description": "本記事について\nIMappableというインターフェースを定義することを動機として\n型レベル関数という概念を導入します。\n後半では型レベル関数を用いてApplicativeやMonadに相当するインターフェースの定義や、\n2引数以上の型レベル関数の定義を行ってその実用可能性を示します。\n\n IMappable導入の動機と障害\n次の2つの関数を考えます。\n\n      \n        \n        const mapArray: <A, B>(f: (a: A) => B) => (fa: A[]) => B[] =\n  (f) => (fa)...",
          "link": "https://zenn.dev/eagle/articles/functor-in-ts",
          "publishedOn": "2021-09-05T10:53:35.000Z",
          "wordCount": 1350,
          "title": "TypeScriptでIMappable(Functor)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pUJ5asaT--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:eagle%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7IMappable%2528Functor%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTFmZjAxNGQyZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "author": "みずねこ",
          "description": "この記事について\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nApexChartsをNext.jsで使う方法\nデータをべた書きしてグラフ化\nデータをFirestoreから取得してグラフ化\n\n\n 参考にした記事\n\nhttps://qiita.com/IchiLab/ite...",
          "link": "https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3",
          "publishedOn": "2021-09-05T10:10:46.000Z",
          "wordCount": 760,
          "title": "Cloud Firestore×Apexchartsでグラフ描画する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vcRhejeS--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Cloud%2520Firestore%25C3%2597Apexcharts%25E3%2581%25A7%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sterashima78/books/9dd0db90a6e532",
          "author": "sterashima78",
          "description": "Typescript での開発を普段行っている方向けに関数型プログラミングの要素の一部を紹介するものです。\n関数型言語やその背景にある理論を紹介することは意図していません。\nそのあたりのポリシーは『はじめに』に記載しているので御覧ください。\n\n有料設定にしていますが基本的にはすべての章を無料で公開するつもりです。\n気が向いた方や内容の充実を希望する方は支援いただけると幸いです。",
          "link": "https://zenn.dev/sterashima78/books/9dd0db90a6e532",
          "publishedOn": "2021-09-05T09:09:21.000Z",
          "wordCount": 18,
          "title": "[WIP] Typescriptで書く関数型プログラミング",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NwVWwFv1--/g_center%2Ch_280%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYm9va19jb3Zlci8yMmE4OTg5OGMwLmpwZw==%2Cw_200/v1627283836/default/og-base-book_yz4z02.jpg",
            "length": "0",
            "type": "image/jpeg"
          }
        },
        {
          "id": "https://zenn.dev/rabbit/articles/2dea91c4949604",
          "author": "hanetsuki",
          "description": "以前まで、Emotion を用いてGatsby.jsを使っていたのですが、\niricoさんの「ReactのCSSの選択肢を比較してみた」という記事を読んで、Linariaに興味を持ち始めました。\nzero runtimeとのことで、パフォーマンス向上が期待できるのは嬉しい点です。\nhttps://linaria.dev/\n今回は、LinariaとGatsbyの組み合わせでの記事が少なかったので忘備録としてこの記事を残します。\n今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。\nhttps://github.com/tsuki-lab/gatsby-...",
          "link": "https://zenn.dev/rabbit/articles/2dea91c4949604",
          "publishedOn": "2021-09-05T08:36:45.000Z",
          "wordCount": 402,
          "title": "Gatsby.js + TypeScript + Linaria で環境構築",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zT421Ur1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:hanetsuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Gatsby.js%2520%252B%2520TypeScript%2520%252B%2520Linaria%2520%25E3%2581%25A7%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dqcUw3akdtc1E3STZUTUtMcDBzUXVhd0FNUzNvcHBWNFVCRGZzPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/b5dc5e642e8d4e",
          "author": "arark",
          "description": "以前超型安全firestoreができたと言った者なんですが、クエリも型安全にできたので紹介します。\n例えばfirestoreでクエリするとき、where(age, ==, 30)したからtypescriptでもage:30で型ついてくんねえかな〜〜〜〜〜〜〜〜〜〜って思ったことある人人いませんか。これができます。さらに、firestore特有のクエリの制限、例えばage > 30とheight < 150を同時にできないみたいなそういうのも検知します。\n\n 準備\n\n      \n        \n        npm i firefuse firebase@9\n\n\n    ...",
          "link": "https://zenn.dev/arark/articles/b5dc5e642e8d4e",
          "publishedOn": "2021-09-05T07:44:14.000Z",
          "wordCount": 403,
          "title": "firestoreの型安全クエリができた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--u_LHo7hL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:firestore%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "author": "みずねこ",
          "description": "この記事について\n初めまして、みずねこです。\nNext.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。\nこの記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。\n何か間違っている点などありましたらご指摘いただけると幸いです。🙏\n\n 解説すること\n\nFirebaseのアプリ作成と初期設定\nFirebase Authenticationで認証機能を実装\nMateria-UIで認証画面のデザイン\n\n\n 参考に...",
          "link": "https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d",
          "publishedOn": "2021-09-05T04:36:15.000Z",
          "wordCount": 400,
          "title": "Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9s_NIaOG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25BF%25E3%2581%259A%25E3%2581%25AD%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Next.js%25E3%2581%25A8Firebase%2520%2520Authentication%25E3%2581%25A7%25E3%2583%25A1%25E3%2583%25BC%25E3%2583%25AB%25E3%2583%25BB%25E3%2583%2591%25E3%2582%25B9%25E3%2583%25AF%25E3%2583%25BC%25E3%2583%2589%25E8%25AA%258D%25E8%25A8%25BC%2528Cookie%2529%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3TXVGSTk3c0gtcFhHZWc3VEI4TjRLbzl5YW1vNzdLdjhQeHZMPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/356a13c38a612b",
          "author": "arark",
          "description": "準備\n\n      \n        \n        export type Extends<E, A> = A extends E ? true : false;\nexport type NotExtends<E, A> = A extends E ? false : true;\nexport type Exact<A, B> = Extends<A, B> extends true\n  ? Extends<B, A> extends true\n    ? true\n    : false\n  : false;\nexpo...",
          "link": "https://zenn.dev/arark/articles/356a13c38a612b",
          "publishedOn": "2021-09-05T03:19:16.000Z",
          "wordCount": 533,
          "title": "型レベルユニットテストのススメ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ixRNN1X3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E5%259E%258B%25E3%2583%25AC%25E3%2583%2599%25E3%2583%25AB%25E3%2583%25A6%25E3%2583%258B%25E3%2583%2583%25E3%2583%2588%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E3%2581%25AE%25E3%2582%25B9%25E3%2582%25B9%25E3%2583%25A1%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsuei/articles/908278e0c22eec",
          "author": "matsuei",
          "description": "FirestoreではDocumentのSnapShotから、そのDocumentに紐づくSubCollectionを取得出来ないようになっています。\nクエリで特定のDocumentのSnapShotを取得した後にSubCollectionを取得するには一手間必要なので、その方法を紹介します。\n\n 例に使うデータ構造\nルートにUsersコレクションを持ち、各ユーザードキュメントがSubCollectionでPetsを持つデータ構造を考えます。\n\n\n\nCollection\nDocument\nData(key)\nData(value)\nSubCollection\nDocument\nData(...",
          "link": "https://zenn.dev/matsuei/articles/908278e0c22eec",
          "publishedOn": "2021-09-05T02:30:12.000Z",
          "wordCount": 92,
          "title": "FirestoreでDocumentのSnapShotからSubCollectionを取得する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--VUDl2dn0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsuei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Firestore%25E3%2581%25A7Document%25E3%2581%25AESnapShot%25E3%2581%258B%25E3%2582%2589SubCollection%25E3%2582%2592%25E5%258F%2596%25E5%25BE%2597%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzAxNzlhNjMwYS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/stomita/articles/9d1408c3447cd3",
          "author": "Shinichi Tomita",
          "description": "概要\nCamelCase<S>を TypeScriptのtemplate literal typesで実装するのは、ネット上にいくつかサンプルコードであがっているのを見たが、見つけたものはすべて不完全だった。types-festに含まれているCamelCase<S>もやはりおかしい。\nとはいえ正確なCamelizationの定義というものがあるのかどうかもよく知らない。なので、npmで公開されているcamelcase の動作に近づけたCamelCase<S>の型定義を作成してみた。\nポイントは以下\n\n複数区切り文字('-', '_', '.')に対...",
          "link": "https://zenn.dev/stomita/articles/9d1408c3447cd3",
          "publishedOn": "2021-09-04T23:09:06.000Z",
          "wordCount": 168,
          "title": "正確なCamelCaseのTemplate Literal Type定義を目指した",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--8zNQs2C8--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Shinichi%2520Tomita%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E6%25AD%25A3%25E7%25A2%25BA%25E3%2581%25AACamelCase%25E3%2581%25AETemplate%2520Literal%2520Type%25E5%25AE%259A%25E7%25BE%25A9%25E3%2582%2592%25E7%259B%25AE%25E6%258C%2587%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dNMC1DR0FuaEc0TmQ2R2NGREtPUUp6ZHRqYzhNaTYzU21IRVp1c1E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "author": "Kyohei",
          "description": "Jikan API(public API)を使ってTypescriptを勉強します。\n基本は検索機能を使ってAnime Objectを取得します。\n検索はカスタムフックを作ります。(importは省略してます。)\n\n      \n        \n        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {\n    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...",
          "link": "https://zenn.dev/kyohei1212/articles/4318cba26e9885",
          "publishedOn": "2021-09-04T16:04:27.000Z",
          "wordCount": 164,
          "title": "Typescript + React + Jikan API で練習プロジェクト",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NOQZSbVk--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Kyohei%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Typescript%2520%252B%2520React%2520%252B%2520Jikan%2520API%2520%25E3%2581%25A7%25E7%25B7%25B4%25E7%25BF%2592%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fOGMzNjA0YzdmYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87",
          "author": "nimusuke6",
          "description": "Node.js（+Yarn）のインストール\n\n\nanyenvをインストール\nanyenvでnodenvをインストール\nnodenvでNode.jsをインストール\n\nYarnをインストール\n\n\n      \n        \n        npm install -g yarn\n\n\n      \n      \n Reactプロジェクトの作成\n\n      \n        \n        npx create-react-app my-app --template typescript\ncd my-app\nyarn start\n\n\n      \n      \n      \n    ...",
          "link": "https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87",
          "publishedOn": "2021-09-04T12:44:25.000Z",
          "wordCount": 112,
          "title": "PhpStormでReact開発環境を整える",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--uynC6bOl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nimusuke6%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:PhpStorm%25E3%2581%25A7React%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592%25E6%2595%25B4%25E3%2581%2588%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pqWktNZjVMUU9ZMERGMGd6eGZvU29jV003TndXV0xXMUhwWEFOZVE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/fujiyama/articles/bf26790ed81964",
          "author": "Fujiyamayama",
          "description": "Qsって何？\n\nnpm公式\n\nクエリの解析，文字列化をするライブラリです．\n使っていて非常に便利なので一旦まとめようと思います．\n\n 基本的な使い方\n\n      \n        \n        import qs from 'qs';  // (以下省略)\n\nconst obj = qs.parse('a=c');  // { a: 'c' }\n\nconst str = qs.stringify(obj);  // 'a=c'\n\n\n      \n      簡単に言うと，parseはURLなどの文字列をオブジェクトに変換するメソッドで， stringifyはオブジェクトをURL...",
          "link": "https://zenn.dev/fujiyama/articles/bf26790ed81964",
          "publishedOn": "2021-09-04T12:30:58.000Z",
          "wordCount": 700,
          "title": "URLを解析するQsを丁寧に説明してみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Ru1s29JN--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Fujiyamayama%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:URL%25E3%2582%2592%25E8%25A7%25A3%25E6%259E%2590%25E3%2581%2599%25E3%2582%258BQs%25E3%2582%2592%25E4%25B8%2581%25E5%25AF%25A7%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODY3NDIzNGYyYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/gomi_ningen/articles/f1c285f586215b",
          "author": "ゴミ人間",
          "description": "Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする際の記述方法がわからなくて 30 分くらい溶けたのでメモっておきます。\n\n 配列\n\n      \n        \n        export interface AppParameters {\n    items: string[]\n}\n\nconst AppParametersSchema: JTDSchemaType<AppParameters> = {\n    properties: {\n        items: { elements: { type: 'string' }...",
          "link": "https://zenn.dev/gomi_ningen/articles/f1c285f586215b",
          "publishedOn": "2021-09-04T07:30:17.000Z",
          "wordCount": 433,
          "title": "Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--I0DWSHVd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%25B4%25E3%2583%259F%25E4%25BA%25BA%25E9%2596%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Ajv%2520%25E3%2581%25AE%2520JTDSchemaType%2520%25E3%2581%25A7%25E8%25A4%2587%25E9%259B%2591%25E3%2581%25AA%2520JSON%2520%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E3%2583%2590%25E3%2583%25AA%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pVQm9rTjV0TTBhUzgycGdtX3FSNV9BLVZiZGNJekNGNHhBaUZ6PXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "author": "Ren Shimosawa",
          "description": "ページ内の文字列を検索して、それだけ残す\n\n こんなかんじに検索して、絞り込むものを作ります。\n\n\n前提として、環境は\n・Next.js\n・TypeScript\nとなっています。\n※アイコンとかは違うコンポーネントなので省略して書きます。\n\n      \n        index.tsx\n        import styles from './SearchForm.module.scss'\nimport cn from 'classnames'\n\nexport interface Props = {\n  placeholder?: string\n  className?: st...",
          "link": "https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1",
          "publishedOn": "2021-09-03T13:05:34.000Z",
          "wordCount": 141,
          "title": "ページ内の文字列を検索してフィルタリングするコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--go-MzjS5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Ren%2520Shimosawa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2583%259A%25E3%2583%25BC%25E3%2582%25B8%25E5%2586%2585%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2582%2592%25E6%25A4%259C%25E7%25B4%25A2%25E3%2581%2597%25E3%2581%25A6%25E3%2583%2595%25E3%2582%25A3%25E3%2583%25AB%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ptcmlXRGR5UjRXLUdpUHd4eUZHbGphX1Q0cUVRS3hqcXhNU1NPPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb",
          "author": "k_touge",
          "description": "サマリー\nDocker Desktop （docker デーモン）を起動させておいて…\n\n      \n        zsh\n        % git clone https://github.com/sprout2000/cra.git\n% cd cra\n% docker-compose up\n\n\n      \n      localhost:3000 を開きましょう。これだけです。\nhttps://github.com/sprout2000/cra\n\nこのコンテナの実行を停止するには以下のようにしてください。\n\n      \n        bash\n        ^C  ...",
          "link": "https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb",
          "publishedOn": "2021-09-03T09:08:44.000Z",
          "wordCount": 485,
          "title": "Docker で React + TypeScript の開発環境【入門編】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--t5X1G3Zg--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k_touge%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Docker%2520%25E3%2581%25A7%2520React%2520%252B%2520TypeScript%2520%25E3%2581%25AE%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E3%2580%2590%25E5%2585%25A5%25E9%2596%2580%25E7%25B7%25A8%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTkyNDAwNGE0Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/umezo/articles/dc452d9a1a24f2",
          "author": "umezo",
          "description": "やりたいこと\n\n      \n        \n        type T1 = {\n    a: {\n        a1: string;\n\ta2: number;\n    };\n    b: {\n        b1: string;\n        b2: number;\n    }[];\n};\n\ntype T2: DeepPartial<T1>;\n\nconst t2: T2 = {\n    a: {\n        a2: \"1\",\n    },\n    b: [\n        {\n\t    b2: 1\n\t}\n    ],\n};\n\n\n      \n     ...",
          "link": "https://zenn.dev/umezo/articles/dc452d9a1a24f2",
          "publishedOn": "2021-09-03T07:14:04.000Z",
          "wordCount": 72,
          "title": "TypeScriptのPartialを再帰的にするやつ。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--9mXxMU1P--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:umezo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AEPartial%25E3%2582%2592%25E5%2586%258D%25E5%25B8%25B0%25E7%259A%2584%25E3%2581%25AB%25E3%2581%2599%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hmRUZCbmZtcERXLXlGRUtmOUR0MUF0MDZJR3lNdlJWY0pGYnV4Q0E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/umezo/articles/06bd73b3a02be3",
          "author": "umezo",
          "description": "やりたいこと\nこういうことをしたい。\n\n      \n        \n        type T1 = {\n    a: number,\n    b: string,\n};\n\ntype T2 = PickUpByType<T1, number>;\n\nconst t2: T2 = {\n    a: 1,\n};\n\n\n      \n      \n 解決\n実装はこう\n\n      \n        \n        type KeysByType<T, Type> = {\n  [key in keyof T]: T[key] extends Type ? key ...",
          "link": "https://zenn.dev/umezo/articles/06bd73b3a02be3",
          "publishedOn": "2021-09-03T06:42:39.000Z",
          "wordCount": 119,
          "title": "TypeScriptのPickをTypeで指定できるやつ。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--kIATZRjC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:umezo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25AEPick%25E3%2582%2592Type%25E3%2581%25A7%25E6%258C%2587%25E5%25AE%259A%25E3%2581%25A7%25E3%2581%258D%25E3%2582%258B%25E3%2582%2584%25E3%2581%25A4%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hmRUZCbmZtcERXLXlGRUtmOUR0MUF0MDZJR3lNdlJWY0pGYnV4Q0E9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rgbkids/articles/3ab4c91b3b028c",
          "author": "vteacher",
          "description": "原文を元に、会話風（入門編によくある感じ）にしたてあげました。\nわかりにくいところは説明を足しています。\n原文：\nhttps://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html\n\n あいさつ\n🙍‍♀️「TypeScriptを使用して簡単なWebアプリケーションを構築することから始めましょう」\n🙂「うう…TypeScriptって、使っていないとなんとなくマウントを取られた感じがするあれですね」\n🙍‍♀️「そうですね。小さいストレスでもバグの元。フロントエンドの開発にTypeScriptは必須...",
          "link": "https://zenn.dev/rgbkids/articles/3ab4c91b3b028c",
          "publishedOn": "2021-09-03T03:50:41.000Z",
          "wordCount": 346,
          "title": "「5分でTypeScript」を会話風に説明してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W2-24eUx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:vteacher%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%258C5%25E5%2588%2586%25E3%2581%25A7TypeScript%25E3%2580%258D%25E3%2582%2592%25E4%25BC%259A%25E8%25A9%25B1%25E9%25A2%25A8%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZZXAwYXhYZ084ZHlWVVJsbndsanVacFlaRmF4ZU14YV92Z3JDSHc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nekoniki/articles/26dfda35b90377",
          "author": "nekoniki",
          "description": "はじめに\n今回はReactNativeアプリから端末のカレンダーへイベントを登録する方法について紹介します。\n会議やイベント情報などを表示するようなタイプのアプリでは、OSのカレンダーと同期を行いたいケースも多いので役立つかと思います。\n\n 使用するライブラリ\n使用するライブラリはreact-native-calendar-eventsです。\n端末内のカレンダー情報の取得から、そこにイベントを追加するまでを行うことができます。\nhttps://github.com/wmcmahan/react-native-calendar-events\n\n インストール\n以下コマンドでインストール...",
          "link": "https://zenn.dev/nekoniki/articles/26dfda35b90377",
          "publishedOn": "2021-09-03T01:20:02.000Z",
          "wordCount": 209,
          "title": "【RN】端末のカレンダーにイベントを追加する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gmAljGGz--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nekoniki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590RN%25E3%2580%2591%25E7%25AB%25AF%25E6%259C%25AB%25E3%2581%25AE%25E3%2582%25AB%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25BC%25E3%2581%25AB%25E3%2582%25A4%25E3%2583%2599%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjU4Y2YzMzAxMC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/heavenosk/articles/headless-ui-drawer",
          "author": "へぶん",
          "description": "Headless UI + Tailwind CSS を組み合わせてドロワーを楽に実装できたので紹介します。\n以下のような Twitter っぽいのドロワーを作成しました。\nhttps://twitter.com/heavenOSK/status/1433431433146605571?s=20\n\n Headless UI とは\nHeadless UI はスタイルを排除したコンポーネント集で、Tailwind CSS と相性がいいとのことです。\nhttps://headlessui.dev/\n\n スタイルを排除した設計\n各コンポーネントのスタイルを切り替えるタイミングを抽象化してくれてい...",
          "link": "https://zenn.dev/heavenosk/articles/headless-ui-drawer",
          "publishedOn": "2021-09-02T17:40:36.000Z",
          "wordCount": 444,
          "title": "Headless UI + Tailwind CSS で Twitter 風のドロワーを作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wxOlXCoD--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B8%25E3%2581%25B6%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Headless%2520UI%2520%252B%2520Tailwind%2520CSS%2520%25E3%2581%25A7%2520Twitter%2520%25E9%25A2%25A8%25E3%2581%25AE%25E3%2583%2589%25E3%2583%25AD%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hoMWZIZ0JrazVrQ3N2c2dQYS10azVkMG0yTk02ZHBDM3BBWXdKPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/koki_tech/articles/361bb8f2278764",
          "author": "Koki Nagai",
          "description": "こんにちは、株式会社スタメンでオンラインサロンFANTSのフロントエンドエンジニアをしている@0906kokiです。\n今回はSOLID原則の5つの設計原則を、Reactのコードをベースにして解説できればと思います。\n\n SOLID原則とは？\nSOLID原則とは、ソフトウェアを柔軟に、メンテナンス性を高く設計するための5つの原則となります。\nRobert C. Martinによって、5つの原則の頭文字をとってSOLIDという名前が付けられました。5つの原則とは以下の通りです。\n\nSRP: 単一責任の原則\nOCP: 開放閉鎖の原則\nLSP: リスコフの置換原則\nISP: インタフェース分離の...",
          "link": "https://zenn.dev/koki_tech/articles/361bb8f2278764",
          "publishedOn": "2021-09-02T07:49:17.000Z",
          "wordCount": 1123,
          "title": "SOLID原則で考えるReact設計",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--YFq6E64w--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Koki%2520Nagai%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:SOLID%25E5%258E%259F%25E5%2589%2587%25E3%2581%25A7%25E8%2580%2583%25E3%2581%2588%25E3%2582%258BReact%25E8%25A8%25AD%25E8%25A8%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2h2X19mQldpYWVVeFVsZjVxaHZPSGpfMk1uZTIwdGpBdW9rV2hnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/hiro__dev/articles/605161cd5a7875",
          "author": "Hiro",
          "description": "環境\n・MacOS BigSur（11.5.2）\n・VScode（1.59.1）\n・Node.js   (16.1.1）\n・Firebase （9.0.0）←New!\n・yarn (1.22.11)\n・TypeScript(4.4.2)\n\n 対象\n・これからFirebaseでプロジェクトを始めようとする人\n✍️8月25日以前に出された教材やチュートリアル、記事、そして現時点での日本語の公式ドキュメントを参考にしようとしている人は特に！\n・教材や記事、ハンズオン通りにFirebaseでプロジェクトを始めたのに原因不明のエラーぶつかった人\n・8月25日以前にFirebaseプロジェクト作って...",
          "link": "https://zenn.dev/hiro__dev/articles/605161cd5a7875",
          "publishedOn": "2021-09-02T01:01:39.000Z",
          "wordCount": 464,
          "title": "これからFirebaseでプロジェクトを始めようとする全ての人が知っておくべきこと v8→v9リリース",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cN2qHcGL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Hiro%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2581%2593%25E3%2582%258C%25E3%2581%258B%25E3%2582%2589Firebase%25E3%2581%25A7%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592%25E5%25A7%258B%25E3%2582%2581%25E3%2582%2588%25E3%2581%2586%25E3%2581%25A8%25E3%2581%2599%25E3%2582%258B%25E5%2585%25A8%25E3%2581%25A6%25E3%2581%25AE%25E4%25BA%25BA%25E3%2581%258C%25E7%259F%25A5%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%258A%25E3%2581%258F%25E3%2581%25B9%25E3%2581%258D%25E3%2581%2593%25E3%2581%25A8%2520v8%25E2%2586%2592v9%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2ptT1MtaXJhZ2RXSHJTRkNPTzcwdVV4TkVaTnh0S29HcVpaUjNObDVNPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yknight/articles/1e46d3754e7f3b",
          "author": "y_Knight",
          "description": "Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル\nSass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。\n\n node-sassの終了に関してはこちらの記事を参照\n\n\n前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。\n\n\n sass-loaderに依存するNext.js（v11系）と、Storybook（v...",
          "link": "https://zenn.dev/yknight/articles/1e46d3754e7f3b",
          "publishedOn": "2021-09-01T07:40:37.000Z",
          "wordCount": 887,
          "title": "【Sass】node-sassの終了アナウンスから、dart-sassを使う (2021/09)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--eO7NQ7Qt--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:y_Knight%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2580%2590Sass%25E3%2580%2591node-sass%25E3%2581%25AE%25E7%25B5%2582%25E4%25BA%2586%25E3%2582%25A2%25E3%2583%258A%25E3%2582%25A6%25E3%2583%25B3%25E3%2582%25B9%25E3%2581%258B%25E3%2582%2589%25E3%2580%2581dart-sass%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%2520%25282021%252F09%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZjk2NzljOWNhZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryoryo16/articles/7a62ca4634685f",
          "author": "ryoryo",
          "description": "はじめに\nMaterial-UIのDate Pickerって見た目もシンプルでかなりいい感じですよね～\n\nデフォルトのDate Picker\nしかし、やはりデフォルで使用するには表示が日本人向けではない...\n英語というだけでかなりの拒否反応を起こしてしまう方もいたりいなかったりしますよね。\nここはしっかりと日本人向けにカスタマイズしていこうじゃないかという趣旨の記事となっております。\n\n 基本の使い方\nここはドキュメントをサラッと読むだけでも分かる部分なので読み飛ばしていただいても OK\n\n インストール\nDate Pickerですがcoreパッケージではなく「Material-U...",
          "link": "https://zenn.dev/ryoryo16/articles/7a62ca4634685f",
          "publishedOn": "2021-09-01T07:18:52.000Z",
          "wordCount": 430,
          "title": "Material-UIのDate Pickerをカスタマイズしよう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--G4CAAFC5--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryoryo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Material-UI%25E3%2581%25AEDate%2520Picker%25E3%2582%2592%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25BA%25E3%2581%2597%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGVhNThjOTA4NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryoryo16/articles/076cc7e7391467",
          "author": "ryoryo",
          "description": "はじめに\nMaterial-UI のコンポーネントのスタイルを変更したいなーと思った際に、公式ドキュメントだけでは\"withStyles\"の利用方法が分かりづらかったので。\n色々と使い方はあるみたいだが、とりあえず基本の基本をピックアップ。\n\n withStyles の基本\n下記のように withStyles によってコンポーネントを作成し配置する。\n\n      \n        \n        const CustomComponent = withStyles({\n  root: {\n    // ここにスタイルを書いたり\n  },\n  label: {},\n  // etc...",
          "link": "https://zenn.dev/ryoryo16/articles/076cc7e7391467",
          "publishedOn": "2021-09-01T00:39:13.000Z",
          "wordCount": 330,
          "title": "Material-UIのwithStylesでカスタマイズ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--xvVmuEoq--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryoryo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Material-UI%25E3%2581%25AEwithStyles%25E3%2581%25A7%25E3%2582%25AB%25E3%2582%25B9%25E3%2582%25BF%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25BA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGVhNThjOTA4NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory",
          "author": "terrierscript",
          "description": "Reactでhooksを切り替えしたい時について考えたケースがあったので書き残し。\n中盤は悪例を挟みます。悪例については利用しないことをおすすめします\n結論だけ知りたい方向け -> 結論へ\n\n 前提\nReact hooksで例えばパターンA、パターンBを切り替える、factoryパターンっぽいことをやりたくなることがある。\nコンポーネントより外側で切り替えることが可能であればこちらの記事などのようなことが可能だが、コンポーネントの内部で切り替えたいケースだとこのやり方だと処理出来ない\n例えばこのようなカウンターを考えてみたい。\n\n      \n        \n        \n/...",
          "link": "https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory",
          "publishedOn": "2021-08-31T14:49:44.000Z",
          "wordCount": 572,
          "title": "React hooksでfactoryパターンっぽいことをしたいときは結局コンポーネントを分離するのが妥当",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--F0e07K8q--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:terrierscript%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:React%2520hooks%25E3%2581%25A7factory%25E3%2583%2591%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%25B3%25E3%2581%25A3%25E3%2581%25BD%25E3%2581%2584%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%25E3%2581%25AF%25E7%25B5%2590%25E5%25B1%2580%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E5%2588%2586%25E9%259B%25A2%25E3%2581%2599%25E3%2582%258B%25E3%2581%25AE%25E3%2581%258C%25E5%25A6%25A5%25E5%25BD%2593%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZGE3MmMyMTRjZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk",
          "author": "NEMTUS公式",
          "description": "Angularでsymbol-sdkを使うための環境構築\n\n 概要\nこの記事では、Angularで作成されたWebアプリ上でsymbol-sdkというnpmパッケージを用いてSymbolというブロックチェーンを利用するための第一歩となる環境構築について説明します。Angularのデフォルトの設定のままsymbol-sdkをインストールするといくつかのエラーが発生します。それを修正するための方法について説明し、同時にsymbol-sdkをAngularプロジェクトで使う際のサンプルコードを紹介します。\n以下URLでサンプルコードを実際に動かしているので、必要に応じてご参照ください。\n\n...",
          "link": "https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk",
          "publishedOn": "2021-08-31T03:08:26.000Z",
          "wordCount": 2962,
          "title": "Symbol x Angular その1 Angularでsymbol-sdkを使うための環境構築",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--C6cho3W3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:NEMTUS%25E5%2585%25AC%25E5%25BC%258F%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:Symbol%2520x%2520Angular%2520%25E3%2581%259D%25E3%2581%25AE1%2520Angular%25E3%2581%25A7symbol-sdk%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2586%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o3VUUtZEN2M0FYdzZpVl9IS2ZxemhrOHlmWlBJRlY1QU9HVE0yPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ryo_kawamata/articles/82871052dad5ff",
          "author": "ryo_kawamata",
          "description": "最近公開した Chrome 拡張の紹介と技術的なポイントの解説です。\n\n ✨ 何を作った？\n実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作りました。\nhttps://twitter.com/KawamataRyo/status/1430730469260234756\nhttps://chrome.google.com/webstore/detail/sync-raise-hand/pimhkdcdgmedijjnjeagagnnddgbcnkm\n大人数のミーティングで挙手ボタンを使う機会があるのですが、ボタンを押すという動作が億劫 & 挙手...",
          "link": "https://zenn.dev/ryo_kawamata/articles/82871052dad5ff",
          "publishedOn": "2021-08-30T03:16:03.000Z",
          "wordCount": 407,
          "title": "実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作ったのでコード全公開&解説",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--iM60Uquc--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ryo_kawamata%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E5%25AE%259F%25E9%259A%259B%25E3%2581%25AE%25E6%258C%2599%25E6%2589%258B%25E3%2581%25A8%2520Google%2520Meet%2520%25E4%25B8%258A%25E3%2581%25AE%25E6%258C%2599%25E6%2589%258B%25E3%2583%259C%25E3%2582%25BF%25E3%2583%25B3%25E3%2581%258C%25E9%2580%25A3%25E5%258B%2595%25E3%2581%2599%25E3%2582%258B%2520Chrome%2520%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2581%25AE%25E3%2581%25A7%25E3%2582%25B3%25E3%2583%25BC%25E3%2583%2589%25E5%2585%25A8%25E5%2585%25AC%25E9%2596%258B%2526%25E8%25A7%25A3%25E8%25AA%25AC%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNTY3Y2IxMjRlZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/eagle/articles/ts-maybe-introduction",
          "author": "eagle",
          "description": "本記事はこの記事の続きです。\nhttps://zenn.dev/eagle/articles/ts-coproduct-introduction\n実用性の観点から割愛したMaybeを改めて紹介します。\n代数的データ型をコードで表現するために次のコード群を使用します。\n\n      \n        \n        type Coproduct<T> = {\n  [K in keyof T]: Record<\"type\", K> & T[K];\n}[keyof T];\n\ntype Individual<TCoproduct extends Recor...",
          "link": "https://zenn.dev/eagle/articles/ts-maybe-introduction",
          "publishedOn": "2021-08-29T10:42:49.000Z",
          "wordCount": 1906,
          "title": "TypeScriptで学ぶ古典的ADT - Maybe",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--mfDKKF2c--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:eagle%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E5%25AD%25A6%25E3%2581%25B6%25E5%258F%25A4%25E5%2585%25B8%25E7%259A%2584ADT%2520-%2520Maybe%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTFmZjAxNGQyZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/otanu/articles/f0a0b2bd0d9c44",
          "author": "otanu",
          "description": "先日、Next.js 11.1がリリースされました。\nhttps://nextjs.org/blog/next-11-1\nStorybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。\n構成は以下のようになっています。\n\nyarn\nNext.js v11.1.0\nESLint v7.32.0(Next.js v11.1から含まれるように)\nTypeScript v4.4.2\nTailwind v2.2.8\nStorybook v6.3\nPrettier v2.3.2\nJest v27.1.0\n\nコー...",
          "link": "https://zenn.dev/otanu/articles/f0a0b2bd0d9c44",
          "publishedOn": "2021-08-29T10:19:30.000Z",
          "wordCount": 540,
          "title": "Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--yxWEstlL--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:otanu%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_57_bold:Next.js%2528v11.1%2529%252BTypeScript%252BTailwind%252BSASS%252BStorybook%252BJest%25E3%2581%25AE%25E3%2583%259C%25E3%2582%25A4%25E3%2583%25A9%25E3%2583%25BC%25E3%2583%2597%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzM0ZjNjYTg5OS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/shimapon3/articles/13e3d4b147742c",
          "author": "shimapon",
          "description": "はじめに\n初めて記事のようなものを書きます．よろしくお願いします．\n今回は2020年のインターンシップ選考で私が開発した，都道府県ごとの人口を表示するアプリについて開発した手順を書いていきたいと思います．\n至らない点があれば、遠慮なくご指摘いただければとも思います。\n\n Demo\n県名にチェックを入れると，その県の人口推移が表示されます．\n複数選択すると、まとめて表示されます。\n\nhttps://react-highcharts-resas.web.app/\n\n 環境\n\nmacOS Catalina (v10.15.6)\nNode.js (v14.8.0)\n\n\n 使用技術\n\nReac...",
          "link": "https://zenn.dev/shimapon3/articles/13e3d4b147742c",
          "publishedOn": "2021-08-28T23:43:44.000Z",
          "wordCount": 684,
          "title": "React + Highcharts で都道府県の人口をグラフで表示するアプリ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--fwDS_XM2--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shimapon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:React%2520%252B%2520Highcharts%2520%25E3%2581%25A7%25E9%2583%25BD%25E9%2581%2593%25E5%25BA%259C%25E7%259C%258C%25E3%2581%25AE%25E4%25BA%25BA%25E5%258F%25A3%25E3%2582%2592%25E3%2582%25B0%25E3%2583%25A9%25E3%2583%2595%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2Rhcmsvcy5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/0ee7d75dd200db",
          "author": "arark",
          "description": "firebaseってtypescriptと相性わるいな～～～～～～～～～とまじで思ってたので超型安全firestore作ってみたらできました。パスまで型安全でやってくれます。これです。\nhttps://github.com/Hagihara-A/fire-fuse\nnpm i firefuse\nで使えます\nfirestore-v9を想定しています。\n\n 特徴/出来ること\n\nただのユーティリティパッケージなので、一切の独自実装がない。ただし型安全。\nパスの型付け\nパスを解析してReferenceを型付けできる\n\n\n なにができるか\n\n      \n        \n        // /...",
          "link": "https://zenn.dev/arark/articles/0ee7d75dd200db",
          "publishedOn": "2021-08-28T16:04:02.000Z",
          "wordCount": 447,
          "title": "超型安全firestoreができた(更新)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--4-HrrYUM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E8%25B6%2585%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8firestore%25E3%2581%258C%25E3%2581%25A7%25E3%2581%258D%25E3%2581%259F%2528%25E6%259B%25B4%25E6%2596%25B0%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rince/articles/4e35e52e0e158d",
          "author": "rince",
          "description": "バリデーション用ライブラリ Yup で、配列内のオブジェクトのプロパティが重複していないことを検証する方法。\nREADMEには重複チェックについて書かれていなかったのでまとめておく。\n例えば、url と caption を持つオブジェクトの配列で url がユニークであることを検証する場合、こんな感じに書ける。\n\n      \n        \n        import * as yup from \"yup\";\n\nconst objectSchema = yup.object().shape({\n  url: yup.string().url(),\n  caption: yup.st...",
          "link": "https://zenn.dev/rince/articles/4e35e52e0e158d",
          "publishedOn": "2021-08-28T01:49:17.000Z",
          "wordCount": 132,
          "title": "Yupで配列内のオブジェクトのプロパティがユニークであることを検証する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--mft3pgOn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:rince%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Yup%25E3%2581%25A7%25E9%2585%258D%25E5%2588%2597%25E5%2586%2585%25E3%2581%25AE%25E3%2582%25AA%25E3%2583%2596%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2583%2591%25E3%2583%2586%25E3%2582%25A3%25E3%2581%258C%25E3%2583%25A6%25E3%2583%258B%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25A7%25E3%2581%2582%25E3%2582%258B%25E3%2581%2593%25E3%2581%25A8%25E3%2582%2592%25E6%25A4%259C%25E8%25A8%25BC%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYjk1Y2E5ZjgzNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/arark/articles/60927323db8697",
          "author": "arark",
          "description": "先日ついにfirebase v9が リリースされました\n知っている限り、v9ではモジュール式(ESM?)になっただけで、バンドルサイズの最適化以外の機能はないのですが、updateに関しては型定義での更新があったので紹介します。\n\n v9の使い方\n少しv9の使い方を紹介します。v8までのようにクラスで実装するとtree shakeしづらいので、全て関数になりました。\n\n      \n        \n        import { initializeApp } from \"firebase/app\";\nconst app = initializeApp({ projectId: \"....",
          "link": "https://zenn.dev/arark/articles/60927323db8697",
          "publishedOn": "2021-08-27T16:05:00.000Z",
          "wordCount": 216,
          "title": "firebase v9でupdateが(少し)型安全になりました",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--7i_j1ByG--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:arark%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:firebase%2520v9%25E3%2581%25A7update%25E3%2581%258C%2528%25E5%25B0%2591%25E3%2581%2597%2529%25E5%259E%258B%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AB%25E3%2581%25AA%25E3%2582%258A%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNWQ5ODQ2MjJmOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9",
          "author": "きじくん",
          "description": "はじめに\n普段はPython、React、Next.js等を中心に勉強していますが、個人的に今最も注目しているフレームワークであるBlitz.jsの勉強も最近始めました。ここでは私がBlitz.jsを学んでいく過程で、自身の学習記録兼日本語ドキュメント感覚で今後書いていこうと思っています。\n\n 1. blitz generate\n\n      \n        \n        blitz generate [type] [model]\n\n\n      \n      もしくは\n\n      \n        \n        blitz g [type] [model]\n\n\n    ...",
          "link": "https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9",
          "publishedOn": "2021-08-27T14:59:06.000Z",
          "wordCount": 323,
          "title": "Blitz.js 学習記録 #1 - blitz generate",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WW2Gwpwr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258D%25E3%2581%2598%25E3%2581%258F%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Blitz.js%2520%25E5%25AD%25A6%25E7%25BF%2592%25E8%25A8%2598%25E9%258C%25B2%2520%25231%2520-%2520blitz%2520generate%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjliOTM3ZWExNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sora_kumo/articles/5b031d682d3fe2",
          "author": "空雲",
          "description": "Web-WorkerとWeb-Assemblyの連携に関して\nWeb-Workerを使えば、並列化による恩恵で総合的な動作速度の向上が見込めます\n対してWeb-Assemblyを使えば、演算速度のような直列的な向上が見込めます\nならば「二つを合わせれば、さらなるパフォーマンスアップが見込める」というのは誰でも思うことでしょう\nしかしこの二つの技術、いざ使おうとするとそれなりに面倒で敷居が高く感じます\nその辺りを簡単に実現するための方法を紹介します\n\n サンプル置き場\nhttps://github.com/SoraKumo001/next-worker3\nhttps://next-wo...",
          "link": "https://zenn.dev/sora_kumo/articles/5b031d682d3fe2",
          "publishedOn": "2021-08-27T12:32:02.000Z",
          "wordCount": 391,
          "title": "Next.jsでWeb-WorkerからWeb-Assembly呼び出す",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s---mG3_wf---/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E7%25A9%25BA%25E9%259B%25B2%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A7Web-Worker%25E3%2581%258B%25E3%2582%2589Web-Assembly%25E5%2591%25BC%25E3%2581%25B3%25E5%2587%25BA%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWVlODMwNjIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kijikunnn/articles/0c06902611964d",
          "author": "きじくん",
          "description": "はじめに\n初投稿です。勉強したことをアウトプットして残していきたいと思い、投稿を始めました。\n普段は学生でPythonによる機械学習で研究をしている一方で、プライベートではReactやNext.jsを勉強しています。\n今回は、ReactのフルスタックフレームワークであるBlitz.jsが先日、v1.0に向けた大きな修正が終了したと発信していたことを機に、久しぶりに触れてみました。\n\n過去にチュートリアルだけやったことはあったのですが、その時はデータベースがローカル環境のSQLiteもしくはPostgreSQLの2択だったため、「開発時だったら良いかもしれないけれど、実際にデプロイした...",
          "link": "https://zenn.dev/kijikunnn/articles/0c06902611964d",
          "publishedOn": "2021-08-26T15:48:36.000Z",
          "wordCount": 185,
          "title": "Blitz.jsでSupabaseのデータベースに接続する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--5_4Z5kyO--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258D%25E3%2581%2598%25E3%2581%258F%25E3%2582%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Blitz.js%25E3%2581%25A7Supabase%25E3%2581%25AE%25E3%2583%2587%25E3%2583%25BC%25E3%2582%25BF%25E3%2583%2599%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%25AB%25E6%258E%25A5%25E7%25B6%259A%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNjliOTM3ZWExNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sqer/articles/d9d51bbd4b410418cde3",
          "author": "sqer",
          "description": "目次\n\n目次\n\nはじめに\n\nany使っていませんか？\n対象読者\n今回の目標\n\n\nElementについて\nEventについて\n\n実践！TypeScriptで型付けする\n\ntyped-query-selectorを使う\ntarget.valueに型をつける\n\n\nまとめ\nリンク\n\n\n はじめに\n\n any使っていませんか？\n\nidが\"xxx\"のinput要素に入力された値を取得してみてください。\n\nこの要件を w3schools のサンプルコードをコピペして実装しようとすると、\n\n      \n        \n        document.getElementById(\"xxx\")....",
          "link": "https://zenn.dev/sqer/articles/d9d51bbd4b410418cde3",
          "publishedOn": "2021-08-26T12:03:15.000Z",
          "wordCount": 232,
          "title": "ElementやEventに型をつけよう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--XBmn78hR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:sqer%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Element%25E3%2582%2584Event%25E3%2581%25AB%25E5%259E%258B%25E3%2582%2592%25E3%2581%25A4%25E3%2581%2591%25E3%2582%2588%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWZmNzNmM2U4NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/uttk/articles/f48fc75120f018",
          "author": "uttk",
          "description": "この記事について\nFirebase AuthenticationとNext.jsのgetServerSideProps()を使って、Cookieを使ったセッション管理方法を、この場を借りて共有したいと思います💪\nまた、この記事の内容は基本的に以下の記事の内容を踏襲したものとなっています。そのため、内容やソースコードに引用などが含まれますので、予めご了承ください🙇‍♂️\nhttps://firebase.google.com/docs/auth/admin/manage-cookies?hl=ja\nそれでは行きましょう🛴\n\n 環境構築\n\nこの記事ではFirebaseの環境構築については...",
          "link": "https://zenn.dev/uttk/articles/f48fc75120f018",
          "publishedOn": "2021-08-26T08:41:39.000Z",
          "wordCount": 1088,
          "title": "Next.jsとFirebaseでCookieを使った認証処理を実装する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1XXPVF4i--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:uttk%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Next.js%25E3%2581%25A8Firebase%25E3%2581%25A7Cookie%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%259F%25E8%25AA%258D%25E8%25A8%25BC%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzdkM2Q1NTAxNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nitaking/articles/16a90535f3d535",
          "author": "nitaking",
          "description": "Answer\n\n      \n        \n        var str = 'apple_mango_banana';\nvar arr = ['apple','banana'];\n\nvar isEvery = arr.every(item => str.includes(item));\n\nconsole.log(isEvery);\n\n\n      \n      \n Refs\nhttps://stackoverflow.com/a/40649736/8023331",
          "link": "https://zenn.dev/nitaking/articles/16a90535f3d535",
          "publishedOn": "2021-08-26T07:55:52.000Z",
          "wordCount": 23,
          "title": "１つの文字列に、配列の文字列が全て含まれているか",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Zb2vPNrl--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nitaking%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25EF%25BC%2591%25E3%2581%25A4%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%25AB%25E3%2580%2581%25E9%2585%258D%25E5%2588%2597%25E3%2581%25AE%25E6%2596%2587%25E5%25AD%2597%25E5%2588%2597%25E3%2581%258C%25E5%2585%25A8%25E3%2581%25A6%25E5%2590%25AB%25E3%2581%25BE%25E3%2582%258C%25E3%2581%25A6%25E3%2581%2584%25E3%2582%258B%25E3%2581%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2pDTWQ2V3JtNEFxOTluQ2xBTXQ1NHVJZTBPdnVYX05Fd1BZNElLUnc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ichigo_dev/articles/540ebe464a6463674ea0",
          "author": "ichigo",
          "description": "Node.jsにおけるモジュールシステム\nモジュールシステムとは外部ファイル（モジュール）を読み込むときの仕様である。\nNode.jsで使えるモジュールシステムとして、CJSとESMがある、現在はCJSがデフォルトになっている。\n拡張子が.cjsのものはCJS。\n拡張子が.mjsのものはECM。\n拡張子が.jsのファイルは、package.jsonのtypeフィールドの値によって判断される。\n具体的にはtypeがmoduleであれば.jsファイルがECMとして扱われる。commonjsにするとCJSとして扱われる。記述しない場合もCJSとして扱われる。\n\n TypeScript\nts...",
          "link": "https://zenn.dev/ichigo_dev/articles/540ebe464a6463674ea0",
          "publishedOn": "2021-08-26T02:23:05.000Z",
          "wordCount": 104,
          "title": "Node.jsにおけるモジュールシステム",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--PHEr3aVJ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ichigo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Node.js%25E3%2581%25AB%25E3%2581%258A%25E3%2581%2591%25E3%2582%258B%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2582%25B7%25E3%2582%25B9%25E3%2583%2586%25E3%2583%25A0%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dJbjVqVFhfRGlKc2tiUjVzUkxXVnNUby03dFRWTkpCcUFvMWlLPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/mo_ri_regen/articles/nodejs-with-typescript",
          "author": "モーリー",
          "description": "TypeScript で書かれている場合、一度 JS に変換(トランスパイル)してから 実行する必要があります。\n\n 実行方法\n\n\nTypeScript のインストール\n\n      \n        \n        # npm\nnpm i -D typescript\n\n# yarn\nyarn add typescript --dev\n\n\n      \n      \n\nコンパイル\n下記コマンドを入力することで(エラーがなければ) hoge.js が生成されます。\n\n      \n        \n        tsc hoge.ts\n\n\n      \n      \n\n実行\nhoge....",
          "link": "https://zenn.dev/mo_ri_regen/articles/nodejs-with-typescript",
          "publishedOn": "2021-08-25T23:45:47.000Z",
          "wordCount": 60,
          "title": "TypeScriptで書かれたJSをNode.js上で実行する方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--D0B0UNIM--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2583%25A2%25E3%2583%25BC%25E3%2583%25AA%25E3%2583%25BC%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:TypeScript%25E3%2581%25A7%25E6%259B%25B8%25E3%2581%258B%25E3%2582%258C%25E3%2581%259FJS%25E3%2582%2592Node.js%25E4%25B8%258A%25E3%2581%25A7%25E5%25AE%259F%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTE4MDU3NTdkNS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40",
          "author": "夕暮おこは",
          "description": "はじめに\ncomposition apiの登場でVueもようやくテストしやすい感じになってきました。\nとはいえ実際AJAXが絡んだコンポーネントのテストをやろうとするとあれをモックしてこれもモックしてとなんだかんだ大量のモッキングが必要になって色々めんどくさい感じになりがちですし、ほとんどモックされてて実際のところどこがテストできてるのかわけがわからない感じになりがちです。\n前回の記事ではOASを利用することでスタブサーバーが用意できることを紹介しました。\nこの記事ではそのスタブサーバーを利用して、フロントで再現性のあるAJAXテストを簡単に行える方法がないか模索してみます。\nスタブ...",
          "link": "https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40",
          "publishedOn": "2021-08-23T17:12:50.000Z",
          "wordCount": 777,
          "title": "OAS使ってなるべく楽にNuxtのテスト",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--BrPMlQCA--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%25A4%2595%25E6%259A%25AE%25E3%2581%258A%25E3%2581%2593%25E3%2581%25AF%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:OAS%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25AA%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258F%25E6%25A5%25BD%25E3%2581%25ABNuxt%25E3%2581%25AE%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYTE0MjdiMjZmMi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/alea12/articles/15d73282c3aacc",
          "author": "alea12",
          "description": "TLDR\n\nPrisma が検討できる場合: Prisma の findUnique を使う\nそれ以外の場合: DataLoader を実装する。ライブラリを使えばそんなに大変ではない\n\nJOIN での解決は GraphQL の道を踏み外している(ように感じる)\n\n\n GraphQL における N+1 問題\nGraphQL で 1:N のデータ構造をクエリすると、すぐに N+1 問題に行き当たります。User と Post が 1:N の関係となる、以下の例を見てみましょう。\n\n      \n        \n        type User {\n  id: Int!\n  name...",
          "link": "https://zenn.dev/alea12/articles/15d73282c3aacc",
          "publishedOn": "2021-08-23T14:37:01.000Z",
          "wordCount": 889,
          "title": "GraphQL で N+1 問題を解決する 4 つのアプローチ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--VdTPotwC--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:alea12%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:GraphQL%2520%25E3%2581%25A7%2520N%252B1%2520%25E5%2595%258F%25E9%25A1%258C%25E3%2582%2592%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2599%25E3%2582%258B%25204%2520%25E3%2581%25A4%25E3%2581%25AE%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AD%25E3%2583%25BC%25E3%2583%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2p0Vk5jcWlPWjVXZTFMTlFkLXpxWTc5NVIxMUJuTmZNT1p5NXVhPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ezryow/articles/1639171ddb994a",
          "author": "EZ.Ryow",
          "description": "今回、リリースしたアプリケーション\n\nhttps://www.autof2f.io/\n\n皆さん、SNSでこんな経験ありませんか？\n「この人の投稿面白いな、でも勝手にフォローしても失礼じゃないかな？？？」\n今回リリースしたアプリケーションは、**「無言でフォローしまっていいのか問題」**をプログラムで自動的に解決しようという目的をもとに開発されました。\n一言でどのように解決するか説明すると、\n匿名掲示板上のユーザAの書き込みを『いいね』し、その『いいね』が一定の値を超えると自動的にユーザAがフォローに追加されるというものです。\n\n AutoF2Fの名前の由来\nこのアプリケーションを開発する...",
          "link": "https://zenn.dev/ezryow/articles/1639171ddb994a",
          "publishedOn": "2021-08-23T07:27:26.000Z",
          "wordCount": 70,
          "title": "【個人開発】大学生が『友達が半自動的に追加される新感覚SNS モドキ`AutoF2F`』 をリリースしました 🎉🎉🎉",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--18iGO1sW--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:EZ.Ryow%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590%25E5%2580%258B%25E4%25BA%25BA%25E9%2596%258B%25E7%2599%25BA%25E3%2580%2591%25E5%25A4%25A7%25E5%25AD%25A6%25E7%2594%259F%25E3%2581%258C%25E3%2580%258E%25E5%258F%258B%25E9%2581%2594%25E3%2581%258C%25E5%258D%258A%25E8%2587%25AA%25E5%258B%2595%25E7%259A%2584%25E3%2581%25AB%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2595%25E3%2582%258C%25E3%2582%258B%25E6%2596%25B0%25E6%2584%259F%25E8%25A6%259ASNS%2520%25E3%2583%25A2%25E3%2583%2589%25E3%2582%25AD%2560AutoF2F%2560%25E3%2580%258F%2520%25E3%2582%2592%25E3%2583%25AA%25E3%2583%25AA%25E3%2583%25BC%25E3%2582%25B9%25E3%2581%2597%25E3%2581%25BE%25E3%2581%2597%25E3%2581%259F%2520%2520%2520%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzVkYzllOWQ1NC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/dozo/articles/0b5940f1994a6c",
          "author": "dozo",
          "description": "@wasm-tool/rollup-plugin-rustの使い方\n関連記事:\nRustが征くシリーズ過去記事\n\nWSL2で作るWindows開発環境: Rustが征く(1)\nwasmerでWebAssemblyの門を叩く: Rustが征く(2)\nJavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)\nTypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4) ← イマココ\n\n\n------------------- ↓ 前書はここから ↓-------------------\n前回はコマンドを駆使して、\nブラウザ上...",
          "link": "https://zenn.dev/dozo/articles/0b5940f1994a6c",
          "publishedOn": "2021-08-22T21:20:21.000Z",
          "wordCount": 327,
          "title": "TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Y5w9ST9r--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:dozo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:TypeScript%25E3%2581%25A8Rollup%25E3%2581%25A7Webassembly%25E3%2582%2592%25E7%25A8%25BC%25E5%2583%258D%25E3%2581%2595%25E3%2581%259B%25E3%2582%258B%253A%2520Rust%25E3%2581%258C%25E5%25BE%2581%25E3%2581%258F%25284%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsvZC5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348",
          "author": "daisuke sasaki",
          "description": "前回のbackend編からの続きです\nbackend編\n正直、フロント側はさっぱりセンスが無い＋忘れまくってたりしたのでめちゃくちゃ調べ直した。\nあらためて両方できる皆さんすごいわぁ、、（ちなみに僕はバックエンド側もセンスないです）\nfrontend側に入る前に前回やった内容がちょっと半端だったのでまずはそこをサクッと修正してしまおうと思います。\n\n crud.py\n\n      \n        \n        # project/backend/app/api/crud.py\nfrom app.models.pydantic import SummaryPayloadSchem...",
          "link": "https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348",
          "publishedOn": "2021-08-22T14:14:08.000Z",
          "wordCount": 1254,
          "title": "Docker×FastAPI×React(TypeScript) on AWS ECS【frontend】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--oBhPaJmk--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:daisuke%2520sasaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:Docker%25C3%2597FastAPI%25C3%2597React%2528TypeScript%2529%2520on%2520AWS%2520ECS%25E3%2580%2590frontend%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWZiMjI1NmFmZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Vim」のフィード",
      "feedUrl": "https://zenn.dev/topics/vim/feed",
      "siteUrl": "https://zenn.dev/topics/vim",
      "articles": [
        {
          "id": "https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener",
          "author": "oppara",
          "description": "はじめに\nthinca/vim-quickrun をアップデート後、実行時に水平分割できなくなっていたので対応。\n\n 動かなくなった設定\n\n      \n        \n        let g:quickrun_config = {'*': {'split': ''}}\n\n\n      \n      \n 水平分割できるようにした設定\n\n      \n        \n        let g:quickrun_config = get(g:, 'quickrun_config', {})\nlet g:quickrun_config._ = {\n      \\ 'outputt...",
          "link": "https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener",
          "publishedOn": "2021-09-19T01:05:24.000Z",
          "wordCount": 78,
          "title": "vim-quickrun 実行時に水平分割で表示する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--NPBBJaQn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:oppara%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim-quickrun%2520%25E5%25AE%259F%25E8%25A1%258C%25E6%2599%2582%25E3%2581%25AB%25E6%25B0%25B4%25E5%25B9%25B3%25E5%2588%2586%25E5%2589%25B2%25E3%2581%25A7%25E8%25A1%25A8%25E7%25A4%25BA%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dyYTRKSGo5UzNEckZ0dTlwcUd5d0V4ZEZZTjZmS0JUQjBkTkthdFE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vimfilter-rename",
          "author": "anozon",
          "description": "vimfiler の rename 機能が便利で、複数ファイルを自由自在にリネームできます。\nShougo/vimfiler.vim: Powerful file explorer implemented by Vim script\n\n やってみる\n\n.js ファイルを .tsx に書き換えます。\n\n 動画\noembed: https://www.youtube.com/watch?v=BxSkWfem7uI&feature=youtu.be\n\n\nvim target/dir ディレクトリを開く\n\n* 全ファイル選択\n\nr リネームモード\n\nvim 編集の例 1 解説\n\n\n/js...",
          "link": "https://zenn.dev/anozon/articles/vimfilter-rename",
          "publishedOn": "2021-09-18T13:58:17.000Z",
          "wordCount": 82,
          "title": "vim でディレクトリ内のファイルを一括リネームする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_IgjCWJH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25A7%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E5%2586%2585%25E3%2581%25AE%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E3%2582%2592%25E4%25B8%2580%25E6%258B%25AC%25E3%2583%25AA%25E3%2583%258D%25E3%2583%25BC%25E3%2583%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vim-macro-save",
          "author": "anozon",
          "description": "1 度作ったマクロを保存して、 vim を開き直したときも使いまわしたいときの方法。\nマクロ @b に保存する例で説明します。\n\n .vimrc に保存する\n\n q で macro を記録する\nqb → 操作 → q で記録。\n\n .vimrc に追記する\n\n      \n        \n        let @b = 'Gk$F_lvEygg$p\n\n\n      \n      \n (外部クリップボードにコピーしたりしたいとき)\n\n      \n        \n        \"bpyy\n\n\n      \n      \"b b を選択 →p 貼り付け → yy コピーで外部クリップ...",
          "link": "https://zenn.dev/anozon/articles/vim-macro-save",
          "publishedOn": "2021-09-18T13:58:16.000Z",
          "wordCount": 59,
          "title": "vim の q マクロを保存して使いまわす",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--hQdyanqP--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25AE%2520q%2520%25E3%2583%259E%25E3%2582%25AF%25E3%2583%25AD%25E3%2582%2592%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%25BE%25E3%2582%258F%25E3%2581%2599%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/vim-cannot-paste",
          "author": "anozon",
          "description": "恐らく visual mode で選択した範囲がコピーされています。\nclipboard に autoselect が設定されているときの挙動です。\n\n 設定\n\n      \n        \n        -set clipboard=unnamed,autoselect\n+set clipboard=unnamed",
          "link": "https://zenn.dev/anozon/articles/vim-cannot-paste",
          "publishedOn": "2021-09-18T13:58:16.000Z",
          "wordCount": 33,
          "title": "vim の visual mode で選択した範囲に paste できないとき",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IMR2zPHh--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vim%2520%25E3%2581%25AE%2520visual%2520mode%2520%25E3%2581%25A7%25E9%2581%25B8%25E6%258A%259E%25E3%2581%2597%25E3%2581%259F%25E7%25AF%2584%25E5%259B%25B2%25E3%2581%25AB%2520paste%2520%25E3%2581%25A7%25E3%2581%258D%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/surround-vim-tutorial",
          "author": "anozon",
          "description": "公式リポジトリ https://github.com/tpope/vim-surround\n\n why\n\n周囲(クウォート, 括弧, タグ ...)の操作が楽になる\nVim plugin にデフォルトでついてることが多いのですぐ使える\n\nVSCodeVim(VSCode), IdeaVIM(JetBrains)\n\n      \n        \n        Plug 'tpope/vim-surround'\n\n\n      \n      \n demos\n公式の Introduction にそって基本コマンドを紹介します。\nvim-surround/surround.txt at ma...",
          "link": "https://zenn.dev/anozon/articles/surround-vim-tutorial",
          "publishedOn": "2021-09-18T13:58:14.000Z",
          "wordCount": 104,
          "title": "surround.vim 入門【vim中級者向け】",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--g0Pd8DIX--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:surround.vim%2520%25E5%2585%25A5%25E9%2596%2580%25E3%2580%2590vim%25E4%25B8%25AD%25E7%25B4%259A%25E8%2580%2585%25E5%2590%2591%25E3%2581%2591%25E3%2580%2591%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/anozon/articles/ssh-vim-copy",
          "author": "anozon",
          "description": "vim で mouse を off にする\n\n      \n        \n        :set mouse=\n\n\n      \n      \n iTerm2 の設定",
          "link": "https://zenn.dev/anozon/articles/ssh-vim-copy",
          "publishedOn": "2021-09-18T13:58:12.000Z",
          "wordCount": 31,
          "title": "ssh 接続先の vim でマウスの選択範囲をコピーする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--caOe7Phx--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:anozon%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:ssh%2520%25E6%258E%25A5%25E7%25B6%259A%25E5%2585%2588%25E3%2581%25AE%2520vim%2520%25E3%2581%25A7%25E3%2583%259E%25E3%2582%25A6%25E3%2582%25B9%25E3%2581%25AE%25E9%2581%25B8%25E6%258A%259E%25E7%25AF%2584%25E5%259B%25B2%25E3%2582%2592%25E3%2582%25B3%25E3%2583%2594%25E3%2583%25BC%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjFiZjdlN2IwZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nazo6/articles/410be6ec751f9e",
          "author": "nz",
          "description": "やり方\nplenary.nvimのprofilerを使います\nplenary.nvimがインストールしてあれば使いかたは簡単で、計測したい範囲を\n\n      \n        \n        require'plenary.profile'.start(\"profile.log\")\n\n-- code to be profiled\n\nrequire'plenary.profile'.stop()\n\n\n      \n      のように囲むだけです。\nこれでinit.luaであれば~/.config/nvim以下にprofile.logができます。\n\n グラフにする\nが、このログは超...",
          "link": "https://zenn.dev/nazo6/articles/410be6ec751f9e",
          "publishedOn": "2021-09-04T16:09:37.000Z",
          "wordCount": 56,
          "title": "neovim luaのパフォーマンス計測方法",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--bRppWNnZ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nz%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:neovim%2520lua%25E3%2581%25AE%25E3%2583%2591%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%259E%25E3%2583%25B3%25E3%2582%25B9%25E8%25A8%2588%25E6%25B8%25AC%25E6%2596%25B9%25E6%25B3%2595%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2hxcDBncFdKRUpUUWRWNkQxMWFtVWYxY1R6YnFUakVtX3hGT1Z5ZUE9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp",
          "author": "matsui54",
          "description": "はじめに\nddc.vimのLSPまわりの設定が良い感じになってきたので共有します。\n前提として、補完ソースに関してはこちらを入れてください。\nhttps://github.com/Shougo/ddc-nvim-lsp\n最終的にはこんな感じで使えるようになります。\n\n\n 補完候補のプレビュー & signature help\n以下のgifにあるような機能で、前者は、補完候補を選択したときにその詳細情報をfloating windowに表示します。signature helpは、補完候補を選択して関数の中身を書いているときに、引数などの情報を表示する機能です。\n\nvim-lsp...",
          "link": "https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp",
          "publishedOn": "2021-09-04T09:04:12.000Z",
          "wordCount": 135,
          "title": "ddc.vimのlsp機能を強くする with nvim-lsp",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ZE7iSpjj--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:matsui54%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:ddc.vim%25E3%2581%25AElsp%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25BC%25B7%25E3%2581%258F%25E3%2581%2599%25E3%2582%258B%2520with%2520nvim-lsp%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2habGgtTFpaYTFPZXJIaUpZMVhwTHdKa2hGR2xUTHFUN3NYUzhWbEE9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/kato_k/articles/753b36262b3213",
          "author": "kato-k",
          "description": "はじめに\nVim上での日本語入力の手段としてeskk.vimを導入しましたので自分用のメモも兼ねて残します。\nSKK・eskk.vim共にこれまで使ったことがないので、参考程度に見てください。\n\n インストール\n\n eskk.vim\nhttps://github.com/tyru/eskk.vim\n好みのプラグインマネージャでeskkを導入してください。\n\n 辞書\nskkを使うには読みとの対応が列挙された辞書が必要になるので、ダウンロードしてeskkに教えてあげる必要があります。\n辞書ファイルはこちら↓などで公開されている物を利用しましょう。\nhttps://skk-dev.gith...",
          "link": "https://zenn.dev/kato_k/articles/753b36262b3213",
          "publishedOn": "2021-09-02T15:04:12.000Z",
          "wordCount": 168,
          "title": "Vimにeskkをインストールする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_sBVbMm1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:kato-k%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vim%25E3%2581%25ABeskk%25E3%2582%2592%25E3%2582%25A4%25E3%2583%25B3%25E3%2582%25B9%25E3%2583%2588%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMDA1MWRmMmFlMi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nyarla/articles/0a171145604993",
          "author": "にゃるら（テック系）",
          "description": "お前が思うんならそうなんだろう。お前ん中ではな\n\n\n 話の前提\n私は普段プログラミングやテキスト管理に NeoVim を使っていて、.vimrc （NeoVim だと init.vim）に色々な場面で必要になる設定や関数、あるいは機能拡張などを記述していました。\nしかし最初は機能ごとにファイルを分けたり init.vim を一つに統一したりと、色々と調整していたものの、どの方法も上手くファイルを整理するに至らず、\n\nさてどうしたもんかな……これは……\n\nと考え込んでいたところで、\n\nあ！ 試しに vim 組み込みのパッケージ管理機能を使ってみるか！\n\nと思いつき、実際にやってみたら結構...",
          "link": "https://zenn.dev/nyarla/articles/0a171145604993",
          "publishedOn": "2021-08-30T02:34:07.000Z",
          "wordCount": 120,
          "title": ".vimrc  を packadd で整理するとめっちゃ便利だった！",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zMnd6yXQ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AB%25E3%2582%2583%25E3%2582%258B%25E3%2582%2589%25EF%25BC%2588%25E3%2583%2586%25E3%2583%2583%25E3%2582%25AF%25E7%25B3%25BB%25EF%25BC%2589%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:.vimrc%2520%2520%25E3%2582%2592%2520packadd%2520%25E3%2581%25A7%25E6%2595%25B4%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A3%25E3%2581%25A1%25E3%2582%2583%25E4%25BE%25BF%25E5%2588%25A9%25E3%2581%25A0%25E3%2581%25A3%25E3%2581%259F%25EF%25BC%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzk1NTc4MDJjOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/e4exp/articles/ee523772afa0e5",
          "author": "e4exp",
          "description": "前提\n\nColabはproプランでターミナルが使える\nブラウザ(Chrome)にVimiumという拡張が入っている\n普段はEscキーでvimのinsertモードから抜けているが，Vimiumが有効だとEscキーを押すとターミナル領域ごと閉じてしまう\n\n\n 解決方法\n\n\nctrl + cでinsertモードから抜けられる\n\nまたは\n\nVimiumを無効化する(特定urlのみ無効化もできる)\n\n\n 参考\n\n\nExit insert mode in Google Colab 2020",
          "link": "https://zenn.dev/e4exp/articles/ee523772afa0e5",
          "publishedOn": "2021-08-29T03:04:42.000Z",
          "wordCount": 25,
          "title": "Google Colabのターミナルでvimから抜けられないとき",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Amq6vPgd--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:e4exp%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Google%2520Colab%25E3%2581%25AE%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2581%25A7vim%25E3%2581%258B%25E3%2582%2589%25E6%258A%259C%25E3%2581%2591%25E3%2582%2589%25E3%2582%258C%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25A8%25E3%2581%258D%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTk3MzRhZDA0Yi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/xxpiyomaruxx/articles/0661277cd1b2ab",
          "author": "ぴよまる",
          "description": "デフォルトのシェルだと色があまりついていないし、可愛くもなくてつらい気持ちになったのでかわいくします。dotfilesの存在は知っていたが何から触ればいいのやらな人向け。\n\n だいたい導入するもの\n\n\nfish\n\nbashとかzshの変わりに使う\nhistoryをGUIで見ることができたり、シンタックスハイライトをデフォルトでしてくれたり、入力補完をデフォルトでしてくれたりする\nなので設定めんどくさい人でも入れるだけでちょっとハッピー\n\n\n\ntmux\n\nターミナルのペインとか良い感じに分割したりセッション保存してくれたり\n\n\n\nneovim\n\nvimのすごいやつ\nいれなくても良い気はした...",
          "link": "https://zenn.dev/xxpiyomaruxx/articles/0661277cd1b2ab",
          "publishedOn": "2021-08-28T02:41:59.000Z",
          "wordCount": 208,
          "title": "fish, neovim, starshipあたりでめっかわ❤️ターミナルを用意する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--vlAP7KSc--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25B4%25E3%2582%2588%25E3%2581%25BE%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:fish%252C%2520neovim%252C%2520starship%25E3%2581%2582%25E3%2581%259F%25E3%2582%258A%25E3%2581%25A7%25E3%2582%2581%25E3%2581%25A3%25E3%2581%258B%25E3%2582%258F%2520%25E3%2582%25BF%25E3%2583%25BC%25E3%2583%259F%25E3%2583%258A%25E3%2583%25AB%25E3%2582%2592%25E7%2594%25A8%25E6%2584%258F%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWE2ZDhjM2Y2MC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/shougo/articles/ddc-vim-beta",
          "author": "Shougo",
          "description": "始めに\nここ数ヵ月力を入れてddc.vimの開発をしていて、ようやく一通りの機能がそろいました\nので、広くユーザーに使ってもらうフェーズに進めたいと考えています。\nユーザーからの要望やバグ報告に対応が終わってから正式版の1.0となりますのでよろし\nくお願いします。\n\n ddc.vim の特徴\n\n Vim8/neovim 両対応\ndeoplete.nvimでもvim-hug-neovim-rpcを用いることによりVimに対応していました。\nしかしインストールが煩雑になる、neovimと比較してパフォーマンスに問題がある、安\n定性への問題がありました。\nddc.vimではdenops.v...",
          "link": "https://zenn.dev/shougo/articles/ddc-vim-beta",
          "publishedOn": "2021-08-26T11:19:39.000Z",
          "wordCount": 392,
          "title": "新世代の自動補完プラグイン ddc.vim",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--0Cdb6vk0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Shougo%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E6%2596%25B0%25E4%25B8%2596%25E4%25BB%25A3%25E3%2581%25AE%25E8%2587%25AA%25E5%258B%2595%25E8%25A3%259C%25E5%25AE%258C%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B3%2520ddc.vim%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2llTXlqT3huMG12REN6SFFNMWZNeGlYd3Z4dmw5cVk1ZzVBN2lWPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/bun913/articles/f18e0d37ece27b",
          "author": "bun",
          "description": "なんちゃってvimmerのbunです。\n私は普段 nvim と VSCode をエディターとして利用しております。\nVSCodeに関しては neovim 拡張を利用しています。\n（使い始めるための記事を以前書きました）\nhttps://zenn.dev/bun913/articles/02785aed0ba50e\nvimにおいてファイル横断検索や置換をするには vimgrepを利用すれば良いのですが\nVSCodeのように自分で対象のファイルを選んだりするのを楽にしたいなぁ と考えておりました。\n↓以下のような形で。また、vimなのでマウスを使わずに使用したい\n\nなお私の環境は以下の通りで...",
          "link": "https://zenn.dev/bun913/articles/f18e0d37ece27b",
          "publishedOn": "2021-08-25T13:33:38.000Z",
          "wordCount": 145,
          "title": "nvimでVSCodeみたいなファイル横断検索・置換がしたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gJsqSR3l--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:bun%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:nvim%25E3%2581%25A7VSCode%25E3%2581%25BF%25E3%2581%259F%25E3%2581%2584%25E3%2581%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25A4%25E3%2583%25AB%25E6%25A8%25AA%25E6%2596%25AD%25E6%25A4%259C%25E7%25B4%25A2%25E3%2583%25BB%25E7%25BD%25AE%25E6%258F%259B%25E3%2581%258C%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzE0ZWEwMTIwNC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yano/articles/vim_plugin_top_10",
          "author": "Yuki Yano",
          "description": "概要\n自分は普段Neovimを使って(主にTypeScriptでの)開発を行っています。\nNeovimでのTypeScript開発は環境を整えればVSCodeと遜色ない開発体験を得ることができると思っています。\nまた、Vimの操作に慣れれば一部の編集機能についてはVimの方が優れていると感じています。\nこの記事では自分の開発に欠かせないプラグイン10個を紹介しようと思います。\n\n プラグイン10選\n\nVimをIDE化するプラグイン coc.nvim\n\n様々な操作の起点に使うFuzzy Finder fzf-preview.vim\n\n高機能なファイラ fern.vim\n\nVim上でGi...",
          "link": "https://zenn.dev/yano/articles/vim_plugin_top_10",
          "publishedOn": "2021-08-23T12:02:20.000Z",
          "wordCount": 466,
          "title": "無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--gnVdjZCD--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yuki%2520Yano%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%2584%25A1%25E4%25BA%25BA%25E5%25B3%25B6%25E3%2581%25AB%25E6%258C%2581%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%2584%25E3%2581%258F%2528Neo%2529vim%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25B0%25E3%2582%25A4%25E3%2583%25B310%25E9%2581%25B8%2520%2528TS%25E9%2596%258B%25E7%2599%25BA%25E7%2592%25B0%25E5%25A2%2583%25E7%25B7%25A8%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2liaDZMcy05WWRBbnZqZGtvMzJuTllGZEY3UThVWXE0N3kxNklhPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    },
    {
      "title": "Zennの「Vue.js」のフィード",
      "feedUrl": "https://zenn.dev/topics/vue/feed",
      "siteUrl": "https://zenn.dev/topics/vue",
      "articles": [
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8",
          "author": "おしうみなおき",
          "description": "jQueryのslideUp, slideDownをvueで作る際に、transitionを使用するやり方があったのですが、高さを指定しないといけない？とかなんとかでよくわからなくてやめちゃったのですが、\n結論から言うとライブラリを使用する方法が死ぬほど簡単でした。\n\n ライブラリインストール\nvue-slide-up-downをインストールします\n\n      \n        \n        npm i vue-slide-up-down\n\n\n      \n      \n インポートする\nLaravelとvueをセットで使っているので、 僕はapp.jsというところでインポートしま...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8",
          "publishedOn": "2021-09-20T00:44:32.000Z",
          "wordCount": 48,
          "title": "vueでjQueryのslideUp, slideDownを一瞬で実装しちゃう",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wA7o3iR1--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vue%25E3%2581%25A7jQuery%25E3%2581%25AEslideUp%252C%2520slideDown%25E3%2582%2592%25E4%25B8%2580%25E7%259E%25AC%25E3%2581%25A7%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2597%25E3%2581%25A1%25E3%2582%2583%25E3%2581%2586%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "author": "shingo.sasaki",
          "description": "Chart.js 3 について\nChart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。\nv3 は従来の v2 と比べ、以下のような大きな改善が行われています。\n\nwebworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上\n細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化\n\nmoment など、日付操作用のライブラリへの依存の撤廃\nCSSインジェクションの廃止\n膨大な数のバグフィックス\n\nただし、多くの破壊的変更を...",
          "link": "https://zenn.dev/sa2knight/articles/cc60e3e7c44968",
          "publishedOn": "2021-09-19T03:32:58.000Z",
          "wordCount": 526,
          "title": "Vue2 / Vue3 でも Chart.js 3 を使いたい",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--2Fm5gHTt--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shingo.sasaki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%2520%252F%2520Vue3%2520%25E3%2581%25A7%25E3%2582%2582%2520Chart.js%25203%2520%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%2584%25E3%2581%259F%25E3%2581%2584%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fODQ1ZmE3NWJhOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/63bbb2c0fbb7b1",
          "author": "てんてる",
          "description": "@capacitor-community/capacitor-googlemaps-nativeをVue3で利用する際の手順と各種説明です。\n\nこのライブラリはエミュレータもしくは実機でのみ確認できます。\n\n\n現段階で未検証（実装されていない機能など）は説明を記載していません。\n\n\n 環境\n\n\n\n項目名\nバージョン\n\n\n\n\nvue\n^3.0.0\n\n\n@capacitor/core\n^3.2.2\n\n\n@capacitor/android\n^3.2.2\n\n\n@capacitor/ios\n^3.2.2\n\n\n@capacitor-community/capacitor-googlemaps-na...",
          "link": "https://zenn.dev/tentel/articles/63bbb2c0fbb7b1",
          "publishedOn": "2021-09-18T06:28:44.000Z",
          "wordCount": 971,
          "title": "【Vue3】@capacitor-community/capacitor-googlemaps-native まとめ",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--zn8xr30j--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_60_bold:%25E3%2580%2590Vue3%25E3%2580%2591%2540capacitor-community%252Fcapacitor-googlemaps-native%2520%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yamabiko/articles/jetstream-i18n",
          "author": "やまびこ",
          "description": "はじめに\nこの記事を読むと、Laravel Jetstream+Vue環境をja.json等のファイルによって多言語化(i18n)できるようになります。\n多言語化にはvue-i18nを使用します。\nJetstreamではフロントエンドとして、livewireまたはVueを選択できます。\nlivewireバージョンは既に多言語化対応されています。\nしかし、現状、Vueバージョンの方は多言語化対応されていません。\nこの記事ではフロントエンドとしてvueを選択した場合の多言語化(i18n)について解説します。\n\n 多言語化(i18n)\n\n １．ja.jsonファイル作成\n以下のコマンドを実...",
          "link": "https://zenn.dev/yamabiko/articles/jetstream-i18n",
          "publishedOn": "2021-09-17T03:41:29.000Z",
          "wordCount": 320,
          "title": "Laravel Jetstream+Vueの多言語化(i18n)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--tv_jCXev--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2582%2584%25E3%2581%25BE%25E3%2581%25B3%25E3%2581%2593%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Laravel%2520Jetstream%252BVue%25E3%2581%25AE%25E5%25A4%259A%25E8%25A8%2580%25E8%25AA%259E%25E5%258C%2596%2528i18n%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYmFiMDQ1MjY4NS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/yuichkun/articles/e4e8c7e633439c",
          "author": "yuichkun",
          "description": "作ったもの\n記事タイトルの通り、Vue.jsで再描画が走ったコンポーネントの輪郭をフラッシュしてハイライトしてくれるChrome拡張 + npmパッケージを作りました。\n\nGitHub: yuichkun/vue-devtool-flash-updates\n\n 背景\nVueの開発をする上で、Vue.js devtools を使っている人は多いと思います。\nReact Developer Tools では以前から再描画されたコンポーネントを光らせてくれる機能があり、パフォーマンス問題の解消などに役立っていたのですが、どうやらVue devtoolsにはそれがないらしいことをissueな...",
          "link": "https://zenn.dev/yuichkun/articles/e4e8c7e633439c",
          "publishedOn": "2021-09-15T11:07:35.000Z",
          "wordCount": 93,
          "title": "Vueの再描画されたコンポーネントをハイライトするChrome拡張を作った",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wCzKxzfi--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yuichkun%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%25E3%2581%25AE%25E5%2586%258D%25E6%258F%258F%25E7%2594%25BB%25E3%2581%2595%25E3%2582%258C%25E3%2581%259F%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2582%2592%25E3%2583%258F%25E3%2582%25A4%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%2588%25E3%2581%2599%25E3%2582%258BChrome%25E6%258B%25A1%25E5%25BC%25B5%25E3%2582%2592%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2l3ME45ck5wZWlxSERKTTUwWVlWT3J2ZFE5UW1xRjB4VFI1WDNxUFNnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/imaginelab/articles/c59db2aa20aecf",
          "author": "ima",
          "description": "はじめに\n個人開発しているWEBサービスにキーボードショートカットを追加しました。その時に使ったnpmパッケージがお手軽で素晴らしかったので記事にすることにしました。\n\n hotkey by GitHub\nキーボードショートカットを実現するJSライブラリなどを探して、何を使うか検討していたところ、GitHub社が開発するnpmパッケージを見つけました。\nhttps://github.com/github/hotkey\nGitHubのサイトのHTMLソースを見ると、data-hotkey というhotkey由来の記述が発見できたので、GitHubのサービス内で実際に使っているようです。...",
          "link": "https://zenn.dev/imaginelab/articles/c59db2aa20aecf",
          "publishedOn": "2021-09-14T08:29:26.000Z",
          "wordCount": 129,
          "title": "GitHub風のキーボードショートカットをお手軽に追加する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IQ-FkXHo--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:ima%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:GitHub%25E9%25A2%25A8%25E3%2581%25AE%25E3%2582%25AD%25E3%2583%25BC%25E3%2583%259C%25E3%2583%25BC%25E3%2583%2589%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25BC%25E3%2583%2588%25E3%2582%25AB%25E3%2583%2583%25E3%2583%2588%25E3%2582%2592%25E3%2581%258A%25E6%2589%258B%25E8%25BB%25BD%25E3%2581%25AB%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzg4M2FhMTMxYi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "author": "azukiazusa",
          "description": "Vue 3が正式リリースされてから約1年が経過しました。\nVuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？\nこの記事ではVue 2からVue 3への移行手順を記述していきます。\n参考用のプロジェクトとして以下レポジトリを用意しました。\nhttps://github.com/azukiazusa1/vue3-migrate-test\nVue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。\n\n 移行ビルドを使用する\nVue 2からVue 3へ移行す...",
          "link": "https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8",
          "publishedOn": "2021-09-13T12:25:39.000Z",
          "wordCount": 953,
          "title": "Vue2のプロジェクトをVue3へマイグレーションする",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--WO_KQunr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue2%25E3%2581%25AE%25E3%2583%2597%25E3%2583%25AD%25E3%2582%25B8%25E3%2582%25A7%25E3%2582%25AF%25E3%2583%2588%25E3%2582%2592Vue3%25E3%2581%25B8%25E3%2583%259E%25E3%2582%25A4%25E3%2582%25B0%25E3%2583%25AC%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/chabatake_i/articles/headlessui_introduction",
          "author": "k-shigehito",
          "description": "はじめに\nHeadless UIはTailwind CSSを開発しているTailwind Labsを中心に開発されているUIライブラリです。特徴として、スタイルは実装者側で自由に制御できること、アクセシビリティはライブラリ側で確保してくれること等が上げられます。React用とVue.js用がそれぞれ用意されていますが、今回はVue.jsでUIコンポーネントを作成してみました。\n全体のコードは以下のリポジトリに公開しています。\nhttps://github.com/K-shigehito/headlessui-example\n\n本記事は学習ノートとして投稿させて頂きます。\n内容に誤り等...",
          "link": "https://zenn.dev/chabatake_i/articles/headlessui_introduction",
          "publishedOn": "2021-09-11T16:53:36.000Z",
          "wordCount": 762,
          "title": "Headless UI + Vue3で作るUIコンポーネント",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--H_vOJv96--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:k-shigehito%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Headless%2520UI%2520%252B%2520Vue3%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258BUI%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMGFhMjNkMjE5ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/satohjohn/articles/b064cf966a9e20",
          "author": "佐藤慧太",
          "description": "前提\nNuxt.jsでVuexを使っているのでそのときに\nhttps://github.com/ktsn/vuex-type-helper\n以下を利用させてもらっていました\nただ、モジュールのstore場合利用時にtypeがうまくはまらないから、どうするんだろうとか色々見てたのですがあんまりいい手段が見つからなく、自分で型定義でテンプレートリテラル部分書いたらどうなんだろうとおもってやってみました。\n正直もっと良い手段があると思いますが、今回は自分の勉強踏まえの備忘録。\nそして、多分Vue3対応とかが入ったらちゃんと動いていくんだと思うので、後で書き換えればいいし、現状型の問題だけな...",
          "link": "https://zenn.dev/satohjohn/articles/b064cf966a9e20",
          "publishedOn": "2021-09-11T04:37:38.000Z",
          "wordCount": 199,
          "title": "Vuexの型定義でモジュールでの型解決してくれるようにしてみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--EpVXGSET--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E4%25BD%2590%25E8%2597%25A4%25E6%2585%25A7%25E5%25A4%25AA%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vuex%25E3%2581%25AE%25E5%259E%258B%25E5%25AE%259A%25E7%25BE%25A9%25E3%2581%25A7%25E3%2583%25A2%25E3%2582%25B8%25E3%2583%25A5%25E3%2583%25BC%25E3%2583%25AB%25E3%2581%25A7%25E3%2581%25AE%25E5%259E%258B%25E8%25A7%25A3%25E6%25B1%25BA%25E3%2581%2597%25E3%2581%25A6%25E3%2581%258F%25E3%2582%258C%25E3%2582%258B%25E3%2582%2588%25E3%2581%2586%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZDlkNTdlODEyNy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/open_sesame/articles/2f6442ccdddb1b",
          "author": "open sesame",
          "description": "ゲーム\n世の中的には、プログラミングする人＝ゲーマー という方程式があるようで(思い込みか?)\n長いことプログラミングをしていますが、パソコンは購入しますが、ゲーム機なるものを購入したこともパソコンやスマホでゲームをすることもありません。\n\n ゲームと脳\n何かを獲得したときや何かをやっつけたときに脳が快楽物質であるドーパミンを大量に分泌するらしいですね。\nどうも自分には、これが不要なようで...\nゲームをすることに興味がありませヌ。\n\n 本題に\n小学生低学年に算数を楽しんで憶えてしかもドーパミンを大量にあびてもらおうと思い。\n1995年ころ京都の幼稚園で実際に使われていたアプリをVu...",
          "link": "https://zenn.dev/open_sesame/articles/2f6442ccdddb1b",
          "publishedOn": "2021-09-11T01:10:07.000Z",
          "wordCount": 35,
          "title": "算数インベーダー(1)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--sdnjjIHH--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:open%2520sesame%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%25E7%25AE%2597%25E6%2595%25B0%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2599%25E3%2583%25BC%25E3%2583%2580%25E3%2583%25BC%25281%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fN2Y3OGJlZDlkOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "author": "Yu Watanabe",
          "description": "Jest とは\nhttps://jestjs.io/ja/\nJestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール\nJest には\n\nテストランナー\nカバレッジ計測\nモック\nアサーション\n\nなど テストの実行を含めた 様々な機能がオールインワンで提供されているため\n今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる\nvueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる\n\n Jest の設定について\n\n実行環境設定\n\nどの環境で テストを動作させ...",
          "link": "https://zenn.dev/azu369yu/articles/a9989d73b4d19d",
          "publishedOn": "2021-09-09T06:18:50.000Z",
          "wordCount": 150,
          "title": "[まとめ] Jest について",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1mm64zHv--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Yu%2520Watanabe%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:%255B%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%255D%2520Jest%2520%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%2584%25E3%2581%25A6%2520%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dsNHlOeEpMd3FVcTNfeXMyWTFPNHFHNng0cmlUTWRsVVNBYXNPPXM4MC1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "author": "博ノ助",
          "description": "これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）\n\n これダメ\n\n      \n        sample.vue\n        <script>\n  setTimeout(function() {\n    this.data = false;\n  }, 1000);\n</script>\n\n\n      \n      \n JavaScriptだったら\n\n      \n        sample.v...",
          "link": "https://zenn.dev/cyber_hacnosuke/articles/311184ad511764",
          "publishedOn": "2021-09-08T12:56:33.000Z",
          "wordCount": 46,
          "title": "無名関数内でNuxt.jsのthisを利用したい。",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ENKkN4M0--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E5%258D%259A%25E3%2583%258E%25E5%258A%25A9%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E7%2584%25A1%25E5%2590%258D%25E9%2596%25A2%25E6%2595%25B0%25E5%2586%2585%25E3%2581%25A7Nuxt.js%25E3%2581%25AEthis%25E3%2582%2592%25E5%2588%25A9%25E7%2594%25A8%25E3%2581%2597%25E3%2581%259F%25E3%2581%2584%25E3%2580%2582%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNmNjNzg4YzUzOS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/shlia/articles/a6c2fb22ab7c6e",
          "author": "shira79",
          "description": "概要\n業務で触れる技術はバックエンド関連が主で、フロントエンドを関連の技術に触れることが少ないのですが、勉強を兼ねてVue.jsとContentfulで作成したブログをSPAで、Netlifyにホスティングしていました。\nその後、パフォーマンスの向上+OGPの設定を目的として、Nuxt.jsのSSG機能を使って書き換えてみました。\n\n リンク\n\n リプレイス後\nhttps://github.com/shira79/MyBlog\nhttps://shira-nuxt-static.netlify.app/\n使用技術は以下です。\nNuxt.js or Next.js + Contenfu...",
          "link": "https://zenn.dev/shlia/articles/a6c2fb22ab7c6e",
          "publishedOn": "2021-09-07T10:16:24.000Z",
          "wordCount": 205,
          "title": "フロントエンド初心者がVueで作ったブログをNuxtのSSGで作り直した時につまずいたこと",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--FkZykG9c--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:shira79%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_65_bold:%25E3%2583%2595%25E3%2583%25AD%25E3%2583%25B3%25E3%2583%2588%25E3%2582%25A8%25E3%2583%25B3%25E3%2583%2589%25E5%2588%259D%25E5%25BF%2583%25E8%2580%2585%25E3%2581%258CVue%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2583%2596%25E3%2583%25AD%25E3%2582%25B0%25E3%2582%2592Nuxt%25E3%2581%25AESSG%25E3%2581%25A7%25E4%25BD%259C%25E3%2582%258A%25E7%259B%25B4%25E3%2581%2597%25E3%2581%259F%25E6%2599%2582%25E3%2581%25AB%25E3%2581%25A4%25E3%2581%25BE%25E3%2581%259A%25E3%2581%2584%25E3%2581%259F%25E3%2581%2593%25E3%2581%25A8%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMzhmMmVhYTkzNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nice2have/articles/aa15eccd13a23c",
          "author": "Nakajima",
          "description": "はじめに\n今回初めて個人開発で作ったサービスを公開します。今までも何回かトライしていたのですが、なかなか公開までに至らないうちに、なにか問題にぶちあたったり、時間がかかりすぎて情熱が冷めてしまったりしていたので、今回はまずはスモールスタートで公開して改善していくことを心がけました。大体今回の公開まで、開発を始めてから1ヶ月程度になります。毎日朝4時半に起きて、子どもたちが起きる7時過ぎまでを開発時間として取り組んできました。\n\n\n どんな人向け？\n自分で作っているサービスの開発ロードマップをユーザーに公開するために、都度ブログを書いたりするのも大変ですよね。もし、自分のサービスのソー...",
          "link": "https://zenn.dev/nice2have/articles/aa15eccd13a23c",
          "publishedOn": "2021-09-07T07:58:36.000Z",
          "wordCount": 52,
          "title": "Github Issuesをキレイに外部公開するサービス「2go」作ってみた",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--OclLDDjr--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Nakajima%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Github%2520Issues%25E3%2582%2592%25E3%2582%25AD%25E3%2583%25AC%25E3%2582%25A4%25E3%2581%25AB%25E5%25A4%2596%25E9%2583%25A8%25E5%2585%25AC%25E9%2596%258B%25E3%2581%2599%25E3%2582%258B%25E3%2582%25B5%25E3%2583%25BC%25E3%2583%2593%25E3%2582%25B9%25E3%2580%258C2go%25E3%2580%258D%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZTM5ZjY5NDZlNi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057",
          "author": "にしはら",
          "description": "Nuxtの動的ルーティングの静的サイトジェネレート（SSG）と静的サイトホスティングサービス（Netlify、Vercel、GitHub Pages）の404ページの挙動について調べました。\n結論からすると、存在しない動的ルーティングで404ページを表示させたい場合はvalidate関数()を設置する必要があります。\n\nデモはこちら\nコードはこちら\n\n\n やりたいこと\n静的ジェネレート後、存在しないIDのURL（例：/blog/9999）の場合は404ページに飛ばしたいです。\n\n 前提\n/blog/以下が動的ルーティングになっています。動的ルーティングのID番号を拾ってAPIから該当デー...",
          "link": "https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057",
          "publishedOn": "2021-09-05T14:44:24.000Z",
          "wordCount": 43,
          "title": "Nuxtの動的ルーティングのSSGと静的サイトホスティングの404",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--Zh7wglab--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AB%25E3%2581%2597%25E3%2581%25AF%25E3%2582%2589%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%25E3%2581%25AE%25E5%258B%2595%25E7%259A%2584%25E3%2583%25AB%25E3%2583%25BC%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AESSG%25E3%2581%25A8%25E9%259D%2599%25E7%259A%2584%25E3%2582%25B5%25E3%2582%25A4%25E3%2583%2588%25E3%2583%259B%25E3%2582%25B9%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2581%25AE404%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYWY3YjY0NWRlOC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/736bfeaaa60ab3",
          "author": "てんてる",
          "description": "Vue3.2からSFCの<style>内でのv-bind利用が実験的機能では無くなり、正式に導入されました。\n\n 概要\nSFCのdataもしくはsetup内で宣言した値を<style>で利用できます。\n\n実際の値はハッシュ化されたCSS変数として書き出されるため、CSSは静的な状態です。\nまた、値が変更された場合はハッシュ化されたCSS変数が書き換えられるため、リアクティブです。\n\n\n 書き方\n書き方はシンプルで、<script>内で宣言した変数名を以下のようにv-bind()に渡すことで、<style>内で利用可能です。\n\n      \n...",
          "link": "https://zenn.dev/tentel/articles/736bfeaaa60ab3",
          "publishedOn": "2021-09-04T21:47:11.000Z",
          "wordCount": 74,
          "title": "【Vue3】Vueで宣言した変数の値をCSSで読み込む",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--pXh8_Zei--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue3%25E3%2580%2591Vue%25E3%2581%25A7%25E5%25AE%25A3%25E8%25A8%2580%25E3%2581%2597%25E3%2581%259F%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25AE%25E5%2580%25A4%25E3%2582%2592CSS%25E3%2581%25A7%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tentel/articles/886dc6b615528f",
          "author": "てんてる",
          "description": "Vue3.2からv-memoディレクティブが追加されました。\nv-memoディレクティブを利用することで、不要な再レンダリングを省略することができるので、パフォーマンスの向上につながります。\n\n 概要\nv-memoディレクティブは、指定したすべての値が最後のレンダリング結果と同じであれば、サブツリー全体の再レンダリングをスキップします。\n\nDOMの更新だけでなく、仮想DOMのVNodeの作成もスキップされます。\n\n\n v-memoディレクティブの書き方\n以下のように、コンポーネントが再レンダリングされた際に、配列に指定したvalueA及びvalueBが、最後のレンダリング時と同じ値の場合...",
          "link": "https://zenn.dev/tentel/articles/886dc6b615528f",
          "publishedOn": "2021-09-04T06:27:40.000Z",
          "wordCount": 349,
          "title": "【Vue3】v-memoディレクティブでレンダリングを最適化する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--wTPLUAPe--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25A6%25E3%2582%2593%25E3%2581%25A6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%25E3%2580%2590Vue3%25E3%2580%2591v-memo%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2583%2596%25E3%2581%25A7%25E3%2583%25AC%25E3%2583%25B3%25E3%2583%2580%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E6%259C%2580%25E9%2581%25A9%25E5%258C%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fYzlhMGRmYzE4ZS5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/rgbkids/articles/694a5a491494b8",
          "author": "vteacher",
          "description": "原文を元に、会話風（入門編によくある感じ）にしたてあげました。\nわかりにくいところは説明を足しています。\n原文：\nhttps://v3.ja.vuejs.org/guide/introduction.html\n\n Vue.js とは？\n🙍‍♀️「Vue (発音はビュー) は、ユーザーインターフェイスを構築するためのプログレッシブフレームワークです。Vue は少しずつ適用していけるように設計されています」\n🙂「SPAだから、Reactと類似の技術ってことですね」\n🙍‍♀️「その通りです。Vueの最新バージョンは3です。Vue3の説明をしていきます」\n\n はじめに\n🙍‍♀️「Vue.js を...",
          "link": "https://zenn.dev/rgbkids/articles/694a5a491494b8",
          "publishedOn": "2021-09-04T03:03:55.000Z",
          "wordCount": 197,
          "title": "Vue 3のエッセンシャルガイドを会話風に説明してみる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--yj0yTYJK--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:vteacher%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%25203%25E3%2581%25AE%25E3%2582%25A8%25E3%2583%2583%25E3%2582%25BB%25E3%2583%25B3%25E3%2582%25B7%25E3%2583%25A3%25E3%2583%25AB%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589%25E3%2582%2592%25E4%25BC%259A%25E8%25A9%25B1%25E9%25A2%25A8%25E3%2581%25AB%25E8%25AA%25AC%25E6%2598%258E%25E3%2581%2597%25E3%2581%25A6%25E3%2581%25BF%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZZXAwYXhYZ084ZHlWVVJsbndsanVacFlaRmF4ZU14YV92Z3JDSHc9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15",
          "author": "おしうみなおき",
          "description": "Vue.jsだけで郵便番号自動入力機能を作成します。\nCORSのエラーが発生してしまうので、jsonpを使用してCORSのエラーが出ないようにしていきます。\n\n jsonpインストール\n\n      \n        \n        npm install axios-jsonp\n\n\n      \n      \n 郵便番号から住所を取得してセットする取得実装\njsonpのaxiosを使用して、郵便局dが出している郵便番号取得APiを叩きに行きます。\n\n      \n        \n        <div class=\"form-group\">\n  <label&g...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15",
          "publishedOn": "2021-09-01T00:38:19.000Z",
          "wordCount": 144,
          "title": "Vue.jsで郵便番号自動入力機能を作成する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--IK7Jmh2x--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue.js%25E3%2581%25A7%25E9%2583%25B5%25E4%25BE%25BF%25E7%2595%25AA%25E5%258F%25B7%25E8%2587%25AA%25E5%258B%2595%25E5%2585%25A5%25E5%258A%259B%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E4%25BD%259C%25E6%2588%2590%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/azukiazusa/articles/5a69cbcca75113",
          "author": "azukiazusa",
          "description": "結論\nオプションとしてcustomProperties:trueを渡します。\n\n      \n        \n        import Vue from 'vue'\nimport Vuetify from 'vuetify/lib'\n\nVue.use(Vuetify)\n\nexport default new Vuetify({\n  theme: {\n    themes: {\n      light: {\n        main: '#D7F9F1',\n        secondary: '#7AA095',\n      }\n    },\n    options: { cu...",
          "link": "https://zenn.dev/azukiazusa/articles/5a69cbcca75113",
          "publishedOn": "2021-08-27T09:54:35.000Z",
          "wordCount": 241,
          "title": "VuetifyのテーマをCSS変数として使用する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ka3j8SfY--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:azukiazusa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vuetify%25E3%2581%25AE%25E3%2583%2586%25E3%2583%25BC%25E3%2583%259E%25E3%2582%2592CSS%25E5%25A4%2589%25E6%2595%25B0%25E3%2581%25A8%25E3%2581%2597%25E3%2581%25A6%25E4%25BD%25BF%25E7%2594%25A8%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMjgzYWY0MzVjZi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/compiled_oz/articles/a8edecc6c39713",
          "author": "Oz",
          "description": "Vue.js is 何？\nVue.jsはシンプルなMVVM構造のプログレッシブフレームワークで、\nModel、View、ViewModelの３つでアプリケーションを構築する。\n\n データバインディング\nデータバインディングを行うにはテンプレートで使用する全てのデータはリアクティブデータとして定義する必要がある\n\n ディレクティブ\nvから始まるViewの要素に付加できる独自の属性のこと。\nv-if、v-show、v-for、v-model、v-bind、v-onなどがある。\nHTMLのクラスを動的に制御したり、イベントをハンドルできる。\n\nv-on:イベントハンドラ\nv-model:双...",
          "link": "https://zenn.dev/compiled_oz/articles/a8edecc6c39713",
          "publishedOn": "2021-08-27T05:53:53.000Z",
          "wordCount": 397,
          "title": "Vue.js入門",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s---X8noaM3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:Oz%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Vue.js%25E5%2585%25A5%25E9%2596%2580%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2gxLTQ4QzBya1c5T3FFMHhJSHJvYU1MUGR6NTNwQUtBV0lNWmJnPXM5Ni1j%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/c776ef1586eb40",
          "author": "おしうみなおき",
          "description": "vue.jsで非同期処理をまとめて処理したい場合があります。\n普通に1つ1つ処理を待つ場合は async - awaitで良いのですが、それだと1つずつしか処理できないので、どうしても処理が遅くなってしまいます。\nそんな時は、 Promise.all を使えば、複数の非同期処理をまとめて処理しつつ、全ての処理が完了したら次に行きますよー！というふうにできます。\n\n      \n        \n        // 非同期をまとめて処理する\nasync process() {\n    await Promise.all([\n        this.methodA(),\n\tthis.me...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/c776ef1586eb40",
          "publishedOn": "2021-08-26T23:52:48.000Z",
          "wordCount": 38,
          "title": "vueで非同期処理をまとめて処理する際のベストプラクティス",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--LfUlgPWb--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vue%25E3%2581%25A7%25E9%259D%259E%25E5%2590%258C%25E6%259C%259F%25E5%2587%25A6%25E7%2590%2586%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2581%25A6%25E5%2587%25A6%25E7%2590%2586%25E3%2581%2599%25E3%2582%258B%25E9%259A%259B%25E3%2581%25AE%25E3%2583%2599%25E3%2582%25B9%25E3%2583%2588%25E3%2583%2597%25E3%2583%25A9%25E3%2582%25AF%25E3%2583%2586%25E3%2582%25A3%25E3%2582%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/moroshi/articles/24a8bd494ee67c",
          "author": "moroshi",
          "description": "はじめに\n\n 経緯\nSPA(single page application)をvue.js + vuetifyで作成し、Laravelを作成したAPIサーバーと連携する環境をよく構築する。\nそれと関連して、ちょっとしたクリーンな検証環境をサクッと作りたくなることがあるため、dockerでそれらしい環境を作成しようと思ったのがことの始まり。\n以下、\"それらしい環境\"の作成手順を残す。\n\n 前提\n環境や使うツールは以下のとおり\n\n 環境\n\nWindows 10 Pro 64bit\nDocker Desktop for Windows (on Hyper-V), Version 3.6.0...",
          "link": "https://zenn.dev/moroshi/articles/24a8bd494ee67c",
          "publishedOn": "2021-08-26T12:04:56.000Z",
          "wordCount": 844,
          "title": "vuetify v2の環境をDockerで気軽に作る",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--11VzaZxP--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:moroshi%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vuetify%2520v2%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E3%2582%2592Docker%25E3%2581%25A7%25E6%25B0%2597%25E8%25BB%25BD%25E3%2581%25AB%25E4%25BD%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fZWYyODk0MjM2Mi5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/uedatakeyuki/articles/c42d7852b2a525",
          "author": "UedaTakeyuki",
          "description": "なにがしたいのか\n同じ単語の複数の辞書へのリンクみたいなページを作る時に\n\n大概の辞書って検索 URL にパラメタで単語を渡す感じの API なので\nfrontmatter で単語を宣言して\n\n      \n        \n        ---\npv: get in\n---\n\n\n      \n      あとは {{$frontmatter.pv}} とかで使い回せれば楽です\n\n ところが\n実際にやってみると、こんなリンクで\n\n[英辞郎](https://eow.alc.co.jp/search?q={{$frontmatter.pv}})\n\n一見、いい感じに見えるのですが\n\n全...",
          "link": "https://zenn.dev/uedatakeyuki/articles/c42d7852b2a525",
          "publishedOn": "2021-08-25T05:36:55.000Z",
          "wordCount": 51,
          "title": "vuepress でリンクの url に frontmatter を混ぜる",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--O-IoV8CR--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:UedaTakeyuki%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:vuepress%2520%25E3%2581%25A7%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25AF%25E3%2581%25AE%2520url%2520%25E3%2581%25AB%2520frontmatter%2520%25E3%2582%2592%25E6%25B7%25B7%25E3%2581%259C%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2o5Zzc0M0lsRjVqeVR6enRySTVUbHhqeTNqMzBFZlBaYmJCaEtoS2c9czk2LWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/newburu/articles/7efb9d9f0658a8",
          "author": "にゅ〜ぶる",
          "description": "前回は、「rails new」のオプションでVueをインストールしました。\nhttps://zenn.dev/newburu/articles/e21629af475d69\nが・・・Vue2になるようで、Vue3を使うためには、手動でVue3のインストールが必要とのことでした。\nという事で、やり直します！！\n\n rails newでWebアプリケーションを作成\n前回同様、まずは「rails new」します。\n\n      \n        \n        $ rails new -d mysql hello-vue3\n$ rails db:create\n$ rails s\n\n\n    ...",
          "link": "https://zenn.dev/newburu/articles/7efb9d9f0658a8",
          "publishedOn": "2021-08-24T13:54:05.000Z",
          "wordCount": 176,
          "title": "RailsでHelloVue3!!!",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--ELpypaBV--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AB%25E3%2582%2585%25E3%2580%259C%25E3%2581%25B6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_80_bold:Rails%25E3%2581%25A7HelloVue3%2521%2521%2521%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lTZVE3RGdOWUEyQ0hQWUFJalp1dGpxSHJIVHhTTjVoMVhZQWN4a3c9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/nappa/articles/e201780237a81e",
          "author": "nappa",
          "description": "はじめに\n副業の開発で、決済システムに PAY.JP を導入することになり、クライアント向けのライブラリとして、カスタマイズがしやすい Payjp.js を使うことになった。\nしかし、副業の開発では Nuxt を使っており、良い感じに連携するドキュメントがなかったため、メモ代わりに残しておく。\n\n 使っている技術\n\nNuxt 2.15.3\n\nuniversal(ssr) モードを使用\n\n\n\n\n Payjp.js を読み込む\nPayjp.js は script タグで読み込ませるので nuxt.config.js に設定を追加する必要がある。\n下記の設定を追加して、<head&g...",
          "link": "https://zenn.dev/nappa/articles/e201780237a81e",
          "publishedOn": "2021-08-23T19:38:52.000Z",
          "wordCount": 158,
          "title": "Nuxt に Payjp.js を導入する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--cNeNxkZ3--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:nappa%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Nuxt%2520%25E3%2581%25AB%2520Payjp.js%2520%25E3%2582%2592%25E5%25B0%258E%25E5%2585%25A5%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fMTgzZjQ1NjcwYy5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/newburu/articles/e21629af475d69",
          "author": "にゅ〜ぶる",
          "description": "rails new でアプリケーションを作成する\nrails newには、Vueを簡単に使えるオプション--webpack=vueがあるので、それを指定してrails newします。\nDBもMySQLを使うので、-d mysqlも一緒に指定します。※--database=mysqlと同じです。\n\n      \n        \n        rails new -d mysql --webpack=vue hello-vue\n\n\n      \n      そして、いつもの起動するまでのコマンドをぽちぽち\n\n      \n        \n        rails db:creat...",
          "link": "https://zenn.dev/newburu/articles/e21629af475d69",
          "publishedOn": "2021-08-23T14:28:41.000Z",
          "wordCount": 62,
          "title": "Rails+VueでHello Vue！まで",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--1dN1a8ee--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%25AB%25E3%2582%2585%25E3%2580%259C%25E3%2581%25B6%25E3%2582%258B%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Rails%252BVue%25E3%2581%25A7Hello%2520Vue%25EF%25BC%2581%25E3%2581%25BE%25E3%2581%25A7%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2lTZVE3RGdOWUEyQ0hQWUFJalp1dGpxSHJIVHhTTjVoMVhZQWN4a3c9czgwLWM=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc",
          "author": "しめじ",
          "description": "Vue.jsの導入からBMI計算機やTODOアプリの作り方までの手順をまとめていきます。\nこの本を読むにあたり、下記の2点について経験がありますと、より理解しやすい内容と思います。\n\n1. HTMLとCSSを使った事がある方\n2. JavaScriptをそれなりに使った事がある方",
          "link": "https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc",
          "publishedOn": "2021-08-23T12:15:53.000Z",
          "wordCount": 14,
          "title": "Vue.jsをかじる本",
          "enclosure": {
            "url": "https://zenn.dev/images/logo-only-dark.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/udyest/articles/46b1fd84001663",
          "author": "udyest",
          "description": "navigator.online\n\nnavigator.onlineで、現在オンラインか否かを判定できます。\nオンライン状態ならtrue、オフライン状態ならfalseになります。\n\n      \n        \n        console.log(navigator.online)\n\n\n      \n      \n onlineイベント / offlineイベント\nnavigator.onlineは、あくまで現在のオンライン状態を取得するにすぎません。なので、「オンラインになったら何かをする」といった監視の処理はできません。\nオンライン状態を監視するには、onlineイベントと...",
          "link": "https://zenn.dev/udyest/articles/46b1fd84001663",
          "publishedOn": "2021-08-23T08:59:15.000Z",
          "wordCount": 207,
          "title": "[Vue3]オンラインか否かを判定・監視する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--y960TwCb--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:udyest%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:%255BVue3%255D%25E3%2582%25AA%25E3%2583%25B3%25E3%2583%25A9%25E3%2582%25A4%25E3%2583%25B3%25E3%2581%258B%25E5%2590%25A6%25E3%2581%258B%25E3%2582%2592%25E5%2588%25A4%25E5%25AE%259A%25E3%2583%25BB%25E7%259B%25A3%25E8%25A6%2596%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzg0MjY0YTJiZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/ynakamura/articles/8fab06bba527b5",
          "author": "yoshihiro nakamura",
          "description": "かれこれ４、５年くらいAtomic designに触れてきて、こんなに使いづらいのになんで使ってるんんだっけ？ってなったので、脳死と妥協のAtomic designを辞めたいというモチベを高め、重い腰を上げて考えてみました。\n\n 前提\n今回の趣旨はあくまでも共通コンポーネントにフォーカスしています。なのでpages(人によってはscreens,containersと命名しているかも)は考慮しません。\nまた、atomic designのデザインサイドの思想そのものについては言及しません。あくまでもディレクトリ構成の運用上の課題にフォーカスします。\n\n ディレクトリを分ける意味とは\nそもそも...",
          "link": "https://zenn.dev/ynakamura/articles/8fab06bba527b5",
          "publishedOn": "2021-08-23T08:29:33.000Z",
          "wordCount": 272,
          "title": "Atomic designを辞めて利用目的別のディレクトリ構成に移行する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--W5KlHrc_--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yoshihiro%2520nakamura%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Atomic%2520design%25E3%2582%2592%25E8%25BE%259E%25E3%2582%2581%25E3%2581%25A6%25E5%2588%25A9%25E7%2594%25A8%25E7%259B%25AE%25E7%259A%2584%25E5%2588%25A5%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E6%2588%2590%25E3%2581%25AB%25E7%25A7%25BB%25E8%25A1%258C%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly96ZW5uLWRldi5naXRodWIuaW8vZGVmYXVsdC1hdmF0YXJzL2RhcmsveS5zdmc=%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/tokusuke/articles/e42e6d4d63618a",
          "author": "yosuke-dev",
          "description": "概要\n\nVue.jsのフォーム検証機能を実装するため、vuelidateを実装したお話です。\n\n\n2019年に社内LTで発表したものを編集して投稿した記事です。\n一部古い情報が残っている場合がございますので、ご留意ください。\n\n\n はじめに\n\n話さないこと\n\nVue.jsの導入\nVue 3.x での実例紹介\nカスタムバリデーションの方法\n\n\n話すこと\n\nvuelidateの導入\nコンポーネントへの実装\nVue 2.x での実例紹介\n\n\n\n\n 環境\n\nVue.js 2.x\nBootstrap 4.x\nnpm ?\n\n当時のバージョンのメモを失念してましたが、13.x だったと思います。\n...",
          "link": "https://zenn.dev/tokusuke/articles/e42e6d4d63618a",
          "publishedOn": "2021-08-23T02:33:18.000Z",
          "wordCount": 196,
          "title": "Vueにフォーム検証機能を実装する (vuelidate)",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--6GavV-EQ--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:yosuke-dev%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue%25E3%2581%25AB%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25BC%25E3%2583%25A0%25E6%25A4%259C%25E8%25A8%25BC%25E6%25A9%259F%25E8%2583%25BD%25E3%2582%2592%25E5%25AE%259F%25E8%25A3%2585%25E3%2581%2599%25E3%2582%258B%2520%2528vuelidate%2529%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNzNiZTg3YzI1Ny5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        },
        {
          "id": "https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609",
          "author": "おしうみなおき",
          "description": "複数の画像を一度にアップロードしたい場合があると思います。\nLaravel×Vue.jsで実際に試してみたので、メモがてら残しておきたいと思います。\nまずは、画像をアップロードするところのHTMLです\n\n      \n        \n        <template>\n  <div v-for=\"(file, index) in files\">\n    <label>ファイルを選択する</label>\n    <input type=\"file\" @change=\"onFileChange($event, file, index)...",
          "link": "https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609",
          "publishedOn": "2021-08-22T23:45:51.000Z",
          "wordCount": 135,
          "title": "Vue.jsから複数の画像をLaravelに送り保存する",
          "enclosure": {
            "url": "https://res.cloudinary.com/zenn/image/upload/s--_ZtBkSnn--/co_rgb:222%2Cg_south_west%2Cl_text:notosansjp-medium.otf_37_bold:%25E3%2581%258A%25E3%2581%2597%25E3%2581%2586%25E3%2581%25BF%25E3%2581%25AA%25E3%2581%258A%25E3%2581%258D%2Cx_203%2Cy_98/c_fit%2Cco_rgb:222%2Cg_north_west%2Cl_text:notosansjp-medium.otf_70_bold:Vue.js%25E3%2581%258B%25E3%2582%2589%25E8%25A4%2587%25E6%2595%25B0%25E3%2581%25AE%25E7%2594%25BB%25E5%2583%258F%25E3%2582%2592Laravel%25E3%2581%25AB%25E9%2580%2581%25E3%2582%258A%25E4%25BF%259D%25E5%25AD%2598%25E3%2581%2599%25E3%2582%258B%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3plbm4tdXNlci11cGxvYWQvYXZhdGFyL2ljb25fNDRmOWU0YmY2ZC5qcGVn%2Cr_max%2Cw_90%2Cx_87%2Cy_72/v1627274783/default/og-base_z4sxah.png",
            "length": "0",
            "type": "image/png"
          }
        }
      ]
    }
  ],
  "cliVersion": "1.11.1"
}