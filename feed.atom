<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-08-25T01:02:29.584Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[RailsでHelloVue3!!!]]></title>
        <id>https://zenn.dev/newburu/articles/7efb9d9f0658a8</id>
        <link href="https://zenn.dev/newburu/articles/7efb9d9f0658a8"/>
        <updated>2021-08-24T13:54:05.000Z</updated>
        <summary type="html"><![CDATA[前回は、「rails new」のオプションでVueをインストールしました。
https://zenn.dev/newburu/articles/e21629af475d69
が・・・Vue2になるようで、Vue3を使うためには、手動でVue3のインストールが必要とのことでした。
という事で、やり直します！！

 rails newでWebアプリケーションを作成
前回同様、まずは「rails new」します。

      
        
        $ rails new -d mysql hello-vue3
$ rails db:create
$ rails s


    ...]]></summary>
        <author>
            <name>にゅ〜ぶる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アトミックデザインにおけるコンポーネントのAuto importの問題について色々と調査した件]]></title>
        <id>https://zenn.dev/sengosha/articles/95f3ec0d62fba8</id>
        <link href="https://zenn.dev/sengosha/articles/95f3ec0d62fba8"/>
        <updated>2021-08-24T08:37:01.000Z</updated>
        <summary type="html"><![CDATA[Nuxt2.15.x以降のコンポーネントimportに関して


@nuxt/components はバージョン 2 が使えるようになります
コンポーネント名にディレクトリ名を付与したタグを使うことができるようになり、コンポーネントの import や宣言などの記述を省略することができます (記述の省略は 2.14 でも可能でしたが 2.15 で先の記述の使用が可能となりました)


 ディレクト名付きのコンポーネント名
例えば下記のフォルダー構造

      
        
        | components/
---| my/
------| form/
------...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で動的/静的ルーティングのサイトマップを生成する]]></title>
        <id>https://zenn.dev/soberhiko/articles/aed491ed167bad</id>
        <link href="https://zenn.dev/soberhiko/articles/aed491ed167bad"/>
        <updated>2021-08-24T05:47:46.000Z</updated>
        <summary type="html"><![CDATA[概要
Next.js のアプリケーションで、CMS などから取得したコンテンツによって動的に生成される URL と、静的な URL の両方がある場合に、サイトマップをどのように自動生成させるかについての記事です。
Zenn に投稿されている記事など、先行事例も見られますが、以下の要件を満たすサイトマップの生成方法については見当たらなかったため、その共有を目的としています。

対象 URL は Next.js の動的/静的ルーティングの両方を含む

動的 URL のページはコンテンツ追加のタイミングでビルドが走らない


サイトマップファイルはいくつかに分割し、インデックスファイルも生...]]></summary>
        <author>
            <name>eyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt に Payjp.js を導入する]]></title>
        <id>https://zenn.dev/nappa/articles/e201780237a81e</id>
        <link href="https://zenn.dev/nappa/articles/e201780237a81e"/>
        <updated>2021-08-23T19:38:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
副業の開発で、決済システムに PAY.JP を導入することになり、クライアント向けのライブラリとして、カスタマイズがしやすい Payjp.js を使うことになった。
しかし、副業の開発では Nuxt を使っており、良い感じに連携するドキュメントがなかったため、メモ代わりに残しておく。

 使っている技術

Nuxt 2.15.3

universal(ssr) モードを使用




 Payjp.js を読み込む
Payjp.js は script タグで読み込ませるので nuxt.config.js に設定を追加する必要がある。
下記の設定を追加して、<head&g...]]></summary>
        <author>
            <name>nappa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OAS使ってなるべく楽にNuxtのテスト]]></title>
        <id>https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40</id>
        <link href="https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40"/>
        <updated>2021-08-23T17:12:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
composition apiの登場でVueもようやくテストしやすい感じになってきました。
とはいえ実際AJAXが絡んだコンポーネントのテストをやろうとするとあれをモックしてこれもモックしてとなんだかんだ大量のモッキングが必要になって色々めんどくさい感じになりがちですし、ほとんどモックされてて実際のところどこがテストできてるのかわけがわからない感じになりがちです。
前回の記事ではOASを利用することでスタブサーバーが用意できることを紹介しました。
この記事ではそのスタブサーバーを利用して、フロントで再現性のあるAJAXテストを簡単に行える方法がないか模索してみます。
スタブ...]]></summary>
        <author>
            <name>夕暮おこは</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL で N+1 問題を解決する 4 つのアプローチ]]></title>
        <id>https://zenn.dev/alea12/articles/15d73282c3aacc</id>
        <link href="https://zenn.dev/alea12/articles/15d73282c3aacc"/>
        <updated>2021-08-23T14:37:01.000Z</updated>
        <summary type="html"><![CDATA[TLDR

Prisma が検討できる場合: Prisma の findUnique を使う
それ以外の場合: DataLoader を実装する。ライブラリを使えばそんなに大変ではない

JOIN での解決は GraphQL の道を踏み外している(ように感じる)


 GraphQL における N+1 問題
GraphQL で 1:N のデータ構造をクエリすると、すぐに N+1 問題に行き当たります。User と Post が 1:N の関係となる、以下の例を見てみましょう。

      
        
        type User {
  id: Int!
  name...]]></summary>
        <author>
            <name>alea12</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails+VueでHello Vue！まで]]></title>
        <id>https://zenn.dev/newburu/articles/e21629af475d69</id>
        <link href="https://zenn.dev/newburu/articles/e21629af475d69"/>
        <updated>2021-08-23T14:28:41.000Z</updated>
        <summary type="html"><![CDATA[rails new でアプリケーションを作成する
rails newには、Vueを簡単に使えるオプション--webpack=vueがあるので、それを指定してrails newします。
DBもMySQLを使うので、-d mysqlも一緒に指定します。※--database=mysqlと同じです。

      
        
        rails new -d mysql --webpack=vue hello-vue


      
      そして、いつもの起動するまでのコマンドをぽちぽち

      
        
        rails db:creat...]]></summary>
        <author>
            <name>にゅ〜ぶる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsをかじる本]]></title>
        <id>https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc</id>
        <link href="https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc"/>
        <updated>2021-08-23T12:15:53.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsの導入からBMI計算機やTODOアプリの作り方までの手順をまとめていきます。
この本を読むにあたり、下記の2点について経験がありますと、より理解しやすい内容と思います。

1. HTMLとCSSを使った事がある方
2. JavaScriptをそれなりに使った事がある方]]></summary>
        <author>
            <name>しめじ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)]]></title>
        <id>https://zenn.dev/yano/articles/vim_plugin_top_10</id>
        <link href="https://zenn.dev/yano/articles/vim_plugin_top_10"/>
        <updated>2021-08-23T12:02:20.000Z</updated>
        <summary type="html"><![CDATA[概要
自分は普段Neovimを使って(主にTypeScriptでの)開発を行っています。
NeovimでのTypeScript開発は環境を整えればVSCodeと遜色ない開発体験を得ることができると思っています。
また、Vimの操作に慣れれば一部の編集機能についてはVimの方が優れていると感じています。
この記事では自分の開発に欠かせないプラグイン10個を紹介しようと思います。

 プラグイン10選

VimをIDE化するプラグイン coc.nvim

様々な操作の起点に使うFuzzy Finder fzf-preview.vim

高機能なファイラ fern.vim

Vim上でGi...]]></summary>
        <author>
            <name>Yuki Yano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】Parsing error: Cannot find module 'next/babel'の解決]]></title>
        <id>https://zenn.dev/shimotaroo/articles/c8f2e751cd7877</id>
        <link href="https://zenn.dev/shimotaroo/articles/c8f2e751cd7877"/>
        <updated>2021-08-23T09:44:44.000Z</updated>
        <summary type="html"><![CDATA[概要
以下の記事でNext.jsにESlint（JSのコードが正しいか検証してくれるツール）を導入した時に

      
        
        Parsing error: Cannot find module 'next/babel'


      
      が出たので解決方法を残しておきます。
https://fwywd.com/tech/next-eslint-prettier
上記エラー出力が確認できたのは以下のファイル（Tailwind CSSを導入済み）

next.config.js
tailwind.config.js
postcss.config...]]></summary>
        <author>
            <name>ゆーたろー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Vue3]オンラインか否かを判定・監視する]]></title>
        <id>https://zenn.dev/udyest/articles/46b1fd84001663</id>
        <link href="https://zenn.dev/udyest/articles/46b1fd84001663"/>
        <updated>2021-08-23T08:59:15.000Z</updated>
        <summary type="html"><![CDATA[navigator.online

navigator.onlineで、現在オンラインか否かを判定できます。
オンライン状態ならtrue、オフライン状態ならfalseになります。

      
        
        console.log(navigator.online)


      
      
 onlineイベント / offlineイベント
navigator.onlineは、あくまで現在のオンライン状態を取得するにすぎません。なので、「オンラインになったら何かをする」といった監視の処理はできません。
オンライン状態を監視するには、onlineイベントと...]]></summary>
        <author>
            <name>udyest</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Atomic designを辞めて利用目的別のディレクトリ構成に移行する]]></title>
        <id>https://zenn.dev/ynakamura/articles/8fab06bba527b5</id>
        <link href="https://zenn.dev/ynakamura/articles/8fab06bba527b5"/>
        <updated>2021-08-23T08:29:33.000Z</updated>
        <summary type="html"><![CDATA[かれこれ４、５年くらいAtomic designに触れてきて、こんなに使いづらいのになんで使ってるんんだっけ？ってなったので、脳死と妥協のAtomic designを辞めたいというモチベを高め、重い腰を上げて考えてみました。

 前提
今回の趣旨はあくまでも共通コンポーネントにフォーカスしています。なのでpages(人によってはscreens,containersと命名しているかも)は考慮しません。
また、atomic designのデザインサイドの思想そのものについては言及しません。あくまでもディレクトリ構成の運用上の課題にフォーカスします。

 ディレクトリを分ける意味とは
そもそも...]]></summary>
        <author>
            <name>yoshihiro nakamura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】大学生が『友達が半自動的に追加される新感覚SNS モドキ`AutoF2F`』 をリリースしました 🎉🎉🎉]]></title>
        <id>https://zenn.dev/ezryow/articles/1639171ddb994a</id>
        <link href="https://zenn.dev/ezryow/articles/1639171ddb994a"/>
        <updated>2021-08-23T07:27:26.000Z</updated>
        <summary type="html"><![CDATA[今回、リリースしたアプリケーション

https://www.autof2f.io/

皆さん、SNSでこんな経験ありませんか？
「この人の投稿面白いな、でも勝手にフォローしても失礼じゃないかな？？？」
今回リリースしたアプリケーションは、**「無言でフォローしまっていいのか問題」**をプログラムで自動的に解決しようという目的をもとに開発されました。
一言でどのように解決するか説明すると、
匿名掲示板上のユーザAの書き込みを『いいね』し、その『いいね』が一定の値を超えると自動的にユーザAがフォローに追加されるというものです。

 AutoF2Fの名前の由来
このアプリケーションを開発する...]]></summary>
        <author>
            <name>EZ.Ryow</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueにフォーム検証機能を実装する (vuelidate)]]></title>
        <id>https://zenn.dev/tokusuke/articles/e42e6d4d63618a</id>
        <link href="https://zenn.dev/tokusuke/articles/e42e6d4d63618a"/>
        <updated>2021-08-23T02:33:18.000Z</updated>
        <summary type="html"><![CDATA[概要

Vue.jsのフォーム検証機能を実装するため、vuelidateを実装したお話です。


2019年に社内LTで発表したものを編集して投稿した記事です。
一部古い情報が残っている場合がございますので、ご留意ください。


 はじめに

話さないこと

Vue.jsの導入
Vue 3.x での実例紹介
カスタムバリデーションの方法


話すこと

vuelidateの導入
コンポーネントへの実装
Vue 2.x での実例紹介




 環境

Vue.js 2.x
Bootstrap 4.x
npm ?

当時のバージョンのメモを失念してましたが、13.x だったと思います。
...]]></summary>
        <author>
            <name>yosuke-dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsから複数の画像をLaravelに送り保存する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609"/>
        <updated>2021-08-22T23:45:51.000Z</updated>
        <summary type="html"><![CDATA[複数の画像を一度にアップロードしたい場合があると思います。
Laravel×Vue.jsで実際に試してみたので、メモがてら残しておきたいと思います。
まずは、画像をアップロードするところのHTMLです

      
        
        <template>
  <div v-for="(file, index) in files">
    <label>ファイルを選択する</label>
    <input type="file" @change="onFileChange($event, file, index)...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)]]></title>
        <id>https://zenn.dev/dozo/articles/0b5940f1994a6c</id>
        <link href="https://zenn.dev/dozo/articles/0b5940f1994a6c"/>
        <updated>2021-08-22T21:20:21.000Z</updated>
        <summary type="html"><![CDATA[@wasm-tool/rollup-plugin-rustの使い方
関連記事:
Rustが征くシリーズ過去記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4) ← イマココ


------------------- ↓ 前書はここから ↓-------------------
前回はコマンドを駆使して、
ブラウザ上...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker×FastAPI×React(TypeScript) on AWS ECS【frontend】]]></title>
        <id>https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348</id>
        <link href="https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348"/>
        <updated>2021-08-22T14:14:08.000Z</updated>
        <summary type="html"><![CDATA[前回のbackend編からの続きです
backend編
正直、フロント側はさっぱりセンスが無い＋忘れまくってたりしたのでめちゃくちゃ調べ直した。
あらためて両方できる皆さんすごいわぁ、、（ちなみに僕はバックエンド側もセンスないです）
frontend側に入る前に前回やった内容がちょっと半端だったのでまずはそこをサクッと修正してしまおうと思います。

 crud.py

      
        
        # project/backend/app/api/crud.py
from app.models.pydantic import SummaryPayloadSchem...]]></summary>
        <author>
            <name>daisuke sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing with Next.js]]></title>
        <id>https://zenn.dev/takepepe/articles/testing-with-nextjs</id>
        <link href="https://zenn.dev/takepepe/articles/testing-with-nextjs"/>
        <updated>2021-08-22T13:29:53.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js で開発するアプリケーションテスト手法について、公式ドキュメントが追加され話題になりました。
https://twitter.com/delba_oliveira/status/1427307677709967362
取り上げられている 2 者はよく知られており、いずれかに触れたことがある方も多いかと思います。この公式ドキュメントページでは「何を使って」を紹介しているのみなので、どちらを選ぶべきか悩んだ方もいるのではないでしょうか？

Cypress
Jest & React Testing Library

この判断についてはドキュメントに書かれていなかった...]]></summary>
        <author>
            <name>Takepepe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】dynamic routingで、paramsがundefinedになる問題解決方法]]></title>
        <id>https://zenn.dev/kyo9bo/articles/e02fdaa36fa322</id>
        <link href="https://zenn.dev/kyo9bo/articles/e02fdaa36fa322"/>
        <updated>2021-08-22T06:03:00.000Z</updated>
        <summary type="html"><![CDATA[クエリが取得できない
Nextのメリットの一つとしてdynamic routingが挙げられると思います。しかし、paramを取得する際に一点気になる部分が存在します。

Pages that are statically optimized by Automatic Static Optimization will be hydrated without their route parameters provided, i.e query will be an empty object ({}).


After hydration, Next.js will trigger an...]]></summary>
        <author>
            <name>kyo9bo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでお手軽にWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/bb10104c12080e</id>
        <link href="https://zenn.dev/sora_kumo/articles/bb10104c12080e"/>
        <updated>2021-08-22T04:16:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでWeb-Workerを簡単に使うには
前回の記事で書きましたが、Next.jsには最初からWeb-Workerを読み込むためのWebPack設定が入っているので、そのまま利用することが可能です
しかしWeb-Workerとして書いたスクリプトを読み込む設定が入っているだけで、それ以外のサポートはありません
機能を利用するには、コード上でそれなりに面倒な手順を記述する必要があります

 前回の記事
Next.jsでWeb-Workerを呼び出す

 サンプル置き場
https://github.com/SoraKumo001/next-worker2
https://n...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでお手軽にWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/bb10104c12080e</id>
        <link href="https://zenn.dev/sora_kumo/articles/bb10104c12080e"/>
        <updated>2021-08-22T04:16:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでWeb-Workerを簡単に使うには
前回の記事で書きましたが、Next.jsには最初からWeb-Workerを読み込むためのWebPack設定が入っているので、そのまま利用することが可能です
しかしWeb-Workerとして書いたスクリプトを読み込む設定が入っているだけで、それ以外のサポートはありません
機能を利用するには、コード上でそれなりに面倒な手順を記述する必要があります

 前回の記事
Next.jsでWeb-Workerを呼び出す

 サンプル置き場
https://github.com/SoraKumo001/next-worker2
https://n...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Neovim builtin LSP設定入門]]></title>
        <id>https://zenn.dev/nazo6/articles/c2f16b07798bab</id>
        <link href="https://zenn.dev/nazo6/articles/c2f16b07798bab"/>
        <updated>2021-08-21T14:33:34.000Z</updated>
        <summary type="html"><![CDATA[Neovimには組み込みのLSPクライアントがあります。ちょっと前まではVSCode並の開発体験のためにはcocを使うのがベストな選択肢でしたが、neovim builtin lsp(以下nvim-lsp)でもエコシステムが整ってきており、かなりいい感じの支援機能が受けられます。この記事ではその設定などについて書いていこうと思います。

 環境

Linux (Windowsだと後述のlspinstallというプラグインが使えないのでおすすめできません。LSPを使うこと自体はできます。)
Neovim 0.5
Vimscriptは使わずLuaで書きます


 基本的な設定

 必須プラグ...]]></summary>
        <author>
            <name>nz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtのサードパーティ製Javascriptの読み込む方法を色々試してみた]]></title>
        <id>https://zenn.dev/sengosha/articles/54ec4c57194626</id>
        <link href="https://zenn.dev/sengosha/articles/54ec4c57194626"/>
        <updated>2021-08-21T14:06:58.000Z</updated>
        <summary type="html"><![CDATA[サードパーティ製Javascriptを読み込ませる方法
Nuxtにサードパーティ製Javascript(以下外部ライブラリと称します）を読み込む方法は三つあります、headメソッドやnuxt.config.jsでの設定とpluginで読み込ませる方法です。
今回は開発中に外部ライブラリの導入にあたってheadメソッドとnuxt.config.jsで設定する方法を試していくつかの問題が起きてしまいまして、最後はpluginで読み込ませる方法を選ぶ経緯をまとめました。

 方法１ headメソッド
特定なページに外部ライブラリを読み込ませるには一番手軽な方法です。
こんな感じで書けば外部...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescriptで計算した結果をGithub Actionsに渡して使用する]]></title>
        <id>https://zenn.dev/kinjosan/articles/26cff4f92b9453</id>
        <link href="https://zenn.dev/kinjosan/articles/26cff4f92b9453"/>
        <updated>2021-08-21T08:25:26.000Z</updated>
        <summary type="html"><![CDATA[Github Actions 上で Typescript を実行して、その計算内容を Github Actions 上で使用したい時とかありますよね🎅

 TL;DR

Github Actions で Typescript 実行
@actions/core の setOutput を使用


 例
毎朝 10 時に aws のコストを取得して、aws のコストはドルなので、円に直して slack に通知
※細かい取得方法はテーマではないので省略してます

      
        
        const awsCost = 100; // ドル
const rate = 10...]]></summary>
        <author>
            <name>kinjo yuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascriptで数字 → 文字に変換]]></title>
        <id>https://zenn.dev/kinjosan/articles/04287460d854e4</id>
        <link href="https://zenn.dev/kinjosan/articles/04287460d854e4"/>
        <updated>2021-08-21T08:20:08.000Z</updated>
        <summary type="html"><![CDATA[toStringを使う

      
        
        const numToString = (num: number): string => num.toString();

numToString(1234)
// "1234"


      
      
 String関数を使用する

      
        
        const numToString = (num: number): string => String(num);
numToString(1234)
// "1234"


      
      undef...]]></summary>
        <author>
            <name>kinjo yuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UTF-8対応のBase64を自作する]]></title>
        <id>https://zenn.dev/kota_yata/articles/89b10ac8c93b92</id>
        <link href="https://zenn.dev/kota_yata/articles/89b10ac8c93b92"/>
        <updated>2021-08-21T05:29:11.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptでBase64を自作します。Denoの場合標準ライブラリにBase64が実装されていますので実際に利用する際はそちらを使ってください。

 完成品
一応Denoパッケージとしても公開しています。
https://github.com/kota-yata/ky_base64

 処理の流れ

 エンコーダー
Base64エンコードの大まかな流れは、

文字列のバイナリーを6bitsで区切る
余ったビットは末尾に0を加えて6bitsにする
予め定められている変換表に対応する文字に変換する
文字数が4の整数倍に満たない場合は=で埋め合わせる

という、割と単純なアルゴリズム...]]></summary>
        <author>
            <name>kota-yata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify/v-listを縦スクロールできるように]]></title>
        <id>https://zenn.dev/gz/articles/491b324570703a</id>
        <link href="https://zenn.dev/gz/articles/491b324570703a"/>
        <updated>2021-08-20T16:20:43.000Z</updated>
        <summary type="html"><![CDATA[HTMLのselectのように縦のすこし展開して、スクロールできるようにしたいです。
説明より、コードを見ればわかる。

      
        
        <v-list
 style="max-height: 150px"
 class="overflow-y-auto"
...


      
      以下のようになります。

virtual-scrollbarがありますが、クリックする時の動きとか、振る舞いが気に入りませんでした。
以上です。]]></summary>
        <author>
            <name>walking_on_ice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueのカスタムイベントで .prevent する]]></title>
        <id>https://zenn.dev/yufushiro/articles/12d1db1f390f05</id>
        <link href="https://zenn.dev/yufushiro/articles/12d1db1f390f05"/>
        <updated>2021-08-20T11:50:42.000Z</updated>
        <summary type="html"><![CDATA[要約
Vue テンプレートのイベントハンドラーにおける .prevent modifier は $event.preventDefault() と等価なので、カスタムイベントであっても preventDefault メソッドさえ定義すれば使うことができる。
おわり

 .prevent modifier とは
Vue テンプレートで a 要素などに対して @click.prevent="..." のようにしてイベントハンドラーを書くと、その要素の click イベントにおけるデフォルトのアクションを抑制することができる。


<a href="http://example.co...]]></summary>
        <author>
            <name>ゆふしろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021-8】 Next.js + TypeScript + Storybook(Atomic Design) + Sass + jest]]></title>
        <id>https://zenn.dev/yknight/articles/f0167dc5b0cceb</id>
        <link href="https://zenn.dev/yknight/articles/f0167dc5b0cceb"/>
        <updated>2021-08-19T18:54:15.000Z</updated>
        <summary type="html"><![CDATA[フロントエンド環境に実装をしたStorybookに、Sassを導入する
StorybookへのSassの導入でcss-loaderでエラーにはまり、手順の記事を書きました。
原因はWebpack4と５で破壊的な変更（更新）からPKGをインストールして解決できました。（めでたし）
でも、フロントエンド開発に必要そうなベーシックな環境構築を、「ざーーっと、まとめたかった」ことが、個人的には一番の記事の動機です。

 実装リスト

docker
Next.js/TypeScript
Sass
Storybook
jest
Atomic design

※導入は個人の責任でおねがいします。（...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021-8】 Next.js + TypeScript + Storybook(Atomic Design) + Sass + jest]]></title>
        <id>https://zenn.dev/yknight/articles/f0167dc5b0cceb</id>
        <link href="https://zenn.dev/yknight/articles/f0167dc5b0cceb"/>
        <updated>2021-08-19T18:54:15.000Z</updated>
        <summary type="html"><![CDATA[フロントエンド環境に実装をしたStorybookに、Sassを導入する
StorybookへのSassの導入でcss-loaderでエラーにはまり、手順の記事を書きました。
原因はWebpack4と５で破壊的な変更（更新）からPKGをインストールして解決できました。（めでたし）
でも、フロントエンド開発に必要そうなベーシックな環境構築を、「ざーーっと、まとめたかった」ことが、個人的には一番の記事の動機です。

 実装リスト

docker
Next.js/TypeScript
Sass
Storybook
jest
Atomic design

※導入は個人の責任でおねがいします。（...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + YouTube Data API でchannelの情報を取得し表示してみる]]></title>
        <id>https://zenn.dev/shimapon3/articles/90b32eb39acc50</id>
        <link href="https://zenn.dev/shimapon3/articles/90b32eb39acc50"/>
        <updated>2021-08-19T10:50:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.jsでYouTube Data APIに触ってみたいと思います。
下のように任意のチャンネルの情報を表示するまでの手順を記載します。

表示例

 ドキュメント
Youtube Data API Channels：　https://developers.google.com/youtube/v3/docs/channels

 環境

macOS Big Sur	 (v11.2.1)
Node.js (v16.3.0)


 API Keyを取得する
まずは、YouTube Data APIでプロジェクトを作成し、API keyを取得しましょう。


Google...]]></summary>
        <author>
            <name>shimapon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase HostingでBasic認証をかける ~TypeScript編~]]></title>
        <id>https://zenn.dev/kingu/articles/c32dfd9ca28fe8</id>
        <link href="https://zenn.dev/kingu/articles/c32dfd9ca28fe8"/>
        <updated>2021-08-19T09:32:59.000Z</updated>
        <summary type="html"><![CDATA[開発中だから見られたくない、特定の人にだけ見せたいなどで簡単に認証かけたいとなるとBasic認証である。
Firebase HostingでもCloud Functionsと連携すれば実現できる。

 ググるといっぱい出てくるが...
https://www.google.com/search?q=firebase+hosting+basic認証
なぜかCloud FunctionsはJavaScriptベースしか出てこなかった。
TypeScriptでやろうとしてちょっとハマったので共有していく。

見つけられなかっただけかも...


 手順
とは言え特別にやることはない。

Fir...]]></summary>
        <author>
            <name>kingu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify/v-autocompleteのポップアップメニューの位置ずれ]]></title>
        <id>https://zenn.dev/gz/articles/378ed050719e75</id>
        <link href="https://zenn.dev/gz/articles/378ed050719e75"/>
        <updated>2021-08-19T08:41:12.000Z</updated>
        <summary type="html"><![CDATA[答え：
menu-propsを利用します。
サンプル：

      
        
        :menu-props="{nudgeRight: 10, nudgeTop: 20}"


      
      ポップアップメニューの正体はv-menuですので、詳細はv-menuのAPIをご参照ください。
※注意点：APIのほうでnudge-rightと書かれているもの、nudgeRightのように書き換えてください。]]></summary>
        <author>
            <name>walking_on_ice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[デザインパターン ~Strategyパターン~]]></title>
        <id>https://zenn.dev/bonfireman/articles/1baea537219738</id>
        <link href="https://zenn.dev/bonfireman/articles/1baea537219738"/>
        <updated>2021-08-18T15:12:00.000Z</updated>
        <summary type="html"><![CDATA[Strategyとは？
GoF（Gang of Four）デザインパターンの一つであり、さまざまなビジネスルールやアルゴリズムの変更が発生した際に、使用する側には意識させる事なく、柔軟に変更を可能にするためのパターンです。

 コードを書いてみよう
今回は、以下のようなにネットで購入できる「写真」があったとします。
写真のサイズには「L」「2L」「DL（ダウンロード）」の３種類があり、それぞれの定価があります。

 Strategyを使わない場合

      
        
        class Photo {
// 種類
  private _size: 'L' | '...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでのDIと、Tsyringeについて]]></title>
        <id>https://zenn.dev/chida/articles/1f7df8f2beb6b6</id>
        <link href="https://zenn.dev/chida/articles/1f7df8f2beb6b6"/>
        <updated>2021-08-18T15:04:41.000Z</updated>
        <summary type="html"><![CDATA[DIとは
DI（Dependency Injection）とは、日本語訳で依存性の注入です。依存性の注入と聞くと、依存性という抽象的な概念を何かに注入するような印象を与えますが、依存性という言葉自体は依存対象を表します。
DIにおける依存対象は、オブジェクトのインスタンスです。つまり、Dependencyはオブジェクトのインスタンスを指します。そして、Injectionは外部から挿入するという意味を持つため、DIはオブジェクトのインスタンスを外部から挿入するという事になります。

 DIのコード
DIの対応前後のサンプルコードで比較を確認します。次のコードは、ブラウザのコンソールに「...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/65420761a0bec2</id>
        <link href="https://zenn.dev/sora_kumo/articles/65420761a0bec2"/>
        <updated>2021-08-18T12:58:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsとWeb-Worker
Next.jsは様々な機能を無設定で行えるように開発されています
Web-Workerに関しても同様で、next.config.jsに一切手を入れずに動かすことが出来ます
どのぐらい手軽に利用可能か、試してみたいと思います

 初期作業

      
        
        yarn add next react react-dom
yarn add -D typescript @types/node @types/react


      
      
 ソースコード

src/libs/sums.ts

1からcountで与え...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/65420761a0bec2</id>
        <link href="https://zenn.dev/sora_kumo/articles/65420761a0bec2"/>
        <updated>2021-08-18T12:58:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsとWeb-Worker
Next.jsは様々な機能を無設定で行えるように開発されています
Web-Workerに関しても同様で、next.config.jsに一切手を入れずに動かすことが出来ます
どのぐらい手軽に利用可能か、試してみたいと思います

 初期作業

      
        
        yarn add next react react-dom
yarn add -D typescript @types/node @types/react


      
      
 ソースコード

src/libs/sums.ts

1からcountで与え...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日常の作業改善のため超シンプルvimプラグインを作成した]]></title>
        <id>https://zenn.dev/bun913/articles/3c07695fe1474c</id>
        <link href="https://zenn.dev/bun913/articles/3c07695fe1474c"/>
        <updated>2021-08-18T12:34:06.000Z</updated>
        <summary type="html"><![CDATA[何を作ったのか
vimでTodo管理を便利にするための小さなプラグインです。

新規タスクを作成する
タスクの終了・未了をワンボタンで切り替えられる
終了済みのタスクをまとめて、最終行に移動させる

ということをできるようにしました。
https://github.com/bun913/min-todo.vim

 イメージ
タスクの作成

タスクの終了・未了を切り替え

終了済みのタスクをまとめて移動


 参考にしたサイト
初めて作るvimプラグインですし、そもそもまともにvimスクリプトを書いたことがないためお作法がさっぱりわかりませんでした。
以下のサイトを参考にさせていただ...]]></summary>
        <author>
            <name>bun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS AppSync + Local Resolver でチャットっぽいものを作ってみる]]></title>
        <id>https://zenn.dev/amay077/articles/77b08c940decbe</id>
        <link href="https://zenn.dev/amay077/articles/77b08c940decbe"/>
        <updated>2021-08-18T03:03:02.000Z</updated>
        <summary type="html"><![CDATA[AWS AppSync というと、私は「Google Firestore 対抗のオフライン対応リアルタイムデータベース、ただし API は GraphQL」という認識だったのですが、もう少し機能をブレークダウンしていくと、「単なるマネージドな WebSocket 的サービス」としても使えるな、と気付きまして、試しにチャットっぽいアプリを作ってみました。
こんなやつ↓


 AppSync 側の設定
データソースは使用しません（＝ローカルリゾルバーを使用）。
これによりデータは永続化されずただの 「WebSocket的サーバー」 として動作します。
データを永続化したい場合は、Dynamo...]]></summary>
        <author>
            <name>amay077</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[rollup.jsに爆速esbuildを組み込む方法]]></title>
        <id>https://zenn.dev/dozo/articles/54f697ff41f100</id>
        <link href="https://zenn.dev/dozo/articles/54f697ff41f100"/>
        <updated>2021-08-17T20:41:28.000Z</updated>
        <summary type="html"><![CDATA[rollup-plugin-esbuildでそれぞれのいいとこ取り
------------------- ↓ 前書はここから ↓-------------------
Webpack嫌いには光の速さで消えて欲しい筆者にとって、
バンドラーはもっぱらrollup.jsだった。
プラグインの豊富さからありとあらゆる場面で活用していたのだが、
最近バンドラーのトレンドにビルド速度というのがあり、
ちょっと気になる今日この頃。
esbuildやswcのようにGoやRustのようなハードウェアレイヤーの言語を使って、
ビルド実行をしてしまうアプローチ。
(緩募: 低レベル言語に変わる用語)
...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptを使ってNode.jsとブラウザ間のRPC（情報求む）]]></title>
        <id>https://zenn.dev/eagle/articles/where-is-simple-rpc-for-js</id>
        <link href="https://zenn.dev/eagle/articles/where-is-simple-rpc-for-js"/>
        <updated>2021-08-17T13:09:08.000Z</updated>
        <summary type="html"><![CDATA[前提
昔から、個人が思いつくようなことは

既に方法が確立されている。自分が発見できていないだけ。
既に試してみた先人たちがいるが、上手くいかないことが分かり頓挫したプロジェクトである。

の2択だとよく言われます。
私が今探しているのは超シンプルなWebサーバーとクライアント間のRPCです。
特に、バックエンドはNodeJS限定とします。
これにより言語が統一されるのでバックエンドとフロントエンドでコード共有ができます。
C#のMagicOnionのように、APIのインターフェースとその実装、および少々のコンフィギュレーションを定義するだけで済むはずです。
超お手軽です。

 現実...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React-Hook-Formがシンプルで使いやすい👍]]></title>
        <id>https://zenn.dev/kenta0313/articles/6a9cf3989aa443</id>
        <link href="https://zenn.dev/kenta0313/articles/6a9cf3989aa443"/>
        <updated>2021-08-17T03:30:35.000Z</updated>
        <summary type="html"><![CDATA[コード全体

      
        
        import type { NextPage } from 'next'
import { useForm, SubmitHandler } from "react-hook-form";
import { ErrorMessage } from "@hookform/error-message";

type Inputs = {
  name: string;
  phone_number: number;
}

const Home: NextPage = () => {
  const {
    regis...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-17のJS: Next.js 11.1、Rails 7で予定されているimport mapsベースのJSライブラリの利用]]></title>
        <id>https://jser.info/2021/08/17/next.js-11.1-rails-7import-mapsjs/</id>
        <link href="https://jser.info/2021/08/17/next.js-11.1-rails-7import-mapsjs/"/>
        <updated>2021-08-16T23:06:44.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #553 - Next.js 11.1 がリリースされました。
Blog - Next.js 11.1 | Next.js
オープンリダイレクタの脆弱性が修正されています。
experimental.esmExternalsオプションでNode.jsのESMをサポートしています。
node-fetchのkeepAliveをデフォルトで有効化、Source Map/ESLint/next/imageの改善なども含まれています。
また、Rust製のJS/TS Compiler/BundlerであるSWCの作者であるDongYoon KangがVercelに入り、Next.jsでのコンパイルにSWCを利用できるように開発中とのことです。
Rails 7.0では、現在のwebpacker(webpack)ではなく、Import mapsベースのJavaScriptライブラリをデフォルトする方針が提案されています。
Modern web apps without JavaScript bundling or transpiling
Replace webpack with importmapped Hotwire as default js by dhh · Pull Request #42999 · rails/rails
Import mapsはES Modulesでimportする際に、importするモジュールの名前解決を定義するウェブ標準です。
<script type="importmap">
{
  "imports": {
    "app": "./src/app.js",
    "md5": "https://cdn.skypack.dev/md5"
  }
}
</script>


Import mapsはChromeのみがサポートしてい…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon Chime SDKアプリで映像データ転送量を削減するアイデア -Among Us Auto Mute-]]></title>
        <id>https://zenn.dev/wok/articles/0018_reduce-transfered-data-amazon-chime-sdk</id>
        <link href="https://zenn.dev/wok/articles/0018_reduce-transfered-data-amazon-chime-sdk"/>
        <updated>2021-08-16T21:55:13.000Z</updated>
        <summary type="html"><![CDATA[この記事は、こちらの記事を改変したものになります。
https://cloud.flect.co.jp/entry/2021/08/17/064854

こんにちは。
前回の記事では、Amazon Chime SDK for javascript(Amazon Chime SDK JS)を用いて、"Among usをAuto Muteする機能"と"ゲーム画面を配信する機能"を持つゲーム実況システムを構築する方法についてご紹介しました。
前回のシステムでは、最大15名のユーザのゲーム画面をリアルタイムに配信します。このため、映像を受信する側にはそれなりのネットワーク帯域が前提とされます。...]]></summary>
        <author>
            <name>wok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS AppSyncでLambdaをDataSoruceとした場合のLambda関数の入出力]]></title>
        <id>https://zenn.dev/dyoshikawa/articles/b9b92d358f8f04</id>
        <link href="https://zenn.dev/dyoshikawa/articles/b9b92d358f8f04"/>
        <updated>2021-08-16T16:12:19.000Z</updated>
        <summary type="html"><![CDATA[GraphQL入門としてAppSyncを触ってみました。
AppSyncのデータソースとしてLambdaを選択した場合、

Lambda関数へ入力値はどんなふうに渡るのか
どのような値を返せば良いのか

についてイメージしづらかったため、実際に試してみました。

 環境

(端末の)node 15.11.0
aws-cdk 1.117.0
typescript 4.3.5
@types/aws-lambda 8.10.81


 schema.graphql

      
        
        type user {
  id: String!
  name: String...]]></summary>
        <author>
            <name>d yoshikawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptの配列でnullableなものを外す]]></title>
        <id>https://zenn.dev/merutin/articles/16397b8a7f25f3</id>
        <link href="https://zenn.dev/merutin/articles/16397b8a7f25f3"/>
        <updated>2021-08-16T08:20:30.000Z</updated>
        <summary type="html"><![CDATA[undefinedな値が入る可能性がある配列がある場合、filterを使ってnullableなものを排除しますが、typescriptではそのままではうまく認識されません。

      
        
        const item = ['a', undefined, 'b', 'c', 'd'];

const ret = item.filter(i => i !==  undefined && i !== null);
// const ret: (string | undefined)[]


      
      TypeScript Pl...]]></summary>
        <author>
            <name>merutin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjs 🐕 next/imageのqualityの数値いじってみた！]]></title>
        <id>https://zenn.dev/byanbyan/articles/baa0b53f8cef4d</id>
        <link href="https://zenn.dev/byanbyan/articles/baa0b53f8cef4d"/>
        <updated>2021-08-16T06:53:01.000Z</updated>
        <summary type="html"><![CDATA[Next.jsのnext/imageは、画質をコンポーネントごとに設定できる。
詳しくは公式を！
https://nextjs.org/docs/api-reference/next/image
実際どんなもんか気になったので調べてみた。

 コードの書き方
quality={}に値を設定する。
1〜100の間で設定する（100が最高画質）
デフォルトは75

      
        
        import Image from 'next/image'

<Image src="..." quality={1} width={900} height={500} /&...]]></summary>
        <author>
            <name>ゆゆゆ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js × Relay でGraphQLフロントエンド環境を構築してGitHub APIにアクセスする]]></title>
        <id>https://zenn.dev/snowwshiro/articles/e0386f9cb6743f</id>
        <link href="https://zenn.dev/snowwshiro/articles/e0386f9cb6743f"/>
        <updated>2021-08-16T05:04:17.000Z</updated>
        <summary type="html"><![CDATA[私が開発・運営しているスノーアクティビティイベントマッチングサービス「snowwshiro」に、Next.js × Relayを使ったGraphQLフロントエンド環境を構築しようとしたところ、かなり手間取りましたので、記事にしました。
最終的なコードについては、以下にて公開しています。
https://github.com/snowwshiro/nextjs-relay-demo

 前提
現在snowwshiroは、フロントエンド・バックエンド共にRuby on Railsにて開発しています。
一方、私自身は現在他プロジェクトでフロントエンドはReact・Next.js、バックエンドは...]]></summary>
        <author>
            <name>snowwshiro中の人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[fetch による Bing Custom Search API の叩き方]]></title>
        <id>https://zenn.dev/maztak/articles/023ff810071d17</id>
        <link href="https://zenn.dev/maztak/articles/023ff810071d17"/>
        <updated>2021-08-16T03:39:44.000Z</updated>
        <summary type="html"><![CDATA[まず Bing Search Services は Cognitive Services Bing Custom Search に移行中であるが、いずれの Bing Custom Search API（Bing Web Search API と混同しないように）のドキュメントにも非推奨となっているjsライブラリrequestによる記法しか書いてない（2021年8月16日現在）。
https://docs.microsoft.com/ja-jp/bing/search-apis/bing-custom-search/quickstarts/rest/nodejs
今回はNext.js（R...]]></summary>
        <author>
            <name>Takuya Matsuda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JSDocで型を定義してTypeScriptの恩恵を受ける]]></title>
        <id>https://zenn.dev/azukiazusa/articles/c89d4bdc7dacf2</id>
        <link href="https://zenn.dev/azukiazusa/articles/c89d4bdc7dacf2"/>
        <updated>2021-08-15T22:08:09.000Z</updated>
        <summary type="html"><![CDATA[普段からTypeScriptで開発されている方ならば、TypeScriptの恩恵を十分に堪能されていることと思います。
特に私はVS Codeのインテリセンスには頼りっぱなしでこれがなければまともにコーディングができない体になってしまいました。
しかし時には、TypeScriptという概念が存在しない退屈な世界で開発を行わなけらばならない状況はあるでしょう。私はもはやキーボードでタイピングすることすらままなりません。
そんなJavaScriptしか利用できない状況で代替手段となるのが、JSDocです。JSDocのアノテーションによって型を付与することによって最低限の支援を受けることができ...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとNode.jsでスキーマファーストなGraphQLの環境を構築する]]></title>
        <id>https://zenn.dev/thetalemon/articles/20b1e5e11be545</id>
        <link href="https://zenn.dev/thetalemon/articles/20b1e5e11be545"/>
        <updated>2021-08-15T14:32:16.000Z</updated>
        <summary type="html"><![CDATA[概要

Next.js(ts) + Node.js(ts) + apollo + graphql-code-generatorでスキーマファーストなGraphQL環境を構築していくよ！

完成物


対象: ざっくりGraphQLでスキーマファーストな環境を構築する方法を知りたい人
説明しないこと: .graphqlファイルの書き方とかGraphQLの設計とか、具体的なこと


 GraphQLとは何か

APIにクエリを投げてFE側から返却するレスポンスを制限できるAPIの形式
有名どころだとNetflixとかで利用されていて、APIの返却をFEで制御できるので『画面やデバイスによ...]]></summary>
        <author>
            <name>まなさす</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自分で使っているvimのプラグインを紹介していくよ - 第一弾]]></title>
        <id>https://zenn.dev/altair/articles/9238308d2432c6</id>
        <link href="https://zenn.dev/altair/articles/9238308d2432c6"/>
        <updated>2021-08-15T13:57:51.000Z</updated>
        <summary type="html"><![CDATA[初めに
技術記事を書きたいと思いつつ、気づけば直前の投稿から随分と時間が経ってしまいました。
投稿しないでだらだらしているよりも、当たり前のことでも良いから記事を書こう！ということで最近触っているneovimのプラグインを紹介していきます。
他にも良いプラグインがあるよ、等アドバイスをいただけるとうれしいです。（まだまだneovim始めてからそんなに触れてないです。）
自分の入れているプラグインの紹介が終わったら、コメントに寄せてくれたプラグインを試して良さそうなものがあったらまた記事にしたいと思います。
では、前置きが長くなりましたがその第一弾をどうぞ！

 コードにコメントすると...]]></summary>
        <author>
            <name>Altair</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【create-react-app】webpackのaliasをTypeScriptでも有効にする方法は]]></title>
        <id>https://zenn.dev/hunbari_front/articles/5b7bce2a2f8cde</id>
        <link href="https://zenn.dev/hunbari_front/articles/5b7bce2a2f8cde"/>
        <updated>2021-08-15T13:30:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
create-react-app（以下、cra）めちゃくちゃ便利ですよね。
また、TypeScriptでもサクッとテンプレートを作成できるのがグッドです。
で、craでwebpackの設定いじりたいなーって時に私は「craco」というライブラリを使います。
https://www.npmjs.com/package/@craco/craco
今回はこのcracoを使って、上記のaliasの設定をしていきます。（厳密にはwebpackに定義するわけではないのですが...）

 普通にaliasを設定する
まず、cracoをVanillaなJSテンプレートで使う場合の、webp...]]></summary>
        <author>
            <name>ふんばりフロントエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文型大学生のためのpetite-vue入門]]></title>
        <id>https://zenn.dev/ojk/books/intro-to-vue</id>
        <link href="https://zenn.dev/ojk/books/intro-to-vue"/>
        <updated>2021-08-15T12:08:25.000Z</updated>
        <summary type="html"><![CDATA[文系学科の大学生を対象としたpetite-vueの入門書です。petite-vueはJavaScriptベースのウェブアプリ開発（フロントエンド開発）のフレームワークのひとつで、素のJavaScriptでコーディングするよりも完結に記述することができます。OJKの担当している授業テキストを公開しているものです。]]></summary>
        <author>
            <name>OJK</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[真面目にOSSを公開する際にやってみたこと・意識したこと]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/b6f679bfe11261</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/b6f679bfe11261"/>
        <updated>2021-08-15T11:16:02.000Z</updated>
        <summary type="html"><![CDATA[先日初めて真面目に自分のコードを OSS として公開する機会があり、色々試行錯誤したのでまとめます。

「真面目に」の基準は過去に自分が公開したリポジトリに比べてです 🙏


 何を公開した？
Vue Word Highlighter という Vue.js のコンポーネントライブラリを公開しました。
機能はとても単純で、文字列と検索クエリを渡すと検索クエリに合致した文字をハイライトする（<mark>タグ又は任意のタグ囲む）というものです。
https://github.com/kawamataryo/vue-word-highlighter
自分なりに良い感じに使えるコンポー...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[真面目にOSSを公開する際にやってみたこと・意識したこと]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/b6f679bfe11261</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/b6f679bfe11261"/>
        <updated>2021-08-15T11:16:02.000Z</updated>
        <summary type="html"><![CDATA[先日初めて真面目に自分のコードを OSS として公開する機会があり、色々試行錯誤したのでまとめます。

「真面目に」の基準は過去に自分が公開したリポジトリに比べてです 🙏


 何を公開した？
Vue Word Highlighter という Vue.js のコンポーネントライブラリを公開しました。
機能はとても単純で、文字列と検索クエリを渡すと検索クエリに合致した文字をハイライトする（<mark>タグ又は任意のタグ囲む）というものです。
https://github.com/kawamataryo/vue-word-highlighter
自分なりに良い感じに使えるコンポー...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で Tailwind UI を使用するときにハマった話]]></title>
        <id>https://zenn.dev/maztak/articles/6dba8e02771c29</id>
        <link href="https://zenn.dev/maztak/articles/6dba8e02771c29"/>
        <updated>2021-08-15T04:54:28.000Z</updated>
        <summary type="html"><![CDATA[Next.js x TypeScript x TailwindCss の構成で開発をする人も増えていますよね。TailwindCssはBootStrapと違ってTemplateを与えるものではなくCSSコーディングを不要にモダンなWebサイトを作るCSSフレームワークと理解しています。そう入ってもTemplateが欲しいしなるべく公式っぽいものを使いたいので、公式ドキュメントでも推奨されている Tailwind UI を使います。
https://tailwindui.com/preview

 HTMLではなくReactに切り替えてコードをコピーしよう

これのHeader Nav ...]]></summary>
        <author>
            <name>Takuya Matsuda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase + React で Todoist のクローンを作る]]></title>
        <id>https://zenn.dev/altech/articles/3c868c41e64f94</id>
        <link href="https://zenn.dev/altech/articles/3c868c41e64f94"/>
        <updated>2021-08-15T03:23:25.000Z</updated>
        <summary type="html"><![CDATA[Firebase と React の勉強を兼ねて、愛用しているタスク管理アプリ Todoist のクローンを作ってみた。途中で色々試行錯誤したのだが、「最初から最短の手順で作るならこういう手順になる」というのを備忘と Firebase の紹介も兼ねてまとめてみようと思う。

アプリケーション: https://altech-todoist.web.app/
ソースコード： https://github.com/Altech/todoist-clone

 0. はじめに

 技術スタック

言語： TypeScript
UIライブラリ： React 17
バックエンド：Firebase ...]]></summary>
        <author>
            <name>Altech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React&TypeScriptでのreact-redux、redux-thunkお勉強メモ]]></title>
        <id>https://zenn.dev/gebo/articles/react-ts-cat-1</id>
        <link href="https://zenn.dev/gebo/articles/react-ts-cat-1"/>
        <updated>2021-08-15T02:06:45.000Z</updated>
        <summary type="html"><![CDATA[フロントエンドのお勉強をしています。
とりあえず React をやってみてるのですが react-redux、redux-thunk がめっちゃ難しくて全然理解できないということで簡単なコードを書いて実行しながら勉強したメモです。
ハンズオンぽく書いてます。
結果だけ興味のある方は コチラ からどうぞ。

 はじめに

 環境

OS : macOS Big Sur
エディタ : VSCODE
言語 : React & TypeScript
ブラウザ : Chrome


 キーワード
以下の内容を雰囲気レベルで使っています。

React Router( react-route...]]></summary>
        <author>
            <name>gebo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno標準ライブラリ0.104.0で増強されたcollectionsの紹介]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/4ea4219cf69225</id>
        <link href="https://zenn.dev/kawarimidoll/articles/4ea4219cf69225"/>
        <updated>2021-08-14T12:59:52.000Z</updated>
        <summary type="html"><![CDATA[先日、Deno標準ライブラリのバージョン0.104.0が公開されました。
https://github.com/denoland/deno_std/releases/tag/0.104.0
こちらで増強されたcollectionsというモジュールを紹介します。
https://deno.land/std@0.104.0/collections
その名の通り、集合の扱いを支援してくれるモジュールです。
本記事では0.104.0のリリースで追加された関数を紹介します。
既存のものはバージョン0.102.0の時点での記事で解説していますので、あわせてご覧ください。
https://zenn.d...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InsightFaceの顔検出結果をブラウザ上で動画にオーバーレイ表示してみた]]></title>
        <id>https://zenn.dev/yuyakato/articles/688efbc128eff6</id>
        <link href="https://zenn.dev/yuyakato/articles/688efbc128eff6"/>
        <updated>2021-08-14T12:53:20.000Z</updated>
        <summary type="html"><![CDATA[目次

InsightFaceとFastAPIで顔検出サーバを作ってみた
InsightFaceの顔検出結果をNext.jsで可視化してみた
InsightFaceで顔認証（特徴量抽出、比較）してみた
InsightFaceをGPUで動かしてみた
InsightFaceを使って動画から顔検出してみた
InsightFaceの顔検出結果をブラウザ上で動画にオーバーレイ表示してみた（本記事）


 初めに
前回の記事では、InsightFaceによる顔検出の結果をOpenCVを使って可視化（オーバーレイ表示）し、動画ファイルとして出力しました。
今回は、ウェブブラウザ上で動画にオーバーレ...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『エンジニア・プログラマにしか使えないSNSを作ってみた話』のクライアントを作ってみた話]]></title>
        <id>https://zenn.dev/yosket/articles/a4402ffa2a12e4</id>
        <link href="https://zenn.dev/yosket/articles/a4402ffa2a12e4"/>
        <updated>2021-08-14T12:34:23.000Z</updated>
        <summary type="html"><![CDATA[何を作ったか
2021年7月にQiitaに投稿された『エンジニア・プログラマにしか使えないSNSを作ってみた話』という記事で紹介されているSNSのウェブクライアントを、7月の4連休を使って作ってみました。
https://sofeap.vercel.app/

 『エンジニア・プログラマにしか使えないSNS』とは
https://qiita.com/HawkClaws/items/599d7666f55e79ef7f56

本当のエンジニア・プログラマしか使えないSNSを作ってみました！
つまり、WebApi提供のみのSNSです
一般ピープルが使うようなフロントエンドなんてありません...]]></summary>
        <author>
            <name>Yosuke Tanaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『エンジニア・プログラマにしか使えないSNSを作ってみた話』のクライアントを作ってみた話]]></title>
        <id>https://zenn.dev/yosket/articles/a4402ffa2a12e4</id>
        <link href="https://zenn.dev/yosket/articles/a4402ffa2a12e4"/>
        <updated>2021-08-14T12:34:23.000Z</updated>
        <summary type="html"><![CDATA[何を作ったか
2021年7月にQiitaに投稿された『エンジニア・プログラマにしか使えないSNSを作ってみた話』という記事で紹介されているSNSのウェブクライアントを、7月の4連休を使って作ってみました。
https://sofeap.vercel.app/

 『エンジニア・プログラマにしか使えないSNS』とは
https://qiita.com/HawkClaws/items/599d7666f55e79ef7f56

本当のエンジニア・プログラマしか使えないSNSを作ってみました！
つまり、WebApi提供のみのSNSです
一般ピープルが使うようなフロントエンドなんてありません...]]></summary>
        <author>
            <name>Yosuke Tanaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで学ぶ代数的データ型]]></title>
        <id>https://zenn.dev/eagle/articles/ts-coproduct-introduction</id>
        <link href="https://zenn.dev/eagle/articles/ts-coproduct-introduction"/>
        <updated>2021-08-14T11:38:08.000Z</updated>
        <summary type="html"><![CDATA[代数的データ型とはなにか
代数的データ型とは、要素の個数の足し算と掛け算のアナロジーで語ることができる型のことを指すというふわっとしたコンセンサスがありますが、
厳密に「これが代数的データ型である」という定義はおそらくありません[1]。
また、代数的データ型はいわゆる関数型言語で実装されることが多い言語機能であり、
代数的データ型を重用するプログラミングスタイルは関数型の一派としてみなされる傾向がある[2]と思っています。
本記事では数学的な説明やアナロジーは用いず、なるべく具体的なコードを提示します。
そして、代数的データ型という言葉を「かつ」と「または」を表すことができる型として...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nuxtでログイン処理後の動的リンク作成]]></title>
        <id>https://zenn.dev/ryuji_cre8ive/articles/2c998bc7010975</id>
        <link href="https://zenn.dev/ryuji_cre8ive/articles/2c998bc7010975"/>
        <updated>2021-08-14T06:45:35.000Z</updated>
        <summary type="html"><![CDATA[結論
watchを使用してstoreのloginを監視して変更があった段階でリンクを書き換える。

 具体的に

      
        
        computed: {
    islogin(){
      return this.$store.state.login.islogin
    }
  },
  watch: {
    islogin() {
      this.$nextTick(() => {
        this.items[0].link = `/${this.islogin.id}/top`;
        this.ite...]]></summary>
        <author>
            <name>ryuji_cre8ive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nuxtでログイン処理後の動的リンク作成]]></title>
        <id>https://zenn.dev/ryuji_cre8ive/articles/2c998bc7010975</id>
        <link href="https://zenn.dev/ryuji_cre8ive/articles/2c998bc7010975"/>
        <updated>2021-08-14T06:45:35.000Z</updated>
        <summary type="html"><![CDATA[結論
watchを使用してstoreのloginを監視して変更があった段階でリンクを書き換える。

 具体的に

      
        
        computed: {
    islogin(){
      return this.$store.state.login.islogin
    }
  },
  watch: {
    islogin() {
      this.$nextTick(() => {
        this.items[0].link = `/${this.islogin.id}/top`;
        this.ite...]]></summary>
        <author>
            <name>ryuji_cre8ive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでビルドにswcを使う(2021/8/14版)]]></title>
        <id>https://zenn.dev/sora_kumo/articles/09a1369e53e5d0</id>
        <link href="https://zenn.dev/sora_kumo/articles/09a1369e53e5d0"/>
        <updated>2021-08-14T06:08:03.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの11.1系統からswc導入のアナウンス
Next.jsの11.1系統からビルドにswcを導入するというアナウンスがありました
このswcはネイティブアプリケーションなので、JavaScript製のビルドツールより高速に動作します
ところが開発途上のものだけあって、実際にどうやって使うのかはアナウンス上に何も書かれていません
ネット界隈でもアナウンスをそのまま垂れ流すだけで、実際に試してみる人がさっぱり見つかりませんでした
ということで、実際に使ってみたいと思います

 Next.jsのインストール

      
        
        yarn add n...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue3.2のdefineCustomElementで子要素のSFCのstyleも含めてWebComponents化する]]></title>
        <id>https://zenn.dev/t28_tatsuya/articles/define-custom-element-with-nested-vue-components</id>
        <link href="https://zenn.dev/t28_tatsuya/articles/define-custom-element-with-nested-vue-components"/>
        <updated>2021-08-14T04:49:01.000Z</updated>
        <summary type="html"><![CDATA[何この記事？

Vue3.2 で Vue Component を Web Components にする defineCustomElement が提供された。

<style>を持つ SFC を子要素以下にもつ SFC を Web Components 化する場合、現行(v3.2.1)の機能では追加で作業が必要。



 defineCustomElement
ref. Vue and Web Components - Building Custom Elements with Vue
Vue v3.2.0 の新機能として defineCustomElement が提供されま...]]></summary>
        <author>
            <name>Tatsuya Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CDN版Vue.jsとオープンデータでお手軽マッシュアップ]]></title>
        <id>https://zenn.dev/uedayou/articles/c1e76684d3d094</id>
        <link href="https://zenn.dev/uedayou/articles/c1e76684d3d094"/>
        <updated>2021-08-14T02:01:05.000Z</updated>
        <summary type="html"><![CDATA[JavaScriptでWebアプリを開発する場合、最近は Node.js や Deno、各フレームワーク毎にCLIツール(create-react-app、Vue CLI、Vite、Angular CLI)を使って環境構築することが一般的かと思います。
少し複雑なWebアプリを作るには必須ですが、本当にちょっとしたWebアプリを作りたい場合には面倒だったりします。
そこで、これらの環境構築が必要のないWebアプリを作ってみることにしました。幸い、Vue.jsや、UIフレームワークのVuetifyなどは従来通りscriptタグでファイルをロードする形でも動いてくれるようなので、CDNからV...]]></summary>
        <author>
            <name>uedayou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでShopifyのストアフロントをつくってみた]]></title>
        <id>https://zenn.dev/naoya_kuma/articles/fda80ba103ac41</id>
        <link href="https://zenn.dev/naoya_kuma/articles/fda80ba103ac41"/>
        <updated>2021-08-13T10:24:43.000Z</updated>
        <summary type="html"><![CDATA[表題の通りですが、Next.jsでShopifyのストアフロントをつくってみました。
もともと業務でShopifyを使っていて、技術的にSSRやSSG・ISRなどの様々なレンダリング方法に対応したNext.jsに興味があったので、その二つを合わせるような形でストアを構築してみました。
デザインはShopifyのデフォルトテーマであったDebutテーマ(いまはDawnになりましたね)を参考にしています。
(gif貼ろうとしたけど重いのか失敗...)


 使用技術など
ストア: https://nextjs-shopify-store.vercel.app
リポジトリ: https://g...]]></summary>
        <author>
            <name>Naoya Kumasegawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redux Toolkit の非同期処理の変遷を試してみる]]></title>
        <id>https://zenn.dev/himorishige/articles/de9593a77863e8</id>
        <link href="https://zenn.dev/himorishige/articles/de9593a77863e8"/>
        <updated>2021-08-13T10:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Reduxにはながーい歴史の中、非同期処理についてはいろいろと語られてきましたが、、🙈
Redux Toolkit v1.6.0からは新たな非同期処理であるRTK Queryが組み込まれました。
RTK Queryはswrやreact-queryと同じようなキャッシュ戦略を駆使したRedux Toolkitチーム謹製のQueryツールとなっています。
https://redux-toolkit.js.org/rtk-query/overview
いくつかのプロジェクトでも使い始めていたところですが、ちょうどRedux Thunk -> createSyncThunk ...]]></summary>
        <author>
            <name>Hi MORISHIGE</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでビルドにswcを使う(2021/8/13版)]]></title>
        <id>https://zenn.dev/sora_kumo/articles/95fa80e1489c28</id>
        <link href="https://zenn.dev/sora_kumo/articles/95fa80e1489c28"/>
        <updated>2021-08-13T09:43:12.000Z</updated>
        <summary type="html"><![CDATA[Next.jsのインストール

      
        
        yarn add next@11.1.1-canary.6


      
      
 Next.jsの設定

next.config.js


      
        
        const config = {
    experimental: { swcLoader: true }
};
module.exports = config;


      
      
 ビルド

      
        
        yarn next build


      
 ...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue3 で「動く」Slack絵文字ジェネレーターを作って公開した話]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/38f7a866799414</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/38f7a866799414"/>
        <updated>2021-08-13T08:35:22.000Z</updated>
        <summary type="html"><![CDATA[先日リリースした個人開発のアプリについて感想や技術スタックなど色々書きます。

 どんなアプリを公開した？
以下ツイートで紹介している、 Slack の絵文字スタンプ用のアニ GIF を簡単につくれるアプリを公開しました。
https://twitter.com/KawamataRyo/status/1425292135356682248
タイミングが良かったのか数多く Retweet してもらえ、 Twitter を初めて初のバズの波動を感じました。アプリ自体はこちらです。とても簡単に試せるのでぜひ使ってもらえると嬉しいです。
https://www.animated-emoji-ge...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Theme UIのPresetのデザインの導入方法]]></title>
        <id>https://zenn.dev/beeeyan/articles/8493cfe83f775f</id>
        <link href="https://zenn.dev/beeeyan/articles/8493cfe83f775f"/>
        <updated>2021-08-13T07:30:15.000Z</updated>
        <summary type="html"><![CDATA[前回に引き続きTheme UIの話です。

 はじめに ~ Presetのデザインとは？ ~
Presetとは「設定値などを前もって調整すること」であり、
Theme UIではパッケージとしてあらかじめ用意されたデザイン（色など）の規定値が存在しています。
たとえば、公式サイト右上のボタンは、Presetの種類を意味していて、
このボタンを押すことで、デザインを瞬時に変更できるようになっています。
Lightの場合（公式サイトのスクショ）

darkの場合（公式サイトのスクショ）

今回の記事は、この「Preset」をどうやって導入するかって話になります！

 Presetの確認方法
公...]]></summary>
        <author>
            <name>beeeyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NestJSで新規プロジェクトを作るときの備忘録]]></title>
        <id>https://zenn.dev/himorishige/articles/cfd7aedacc3083</id>
        <link href="https://zenn.dev/himorishige/articles/cfd7aedacc3083"/>
        <updated>2021-08-13T07:04:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
個人的には最近のバックエンドはサーバレスにNestJSが一択になりつつあります。明日の自分のために、NestJS v8でnest new直後に行っている開発前の下準備の備忘録になります。
https://nestjs.com/
https://github.com/himorishige/nestjs-template

 1.NestJSのプロジェクトを作成
CLIをまだ未インストールの場合はNestJSのCLIをグローバルにインストールします。

      
        
        $ npm i -g @nestjs/cli


      
      ...]]></summary>
        <author>
            <name>Hi MORISHIGE</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsで非同期処理が走らなくて困った話]]></title>
        <id>https://zenn.dev/hirockysan/articles/c10deae91a0a18</id>
        <link href="https://zenn.dev/hirockysan/articles/c10deae91a0a18"/>
        <updated>2021-08-13T06:30:39.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。ひろっきーです。
現在ITエンジニア転職を目指して現在、独学９ヶ月目で日々学習、現在はNext.js、TypeScript などを学習しており、ポートフォリオとしてSNSアプリケーションを作成しています。
今回はこのSNSアプリの認証ページを作成するにあたって非同期処理で詰まった部分を共有したいと思います。

 使用技術

React
Next.js
Typescript
TailwindCSS
Firebase Authentication
Material UI
React-redux-toolkit
...etc


 実際のコード（長いので一部抜粋）

      
...]]></summary>
        <author>
            <name>ひろっきー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue.jsからローカルストレージの値を操作する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0f0e5d0224439e</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0f0e5d0224439e"/>
        <updated>2021-08-13T00:41:44.000Z</updated>
        <summary type="html"><![CDATA[ローカルストレージに値をセットしたり、ローカルストレージから値を取得したりしたいことがあったので、試して記事に残してみました。

 はじめに
通常ローカルストレージには機密情報は保存してはいけません。
僕の場合は永続的に保存したい設定値を保存する際に用いる事が多いです。← 設定値は別に流出されても全然何の問題もないような情報です。
ローカルストレージに機密情報を保存してはいけない理由はJavaScriptから参照できてしまうからです。XSS脆弱性を代表に、JavaScriptを用いてローカルストレージやCookieから情報を抜き取られる可能性がないとはいい切れません。安全の為にローカルス...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[expo + redux-toolkit + redux-persistでAsyncStorageにやる気を永続化させるアプリを作った]]></title>
        <id>https://zenn.dev/kondo_script/articles/a61aebbcd6d4a8</id>
        <link href="https://zenn.dev/kondo_script/articles/a61aebbcd6d4a8"/>
        <updated>2021-08-12T18:31:54.000Z</updated>
        <summary type="html"><![CDATA[誰向けの記事?

react-nativeやexpo使って小さなアプリを作りたいけどバックエンド組むのは面倒くさい人
redux toolkitってぶっちゃけどうなん？ というのが知りたい人
expo + redux-toolkit + redux-persist のボイラープレートが欲しい人

黙って動くボイラープレートよこせや、っていう人はこちら

おれはそういう素直な人好きだよ






 いきさつ

何につけてもやる気が出なかったのでやる気を永続化させようと思った
やる気がないのでexpoで楽して作りたかった
やる気がないのでバックエンドは作りたくなかった

AsyncSt...]]></summary>
        <author>
            <name>kondo_script</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React × Viteで新機能を開発した話(採用理由、実装、CI/CD)]]></title>
        <id>https://zenn.dev/manalink/articles/manalink-react-vite</id>
        <link href="https://zenn.dev/manalink/articles/manalink-react-vite"/>
        <updated>2021-08-12T09:33:09.000Z</updated>
        <summary type="html"><![CDATA[オンライン家庭教師マナリンク CTO の名人です。
先日マナリンクでリリースした新機能でReactとViteの組み合わせを選定しました。
https://vitejs.dev/
本記事ではReactとViteについて、以下の順で解説させていただきます。気になるところから読んでいただければ幸いです。

採用理由
実装の内容（環境設定、ライブラリ選定、コンポーネント設計など）
CI/CD（デプロイ、テスティング、Linterなど）


 React×Viteの採用理由

 マナリンクについて
採用理由を説明するにあたって、簡単にマナリンクの事業背景を説明します。
マナリンクは、オンライン家庭...]]></summary>
        <author>
            <name>マナリンク Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021年8月】フロントエンドの学習に使用した教材一覧（React, TypeScript, NEXT.js, Firebase）]]></title>
        <id>https://zenn.dev/nononono/articles/0255311126f88f</id>
        <link href="https://zenn.dev/nononono/articles/0255311126f88f"/>
        <updated>2021-08-12T07:26:17.000Z</updated>
        <summary type="html"><![CDATA[どうもこんにちはノノです。
今回は、僕がフロントエンドを独学する際に使用した教材を紹介していきたいと思います。
最近のフロントエンドは技術の移り変わりが激しくて大変ですよね。
特に初学者の方はどの教材を選べばいいか分からないですよね。
（僕は分かりませんでした😇）
少しでも参考になれば幸いです。
前半に「使用した教材一覧」
後半に「おすすめの教材」を紹介します。

HTML,CSSの基礎知識はありました。


 使用した教材一覧

 本

りあクト！ TypeScriptで始めるつらくないReact開発 第3.1版【Ⅰ. 言語・環境編】
りあクト！ TypeScriptで始めるつらくない...]]></summary>
        <author>
            <name>ノノ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021年8月】フロントエンドの学習に使用した教材一覧（React, TypeScript, NEXT.js, Firebase）]]></title>
        <id>https://zenn.dev/nononono/articles/0255311126f88f</id>
        <link href="https://zenn.dev/nononono/articles/0255311126f88f"/>
        <updated>2021-08-12T07:26:17.000Z</updated>
        <summary type="html"><![CDATA[どうもこんにちはノノです。
今回は、僕がフロントエンドを独学する際に使用した教材を紹介していきたいと思います。
最近のフロントエンドは技術の移り変わりが激しくて大変ですよね。
特に初学者の方はどの教材を選べばいいか分からないですよね。
（僕は分かりませんでした😇）
少しでも参考になれば幸いです。
前半に「使用した教材一覧」
後半に「おすすめの教材」を紹介します。

HTML,CSSの基礎知識はありました。


 使用した教材一覧

 本

りあクト！ TypeScriptで始めるつらくないReact開発 第3.1版【Ⅰ. 言語・環境編】
りあクト！ TypeScriptで始めるつらくない...]]></summary>
        <author>
            <name>ノノ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.13.0 がリリースされたので新機能や変更点の紹介]]></title>
        <id>https://zenn.dev/magurotuna/articles/deno-release-note-1-13-0</id>
        <link href="https://zenn.dev/magurotuna/articles/deno-release-note-1-13-0"/>
        <updated>2021-08-11T15:56:40.000Z</updated>
        <summary type="html"><![CDATA[Copyright (c) 2018-2021 the Deno authors. MIT License.
日本時間の昨日（2021 年 8 月 11 日）に Deno の v1.13.0 がリリースされました。
https://deno.com/blog/v1.13
詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。

ネイティブ HTTP サーバー実装の安定化

self.structuredClone() のサポート
TLSのためのシステム証明書ストアが利用可能になった
テストのためTLS検証を無効にできるようになった
Web Cr...]]></summary>
        <author>
            <name>magurotuna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GatsbyからNuxtJSに移行してみた]]></title>
        <id>https://zenn.dev/umatoma/articles/a819fd622d4743</id>
        <link href="https://zenn.dev/umatoma/articles/a819fd622d4743"/>
        <updated>2021-08-11T15:08:33.000Z</updated>
        <summary type="html"><![CDATA[flutter-study.dev
「Flutterで始めるアプリ開発」というWebサイトを公開している。
もともとはGatsbyでSSGしていたが、Vueを使う必要が出てきたので、勉強がてらNuxtJSへと移行してみた。
https://www.flutter-study.dev/

 Markdownで記事を書く
Gatsbyの時は@rocketseat/gatsby-theme-docsを使っていて、Markdownで各記事を書いていた。
https://github.com/Rocketseat/gatsby-themes/tree/main/@rocketseat/gats...]]></summary>
        <author>
            <name>umatoma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GatsbyからNuxtJSに移行してみた]]></title>
        <id>https://zenn.dev/umatoma/articles/a819fd622d4743</id>
        <link href="https://zenn.dev/umatoma/articles/a819fd622d4743"/>
        <updated>2021-08-11T15:08:33.000Z</updated>
        <summary type="html"><![CDATA[flutter-study.dev
「Flutterで始めるアプリ開発」というWebサイトを公開している。
もともとはGatsbyでSSGしていたが、Vueを使う必要が出てきたので、勉強がてらNuxtJSへと移行してみた。
https://www.flutter-study.dev/

 Markdownで記事を書く
Gatsbyの時は@rocketseat/gatsby-theme-docsを使っていて、Markdownで各記事を書いていた。
https://github.com/Rocketseat/gatsby-themes/tree/main/@rocketseat/gats...]]></summary>
        <author>
            <name>umatoma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js × linariaでビルド時にキャッシュが見つからないエラーが出るときの対処法【暫定？】]]></title>
        <id>https://zenn.dev/meijin/articles/nextjs-linaria-cache-error</id>
        <link href="https://zenn.dev/meijin/articles/nextjs-linaria-cache-error"/>
        <updated>2021-08-11T12:08:16.000Z</updated>
        <summary type="html"><![CDATA[Vercel上でNext.jsとlinariaを動かしているとき、ある時点を境に以下のようなエラーが表示されるようになってしまいました。

      
        
        18:40:11.531  	Failed to compile.
18:40:11.531  	ModuleNotFoundError: Module not found: Error: Can't resolve '../.linaria-cache/pages/404.linaria.module.css' in '/vercel/path0/pages'
18:40:11.532  	> ...]]></summary>
        <author>
            <name>Meijin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React×Typescript Eventの型まとめ]]></title>
        <id>https://zenn.dev/kenta0313/articles/a39fb1d8edc3a4</id>
        <link href="https://zenn.dev/kenta0313/articles/a39fb1d8edc3a4"/>
        <updated>2021-08-11T09:13:59.000Z</updated>
        <summary type="html"><![CDATA[event:any を避けたい！
まずはダメな例です

      
        
        const onClick = (event: any) => {
    //処理
  };


      
      tsを書くならany型は避けたいですよね

 便利な型推論
なので、以下を使うのが便利です

      
        
        type Props = {
  onClick: (event: React.MouseEvent<HTMLInputElement>) => void
  onChange: (event:...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptをコンパイルしてwebpackで一つにまとめる]]></title>
        <id>https://zenn.dev/yakumo/articles/65840a14a6e04f668f42b49d4814c9e9</id>
        <link href="https://zenn.dev/yakumo/articles/65840a14a6e04f668f42b49d4814c9e9"/>
        <updated>2021-08-11T08:19:33.000Z</updated>
        <summary type="html"><![CDATA[手順メモ

 前提



ディレクトリ名
用途




./src
ソースディレクトリ


./build
ts -> js にトランスパイルされたものを仮置きするディレクトリ


./public/lib/
実際にブラウザが読み込む js を置くディレクトリ




 必要なものをインストール

npm i typescript -g
npm i webpack -g
npm i webpack-cli -g


 typescript→javascript 準備

 tsconfig.json 編集

      
        tsconfig.json
       ...]]></summary>
        <author>
            <name>Yakumo Saki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptのProject Referencesを使ってソースコードを分割し、レイヤー間の依存関係を強制する]]></title>
        <id>https://zenn.dev/katsumanarisawa/articles/58103deb4f12b4</id>
        <link href="https://zenn.dev/katsumanarisawa/articles/58103deb4f12b4"/>
        <updated>2021-08-11T03:56:10.000Z</updated>
        <summary type="html"><![CDATA[サマリ


Project Referencesを使うと、1つの巨大なtypescriptプロジェクトを、複数のプロジェクトに分割し、プロジェクト間の依存関係を整理することができる。これにより、例えば以下のようなことができる


test/ ディレクトリで export しているテスト用の関数を、 src/ ディレクトリの本番用コードでは参照できなくする
レイヤードアーキテクチャで設計しているとき、プレゼンテーション層で定義している関数を ドメイン層から参照できなくし、レイヤー間の依存関係を強制する


また、プロジェクトの分割によりビルド時のパフォーマンスが大幅に改善する。

…と...]]></summary>
        <author>
            <name>Katsuma Narisawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supabase × Next.js　TodoAPP　学習メモ]]></title>
        <id>https://zenn.dev/byanbyan/articles/0e7d4c1e0d9fa4</id>
        <link href="https://zenn.dev/byanbyan/articles/0e7d4c1e0d9fa4"/>
        <updated>2021-08-11T02:58:50.000Z</updated>
        <summary type="html"><![CDATA[Supabase（オープンソースのBaaS）のExample projectsのメモ
これは学習メモです！
基本的にはREADME.mdを読めば良い。
必要なコマンドなどまとめておきます。
https://zenn.dev/uhyo/articles/technical-articles

 Exampleprojectsのソースコード
https://github.com/supabase/supabase/tree/master/examples/nextjs-todo-list

 Supabase の JavaScript ⽤クライアントインストール
https://supaba...]]></summary>
        <author>
            <name>ゆゆゆ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで最初に作るTypographyのComponentの作り方をちょっと丁寧に説明してみる。]]></title>
        <id>https://zenn.dev/ojin/articles/cecb2ac822f134</id>
        <link href="https://zenn.dev/ojin/articles/cecb2ac822f134"/>
        <updated>2021-08-11T01:54:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
日々答えがないものをGitHubをあさりながらやっている系のエンジニアです。好きなものはひぐらしとTypeScriptです。
アカウントは、 https://zenn.dev/ojin です。
何かおかしい所などありましたら遠慮なくコメントしていただければ幸いです。

 環境

react, react-dom v17.0.2
next v11.0.1
typescript v4.3.5
sass v1.35.2


 この記事では、Componentを作る時に自分が意識していることを書いておこうと思います。
この記事では、Componentを自分が作る時に気をつけているこ...]]></summary>
        <author>
            <name>ofa-chan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで最初に作るTypographyのComponentの作り方をちょっと丁寧に説明してみる。]]></title>
        <id>https://zenn.dev/ojin/articles/cecb2ac822f134</id>
        <link href="https://zenn.dev/ojin/articles/cecb2ac822f134"/>
        <updated>2021-08-11T01:54:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
日々答えがないものをGitHubをあさりながらやっている系のエンジニアです。好きなものはひぐらしとTypeScriptです。
アカウントは、 https://zenn.dev/ojin です。
何かおかしい所などありましたら遠慮なくコメントしていただければ幸いです。

 この記事では、Componentを作る時に自分が意識していることを書いておこうと思います。
この記事では、Componentを自分が作る時に気をつけていることやその手順を書きます。参考になればと思います。

 例えば、TypographyというComponentを作ってみます

基本的にはテキストを表示した...]]></summary>
        <author>
            <name>ofa-chan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtのcomponentsプロパティを使ったら単体テストでエラーになる]]></title>
        <id>https://zenn.dev/kon_karin/articles/1b5f282ba64bd3</id>
        <link href="https://zenn.dev/kon_karin/articles/1b5f282ba64bd3"/>
        <updated>2021-08-10T11:26:05.000Z</updated>
        <summary type="html"><![CDATA[Nuxt.js の components プロパティとは
Nuxt.js v2.13から導入された components プロパティは、コンポーネントのスキャンと自動インポートをしてくれます。
components プロパティ - NuxtJS
つまり、コンポーネントを使う時に import 文と components オプションを書く必要がなくなります。

      
        nuxt.config.js
        export default {
  components: true,
}


      
      
      
        pages/...]]></summary>
        <author>
            <name>こんかりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next/imageをJestとStorybookで使うためにモックする方法]]></title>
        <id>https://zenn.dev/yukishinonome/articles/0784517bff279b</id>
        <link href="https://zenn.dev/yukishinonome/articles/0784517bff279b"/>
        <updated>2021-08-10T09:55:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
オリジナルな要素があまり多くないので記事にするか迷ったのですが、next/imageをモックする方法について日本語で書いてあるものがほとんどなかったので記事にしました。Next.js関連は新しい技術なので、日本語のドキュメントも少ないですし、僕のような駆け出しエンジニアには日本語のドキュメントが少しでも多くあるととても助かるのでちょっとしたことでも書いていきたいですね。

 モックする方法を調べていて困ったこと
next/imageをJestでモックして使う方法は英語ドキュメントでちらほら見つかったのですが、それらをStorybookに対しても使うと、悲しいことにnext/...]]></summary>
        <author>
            <name>東雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-10のJS: pnpm 6.12.0、webpack 5.49.0(import http resource)、Vue 3.2]]></title>
        <id>https://jser.info/2021/08/10/pnpm-6.12.0-webpack-5.49.0import-http-resource-vue-3.2/</id>
        <link href="https://jser.info/2021/08/10/pnpm-6.12.0-webpack-5.49.0import-http-resource-vue-3.2/"/>
        <updated>2021-08-10T03:10:09.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #552 - パッケージマネージャであるpnpm 6.12.9がリリースされました。
Release v6.12.0 · pnpm/pnpm
pnpm 6.12.0ではpnpm env use --global 16.5.0のように、Node.jsをインストールするコマンドが追加されています。
single binaryとして配布した場合に、Node.jsがグローバルにインストールされていない環境でもpnpmが利用できるようになります。
pnpm envが追加されています。
Using pnpm as a Node.js version manager · Discussion #3434 · pnpm/pnpm
webpack 5.49.0がリリースされました。
Release v5.49.0 · webpack/webpack
試験的な機能としてexperiments.buildHttpというオプションで、リモートのリソースをimportできるようになっています。次のようにimport文でhttpなURLを指定すると、そのリソースをダウンロードして、bundleできます。
import pMap1 from "https://cdn.skypack.dev/p-map";


ダウンロードしたリソースは、<name>.webpack.lock.dataディレクトリに保存され、リソースのロックファイルが<name>.webpack.lockに保存されます。
Denoに近いものとなっています。
webpack/examples/build-http at main · webpack/webpack
add experiments.buildHttp by sokra · Pull Request #13925 · webpack/webpack
Exp…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTMLコーディングでもReact+TypeScriptの開発体験を得る]]></title>
        <id>https://zenn.dev/nanaki14/articles/html-template-react</id>
        <link href="https://zenn.dev/nanaki14/articles/html-template-react"/>
        <updated>2021-08-10T01:31:16.000Z</updated>
        <summary type="html"><![CDATA[前置き
HTMLを納品する形式の仕事の際にEJSやpugではなくReact+TypeScriptを使ってHTMLを生成しつつ開発体験を高めてほしい。
ということで具体的にどのようなメリットがあるのかを伝えたくてまとめてみました。

 開発環境
1から環境を作るのは大変なので今回はクラクさんのministaを拡張していきます。
ministaの紹介記事はこちら
https://www.npmjs.com/package/minista
https://zenn.dev/qrac/articles/7537521afcd1bf
必要な設定はTypeScript, ESLint, Pret...]]></summary>
        <author>
            <name>nanaki14</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[そのuseCallbackちゃんと効いていますか]]></title>
        <id>https://zenn.dev/yuki0410/articles/9ef50554a0ac69</id>
        <link href="https://zenn.dev/yuki0410/articles/9ef50554a0ac69"/>
        <updated>2021-08-10T00:16:10.000Z</updated>
        <summary type="html"><![CDATA[onChange に useCallback を使う場合、ちゃんと useCallback が効く書き方がひとクセあったのでその備忘録です。

 #1.処理フロー
今回は、よくある以下のような処理について考えていきます。


 #2.Coding
まずは処理フローを元に show/onChange の処理を実装します。
※この段階ではまだ パフォーマンスは気にしません。

      
        ParentComponent.tsx
        import { useState } from "react";
import type { InputValue } from ...]]></summary>
        <author>
            <name>らんす🍐</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[新型コロナウイルス感染症対策サイトのステータスを確認できるサイトを作った話]]></title>
        <id>https://zenn.dev/komisan19/articles/26ed97dd1dd068</id>
        <link href="https://zenn.dev/komisan19/articles/26ed97dd1dd068"/>
        <updated>2021-08-09T15:59:46.000Z</updated>
        <summary type="html"><![CDATA[皆さんはこのページを知っていますか？
https://stopcovid19.metro.tokyo.lg.jp/

      
        
        この度、東京都は、新型コロナウイルス感染症対策に関する様々な情報やデータをワンストップで閲覧できるサイトを開設しました。


      
      ＊prtimes参照
このような目的で作成されたようです。
もちろん東京以外にもこのページから派生したものが多くあります。
https://github.com/tokyo-metropolitan-gov/covid19/blob/development/FORKED_SI...]]></summary>
        <author>
            <name>komisan19</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjsでnode-pureimageを使ったJSオンリーな動的画像生成]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-08-09-nextjs-node-pureimage-js</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-08-09-nextjs-node-pureimage-js"/>
        <updated>2021-08-09T14:13:27.000Z</updated>
        <summary type="html"><![CDATA[nextjsで動的画像生成をしたくなり、node-canvasだとnode以外の依存関係がちょっと困るケースがあったので、PureJSで実行できるnode-pureimageでなんとかならないか色々やってみた

 出来た結果

      
        
        // /api/image/sample

import { NextApiHandler, NextApiResponse } from "next"

// @ts-ignore
import { make, encodePNGToStream } from "pureimage"

import getStre...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Next.jsをAWS CDKで立ち上げるサンプル]]></title>
        <id>https://zenn.dev/hideokamoto/articles/5a4b6992a1c8e6</id>
        <link href="https://zenn.dev/hideokamoto/articles/5a4b6992a1c8e6"/>
        <updated>2021-08-09T13:23:35.000Z</updated>
        <summary type="html"><![CDATA[できれば公式のExampleに持っていきたいので、PRたててリクエスト中。
https://github.com/serverless-nextjs/serverless-next.js/pull/1522
マージされたらそっちベースにちゃんとした記事書き直す予定。

 Serverless Next.jsでAWS CDK
Serverless Next.jsといえば、Serverless Componentを使う印象でした。が、最近CDK版も出たみたいです。

 定義イメージ

      
        
        import * as cdk from '@aws-cdk...]]></summary>
        <author>
            <name>hidetaka okamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjs-auth0を使用時の、privateなページに対する簡単なテストの実装方法]]></title>
        <id>https://zenn.dev/mongolyy/articles/b701d6c6184bb5</id>
        <link href="https://zenn.dev/mongolyy/articles/b701d6c6184bb5"/>
        <updated>2021-08-09T04:04:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近、Next.js + Auth0の組み合わせでアプリケーションを開発することが多いのですが、
要認証の非公開ページもあるため、withPageAuthRequiredやwithAPIAuthRequiredを使用しています。
その場合のテストの実装について、公式ではSDKのインスタンスを作成する方法が紹介されているわけですが、単にwithPageAuthRequired withAPIAuthRequiredの中の挙動を確認したいだけならwithPageAuthRequired withAPIAuthRequiredをspy化して、テストを実装すればいいのでは？と、考え...]]></summary>
        <author>
            <name>mongolyy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js関連]]></title>
        <id>https://zenn.dev/gosutesu/books/a8b6320a9247a3</id>
        <link href="https://zenn.dev/gosutesu/books/a8b6320a9247a3"/>
        <updated>2021-08-09T00:36:55.000Z</updated>
        <summary type="html"><![CDATA[自己学習用のNext.jsに関連するものをまとめるもの]]></summary>
        <author>
            <name>渡部良輝</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[再帰処理で入れ子のテーブルコンポーネントを作る（折りたたみ機能付き！）]]></title>
        <id>https://zenn.dev/kimizuy/articles/recursive-table</id>
        <link href="https://zenn.dev/kimizuy/articles/recursive-table"/>
        <updated>2021-08-08T14:48:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
再帰的なデータ構造に従って入れ子の（ネストされた）コンポーネントを実装してみました。

 ミニマルな再帰コンポーネント
まずは、再帰処理の流れを掴むためにミニマルなコンポーネントの例を以下に示します。
実態としては、繰り返し {data.name} を表示していくだけですね。

      
        
        type Data = { name: string; children?: Data[] };

type Props = {
  data: Data;
};

const RecursiveComponent = ({ data }: Props...]]></summary>
        <author>
            <name>kimizuy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[react-markdownで詰まったのでメモ]]></title>
        <id>https://zenn.dev/tomi/articles/2021-08-08-next-issue</id>
        <link href="https://zenn.dev/tomi/articles/2021-08-08-next-issue"/>
        <updated>2021-08-08T13:49:23.000Z</updated>
        <summary type="html"><![CDATA[next.jsで新しいプロジェクトを作っている際にハマってしまった問題に関しての解決策です。
この問題に関しては、バージョンに起因すると思われますので、2021年8月時点での話であり、新しいバージョンが出ている場合は、解決しているかもしれません。
それまでの参考までにご活用ください。

 問題
next.jsをreact-markdownを使ってマークダウンからブログ記事を書くような利用は多いということは、関連記事の多さからも異論はないと思います。
私も１年前からこの組み合わせでブログ書いたりしています。最近マークダウンを使用する別のサイトのプロジェクトを作成し、react-markdo...]]></summary>
        <author>
            <name>Tomiaki Matsumura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Chakra UIプロジェクトにStorybookを導入する]]></title>
        <id>https://zenn.dev/a_da_chi/articles/2128cecc29635a</id>
        <link href="https://zenn.dev/a_da_chi/articles/2128cecc29635a"/>
        <updated>2021-08-08T08:28:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
今回はNext.js+Chakra UIプロジェクトにStorybookを導入する手順を書いていきたい思います。

 導入手順


npx sb initを実行
設定ファイルを修正
Storyを追加


 npx sb initを実行

      
        
        npx sb init


      
  ...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Ionic×Vue】並び替え(Reorder)リストの作り方]]></title>
        <id>https://zenn.dev/tentel/articles/040a0251dab79f</id>
        <link href="https://zenn.dev/tentel/articles/040a0251dab79f"/>
        <updated>2021-08-08T07:19:13.000Z</updated>
        <summary type="html"><![CDATA[Ionicでリストの並び替えを実装する場合に利用可能な、Reorderコンポーネントの使い方まとめ

 基本情報

 props



props名
型
初期値
説明




disabled
boolean
true
並び替えを禁止するかどうか。




 emit



emit名
戻り値
説明




ionItemReorder
Event
並び替えを完了させるために呼ぶ必要があるイベント。戻り値のEventの中にcompleteメソッドがあり、completeメソッドを呼び出すことで並び替えが完了する。呼び出さない場合は、並び替えが完了せずにフリーズする。



戻り値の中身
...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React PopOverコンテンツ内でTabのFocusをいい感じにするhook]]></title>
        <id>https://zenn.dev/remon/articles/9e2953d699368a</id>
        <link href="https://zenn.dev/remon/articles/9e2953d699368a"/>
        <updated>2021-08-08T06:03:58.000Z</updated>
        <summary type="html"><![CDATA[OverlayやPopOverでコンテンツを表示するとき、タブでの操作性は以下のようになってると望ましいと思う。

Overlayコンテンツが表示中の時にタブを押すと、コンテンツにフォーカスが当たる。
タブを押した時Overlayコンテンツのフォーカス可能な最初の子要素にフォーカスが当たる
Overlayコンテンツのフォーカス可能な最後の子要素がフォーカス中であれば、最初の子要素のフォーカスが当たる。

react-popper等を使っていい感じのOverlayコンポーネントを作ったとしても、
所詮座標を調整するライブラリなのでこの手のタブの操作性に関しては自前で実装する必要がありそうで...]]></summary>
        <author>
            <name>remon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js/Serverless Frameworkでisr対応サイトを立ち上げる]]></title>
        <id>https://zenn.dev/ptpadan/articles/serverless-next-isr</id>
        <link href="https://zenn.dev/ptpadan/articles/serverless-next-isr"/>
        <updated>2021-08-08T05:17:42.000Z</updated>
        <summary type="html"><![CDATA[メディアを Next.js/Headless CMS でメディアを開発を行っているので、の技術選定やハマりどころをまとめていきます。
使用している技術の概要は下記です。

Next.js は Serverless Framework を使用して AWS 上にデプロイ
Headless CMS は、Prismic を使用


 Serverless frameworkの選定理由
AWS からインフラを分離したくない事情があったため、Vercel や Firebase Hosting 等は選択肢外でした。
別のプロダクトでは ecs を使用しているのですが、メディアはメインプロダクトではない...]]></summary>
        <author>
            <name>yasushi.kobayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Functions for firebaseでPrismaを使ってみる[Dockerでローカル開発環境構築]]]></title>
        <id>https://zenn.dev/masamichhhi/articles/cloudfuntions-prisma-docker</id>
        <link href="https://zenn.dev/masamichhhi/articles/cloudfuntions-prisma-docker"/>
        <updated>2021-08-07T15:05:51.000Z</updated>
        <summary type="html"><![CDATA[cloud functionsからfirestoreを使うのはとても便利ですが、cloud functionsからRDBを使いたいときがあると思います。
そこで、prismaというtypescript向けのORMがとても使い心地がよく、これをcloud functionsで手軽に使いたいなと思ったので、dockerを使ってそれらをローカルで開発できる環境を構築してみます。

 この記事でやること

Cloud Functions for Firebaseとmysqlの環境をdockerで構築
prismaでfunctionからmysqlにアクセスして、todoリストのAPIを作る。


...]]></summary>
        <author>
            <name>masamichhhi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境構築 2021]]></title>
        <id>https://zenn.dev/sprout2000/articles/1ee32fa0181870</id>
        <link href="https://zenn.dev/sprout2000/articles/1ee32fa0181870"/>
        <updated>2021-08-07T07:27:01.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone git@github.com:sprout2000/cra.git
% cd cra
% docker-compose up cra


      
      localhost:3000 を開きましょう。これだけです。

 手順

 1. Docker のインストール
公式ドキュメントに従ってインストールしましょう。
https://docs.docker.com/docker-for-windows/inst...]]></summary>
        <author>
            <name>sprout2000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DOM, Node, Elementの違い]]></title>
        <id>https://zenn.dev/sqer/articles/2d4def0f07bf04c5cc47</id>
        <link href="https://zenn.dev/sqer/articles/2d4def0f07bf04c5cc47"/>
        <updated>2021-08-07T06:05:15.000Z</updated>
        <summary type="html"><![CDATA[DOM, Node, Elementについてそれぞれの違いを説明できますか？
DOM
Node
Element
実践！NodeをElementに変換する
まとめ
リンク


 DOM, Node, Elementについてそれぞれの違いを説明できますか？
Web開発において、これらをすべて「要素」として呼んで曖昧にしていると型定義などで詰まることがあります。
この３つの名称、実は明確な違いがあると知っていましたか？
これを期にマスターしましょう。

 DOM
DOMは、「Document Object Model、つまりドキュメントを物として扱うモデル」のことを言います。
DOMツリーと...]]></summary>
        <author>
            <name>sqer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.js の prisma で MongoDB を使う！！！！]]></title>
        <id>https://zenn.dev/yuiseki/articles/5a3b418ca06581</id>
        <link href="https://zenn.dev/yuiseki/articles/5a3b418ca06581"/>
        <updated>2021-08-07T02:18:30.000Z</updated>
        <summary type="html"><![CDATA[Blitz.jsをインストールしてプロジェクトを生成する

      
        
        npm install -g blitz --legacy-peer-deps
cd blitz-hoge


      
      参考文献

https://blitzjs.com/docs/get-started
https://blitzjs.com/docs/tutorial



 db/schema.prisma を編集する
注意点

prismaのMongoDB対応はPreviewFeature
Cascading delete（リレーションを張った親モデル...]]></summary>
        <author>
            <name>yuiseki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[内部モジュールでは TypeScript をコンパイルせずに配る]]></title>
        <id>https://zenn.dev/mizchi/articles/no-traspiled-typescript</id>
        <link href="https://zenn.dev/mizchi/articles/no-traspiled-typescript"/>
        <updated>2021-08-06T08:23:18.000Z</updated>
        <summary type="html"><![CDATA[主張
現代では、 npm に publish するものを除けば TypeScript をコンパイルして配布する必要はほぼないと考えています。
TypeScript のコンパイルをしない環境、例えば deno や rome を使うと、コンパイルをするというステップが省くことで開発体験が大きく向上する、という肌感があり、ローカル環境ならこのメリットを優先するべきと考えています。
基本的に、ビルドはフロントエンド/サーバーともに配布前の最後の一回だけでいいはず、というのが自分の主張です。
https://github.com/denoland/deno

Rome Toolchain
De...]]></summary>
        <author>
            <name>mizchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React コンポーネントの書き方をチームで統一する]]></title>
        <id>https://zenn.dev/januswel/articles/a54aedc09fe7bc</id>
        <link href="https://zenn.dev/januswel/articles/a54aedc09fe7bc"/>
        <updated>2021-08-06T05:05:29.000Z</updated>
        <summary type="html"><![CDATA[次の記事を見てなるほどと思ったものの、コンポーネント集作成の視点で書かれている。我々はアプリを作る機会が多いので、その際はどういう書き方が楽なのか、チームで共有するために類型を洗い出し、比較した。
https://kray.jp/blog/dont-have-to-use-react-fc-and-react-vfc/

 TL;DR
関数での書き方を覚えれば良いと判断した。

      
        
        function MyComponent(props: React.PropsWithChildren<Props>) {
  if (props.ti...]]></summary>
        <author>
            <name>januswel</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パスワードレス認証サービスGAZEPASSを使ってみた]]></title>
        <id>https://zenn.dev/gaomar/articles/12c8664058638b</id>
        <link href="https://zenn.dev/gaomar/articles/12c8664058638b"/>
        <updated>2021-08-06T01:39:20.000Z</updated>
        <summary type="html"><![CDATA[GAZEPASSというパスワードレスでログイン認証するシステムを使ってみました。
端末にある生体認証機能を使って認証する仕組みです。生体認証が無いデバイスは顔認証することができます。
※現在はbeta版なので無料で使えますが、今後は 有料化 になる可能性がありますのでご注意ください。

 お試し環境
下記からどういうものか動かすことができます。
https://www.katacoda.com/gaomar/scenarios/gazepass-handson-playground

 1. API Keysを作成しよう
GAZEPASSサイトにアクセスしてアカウントを発行します。

 ...]]></summary>
        <author>
            <name>がおまる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjs AMPモードで Google Analyticsを動かしたい]]></title>
        <id>https://zenn.dev/dl10yr/articles/021c1b0fc2ec35</id>
        <link href="https://zenn.dev/dl10yr/articles/021c1b0fc2ec35"/>
        <updated>2021-08-05T12:11:57.000Z</updated>
        <summary type="html"><![CDATA[最重要なこと
GA4ではなくユニバーサルアナリティクスのプロパティ（UA-始まりのID）を使うこと！ (2021年8月4日現在、私調べ）

      
        
        [AmpAnalytics <unknown id>] No triggers were found in the config. No analytics data will be sent.


      
      GA4のIDでは動きませんでした...
https://github.com/ampproject/amphtml/issues/30903

 実装方針
AMP対...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最低限わかるVue Composition API]]></title>
        <id>https://zenn.dev/masakitm/articles/6b5e31549c03d9</id>
        <link href="https://zenn.dev/masakitm/articles/6b5e31549c03d9"/>
        <updated>2021-08-05T03:18:54.000Z</updated>
        <summary type="html"><![CDATA[この資料について
この資料はVue2.0で動くプロダクトでVue Composition APIについて簡単に解説し、関心をもってもらうために用いた際のものです。
対象読者は以下を想定しています。

VueのOption API（今までの書き方）をさわったことがある
React Hooksの経験がない

より詳細な知識は公式ドキュメントよりご参照ください。

 Vue 3系のコンポジションapi について

 ってなんですか

今までとは違う書式でvueを書ける記法
今後主流になりそう
reactのhooks apiに強く影響をうけている
https://ja.reactjs.org...]]></summary>
        <author>
            <name>masakitm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[現場のフロントエンド開発環境を Dart Sass へマイグレーションする覚書]]></title>
        <id>https://zenn.dev/toshimarnie/articles/c7cb99994075a3</id>
        <link href="https://zenn.dev/toshimarnie/articles/c7cb99994075a3"/>
        <updated>2021-08-05T02:49:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Sass の公式ドキュメントで 2020 年 10 月に LibSass の利用は非推奨 になり、Dart Sass の利用を推奨しています。そんな折、筆者が所属するフロントエンド開発チームでは LibSass を利用しており Dart Sass へ移行を進めました。本稿は LibSass から Dart Sass の移行についてご紹介します。本移行時の Dart Sass のバージョンは 1.32.7 になります。

LibSass の非推奨は『継続的にメンテナンスをするが、将来的に追加予定の CSS および Sass の新機能の互換性を担保しない』という意味になります。...]]></summary>
        <author>
            <name>Toshifumi Imanishi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueのCompositionAPIとgraphql-code-generatorの体験が良いので紹介したい。]]></title>
        <id>https://zenn.dev/yoshixj/articles/d460f4d9cfb299</id>
        <link href="https://zenn.dev/yoshixj/articles/d460f4d9cfb299"/>
        <updated>2021-08-04T23:09:36.000Z</updated>
        <summary type="html"><![CDATA[vue3がリリースされてから、時間が立ちました。CompositionAPIはどれくらい使用されているのでしょうか。自分は新規開発をすることが多いので、小さいLPなども含めると5つくらいのプロジェクトをNuxt × CompositionAPIで作ってきました。
そのなかで、CompositionAPIの体験がよいと思ったので軽く紹介します。

 CompositionAPIのメリット
CompositionAPIと以前からあるOption APIの違いを説明するとなった時に以下のような図が用いられます。

記述がまとまるということを示しているのですが、これがまとまったことで読みやすくな...]]></summary>
        <author>
            <name>yoshixj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueのCompositionAPIとgraphql-code-generatorの体験が良いので紹介したい。]]></title>
        <id>https://zenn.dev/yoshixj/articles/d460f4d9cfb299</id>
        <link href="https://zenn.dev/yoshixj/articles/d460f4d9cfb299"/>
        <updated>2021-08-04T23:09:36.000Z</updated>
        <summary type="html"><![CDATA[vue3がリリースされてから、時間が立ちました。CompositionAPIはどれくらい使用されているのでしょうか。自分は新規開発をすることが多いので、小さいLPなども含めると5つくらいのプロジェクトをNuxt × CompositionAPIで作ってきました。
そのなかで、CompositionAPIの体験がよいと思ったので軽く紹介します。

 CompositionAPIのメリット
CompositionAPIと以前からあるOption APIの違いを説明するとなった時に以下のような図が用いられます。

記述がまとまるということを示しているのですが、これがまとまったことで読みやすくな...]]></summary>
        <author>
            <name>yoshixj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim戦記 Part1]]></title>
        <id>https://zenn.dev/vampire_yuta/articles/c4703f4232f16b</id>
        <link href="https://zenn.dev/vampire_yuta/articles/c4703f4232f16b"/>
        <updated>2021-08-04T16:28:43.000Z</updated>
        <summary type="html"><![CDATA[基本操作

参照（https://knowledge.sakura.ad.jp/21687/）

 カーソル移動
h → 左に移動
j → 下に移動
k → 上に移動
l → 右に移動
gg → 最初の行へ移動
GG → 最後の行へ移動
Ctrl+f → 上へページスクロール
Ctrl+b → 下へページスクロール
zz → カーソル位置を中央へ
{ → 前の空行まで移動
} → 次の空行まで移動
w → 文字単位で次に移動
W → 区切り文字なしで次の文字に移動
b → 文字単位で前の文字に移動
B → 区切り文字なしで前の文字に移動

 進む戻る
Ctrl + r → 一つ前の操...]]></summary>
        <author>
            <name>vampire_yuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerで立てたNode.js, TypeScript環境にESLintとprettierを導入して、VSCode保存でコード整形も行う]]></title>
        <id>https://zenn.dev/unemployed/articles/prettier-eslint</id>
        <link href="https://zenn.dev/unemployed/articles/prettier-eslint"/>
        <updated>2021-08-04T06:11:36.000Z</updated>
        <summary type="html"><![CDATA[最初に
綺麗なコードを書きたいという事で、Stripe の API を試す環境（TypeScript と Express）に ESLint と Prettier を導入してコードを静的解析、整形出来る環境を作ろうと思う。

 node.js の環境構築
今回も docker-compose を使ってサクッと作ろうと思う。docker じゃなく docker-compose を使う理由はポートをルーティングしたコンテナの起動等が docker-compose.yml に記述出来るので起動時のコマンドを省略出来るので使用している。単一のコンテナを利用する際でも便利だと思う。
軽量な no...]]></summary>
        <author>
            <name>大学生だった.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wip 【音楽ファイル詳細表示機能】storeをモジュール化して、getterを参照したい]]></title>
        <id>https://zenn.dev/tanoken729/articles/6a96bff90b8e12</id>
        <link href="https://zenn.dev/tanoken729/articles/6a96bff90b8e12"/>
        <updated>2021-08-03T15:32:50.000Z</updated>
        <summary type="html"><![CDATA[成功
store/musicFiles.js

      
        
        export const state = () => ({
  musicFileData: [],
})

export const getters = {
  musicFileData: state => state.musicFileData
}

export const mutations = {
  setMusicFileDataMutations(state, musicFileData) {
    // console.log(musicFileData)
 ...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InsightFaceで顔認証（特徴量抽出、比較）してみた]]></title>
        <id>https://zenn.dev/yuyakato/articles/d35b185d36a33b</id>
        <link href="https://zenn.dev/yuyakato/articles/d35b185d36a33b"/>
        <updated>2021-08-03T13:48:56.000Z</updated>
        <summary type="html"><![CDATA[目次

InsightFaceとFastAPIで顔検出サーバを作ってみた
InsightFaceの顔検出結果をNext.jsで可視化してみた
InsightFaceで顔認証（特徴量抽出、比較）してみた（本記事）


 初めに
前回、前々回と、InsightFaceを使った顔検出の例を紹介しました。
今回は、InsightFaceを使って顔認証（Face Recognition）を試してみたいと思います。

 顔認証とは
顔認証とは:

提示された画像に含まれている顔が、事前に登録されているどの顔に一番近いか？
2つの顔画像、顔Aと顔Bはどれだけ類似しているか？

みたいなことを調べる...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-03のJS: Yarn 3.0、Chrome 93 beta、cross origin iframeでのalert/prompt/confirmを削除]]></title>
        <id>https://jser.info/2021/08/03/yarn3-chrome93-beta-deprecate-alert/</id>
        <link href="https://jser.info/2021/08/03/yarn3-chrome93-beta-deprecate-alert/"/>
        <updated>2021-08-03T03:38:52.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #551 - Yarn 3.0がリリースされました。
Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches, ... - DEV Community 👩‍💻👨‍💻
berry/CHANGELOG.md at master · yarnpkg/berry
Node.js 10のサポート終了、.pnp.cjsにリネーム、@yarnpkg/pnpifyを3つのパッケージに分解などの変更を含んでいます。
@yarnpkg/sdks: Editor SDKs
@yarnpkg/pnpify: PnPと互換性のないツールを実行するツール
@yarnpkg/nm: node_modules linker
また、 exportsフィールドのサポート、pnpmライクなハードリンクのサポート、シェル構文のサポート改善、 ESBuildでのbundleをサポートする@yarnpkg/esbuild-plugin-pnpの追加なども含まれています。
Chrome 93 betaがリリースされました。
Chromium Blog: Chrome 93: Multi-Screen Window Placement, PWAs as URL Handlers, and More
Origin TrialとしてCOEPの導入をより手軽にするためのCross-Origin-Embedder-Policy：credentialless、URL Handlersの追加などが含まれています。
AbortSignal.abort()メソッドのサポート、Stage 3のError causeとObject.hasOwnのサポートも含まれています。
ダークモード対応などではCSSのprefers-color-scheme media quer…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue packages version mismatch:   エラーを確認 -> 解消する]]></title>
        <id>https://zenn.dev/koushikagawa/articles/d253bb1afc591f</id>
        <link href="https://zenn.dev/koushikagawa/articles/d253bb1afc591f"/>
        <updated>2021-08-03T03:14:35.000Z</updated>
        <summary type="html"><![CDATA[vue と vue-server-renderer で version mismatch
先日Nuxtプロジェクトで npm run dev を実行した際に、下記エラーが表示されました。

      
        
         ✖ Nuxt Fatal Error  
 Error:    
 Vue packages version mismatch:   
 - vue@2.6.11    
 - vue-server-renderer@2.6.14    
 This may cause things to work incorrectly. Make sure t...]]></summary>
        <author>
            <name>koushikagawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker×FastAPI×React(TypeScript) on AWS ECS【backend】]]></title>
        <id>https://zenn.dev/daisukesasaki/articles/f18dd6554f94e3</id>
        <link href="https://zenn.dev/daisukesasaki/articles/f18dd6554f94e3"/>
        <updated>2021-08-02T20:31:44.000Z</updated>
        <summary type="html"><![CDATA[はい、やってみた系です。
最近ずーっとInputばっかりだったのでやったこと書くか。。となった次第です。
ECSとか使ったことなかったので。（高いし。。）
※お金は知らんうちに全然可愛くない金額になってるのでご利用は計画的に（RDSとかも使ってたけど１週で3000円弱くらいになってた。。）

 最終構築のイメージ
何章かに分けて作成していきますが、全部終わったらこうなるイメージ
（今回はbackend編）


 動作環境

BigSur ver11.4
MacBook Pro (13-inch, 2019, Two Thunderbolt 3 ports)
1.4 GHz クアッドコ...]]></summary>
        <author>
            <name>daisuke sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型駆動開発]]></title>
        <id>https://zenn.dev/kazuhe/articles/type-driven-development-typescript</id>
        <link href="https://zenn.dev/kazuhe/articles/type-driven-development-typescript"/>
        <updated>2021-08-02T15:54:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
型駆動開発とはどんなもので実践すると何が嬉しいのかを自分なりに理解するためにこの記事を書きます。
2021年8月時点では「型駆動開発」でググっても意図した内容がヒットせず、「Type-Driven Development」と検索して英語の記事が何件かヒットする程度です。
自分の「型駆動開発」に対しての理解・認識が世間一般のそれと相違がある場合もありますので、何か思うところがあればご指摘いただければ大変嬉しく思います。
また、この記事ではTypeScriptとVue.jsでフロントエンドのコードを書いていきます。TypeScriptは必須の前提ですがReactでも同じような考...]]></summary>
        <author>
            <name>kazuhe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型駆動開発]]></title>
        <id>https://zenn.dev/kazuhe/articles/type-driven-development-typescript</id>
        <link href="https://zenn.dev/kazuhe/articles/type-driven-development-typescript"/>
        <updated>2021-08-02T15:54:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
型駆動開発とはどんなもので実践すると何が嬉しいのかを自分なりに理解するためにこの記事を書きます。
2021年8月時点では「型駆動開発」でググっても意図した内容がヒットせず、「Type-Driven Development」と検索して英語の記事が何件かヒットする程度です。
自分の「型駆動開発」に対しての理解・認識が世間一般のそれと相違がある場合もありますので、何か思うところがあればご指摘いただければ大変嬉しく思います。
また、この記事ではTypeScriptとVue.jsでフロントエンドのコードを書いていきます。TypeScriptは必須の前提ですがReactでも同じような考...]]></summary>
        <author>
            <name>kazuhe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Next.js Component のISR実装を読み解く]]></title>
        <id>https://zenn.dev/laiso/articles/8c619c38bd7b7b</id>
        <link href="https://zenn.dev/laiso/articles/8c619c38bd7b7b"/>
        <updated>2021-08-02T15:13:59.000Z</updated>
        <summary type="html"><![CDATA[AWS Amplify ConsoleでNext.jsのプロジェクトをデプロイすると Serverless Next.js Component のインテグレーションによってAWS Lambda リソースが最大4つ作成される(ソースコードはエクスポートできる)

Default Lambda@Edge for Next CloudFront distribution
API Lambda@Edge for Next CloudFront distribution
Image Lambda@Edge for Next CloudFront distribution
Next.js Regen...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Typescript+ContextAPIで予算トラッカーを作ってみた]]></title>
        <id>https://zenn.dev/kenta0313/articles/eb1c38209aa30e</id>
        <link href="https://zenn.dev/kenta0313/articles/eb1c38209aa30e"/>
        <updated>2021-08-02T08:31:47.000Z</updated>
        <summary type="html"><![CDATA[今回作ったもの
作品はこちら
コードはこちら

 作った経緯
ContextAPIを使ってみたかった為

 コードの解説

 コンポーネントをAppContextに接続する

      
        
        import React, { useContext } from 'react';
import { AppContext } from '../context/AppContext';

const Budget = () => {
	const { budget } = useContext(AppContext);
	return (
		<d...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Typescript+ContextAPIで予算トラッカーを作ってみた]]></title>
        <id>https://zenn.dev/kenta0313/articles/eb1c38209aa30e</id>
        <link href="https://zenn.dev/kenta0313/articles/eb1c38209aa30e"/>
        <updated>2021-08-02T08:31:47.000Z</updated>
        <summary type="html"><![CDATA[今回作ったもの
作品はこちら
コードはこちら

 作った経緯
ContextAPIを使ってみたかった為

 コードの解説

 コンポーネントをAppContextに接続する

      
        
        import React, { useContext } from 'react';
import { AppContext } from '../context/AppContext';

const Budget = () => {
	const { budget } = useContext(AppContext);
	return (
		<d...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm + Vite + Vue + TypeScript で新規プロジェクトを作成する]]></title>
        <id>https://zenn.dev/yukination/articles/e854062cea4920</id>
        <link href="https://zenn.dev/yukination/articles/e854062cea4920"/>
        <updated>2021-08-02T06:26:46.000Z</updated>
        <summary type="html"><![CDATA[npm と比べて早いと話題の pnpm を使用してプロジェクトを新規作成したので備忘録として残します。
こちら に公式が発表しているベンチマークの結果があります。
npm や yarn との違いはこちらの記事が分かりやすくてオススメです。

 node.js のバージョンを確認
現在使用している Node.js のバージョンが 12 以上か？の確認を行います。

      
        
        > node -v
v16.4.2


      
      
 pnpm を新規インストール
npm を使用し pnpm のインストールを行います。

      
 ...]]></summary>
        <author>
            <name>Yukination</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm + Vite + Vue + TypeScript で新規プロジェクトを作成する]]></title>
        <id>https://zenn.dev/yukination/articles/e854062cea4920</id>
        <link href="https://zenn.dev/yukination/articles/e854062cea4920"/>
        <updated>2021-08-02T06:26:46.000Z</updated>
        <summary type="html"><![CDATA[npm と比べて早いと話題の pnpm を使用してプロジェクトを新規作成したので備忘録として残します。
こちら に公式が発表しているベンチマークの結果があります。
npm や yarn との違いはこちらの記事が分かりやすくてオススメです。

 node.js のバージョンを確認
現在使用している Node.js のバージョンが 12 以上か？の確認を行います。

      
        
        > node -v
v16.4.2


      
      
 pnpm を新規インストール
npm を使用し pnpm のインストールを行います。

      
 ...]]></summary>
        <author>
            <name>Yukination</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js/JST で時刻をやりとりするにあたって]]></title>
        <id>https://zenn.dev/shztmk/articles/05_javascript-timezone</id>
        <link href="https://zenn.dev/shztmk/articles/05_javascript-timezone"/>
        <updated>2021-08-02T06:12:37.000Z</updated>
        <summary type="html"><![CDATA[予備知識
JavaScript の Date オブジェクトは、時刻を実行環境のタイムゾーンで保持している、とみなすことができます。
すなわち new Date('2020-01-01T09:00:00+09:00') としたとき

実行環境が JST ならば 2020-01-01T09:00:00+09:00

実行環境が UTC ならば 2020-01-01T00:00:00Z

実行環境が EST ならば 2019-12-31T19:00:00-05:00


として保持していることになります。

 懸念点
2020-01-01T00:00:00+09:00 という文字列を受け取...]]></summary>
        <author>
            <name>shztmk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim script. カーソル下のリンクの<title>を取得して、テキストリンクに置き換える。]]></title>
        <id>https://zenn.dev/kis9a/articles/vim-expand-link-to-text-link</id>
        <link href="https://zenn.dev/kis9a/articles/vim-expand-link-to-text-link"/>
        <updated>2021-08-02T01:24:44.000Z</updated>
        <summary type="html"><![CDATA[初めに
Vim では、リンクの上でgxをタイプすることで、ブラウザーでそのリンクを開くことができます。それを参考に、今回はカーソル下のリンクの<title>を取得して、テキストリンクに置き換える関数を書いてみました。単純ですが、個人的に markdown でメモを取る時や、参考 URL を書く時などに便利に使用しています。

 イメージ

vim-expand-link-to-text-link

 1.カーソル下のリンクを取得する。
これが、結構難しいと思っていましたが、案外簡単でした。

      
        
        expand('<cfil...]]></summary>
        <author>
            <name>kis9a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jest setTimeout()のようなでタイマー関数をテストする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/67e059d7b7f3c7</id>
        <link href="https://zenn.dev/azukiazusa/articles/67e059d7b7f3c7"/>
        <updated>2021-08-01T13:04:25.000Z</updated>
        <summary type="html"><![CDATA[JavaScriptには、以下のような時間に関する関数が用意されています。

setTimeout
setInterval
clearTimeout
clearInterval

例えば、setTimeoutは第1引数で渡したコールバック関数を第2引数で渡したミリ秒後に実行します。
標準で用意されている非常に便利な関数群ですが、ユニットテストを記述するときには少々困りものです。setTimeoutのコールバック関数に渡した処理が正しく呼び出されているかどうか調べたいようない場合には、setTimeoutのコールバックが呼び出されるまで待機する処理を挟む必要があります。
setTimeou...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[超入門] FizzBuzzで考える関数型プログラミング学習を純粋関数型言語でやる理由]]></title>
        <id>https://zenn.dev/ababup1192/articles/a5f5c232b502d6</id>
        <link href="https://zenn.dev/ababup1192/articles/a5f5c232b502d6"/>
        <updated>2021-08-01T12:03:48.000Z</updated>
        <summary type="html"><![CDATA[先日、関数型プログラミングはまずは純粋関数型言語を用いて、考え方から理解しよう
と言う記事を書かせていただきました。納得の声をたくさん頂きましたが、それでは純粋関数型プログラミング言語を闇雲に初めて勘所がわかった！とはすぐにはならないと思い、順調にステップアップするための記事を書こうと思いました。また、考え方が違うだけで関数型プログラミング言語を学んだり使用する理由は特にないとの意見をいただいたので、改めて実例と共に関数型プログラミング言語を確認していただければなと思います。
今回の記事ではFizzBuzzとElmを利用して解説をしていきたいと思います。FizzBuzzは使い古された例で...]]></summary>
        <author>
            <name>ABAB↑↓BA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Apps Script向け簡易job-queueを作った]]></title>
        <id>https://zenn.dev/katzumi/articles/58354fb4d05038</id>
        <link href="https://zenn.dev/katzumi/articles/58354fb4d05038"/>
        <updated>2021-08-01T08:46:58.000Z</updated>
        <summary type="html"><![CDATA[Motivation
個人的にいくつかのSlackボットをGoogle Apps Script（以下GAS）で実装していますが、3秒ルールの壁があってイベント処理がタイムアウトしてしまうという課題がありました。
Slackの公式ドキュメントには3秒以内にレスポンスできない処理は、一旦レスポンスして非同期処理でイベントのペイロードにあるレスポンスURLに書き込めとありました。
GAS内で非同期処理を行うには、トリガー処理を組み合わせして実現できそうでした。
https://developers.google.com/apps-script/guides/triggers
使えるトリガー...]]></summary>
        <author>
            <name>katzumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js にレイアウトに関するドキュメントが追加されました]]></title>
        <id>https://zenn.dev/sota_yamaguchi/articles/b0e8aa63b4bb84</id>
        <link href="https://zenn.dev/sota_yamaguchi/articles/b0e8aa63b4bb84"/>
        <updated>2021-08-01T08:05:54.000Z</updated>
        <summary type="html"><![CDATA[Next.js の Layout 周りのドキュメントが新しく追加されました。
https://nextjs.org/docs/basic-features/layouts

 単一のレイアウトを扱う場合
単一のレイアウトで十分な場合はカスタマイズした <Layout/> で <Component /> タグを囲むだけで実装できます。

      
        
        // pages/_app.js

import Layout from '../components/layout'

export default function MyApp({...]]></summary>
        <author>
            <name>sota_yamaguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularでunix timeを取得する]]></title>
        <id>https://zenn.dev/hashito/articles/f23af092957bf5</id>
        <link href="https://zenn.dev/hashito/articles/f23af092957bf5"/>
        <updated>2021-08-01T07:07:16.000Z</updated>
        <summary type="html"><![CDATA[momentjsを利用したやり方
コマンドでmomenjsをプロジェクトにインストールする。
npm install moment --save
importして下記のように利用できる。

      
        
        import * as moment from 'moment';
let unixtime:number=moment().unix();


      
      
 Dateを利用したやり方
Date.now()というコードでunix timeのミリ秒版が取得できる。
なのでDate.now()/1000で単位を秒にすれば小数点付きだがun...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[画像の切り抜きライブラリVue Cropperを使ってみた。]]></title>
        <id>https://zenn.dev/nana/articles/c6e27ded863a95</id>
        <link href="https://zenn.dev/nana/articles/c6e27ded863a95"/>
        <updated>2021-07-31T13:59:54.000Z</updated>
        <summary type="html"><![CDATA[Vue Cropperについて
今回使用したのは以下のライブラリになります。
Vue製なのでVue環境であれば使えると思います。
https://github.com/xyxiao001/vue-cropper
Cropper.jsというライブラリがあり、こちらはJSのものになるので、JS環境であれば使う事ができます。
https://github.com/fengyuanchen/cropperjs
デモ
Cropper.jsはかなり老舗のライブラリのようで
画像の切り抜きに使う形になります。
今回紹介するもの以外にも以下のようなCropperをメインにしているライブラリは多数存在...]]></summary>
        <author>
            <name>ななな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discord Slash CommandのInteractionをAzure Functionsにデプロイしてみる]]></title>
        <id>https://zenn.dev/drumath2237/articles/112fd0bfa7ea4f836195</id>
        <link href="https://zenn.dev/drumath2237/articles/112fd0bfa7ea4f836195"/>
        <updated>2021-07-31T12:38:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 TL;DR
Discord の Slash Command を TypeScript を使って開発し、
Azure Functions にデプロイすることで簡単なボットのようなアプリをサーバーレスに作ることできる。

 扱う内容・対象読者
この記事では、Azure Functions にデプロイした関数を
Discord Slash Command の Interaction Endpoint に指定して使うまでを目標とします。
したがって次のような項目を扱います。

Slash Command の概要と作成方法
Azure Function アプリを TypeScri...]]></summary>
        <author>
            <name>にー兄さん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.jsにTailwindを初めて使ってみるときのTips]]></title>
        <id>https://zenn.dev/kata_n/articles/2d4744d1bb6ab6</id>
        <link href="https://zenn.dev/kata_n/articles/2d4744d1bb6ab6"/>
        <updated>2021-07-31T11:10:31.000Z</updated>
        <summary type="html"><![CDATA[Tailwind CSSとは
ユーティリティが用意されているCSSフレームワーク。
CSSでいうユーティリティとは、あらかじめ用意されたクラスを利用してStyleを当てていくことで、CSSを書く事なくスタイルを当てていく手法です。
具体的には、クラスを定義した別ファイル（ユーティリティファイル）を用意しておいて、使いたい時にクラス名を書くイメージです。

      
        ユーティリティファイル
        .p-10 { padding:10px }


      
      使うときは、

      
        
        <h2 clas...]]></summary>
        <author>
            <name>kata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gauge のように受け入れテストを日本語で書ける Jest 拡張 "Jest-gauge" を公開しました]]></title>
        <id>https://zenn.dev/tnzk/articles/27b72f6b7ce982</id>
        <link href="https://zenn.dev/tnzk/articles/27b72f6b7ce982"/>
        <updated>2021-07-31T10:14:31.000Z</updated>
        <summary type="html"><![CDATA[先日 Daniel North の記事を訳していて、この記事がドラフトのままになっているのを思い出したので、加筆して公開することにしました。

 概要
Gauge のように受け入れテストを日本語で書いて、 Jest を採用しているプロジェクトで受け入れテスト駆動開発 (ATDD) を実現できる Jest 拡張 "jest-gauge" を公開しました。
https://github.com/tnzk/jest-gauge

 受け入れテスト駆動開発 (ATDD) とは
受け入れテスト駆動開発 (ATDD) とは、テスト駆動開発 (TDD) の延長線上にあるソフトウェア開発技法のひとつで、...]]></summary>
        <author>
            <name>tnzk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[住所で検索可能な周辺情報 GraphQL/SPARQL API]]></title>
        <id>https://zenn.dev/uedayou/articles/ee4a2ba1b5bd0a</id>
        <link href="https://zenn.dev/uedayou/articles/ee4a2ba1b5bd0a"/>
        <updated>2021-07-31T03:22:27.000Z</updated>
        <summary type="html"><![CDATA[Linked Open Addresses Japan という住所オープンデータ提供サイトで使用している周辺情報データを検索できる Web API を公開しました。
https://uedayou.net/loa/
実際には以下で使用しているものになります。

API には GraphQL と SPARQLエンドポイントの2種類があります。GraphQL は簡易、SPARQLエンドポイントはより詳細に検索ができます。用途によって使い分けてください。

 特徴
一般的に、位置情報を持つ情報を検索する場合、緯度経度で範囲を絞り込んで検索することが一般的だと思います。今回公開する周辺情報 AP...]]></summary>
        <author>
            <name>uedayou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next startを本番に使用すべきではないたった一つの理由]]></title>
        <id>https://zenn.dev/umireon/articles/2e6add9aa34dbb</id>
        <link href="https://zenn.dev/umireon/articles/2e6add9aa34dbb"/>
        <updated>2021-07-31T01:59:53.000Z</updated>
        <summary type="html"><![CDATA[たった一つの理由
next start （npm run start） の実装にNode.jsでHTTPサーバーを提供される場合に標準的に使用されるexpressが使用されていないからです。（httpモジュールは実装が低レベルすぎるので直接使用するべきではありません）

 長い理由

 Next.jsのドキュメントに書いてあるよ？
Next.jsのドキュメントにはnext startが（一応）プロダクションデプロイに使えるよと書いてあります。
https://nextjs.org/docs/deployment#nodejs-server
だから、next startを本番で使うこと...]]></summary>
        <author>
            <name>Kaito Udagawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vimでタブを閉じたときに左側のタブを開く]]></title>
        <id>https://zenn.dev/notomo/articles/vim-open-left-tab-after-closing</id>
        <link href="https://zenn.dev/notomo/articles/vim-open-left-tab-after-closing"/>
        <updated>2021-07-30T23:52:51.000Z</updated>
        <summary type="html"><![CDATA[Vimで:tabeditすると新しいタブが右側に開くが、
:tabcloseすると元々いたタブの右側のタブが開く。
これを閉じたタブの左にあったタブが開かれるようにしたい。
つまり| 1 | 2 | 3 |のようにタブがあって、2を閉じたら3ではなく1を開く。
1で作業中に2を開いて閉じたら1の作業に戻りたいことが多い。

 実装
以下のようにautocmdで実現できる。

      
        
        let s:after_tab_leave = v:false
augroup activate_left_tab
  autocmd!
  autocmd TabEn...]]></summary>
        <author>
            <name>notomo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パスワードを生成するライブラリを作った]]></title>
        <id>https://zenn.dev/karibash/articles/3f18b3a77e1792</id>
        <link href="https://zenn.dev/karibash/articles/3f18b3a77e1792"/>
        <updated>2021-07-30T13:45:55.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/Karibash/password-generator

 使い方

      
        
        import password from '@karibash/password-generator';

console.log(password(9));
// -> C_Tpmf45L


      
      これだけで大文字、小文字、数字、記号を各1文字以上含む文字列を生成できます
探しても無かったので作っちゃいました

 生成時に使用する文字を変更する
第2引数に文字配列を指定すると、生成時に使用する文字を変更出...]]></summary>
        <author>
            <name>Karibash</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AmplifyでNext.js11系がサポート対象となりました]]></title>
        <id>https://zenn.dev/thim/articles/e16dd195fdee816a868c</id>
        <link href="https://zenn.dev/thim/articles/e16dd195fdee816a868c"/>
        <updated>2021-07-30T10:40:41.000Z</updated>
        <summary type="html"><![CDATA[https://docs.aws.amazon.com/amplify/latest/userguide/server-side-rendering-amplify.html
以下、公式ドキュメントより引用

When you deploy a new Next.js app with Amplify, by default Amplify uses the most recent supported version of Next.js. Currently, Amplify supports Next.js version 11.


Amplify で新しい Next.js アプリ...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「JupyterNotebookを一瞬で記事にするプラットフォーム」Noteboxの現在の技術スタック]]></title>
        <id>https://zenn.dev/fasdfas/articles/839bfc5160a81e</id>
        <link href="https://zenn.dev/fasdfas/articles/839bfc5160a81e"/>
        <updated>2021-07-30T06:22:29.000Z</updated>
        <summary type="html"><![CDATA[Noteboxとは
Noteboxは、「Jupyter Notebookを一瞬でブログ化」がコンセントのサービスです。それ以外はこちらのZennやQiitaと同じようなブログサービスですが、Jupyter Notebookを使う人、つまりデータサイエンスなどのサイエンス領域に特化したプラットフォームです。→https://notebox.jp
動画は↓
https://www.youtube.com/watch?v=IWcUbVnQxkw

 Noteboxができたきっかけ
実は最初はまったく別のプロダクトを作っていました。そのプロダクト上で、Djangoで作ったCMSがあり、「Ju...]]></summary>
        <author>
            <name>Naoya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript & Context APIのdefaultValueの書き方]]></title>
        <id>https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab</id>
        <link href="https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab"/>
        <updated>2021-07-29T17:54:22.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptを書くようになって約6ヶ月経ちました。以前は下記のような書き方をしていましたが、最近新たにプロジェクトを作るとこの書き方では ts(2339) エラーが発生するようになりました。
なぜそのエラーが発生するかの原因はまだ掴めていないのですが、取り急ぎこちらを解決する方法を調べたのでまとめます！
初投稿＆走り書きとなるので今後新たな知見を得たらカイゼンしていこうと思います。

 エラーの内容

与えられた型にcountプロパティが存在しません！

 as をつかって型を与える方法

      
        CountProvider.tsx
        impo...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript & Context APIのdefaultValueの書き方]]></title>
        <id>https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab</id>
        <link href="https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab"/>
        <updated>2021-07-29T17:54:22.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptを書くようになって約6ヶ月経ちました。以前は下記のような書き方をしていましたが、最近新たにプロジェクトを作るとこの書き方では ts(2339) エラーが発生するようになりました。
なぜそのエラーが発生するかの原因はまだ掴めていないのですが、取り急ぎこちらを解決する方法を調べたのでまとめます！
初投稿＆走り書きとなるので今後新たな知見を得たらカイゼンしていこうと思います。

 エラーの内容

与えられた型にcountプロパティが存在しません！

 as をつかって型を与える方法

      
        CountProvider.tsx
        impo...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RTP Payloadのキーフレーム判定方法 VP8/VP9/H264/AV1 編]]></title>
        <id>https://zenn.dev/shinyoshiaki/articles/rtp-payload-keyframe</id>
        <link href="https://zenn.dev/shinyoshiaki/articles/rtp-payload-keyframe"/>
        <updated>2021-07-29T11:35:37.000Z</updated>
        <summary type="html"><![CDATA[趣旨
Chrome の WebRTC で使える代表的なコーデックの RTP Payload をパースして RTP パケットのキーフレーム判定を行う方法についてまとめます。

 RTP Payload とは

      
        
              0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-...]]></summary>
        <author>
            <name>shin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js/成果物に含まれる node_modules を減量する]]></title>
        <id>https://zenn.dev/shztmk/articles/04_reduce_dependency_of_artefact</id>
        <link href="https://zenn.dev/shztmk/articles/04_reduce_dependency_of_artefact"/>
        <updated>2021-07-29T11:08:36.000Z</updated>
        <summary type="html"><![CDATA[動機
JavaScript ( や TypeScript などの AltJS ) で記述されたプロジェクトをデプロイするとき、対象となるサービスに設定されたデプロイパッケージの容量制限を意識せねばならない場合があります。 そういった目的のために、この記事では node_modules パッケージの容量を減らす方法についてまとめます。
node_modules のサイズについては、以下のコマンドなどで確認できます。

      
        
        $ du -d 1 -kh ./node_modules | sort -hr | head -50


      
 ...]]></summary>
        <author>
            <name>shztmk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kysely が Knex をリプレイスする日も近いかもしれない]]></title>
        <id>https://zenn.dev/acro5piano/articles/388b504289ccaa</id>
        <link href="https://zenn.dev/acro5piano/articles/388b504289ccaa"/>
        <updated>2021-07-29T08:40:08.000Z</updated>
        <summary type="html"><![CDATA[Node.js の RDB 向けの Query Builder は Knex が有名ですが、 Kysely というのが台頭しそうな予感がします。
https://github.com/koskimas/kysely
Knex と非常に似た構文をしていますが、大きな違いは、 TypeScript で書かれている ことです。 TS 4.1 で導入された Template Literal Type を駆使し、複雑な Join や As を使ったエイリアスでも可能な限り型推論できるようになっています。
作者の Koskimas 氏は Knex を利用した ORM である Objection.js...]]></summary>
        <author>
            <name>五所和哉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InsightFaceの顔検出結果をNext.jsで可視化してみた]]></title>
        <id>https://zenn.dev/yuyakato/articles/e96b9d8ec289cc</id>
        <link href="https://zenn.dev/yuyakato/articles/e96b9d8ec289cc"/>
        <updated>2021-07-28T17:07:20.000Z</updated>
        <summary type="html"><![CDATA[初めに
先日、InsightFaceとFastAPIを使った顔検出サーバを実装し、「InsightFaceとFastAPIで顔検出サーバを作ってみた」という記事を書きました。
先の記事の中では検出結果として数値が出力されているだけで、どのような結果なのかが確認しづらい状態でした。
今回はその結果を、Next.jsを使って可視化してみたいと思います。
なお本記事には、Next.js自体に関する説明は一切ありません。ご了承ください。

 実行例
文章で説明するよりも実行例を見た方が早いと思うので、女性1人、男女2人ずつが写った画像の認識結果を以下に示します。
なお、画像はぱくたそから以下...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v-dialogでv-cardを開いたときにFooterを固定させてスクロールする方法]]></title>
        <id>https://zenn.dev/harunonsystem/articles/vuetify_v_card_and_footer</id>
        <link href="https://zenn.dev/harunonsystem/articles/vuetify_v_card_and_footer"/>
        <updated>2021-07-28T14:05:45.000Z</updated>
        <summary type="html"><![CDATA[VuetifyのDialogを使ってv-cardを表示させたときにFooterを画面内に固定させる方法を備忘録程度に。

 完成形
せっかちめな人はこちらを参考に。


 Buttonを用意してダイアログを作成

      
         sample.vue
           <v-dialog
      v-model="dialog"
      scrollable
      max-width="300px"
    >
      <template v-slot:activator="{ on, attrs }">
        &l...]]></summary>
        <author>
            <name>はるのん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vim/Neovim】fern.vim で隠しファイル("."などで始まるファイル）を表示する。]]></title>
        <id>https://zenn.dev/purenium/articles/50facb02e93cbd</id>
        <link href="https://zenn.dev/purenium/articles/50facb02e93cbd"/>
        <updated>2021-07-28T11:02:24.000Z</updated>
        <summary type="html"><![CDATA[Vim/Neovim のファイラープラグイン ferm.vim についての記事です。

 環境
Ubuntu 20.04 LTS(WSL2)
Neovim 0.6.0

 事象と解決
.prettierrc、.gitignore などのドットで始まるファイルが含まれているフォルダがあるとします。

これを fern.vim で表示します。すると、.prettierrc などは、表示されないようです。

これを表示するにはどうすればよいでしょうか。
init.vim などの設定ファイルに以下を記述します。

      
        init.vim
        let g:fer...]]></summary>
        <author>
            <name>mumei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人開発した賃貸物件検索サービスのシステム構成と使用技術]]></title>
        <id>https://zenn.dev/choo/articles/84f41ad249c1dd</id>
        <link href="https://zenn.dev/choo/articles/84f41ad249c1dd"/>
        <updated>2021-07-28T09:27:04.000Z</updated>
        <summary type="html"><![CDATA[個人開発で 賃貸物件検索サービス Comfy を作りました。
先週、リリース後の告知ツイートをしたのですが、幸いなことに多くの人にリツイート・いいねの反響を頂きました（リアクションして頂いた方、本当にありがとうございます…!!!）

この記事では、Comfy のシステム構成及び使用した技術・サービスを紹介します。

 システム構成

図の通り、システムは大きく 3 つに分けられます。

フロントエンド
バックエンド
スクレイピング基盤

上記 3 つのサブシステムについて、使用している技術をそれぞれ述べます。

 フロントエンド
Comfy は一切ページ遷移のない SPA（Single ...]]></summary>
        <author>
            <name>choo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescriptで空でない配列を型で表現する]]></title>
        <id>https://zenn.dev/mura_chan/articles/e8c85262f54830</id>
        <link href="https://zenn.dev/mura_chan/articles/e8c85262f54830"/>
        <updated>2021-07-27T16:01:35.000Z</updated>
        <summary type="html"><![CDATA[「空でない配列を表現する型」は需要がありそうで、ググってヒットする日本語の記事が少なかった（和訳されたサイトはあったが純粋な日本語の記事はすぐに出てこなかった）ため、ひとつくらいすぐにヒットする日本語の記事があればと思い、記事にします。
いきなりですがコードは以下です。

      
        
        type NonEmptyArray<T> = [T, ...T[]];


      
      
      
        
        // コンパイルエラー
const numbers: NonEmptyArray<number>...]]></summary>
        <author>
            <name>mura_chan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Improve GraphQL server performance with knex-graphql-utils]]></title>
        <id>https://zenn.dev/acro5piano/articles/32a71345ea35cd</id>
        <link href="https://zenn.dev/acro5piano/articles/32a71345ea35cd"/>
        <updated>2021-07-27T14:55:26.000Z</updated>
        <summary type="html"><![CDATA[I've created a tiny library which improves performance for GraphQL + Knex.

 tl;dr

 Before


 After


Filter select columns based on a query from clients
Load relations without N+1 problem (pagination available!)

https://github.com/acro5piano/knex-graphql-utils
Currently only PostgreSQL is supp...]]></summary>
        <author>
            <name>五所和哉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Nuxtjs】Promise allでパフォーマンス改善について]]></title>
        <id>https://zenn.dev/sengosha/articles/498398d82fb056</id>
        <link href="https://zenn.dev/sengosha/articles/498398d82fb056"/>
        <updated>2021-07-27T14:46:20.000Z</updated>
        <summary type="html"><![CDATA[背景
最近NuxtJSの公式オンラインコース を受講してパフォーマンス周りを改善する方法を勉強したので共有します。

 概要
NuxtのSSRモードでページにアクセス時にasyncDataやfetchで複数のAPIリクエストを投げるのはよくあることです。APIリクエストはasync/waitで非同期処理なので、例えばA、B、Cの３つのリクエストがある場合、BはAが完了してから処理され、CはBが完了してから処理されます。リクエストが多ければ多いほどパフォーマンスに悪影響を与えてしまいます。
Promise.all でAPIリクエストを並列処理させることで、ページアクセスが早くなり、TT...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt x Composition API x Hasura x TypeScriptを実装する]]></title>
        <id>https://zenn.dev/dialbird/articles/a63e9f1c838462</id>
        <link href="https://zenn.dev/dialbird/articles/a63e9f1c838462"/>
        <updated>2021-07-27T13:13:32.000Z</updated>
        <summary type="html"><![CDATA[まずはHasura Cloudでプロジェクトを作っておきましょう
https://hasura.io/docs/latest/graphql/cloud/projects/create.html
接続に必要なGraphQLのAPIエンドポイントと、アクセス時にヘッダーに必要なAdmin Secretを控えておきます

次にNuxtプロジェクトをnpxで作ります

      
        
        $ npx create-nuxt-app nuxt-composable-hasura


      
      次に必要なライブラリ群をインストールしていきましょう（各ライ...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt x Composition API x Hasura x TypeScriptを実装する]]></title>
        <id>https://zenn.dev/dialbird/articles/a63e9f1c838462</id>
        <link href="https://zenn.dev/dialbird/articles/a63e9f1c838462"/>
        <updated>2021-07-27T13:13:32.000Z</updated>
        <summary type="html"><![CDATA[まずはHasura Cloudでプロジェクトを作っておきましょう
https://hasura.io/docs/latest/graphql/cloud/projects/create.html
接続に必要なGraphQLのAPIエンドポイントと、アクセス時にヘッダーに必要なAdmin Secretを控えておきます

次にNuxtプロジェクトをnpxで作ります

      
        
        $ npx create-nuxt-app nuxt-composable-hasura


      
      次に必要なライブラリ群をインストールしていきましょう（各ライ...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-27のJS: vscode-js-debug、 Privacy Sandbox Timeline、小さなブラウザの作り方]]></title>
        <id>https://jser.info/2021/07/27/vscode-js-debug-privacy-sandbox-timeline/</id>
        <link href="https://jser.info/2021/07/27/vscode-js-debug-privacy-sandbox-timeline/"/>
        <updated>2021-07-27T12:52:36.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #550 - vscode-js-debugはVSCodeからブラウザのデバッガーに接続し、JavaScriptをデバッグするVSCode拡張です。
Easier browser debugging with Developer Tools integration in Visual Studio Code - Microsoft Edge Blog
microsoft/vscode-js-debug: The VS Code JavaScript debugger
vscode-js-debugは、ChromeやMSEdgeなどのブラウザのデバッガーに接続できます。
Debug Adapter Protocol(DAP)という、開発ツール(VScodeなど)とデバッガー(ブラウザやNodeなど)を中継するAdapterを利用しています。
DAPはLanguage Server Protocol(LSP)似た形のもので、開発ツールと各種言語の中継となるプロトコルを定めています。
Privacy Sandbox TimelineというサイトでGoogleのPrivacy Sandboxと呼ばれるthird-party cookiesを廃止するためのProposal集に関するロードマップが公開されています。
Privacy Sandboxの各Proposalごとにどのようなスケジュールで、実装やテストをしていくかの予定が公開されています。
ちいさな Web ブラウザを作ってみようでは、Rustでウェブブラウザを作りつつ、ブラウザのレンダリングの仕組みやセキュリティについて学習する教材が公開されています。
現時点ではWIP(Working In Progress)な章もありますが、小さなブラウザをつくりつつブラウザの内部構造について学ぶのが目的となっています。…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplify+Next.js 環境変数設定方法まとめ]]></title>
        <id>https://zenn.dev/thim/articles/04775c68d796445f3c90</id>
        <link href="https://zenn.dev/thim/articles/04775c68d796445f3c90"/>
        <updated>2021-07-27T12:47:14.000Z</updated>
        <summary type="html"><![CDATA[Next.js アプリを Amplify にデプロイする際に環境変数の設定方法でつまづいたので記事にしておきます。

 クライアントサイドで扱う環境変数
クライアントサイド、つまりはブラウザで実行されるソースから参照する環境変数は Amplify コンソールから設定します。

ソースからは以下のように参照可能で非常に簡単です。

      
        
        const TEST = process.env.NEXT_PUBLIC_TEST;


      
      
 サーバーサイドで扱う環境変数
サーバーサイド、つまりは SSR する場合に参照する環境変数はn...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoでHTMLタグを楽に書けるモジュールを作ってレジストリに公開した感想]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/6022552f509b84</id>
        <link href="https://zenn.dev/kawarimidoll/articles/6022552f509b84"/>
        <updated>2021-07-27T11:24:13.000Z</updated>
        <summary type="html"><![CDATA[本記事の主題はDenoの自作モジュールの説明ではなく、Denoのモジュール公開に関する所感について述べるものです。したがってIdea記事です。

 markup-tagをリリースした
先日、markup-tagというモジュールをリリースしました。
https://github.com/kawarimidoll/deno-markup-tag
https://deno.land/x/markup_tag
https://nest.land/package/markup-tag

 機能
プログラム内でHTMLのソースを記述したいときに、

      
        
        c...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[仮想オンライン作業スペースを作った]]></title>
        <id>https://zenn.dev/soraride/articles/89b6455ac62908ffb4d3</id>
        <link href="https://zenn.dev/soraride/articles/89b6455ac62908ffb4d3"/>
        <updated>2021-07-27T10:45:38.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、そらららいどです。
今回はじめて、個人的に開発したWebサービス「オンライン作業部屋」をリリースしましたので紹介したいと思います。

現在、後続の類似サービス「Youtube作業部屋」という24時間ライブ配信によるオンライン自習室も運営していますのでぜひご覧ください。
Youtube作業部屋チャンネル
Youtube作業部屋についても記事を準備中です。



 リンク

Webアプリ
Githubリポジトリ


 オンライン作業部屋とは？
オンライン上の仮想的な作業部屋というコンセプトです。
仕組みはシンプルで、好きな科目と座席を選び、ボタンを押して入室・退室するだけです。
...]]></summary>
        <author>
            <name>そららいど</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで任意のタグ名を設定できるコンポーネントを作る]]></title>
        <id>https://zenn.dev/andynuma/articles/c7f6d6587c116d</id>
        <link href="https://zenn.dev/andynuma/articles/c7f6d6587c116d"/>
        <updated>2021-07-27T04:08:28.000Z</updated>
        <summary type="html"><![CDATA[前書き
as を受け取るコンポーネントはどういうコンポーネントかというと、Chakra UI の Box コンポーネント にいい例があるのですが、

      
        
        <Box as="button" borderRadius="md" px={4} h={8}>
  Button
</Box>


      
      上記のようなコンポーネントです。
このようなコンポーネントを自作する場合に、型をどう付与するかについて Generics を使用する書き方を学んだので備忘録も兼ねて記事にします。
もっと良い方法などあれば教え...]]></summary>
        <author>
            <name>nu0ma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prismaで複数のデータベースを同時に扱う]]></title>
        <id>https://zenn.dev/frog/articles/073af49880452f</id>
        <link href="https://zenn.dev/frog/articles/073af49880452f"/>
        <updated>2021-07-26T19:36:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prismaについてはこちら
参考資料

 対象読者

Prismaを使っている
Node.jsを使っている(もしくは個別に変換して解釈できる)
複数のデータベースを同じプロジェクトで扱う必要がある
とりあえず動かしたい


 手順

Prisma schemaの作成
Prisma clientの生成
Clientのインポート&初期化
それぞれのクライアントを使う


 Prisma schemaの作成
Prismaで複数のデータベースを同時に扱うには、Schemaを複数作成する必要があります。
また、generatorの設定にoutputの項目を追加することで/p...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
</feed>