<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-09-27T00:54:23.190Z</updated>
    <generator>osmosfeed 1.11.2</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[vue-selectでいい感じのセレクトボックスを実装する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/56945521c61341</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/56945521c61341"/>
        <updated>2021-09-26T23:21:17.000Z</updated>
        <summary type="html"><![CDATA[HTMLとCSSでセレクトボックスの装飾をするの意外と面倒ですよね。
なんとか簡単にセレクトボックス作れないかな〜〜と調べたら、ありました。
僕はvue.jsをよく使うので「vue-select」という良さそうなライブラリを使ってみます。

 vue-selectをインストールする
vue-selectをインストールします。

      
        
        npm install vue-select


      
      
 vue-selectをインポートします
僕はLaravelとVueを使っているので、app.jsでインポートします

      
  ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.11.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.2"/>
        <updated>2021-09-26T18:45:39.000Z</updated>
        <summary type="html"><![CDATA[Fixed: unicode characters in URL caused download error
Fixed: project root npm install error
Added: unit test library
Chore: Dependency updates
Thank you: @CaptNo1]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue/CLI と Nuxt.js で IE11 と戦うための知識]]></title>
        <id>https://zenn.dev/kon_karin/articles/75b9808778e362</id>
        <link href="https://zenn.dev/kon_karin/articles/75b9808778e362"/>
        <updated>2021-09-26T12:30:45.000Z</updated>
        <summary type="html"><![CDATA[令和も3年だというのに、仕事でどうしても Internet Explorer 11 と戦わなければならないこと、あると思います。
IE 11 への対応は巷の記事で様々取り扱われていますが、どうも情報が古かったり、とっ散らかってる印象がありました。
そこで、最新の Vue 2.x の環境はどうなんだろう？と思い、Vue/CLI と Nuxt.js の最新バージョン（2021-09-22時点）の Babel によるトランスパイルと Polyfill についてまとめました。
正直、IE 11 について記事を書くのはこれが最後にしたいですね。
今後、可能な限り各 OSS のアップデートに合わせて...]]></summary>
        <author>
            <name>こんかりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Xcode 13 vim mode]]></title>
        <id>https://zenn.dev/tdrk18/articles/xcode-13-vim-mode</id>
        <link href="https://zenn.dev/tdrk18/articles/xcode-13-vim-mode"/>
        <updated>2021-09-26T11:44:06.000Z</updated>
        <summary type="html"><![CDATA[Xcode 13 で vim mode を使う
Xcode 13 で公式に vim mode がサポートされました。
https://developer.apple.com/xcode/

Vim mode
Many common key combinations and editing modes familiar to Vim users are supported directly within the code editor, using the new bottom bar to show mode indicators.


 vim mode を有効にする
Editor...]]></summary>
        <author>
            <name>tdrk18</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim/NeoVimでMarkdownをプレビューするプラグインを作った]]></title>
        <id>https://zenn.dev/kato_k/articles/3aa7217a1636ca</id>
        <link href="https://zenn.dev/kato_k/articles/3aa7217a1636ca"/>
        <updated>2021-09-26T10:31:19.000Z</updated>
        <summary type="html"><![CDATA[初めに
Vim/NeoVim両対応のMarkdownプレビュープラグインを作成しました。
この記事では作った経緯とこのプラグインについて紹介します。

https://github.com/kat0h/dps-bufpreview.vim

 使い方

 インストール
このプラグインはDenoとdenops.vimに依存しています。
初めにDenoを公式のインストールからインストールしてください。
denops.vimは通常のVimプラグインと同じようにインストールしてください。
Plug-Vim:

      
        
        Plug 'vim-denops...]]></summary>
        <author>
            <name>kat0h</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React * TypeScript * Material-UIで、 Youtubeのコメント欄ライクなUIを作る方法]]></title>
        <id>https://zenn.dev/mone9610/articles/f4548546fb8e81</id>
        <link href="https://zenn.dev/mone9610/articles/f4548546fb8e81"/>
        <updated>2021-09-26T06:28:50.000Z</updated>
        <summary type="html"><![CDATA[react_mui_comment_list_mock

 はじめに

 この記事について
ReactとMaterial-UIを用いて、Youtubeのコメント欄ライクなUIを作る方法について解説します。

 完成イメージ


 前提

 使用するデータについて
実際の開発では、「投稿」と「ユーザー」のオブジェクトを別々のテーブルとして、DB上で管理しているケースが多いかと思います。
今回に関しては、APIサーバーからデータを取得するケースを想定します。
「投稿」を意味するデータである"Post"というjson配列、
「ユーザー」を意味するデータの"User"というjson配列を用い...]]></summary>
        <author>
            <name>mone</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[こんにちはMUI！ 新しくなったMaterial UI v5]]></title>
        <id>https://zenn.dev/h_yoshikawa0724/articles/2021-09-26-material-ui-v5</id>
        <link href="https://zenn.dev/h_yoshikawa0724/articles/2021-09-26-material-ui-v5"/>
        <updated>2021-09-26T03:58:52.000Z</updated>
        <summary type="html"><![CDATA[どうもよしです。久しぶりの投稿になります。
元々、Material Design をベースとした UI コンポーネントライブラリである、Material UI の v5 が遂にリリースされました！
v4 からどう変わったのか自分でも試すなど、さらっと見てみたので、ここにまとめてみました。

この記事は、個人ブログへ投稿した記事の転載です。


 Material UI とは？
元々、Google の Material Design をベースに開発された、UI コンポーネントライブラリです。
Material UI の概要や v4 の機能に関しては、以前に記事を書いていますので、よろしけれ...]]></summary>
        <author>
            <name>よし</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでGithub APIを使用する方法(octokit/rest)Typescript]]></title>
        <id>https://zenn.dev/t723/articles/a76c583084f383</id>
        <link href="https://zenn.dev/t723/articles/a76c583084f383"/>
        <updated>2021-09-26T00:07:00.000Z</updated>
        <summary type="html"><![CDATA[octokit/restを利用してリポジトリのコンテンツを参照

 Typescript用のGithub APIを利用するライブラリ
octokit/rest

 インストール
npm i @octokit/rest

 使い方

      
        
        import { Octokit } from "@octokit/rest";


      
      ドキュメント

 認証
Github APIを利用しているとアクセス制限にかかるので認証(GITHUB_TOKEN)を取得し宣言しておきます。
私の場合は、リポジトリのコンテンツにアクセスしたかった...]]></summary>
        <author>
            <name>T_723</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでGithub APIを使用する方法(octokit/rest)Typescript]]></title>
        <id>https://zenn.dev/t723/articles/a76c583084f383</id>
        <link href="https://zenn.dev/t723/articles/a76c583084f383"/>
        <updated>2021-09-26T00:07:00.000Z</updated>
        <summary type="html"><![CDATA[octokit/restを利用してリポジトリのコンテンツを参照

 Typescript用のGithub APIを利用するライブラリ
octokit/rest

 インストール
npm i @octokit/rest

 使い方

      
        
        import { Octokit } from "@octokit/rest";


      
      ドキュメント

 認証
Github APIを利用しているとアクセス制限にかかるので認証(GITHUB_TOKEN)を取得し宣言しておきます。
私の場合は、リポジトリのコンテンツにアクセスしたかった...]]></summary>
        <author>
            <name>T_723</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NextAuth.js と Firebase Authentication の連携]]></title>
        <id>https://zenn.dev/elpnt/articles/1af1047612992d</id>
        <link href="https://zenn.dev/elpnt/articles/1af1047612992d"/>
        <updated>2021-09-25T15:16:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://next-auth.js.org/
NextAuth.js は Next.js のために作られた OSS の認証ライブラリです。
このライブラリは主に OAuth もしくは Email で認証したユーザーの情報やセッションを連携したデータベースで自動管理できるのが売りです。他の認証システムで既に認証済みのユーザーを管理する方法もありはするのですが、OAuth や Email 認証に比べるとあまり分かりやすいサンプルコードがありません。防備録も兼ねて、ここで知見を共有したいと思います。
なお、NextAuth ではログイン中のユーザーの情報は firebase...]]></summary>
        <author>
            <name>elpnt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsのトレイリングスラッシュ設定により404ページをNetlifyで表示できない場合の対処方法(Typescript)]]></title>
        <id>https://zenn.dev/t723/articles/f63785a12e3280</id>
        <link href="https://zenn.dev/t723/articles/f63785a12e3280"/>
        <updated>2021-09-25T12:29:15.000Z</updated>
        <summary type="html"><![CDATA[Next.jsのバージョン
執筆時点(2021/9/25)でのバージョン11.1.2の最新を使っています。

 トレイリングスラッシュ設定とUrlの関係について
next.config.jsに下記のように記載がある場合はトレイリングスラッシュが設定されています。

      
        
        module.exports = {
  trailingSlash: true,
}


      
      この設定をしていると/posts/hello.html -> /posts/hello/index.htmlでアクセスできるようになります。
404ペー...]]></summary>
        <author>
            <name>T_723</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsのトレイリングスラッシュ設定により404ページをNetlifyで表示できない場合の対処方法(Typescript)]]></title>
        <id>https://zenn.dev/t723/articles/f63785a12e3280</id>
        <link href="https://zenn.dev/t723/articles/f63785a12e3280"/>
        <updated>2021-09-25T12:29:15.000Z</updated>
        <summary type="html"><![CDATA[Next.jsのバージョン
執筆時点(2021/9/25)でのバージョン11.1.2の最新を使っています。

 トレイリングスラッシュ設定とUrlの関係について
next.config.jsに下記のように記載がある場合はトレイリングスラッシュが設定されています。

      
        
        module.exports = {
  trailingSlash: true,
}


      
      この設定をしていると/posts/hello.html -> /posts/hello/index.htmlでアクセスできるようになります。
404ペー...]]></summary>
        <author>
            <name>T_723</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooks と TypeScript でつくる Todo PWA アプリ]]></title>
        <id>https://zenn.dev/sprout2000/books/76a279bb90c3f3</id>
        <link href="https://zenn.dev/sprout2000/books/76a279bb90c3f3"/>
        <updated>2021-09-25T07:51:49.000Z</updated>
        <summary type="html"><![CDATA[React と TypeScript でつくるプログレッシブ・ウェブアプリ入門]]></summary>
        <author>
            <name>k_touge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Recoil入門① 主要機能の説明]]></title>
        <id>https://zenn.dev/nisitin/articles/42d8afd7203282</id>
        <link href="https://zenn.dev/nisitin/articles/42d8afd7203282"/>
        <updated>2021-09-25T06:03:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Recoil歴の短い若造なので間違っている点・こうしたほうがパフォーマンスにも良さそう！などがあればコメントいただけると助かります。
コメントの数だけスクワットします。冗談です。

 Recoilの環境構築と主要機能

      
        
        yarn add recoil


      
      
 インストールできたけどRecoilって何者なの？？
Recoilは2020年5月にFacebookによって開発された状態管理ライブラリです。RecoilはReduxと同様にState管理ができるライブラリでもあります。
状態管理とは何か？？という...]]></summary>
        <author>
            <name>ニシティン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Promise.all で同時に実行される数を制限したい]]></title>
        <id>https://zenn.dev/tsugitta/articles/concurrency-lock</id>
        <link href="https://zenn.dev/tsugitta/articles/concurrency-lock"/>
        <updated>2021-09-25T05:36:58.000Z</updated>
        <summary type="html"><![CDATA[Promise.all で同時に実行される数を制限したい


Promise Pool のようなライブラリがある


それに加えて、100 並行で動かすとして突然 100 個の処理を実行し始めるのでなく、少しずつ 100 に向けて増やしていきたい

例えば最小実行間隔を設けるようにしたい




 実装

      
        
        export class ConcurrencyLock {
  private readonly concurrency: number;
  private readonly interval: number;

  privat...]]></summary>
        <author>
            <name>tsugitta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsで、Apollo Client設定メモ]]></title>
        <id>https://zenn.dev/knaka0209/articles/36ce5834d2f73e</id>
        <link href="https://zenn.dev/knaka0209/articles/36ce5834d2f73e"/>
        <updated>2021-09-25T05:14:25.000Z</updated>
        <summary type="html"><![CDATA[概要:
next.js 11 で、Apollo Client設定内容となります

apollo Serverは、事前に設置したり。しておきます



 環境

node : 14.17
next.js : 11.1.2
@apollo/client: 3.4.13



 関連
https://www.apollographql.com/blog/apollo-client/next-js/next-js-getting-started


 参考のコード
https://github.com/kuc-arc-f/nextjs11_2apollo


next.js / npm の追...]]></summary>
        <author>
            <name>knaka Tech-Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 11で、ESLint設定メモ]]></title>
        <id>https://zenn.dev/knaka0209/articles/53a679da7ba502</id>
        <link href="https://zenn.dev/knaka0209/articles/53a679da7ba502"/>
        <updated>2021-09-25T00:57:08.000Z</updated>
        <summary type="html"><![CDATA[概要:
next.js 11 で、ESLint 対応されているようでしたので
試したメモとなります


 環境

node : 14.17
next.js : 11.1.2
ESLint : 7.32.0



 関連
https://zenn.dev/thiragi/articles/555a644b35ebc1
https://qiita.com/howdy39/items/6e2c75861bc5a14b2acf


 参考のコード
https://github.com/kuc-arc-f/nextjs11_1eslint

.eslintrc.json
ruleは、適当に設定...]]></summary>
        <author>
            <name>knaka Tech-Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでグローバルな型定義ファイルを用意する]]></title>
        <id>https://zenn.dev/fagai/articles/7f76a3b3b5a415</id>
        <link href="https://zenn.dev/fagai/articles/7f76a3b3b5a415"/>
        <updated>2021-09-24T16:26:48.000Z</updated>
        <summary type="html"><![CDATA[プロジェクトで、同じ型を別のファイルで使うことがあり、共通のinterfaceやtypeをどこかに定義して自動で読みたいなーと思い、調べてみました。
調べてみると、最初はtypeRootsの話が出てきたのですがどうやら私がしたいものはそうではないようです。(///から始まったりする型定義ファイルを書くのがtypeRoots)
どうやらtsconfig.jsonのpathsに書けば良いらしい。

      
        tsconfig.json
        {
  "compilerOptions: {
    "paths": {
      "*": ["./types/*...]]></summary>
        <author>
            <name>fagai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で SNS アカウント認証！]]></title>
        <id>https://zenn.dev/ryoka419319/articles/4518625e1b5b74</id>
        <link href="https://zenn.dev/ryoka419319/articles/4518625e1b5b74"/>
        <updated>2021-09-24T12:46:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回、Next.js について調べてみたので、今回はよく使うアカウント認証について、アプリケーションを作ってみようと思います。
Next.js を開発している Vercel が作っている NextAuth.js を使用します。

 アプリを作ってみる
sample という名前でアカウント認証付きのアプリケーションを作成します。

 1. まずは、Hello world！

      
        
        $ yarn create next-app --typescript
$ cd sample
$ yarn add next-auth
$ yarn a...]]></summary>
        <author>
            <name>ITEEK 上川</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で SNS アカウント認証！]]></title>
        <id>https://zenn.dev/ryoka419319/articles/4518625e1b5b74</id>
        <link href="https://zenn.dev/ryoka419319/articles/4518625e1b5b74"/>
        <updated>2021-09-24T12:46:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回、Next.js について調べてみたので、今回はよく使うアカウント認証について、アプリケーションを作ってみようと思います。
Next.js を開発している Vercel が作っている NextAuth.js を使用します。

 アプリを作ってみる
sample という名前でアカウント認証付きのアプリケーションを作成します。

 1. まずは、Hello world！

      
        
        $ yarn create next-app --typescript
$ cd sample
$ yarn add next-auth
$ yarn a...]]></summary>
        <author>
            <name>ITEEK 上川</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React の フレームワーク、Next.js に入門！]]></title>
        <id>https://zenn.dev/ryoka419319/articles/82e92b209a9fc9</id>
        <link href="https://zenn.dev/ryoka419319/articles/82e92b209a9fc9"/>
        <updated>2021-09-24T11:09:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.js は本番環境のための React フレームワークで主に以下のような特徴があります。

画像最適化
国際化ルーティング
Next.js アナリティクス
ゼロコンフィグ
ハイブリッド SSG・SSR
ISR（Incremental Static Regeneration）
TypeScript サポート
ファスト・リフレッシュ
ファイルシステムルート
API ルーティング
ビルトイン CSS サポート
コード分割とバンドリング

今回は、これらの特徴について、説明していきたいと思います。

 特徴

 画像最適化
https://nextjs.org/docs/...]]></summary>
        <author>
            <name>ITEEK 上川</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue.js 3.2】`<script setup>` 構文がすごくすごい]]></title>
        <id>https://zenn.dev/azukiazusa/articles/676d88675e4e74</id>
        <link href="https://zenn.dev/azukiazusa/articles/676d88675e4e74"/>
        <updated>2021-09-24T08:15:03.000Z</updated>
        <summary type="html"><![CDATA[<script setup> 構文とは
Vue.js 3.2 から <script setup> 構文が使えるようになりました。これは単一ファイルコンポーネント(SFC)内で Composition API を使用している際に使える糖衣構文です。下記のようなメリットを得ることができ、公式からも使用が推奨されています。

ポイラープレートが減りより簡潔になる
props と emit を定義する際に純粋な TypeScript の構文が使える
ランタイムのパフォーマンスが向上する
IDE のパフォーマンスが向上する


 基本的な構文
<script se...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue.js 3.2】`<script setup>` 構文がすごくすごい]]></title>
        <id>https://zenn.dev/azukiazusa/articles/676d88675e4e74</id>
        <link href="https://zenn.dev/azukiazusa/articles/676d88675e4e74"/>
        <updated>2021-09-24T08:15:03.000Z</updated>
        <summary type="html"><![CDATA[<script setup> 構文とは
Vue.js 3.2 から <script setup> 構文が使えるようになりました。これは単一ファイルコンポーネント(SFC)内で Composition API を使用している際に使える糖衣構文です。下記のようなメリットを得ることができ、公式からも使用が推奨されています。

ポイラープレートが減りより簡潔になる
props と emit を定義する際に純粋な TypeScript の構文が使える
ランタイムのパフォーマンスが向上する
IDE のパフォーマンスが向上する


 基本的な構文
<script se...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel Jetstream+SocialiteでSNS認証]]></title>
        <id>https://zenn.dev/yamabiko/articles/jetstream-socialite</id>
        <link href="https://zenn.dev/yamabiko/articles/jetstream-socialite"/>
        <updated>2021-09-24T06:26:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事を読むと、Laravel JetstreamでSocialiteによりSNS認証できるようになります。
また、Jetstream全ての機能でパスワード確認を必要としないシングルサイオンを実現できるようになります。
それだけではなく、SNS認証後に二段階認証をすることが可能になります。

 対象となる読者
Socialiteの知識があり、Jetstreamに導入したい方向け

 前提

Jetstreamのフロントエンド実装としてVueを使用しています
チーム機能を有効化しています
多言語化(i18n)対応済みです
この記事ではSNSの例としてGitHub、GitLa...]]></summary>
        <author>
            <name>やまびこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[出来る100%TypeScript   作って学ぶNext.js + GraphQL + Prisma(下) - GCP編]]></title>
        <id>https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c</id>
        <link href="https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c"/>
        <updated>2021-09-24T03:47:24.000Z</updated>
        <summary type="html"><![CDATA[クリスマスまでには出版される予定になっている]]></summary>
        <author>
            <name>oubakiou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[出来る100%TypeScript   作って学ぶNext.js + GraphQL + Prisma(下) - GCP編]]></title>
        <id>https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c</id>
        <link href="https://zenn.dev/oubakiou/books/0e7ab2e09ebe1c"/>
        <updated>2021-09-24T03:47:24.000Z</updated>
        <summary type="html"><![CDATA[クリスマスまでには出版される予定になっている]]></summary>
        <author>
            <name>oubakiou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[出来る100%TypeScript  作って学ぶNext.js + GraphQL + Prisma(上) - GCP編]]></title>
        <id>https://zenn.dev/oubakiou/books/181b750dfb6838</id>
        <link href="https://zenn.dev/oubakiou/books/181b750dfb6838"/>
        <updated>2021-09-24T03:46:49.000Z</updated>
        <summary type="html"><![CDATA[クライアントサイドでは広く普及したTypeScriptですが、その一方サーバーサイドでは比較すると緩やかな採用拡大に留まっています。もしも両方を一貫してTypeScriptでの開発が出来たら？

本書ではTypeScriptの強みである静的型の力を最大限活かした構成でのアプリケーション開発について、SNS開発を題材に学べる実践的なチュートリアルです。]]></summary>
        <author>
            <name>oubakiou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[出来る100%TypeScript  作って学ぶNext.js + GraphQL + Prisma(上) - GCP編]]></title>
        <id>https://zenn.dev/oubakiou/books/181b750dfb6838</id>
        <link href="https://zenn.dev/oubakiou/books/181b750dfb6838"/>
        <updated>2021-09-24T03:46:49.000Z</updated>
        <summary type="html"><![CDATA[クライアントサイドでは広く普及したTypeScriptですが、その一方サーバーサイドでは比較すると緩やかな採用拡大に留まっています。もしも両方を一貫してTypeScriptでの開発が出来たら？

本書ではTypeScriptの強みである静的型の力を最大限活かした構成でのアプリケーション開発について、SNS開発を題材に学べる実践的なチュートリアルです。]]></summary>
        <author>
            <name>oubakiou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[useSWR で作る Form 画面の備忘録]]></title>
        <id>https://zenn.dev/takepepe/articles/form-with-useswr</id>
        <link href="https://zenn.dev/takepepe/articles/form-with-useswr"/>
        <updated>2021-09-24T03:03:28.000Z</updated>
        <summary type="html"><![CDATA[管理画面のような CRUD 中心のプロダクトでは Form と CSR をよく利用します。SWR は開発体験に優れたライブラリですが、Form に利用する場合注意点があるので、備忘録として共有します（広義の SWR と紛わない様に、タイトルはuseSWRとしました）

 視覚的安定性とキャッシュ
はじめに、SWR や React Query を利用するモチベーションについて言及します。SWR は一意のキーに紐づいたキャッシュが無い場合、loading fallback を表示します。fallback 表示はたとえ一瞬であっても「チカっ」とした表示になるため「スムーズではない印象」を利用者...]]></summary>
        <author>
            <name>Takepepe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactからVue3に移行した理由と感想]]></title>
        <id>https://zenn.dev/masa0317/articles/3f09fce580302e</id>
        <link href="https://zenn.dev/masa0317/articles/3f09fce580302e"/>
        <updated>2021-09-24T00:29:23.000Z</updated>
        <summary type="html"><![CDATA[去年の末から開発しているWEBアプリでVue3を利用してます。
ここ数年のWEB開発はずっとReactを使っていましたが、色々と不満が蓄積していたので、思い切って他のフレームワークを利用することにしました。
そして、色々なフレームワークを検証して分かったのは、
いまや、React以外のフレームワークでもフロント開発は問題ない
ということでした。
この記事では、ReactからVue3に移行した理由、ReactからVue3にして良かった点と悪かった点を記載します。

 React
フロントの開発でReactを使うのは、ここ数年のフロントエンドでは最も標準的な選択です。
私が初めてReactに...]]></summary>
        <author>
            <name>masa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[svgファイルをReactコンポーネントに変換する方法]]></title>
        <id>https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d</id>
        <link href="https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d"/>
        <updated>2021-09-23T20:48:45.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
.svg を .tsx の拡張子に変換したい

 技術選定

React
TypeScript
Next.js


 実現方法
SVGRというツールを用いることで簡単に実現できた

 前提知識

 SVGRとは何か？

      
        
        svgファイル から Reactコンポーネント にコマンド1つで簡単に変換できる CLI ツール


      
      
 SVGR の基本構成

      
        
        svgファイル（.svg） → SVGR → React Component（.jsx | .tsx）
...]]></summary>
        <author>
            <name>Kimura Kazuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[svgファイルをReactコンポーネントに変換する方法]]></title>
        <id>https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d</id>
        <link href="https://zenn.dev/k_kazukiiiiii/articles/ea6e1135c2af3d"/>
        <updated>2021-09-23T20:48:45.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
.svg を .tsx の拡張子に変換したい

 技術選定

React
TypeScript
Next.js


 実現方法
SVGRというツールを用いることで簡単に実現できた

 前提知識

 SVGRとは何か？

      
        
        svgファイル から Reactコンポーネント にコマンド1つで簡単に変換できる CLI ツール


      
      
 SVGR の基本構成

      
        
        svgファイル（.svg） → SVGR → React Component（.jsx | .tsx）
...]]></summary>
        <author>
            <name>Kimura Kazuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vuepressでポートフォリオ作成ハンズオン]]></title>
        <id>https://zenn.dev/wataru72v/books/wataru72v-vuepress-portfolio</id>
        <link href="https://zenn.dev/wataru72v/books/wataru72v-vuepress-portfolio"/>
        <updated>2021-09-23T15:40:12.000Z</updated>
        <summary type="html"><![CDATA[Vuepressでポートフォリオ作成ハンズオン]]></summary>
        <author>
            <name>wataru72v</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テストサーバー建てるの面倒くさいからモックサーバーツールを作った]]></title>
        <id>https://zenn.dev/gari8/articles/af95c50a2b688b</id>
        <link href="https://zenn.dev/gari8/articles/af95c50a2b688b"/>
        <updated>2021-09-23T15:00:22.000Z</updated>
        <summary type="html"><![CDATA[なぜ作ったか
最近フロントが面白くてNext.jsだのReact.jsを書いていたんですが、サーバーを作るまでモックを内部コードに抱えながら書いていました。
しかしそうすると、API通信周りが軒並みTODOになってしまい、最終的なコード改修が割と多くなってしまいます ↓。

      
         hoge.ts
        import * as mock from "./data.json"

// データを全権取得
const getDataList = (): Data[] => {
   const list =  mock.list;
   // TOD...]]></summary>
        <author>
            <name>gari8</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supabase Storage Usage Memo]]></title>
        <id>https://zenn.dev/yun8boo/articles/74e0f6994a93c9</id>
        <link href="https://zenn.dev/yun8boo/articles/74e0f6994a93c9"/>
        <updated>2021-09-23T14:41:39.000Z</updated>
        <summary type="html"><![CDATA[Supabaseとは
公式ドキュメント見てもらえればなと。

 Storage Usage
Storageの基本的な操作をざっくりメモ程度に残す。
※supabase clientの初期化などは行っていることを前提

 アップロード
from.upload()
e.g. avatarsバケットにアップロード

      
        
        const avatarFile = event.target.files[0]
const { data, error } = await supabase
  .storage
  .from('avatars')
  .up...]]></summary>
        <author>
            <name>yun8boo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[jsでgroup byするメモ]]></title>
        <id>https://zenn.dev/sbleru/articles/450d98407312ba</id>
        <link href="https://zenn.dev/sbleru/articles/450d98407312ba"/>
        <updated>2021-09-23T09:11:14.000Z</updated>
        <summary type="html"><![CDATA[WHY
オブジェクトのリストに対して、SQLのようにgroup byしてcountしたオブジェクトが欲しかった

 HOW

オブジェクトのパラメータにcountを追加するのではなく、ひとつ階層を増やして、dataに元のオブジェクトを、count にカウント数を入れるようにした。

listに渡されるオブジェクトは同じ型を持ったオブジェクトである想定


reduceでカウントして、最後mapで整形


      
        
        export const groupBy = <T, K extends keyof T>(
  list: T[],
 ...]]></summary>
        <author>
            <name>ぶれる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[expoのOTAを--no-publishとpublish:setを使ってなるべく安全に扱う]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-09-16-expo-ota-with-publish-set</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-09-16-expo-ota-with-publish-set"/>
        <updated>2021-09-23T04:55:05.000Z</updated>
        <summary type="html"><![CDATA[Expoはビルドをサーバーで行ってくれたり、React nativeにまつわる様々な問題を対処してくれるとても良いツールだ。
ExpoにはOTAの機能もついており、デフォルトで動作するようになっているが、若干便利さが重視されており、プロダクション向けに使うには色々考えることが必要だった。
expoをオレオレバージョニングしながら色々やりくりしていたが、やはりリリースサイクルを早めたくなるとOTAをちゃんと使っていきたいという気持ちになったので考えた。
なお、ExpoのOTAの基礎的な部分については解説を省略している箇所があるため、詳細な点など知りたい場合は下記の記事などが手助けになるだろ...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでSSRを限界まで簡単に実現する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/4498ad794002c3</id>
        <link href="https://zenn.dev/sora_kumo/articles/4498ad794002c3"/>
        <updated>2021-09-23T04:39:31.000Z</updated>
        <summary type="html"><![CDATA[１．getInitialPropsの終焉

 1.1. Next.jsではgetInitialPropsのSSRが終わったことにされている
Next.jsの9.3以降、getStaticPropsやgetServerSidePropsが登場し、現在ではgetInitialPropsを使ったSSRが終焉を迎えたかのような風潮となっています。しかしgetStaticPropsとgetServerSidePropsは、実際の所で大きな欠点を抱えています。
getStaticPropsはSSG前提で使うなら全く問題ありません。しかし、ある程度の更新頻度をもつシステムやリアルタイムな編集機能と...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでSSRを限界まで簡単に実現する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/4498ad794002c3</id>
        <link href="https://zenn.dev/sora_kumo/articles/4498ad794002c3"/>
        <updated>2021-09-23T04:39:31.000Z</updated>
        <summary type="html"><![CDATA[１．getInitialPropsの終焉

 1.1. Next.jsではgetInitialPropsのSSRが終わったことにされている
Next.jsの9.3以降、getStaticPropsやgetServerSidePropsが登場し、現在ではgetInitialPropsを使ったSSRが終焉を迎えたかのような風潮となっています。しかしgetStaticPropsとgetServerSidePropsは、実際の所で大きな欠点を抱えています。
getStaticPropsはSSG前提で使うなら全く問題ありません。しかし、ある程度の更新頻度をもつシステムやリアルタイムな編集機能と...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React コンテキストの真の使い方（useContext）]]></title>
        <id>https://zenn.dev/sora_kumo/articles/7f38cab4792446</id>
        <link href="https://zenn.dev/sora_kumo/articles/7f38cab4792446"/>
        <updated>2021-09-23T00:48:25.000Z</updated>
        <summary type="html"><![CDATA[※ ジョーク記事です
※ ジョークですが、プログラムはきちんと動きます
ソースコード https://github.com/SoraKumo001/next-context
動作確認 https://next-context-ten.vercel.app/

 コンテキストについて
下記の公式ドキュメントでコンテキストはこのように説明されています。

コンテクストは各階層で手動でプロパティを下に渡すことなく、コンポーネントツリー内でデータを渡す方法を提供します。

つまり、ツリー内で有効となるデータ領域です。
それ以上を期待すると残念なことになるので、とにかくタダのデータ領域だと思いまし...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React コンテキストの真の使い方（useContext）]]></title>
        <id>https://zenn.dev/sora_kumo/articles/7f38cab4792446</id>
        <link href="https://zenn.dev/sora_kumo/articles/7f38cab4792446"/>
        <updated>2021-09-23T00:48:25.000Z</updated>
        <summary type="html"><![CDATA[※ ジョーク記事です
※ ジョークですが、プログラムはきちんと動きます
ソースコード https://github.com/SoraKumo001/next-context
動作確認 https://next-context-ten.vercel.app/

 コンテキストについて
下記の公式ドキュメントでコンテキストはこのように説明されています。

コンテクストは各階層で手動でプロパティを下に渡すことなく、コンポーネントツリー内でデータを渡す方法を提供します。

つまり、ツリー内で有効となるデータ領域です。
それ以上を期待すると残念なことになるので、とにかくタダのデータ領域だと思いまし...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TypeScript】type派？interface派？僕はもちろんtype派]]></title>
        <id>https://zenn.dev/hk_206/articles/a4abda20d8b14d</id>
        <link href="https://zenn.dev/hk_206/articles/a4abda20d8b14d"/>
        <updated>2021-09-23T00:08:50.000Z</updated>
        <summary type="html"><![CDATA[TypeScript？

 型付けできるJavaScript

      
        
        let age: number = 0;

age = 28;

age = "ぞんぞん"; //エラー


      
      
 いろんな型



型
意味
例




string
文字列
'ぞんぞん'


number
数値
28


boolean
真偽値
true


[]
配列
string[] → ['aaa', 'bbb', 'ccc']


any
制約なし





 オブジェクトの型は？

 普通に書くと読みづらい、管理しづらい🥺(ぱおん)

...]]></summary>
        <author>
            <name>hokuto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[frourio の Methods を型安全に定義する]]></title>
        <id>https://zenn.dev/yutaro_elk/articles/c65052449a6212</id>
        <link href="https://zenn.dev/yutaro_elk/articles/c65052449a6212"/>
        <updated>2021-09-22T23:35:08.000Z</updated>
        <summary type="html"><![CDATA[三行まとめ

npm i aspida

type DefineMethods<T extends AspidaMethods> = T;を定義

DefineMethodsでより型安全な世界


 frourio はとっても型安全
frourio は Methods として API の型を一つだけ定義すればフロントエンド、バックエンド間の疎通を TypeScript で静的に検査できるフルスタックフレームワークです。
例えば、

      
        index.ts
        export type Methods = {
  get: {
    re...]]></summary>
        <author>
            <name>yutaro_elk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.js x Chrome Extension x Salesforceで便利ツールを開発]]></title>
        <id>https://zenn.dev/karaageeeee/articles/80dff29498e925</id>
        <link href="https://zenn.dev/karaageeeee/articles/80dff29498e925"/>
        <updated>2021-09-22T16:07:41.000Z</updated>
        <summary type="html"><![CDATA[Let's try

 テンプレ生成ツール
vue-web-extensionというツールを使うと、Vue.jsを使ったChrome Extensionのテンプレを生成することができます。
vueのcliをインストールしていない場合はまず以下のコマンドを実行。

      
        
        npm i -g @vue/cli-init


      
      次のコマンドで、Chrome Extensionのテンプレを生成

      
        
        vue init kocal/vue-web-extension helloworld...]]></summary>
        <author>
            <name>からあげ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel x VueにVue Routerを導入しコンポーネントを切り替える]]></title>
        <id>https://zenn.dev/karaageeeee/articles/9ba4228248efe2</id>
        <link href="https://zenn.dev/karaageeeee/articles/9ba4228248efe2"/>
        <updated>2021-09-22T15:39:19.000Z</updated>
        <summary type="html"><![CDATA[Vue Routerを導入する
まずはnpmでVue Routerをインストールしましょう。

      
        
        npm install vue-router


      
      切り替えるページコンポーネントを簡単に作ります。
resources/jsにpagesディレクトリを作成しその中にIndex.vueとAbout.vueを作ります。
Index.vue

      
        
        <template>
    <div>
        Index
    </div>
<...]]></summary>
        <author>
            <name>からあげ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase SDK v9, Recoil で Next.js アプリの Google ログインを実装する]]></title>
        <id>https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9</id>
        <link href="https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9"/>
        <updated>2021-09-22T13:23:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では TypeScript で書かれた Next アプリに Firebase JavaScript SDK v9 を利用して Google ログインを実装する方法について書きます. 認証するユーザは Recoil で管理します. Context API で管理する方法はこちらの記事で書いています.
また, 前述した記事に載っていますので, この記事では Firebase プロジェクトの作成, Google プロバイダの有効化などの詳しい手順は省略させて頂きます.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘して...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase SDK v9, Recoil で Next.js アプリの Google ログインを実装する]]></title>
        <id>https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9</id>
        <link href="https://zenn.dev/minguu42/articles/20210922-nextjs-firebase-v9"/>
        <updated>2021-09-22T13:23:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では TypeScript で書かれた Next アプリに Firebase JavaScript SDK v9 を利用して Google ログインを実装する方法について書きます. 認証するユーザは Recoil で管理します. Context API で管理する方法はこちらの記事で書いています.
また, 前述した記事に載っていますので, この記事では Firebase プロジェクトの作成, Google プロバイダの有効化などの詳しい手順は省略させて頂きます.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘して...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[カーソル移動がとにかく気持ちいいNeovim - Neovide]]></title>
        <id>https://zenn.dev/hisasann/articles/neovim-fvim-neovide</id>
        <link href="https://zenn.dev/hisasann/articles/neovim-fvim-neovide"/>
        <updated>2021-09-22T13:20:53.000Z</updated>
        <summary type="html"><![CDATA[ふだんは Neovim でドキュメントを書いたりプログラミングをしたりしていますが、ちょっと前に見て放置していた Neovide という Neovim の GUI のカーソル移動がとにかくかっこいいので試してみました。

 neovide
neovide/neovide: No Nonsense Neovim Client in Rust
https://www.youtube.com/watch?v=uMtfl6vpT-Q
動画を撮ってみました。
どうですか？雰囲気は伝わったかなーと思います。
一部アイコンフォントが当たっていませんがいったんは気にしないでおきます。
カーソルがかっちょ...]]></summary>
        <author>
            <name>Yoshiyuki Hisamatsu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[二次元配列を回転や反転させる方法]]></title>
        <id>https://zenn.dev/kanoi/articles/f3a86f99cdce44</id>
        <link href="https://zenn.dev/kanoi/articles/f3a86f99cdce44"/>
        <updated>2021-09-22T10:27:09.000Z</updated>
        <summary type="html"><![CDATA[二次元配列の回転や反転は、ゲームなどを作るときにたま～に使うので備忘録として記します。

 サンプルコード
サンプルコードを用意しました。分かりやすいように二次元配列に対応した図形を表示しており、回転,反転ボタンを押すことで二次元配列が回転,反転し、その結果図形も回転,反転したものが表示されるようにしています。
こちらのコードは、React＋TypeScriptを使用していますが、ロジック部分は素のJavaScriptとほとんど変わりません。


 回転
サンプルコードの中から、二次元配列を右に90度回転させた配列を生成する部分だけを抜き出しました。

      
        
 ...]]></summary>
        <author>
            <name>カノイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno Deploy専用のSSGを作った]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/a30d49f46bd773</id>
        <link href="https://zenn.dev/kawarimidoll/articles/a30d49f46bd773"/>
        <updated>2021-09-22T10:15:07.000Z</updated>
        <summary type="html"><![CDATA[本記事はtoranoana.deno #1の発表資料です。
https://yumenosora.connpass.com/event/223214/

Deno Deployで動くSSGを作りました。
その名もDiplodocusです。
https://github.com/kawarimidoll/deno-diplodocus
名前のDiplodocusはDeploy docsからの連想です。
https://ja.wikipedia.org/wiki/ディプロドクス

 なぜつくったか
Denoモジュールや関連プロダクトは増えていますが、解説ドキュメントをGitHub Pages...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[andのpro-formの type="select"がちゃんと表示されない... ...]]></title>
        <id>https://zenn.dev/tikashi/articles/fe6d57c4a1f5be</id>
        <link href="https://zenn.dev/tikashi/articles/fe6d57c4a1f5be"/>
        <updated>2021-09-22T02:19:31.000Z</updated>
        <summary type="html"><![CDATA[antd pro-formのshchema-form
を使っていたら下記のコードで詰まった。

      
        
        const userEnum = {
  1: 'ユーザー１',
  2: 'ユーザー2',
  3: 'ユーザー3',
};

type Task = {
  id: number
  name: string
  userId: number
}

<BetaSchemaForm<Task>
        trigger={<a>登録</a>}
        layoutType="Embed"
...]]></summary>
        <author>
            <name>tikashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WASMのサイズでかすぎね？: Rustが征く(6)]]></title>
        <id>https://zenn.dev/dozo/articles/14b76b561f3b45</id>
        <link href="https://zenn.dev/dozo/articles/14b76b561f3b45"/>
        <updated>2021-09-22T01:10:33.000Z</updated>
        <summary type="html"><![CDATA[wasm-optを設定する
関連記事:
Rustが征くシリーズ過去記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)
SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)
WASMのサイズでかすぎね？: Rustが征く(6)     ← イマココ


WebでWebAs...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DRYを間違って適応するとどうなるのか]]></title>
        <id>https://zenn.dev/dove/articles/e046bd69a93464</id>
        <link href="https://zenn.dev/dove/articles/e046bd69a93464"/>
        <updated>2021-09-21T13:45:15.000Z</updated>
        <summary type="html"><![CDATA[DRY(Don't Repeat Yourself!)原則ありますね。昔はコードの二重化をなくすことと考えられていましたが、現在では「知識」の二重化なくす原則と考えられています。達人プログラマーでも以下のように述べられています。

コードの二重化すべてが知識の二重化というわけではないワインの注文アプリで、顧客の年齢を認証し、注文本数を受け付けるモジュールを開発していると考えてください。


      
        
        def  validate_age(value):
  validate_type(value,:integer)
  validate_min_int...]]></summary>
        <author>
            <name>ハトすけ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsをDockerでdeployするとpermission deniedが出る]]></title>
        <id>https://zenn.dev/ucwork/articles/dc993c8494d65e</id>
        <link href="https://zenn.dev/ucwork/articles/dc993c8494d65e"/>
        <updated>2021-09-21T12:27:35.000Z</updated>
        <summary type="html"><![CDATA[概要
やっとローカルのインフラ周りができてきたので
次は認証認可を実装していきたい🏄‍♂️
....が、なんかフロントエンド見えるものがないとやりずらいので
Next.jsをMinikube + Istio環境にデプロイしてみたら
実行時にpermission deniedエラーが出てちょっと詰まったのでメモ

 雑談
せっかくprivateで作ってるアプリだし
マイクロフロントエンドやってみようかと思って結構調べたけど
相当上手に設計できないと利点以上に困難さが発生する未来しか見えなかったので断念...
技術がNext.js, Reactに縛られるけど
一旦コンポーネントをマイクロ...]]></summary>
        <author>
            <name>ucwork</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElectronのIPC通信にGraphQLを使う]]></title>
        <id>https://zenn.dev/kaorun343/articles/654a9673863388</id>
        <link href="https://zenn.dev/kaorun343/articles/654a9673863388"/>
        <updated>2021-09-21T10:42:35.000Z</updated>
        <summary type="html"><![CDATA[動機
ElectronのIPC通信は特にメインプロセスとレンダラープロセスでデータのやりとりをする場合に使われます。昨今のセキュリティ向上の流れでレンダラープロセスからメインプロセスで使うモジュールを直接呼び出すことは避けられるようになり、IPC通信を介して実現することが多くなっています。
しかしながらIPC通信の種類が増えるとその管理が非常に大変になります。特に引数やキーワードのチェックがなく、正しいデータを送受信しているのか確認するのが大変です。
そこで今回はIPC通信にGraphQLを使ってみようと思います。これによりGraphQLの機能で上記の課題を解決できます。

 方法
...]]></summary>
        <author>
            <name>kaorun343</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtでthree.jsを使って3Dモデルを読み込みたい]]></title>
        <id>https://zenn.dev/kaito_takase/articles/f334ada1dadf6b</id>
        <link href="https://zenn.dev/kaito_takase/articles/f334ada1dadf6b"/>
        <updated>2021-09-21T08:04:59.000Z</updated>
        <summary type="html"><![CDATA[経緯
普段はwebpackでthree.jsを読み込んで使用していましたが、Nuxtだとどのように読み込むのかわからなかったので試してみました。

 バージョン
node v16.5.0
Nuxt v2.15.3
three.js v0.130.1
typescript v2.15.3

 読み込む3Dデータ
glTF形式（.gltf）のモデリングデータを読み込みます。

 読み込み方法

      
        nuxt.config.ts
        // 一部省略
     :
    // Plugins to run before rendering page: ...]]></summary>
        <author>
            <name>kaito takase</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年現在Vueを選択すべきでないと思う理由]]></title>
        <id>https://zenn.dev/coder_ka/articles/275b551d662e35</id>
        <link href="https://zenn.dev/coder_ka/articles/275b551d662e35"/>
        <updated>2021-09-21T06:49:30.000Z</updated>
        <summary type="html"><![CDATA[使ってわかる、Vueへの恨み、つらつらと（随時更新）

コンポーネントのローカルスコープでコンポーネントを定義しようとするとJSXが必要
JSXが嫌でReactを使わないならSvelteがあり、SvelteはゼロオーバーヘッドでVueより速い
React+JSXと違って、マークアップをJavaScriptのデータ構造として扱えない上、TypeScriptとの相性も悪い
Slotに渡す引数の型が指定できない（TypeScript）
ジェネリックなコンポーネントが作れない（TypeScript）
Propsに関数を指定したいときもあるのに、イベントをemitするパターンが推奨されている為、仕...]]></summary>
        <author>
            <name>koeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09-21のJS: Deno 1.14リリース、ChromeのUser-Agent文字列削減スケジュール、Vue 2からVue 3への移行]]></title>
        <id>https://jser.info/2021/09/21/deno-1.14-chromeuser-agent-vue-2vue-3/</id>
        <link href="https://jser.info/2021/09/21/deno-1.14-chromeuser-agent-vue-2vue-3/"/>
        <updated>2021-09-21T02:25:53.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #558 - Deno 1.14がリリースされました。
Deno 1.14 Release Notes | Deno Blog
Deno 1.14.0 がリリースされたので新機能や変更点の紹介
deno lintとdeno fmtがオプションをサポートしてquoteやindentなどの設定ができるようになっています。
URLPatternのサポート。fetchがMutual TLSをサポートなども追加されています。
std/httpモジュールのパフォーマンス改善などが含まれています。
ChromeのUser-Agent文字列削減のスケジュールが改めて公開されています。
Chromium Blog: User-Agent Reduction Origin Trial and Dates
navigator.userAgent、@navigator.appVersion、 navigator.platformなどの情報量を減らす/固定化することでfinger printingなどのリスクを減らすことが目的です。これらのAPIは非推奨となり、代替としてUser Agent Client Hintsが実装されています。
UA文字列の削減などは、次のようなスケジュールで展開していく予定となっています。
Chrome 92:  コンソールに警告の追加
Chrome 95 から 100: Origin Trialの実施
Chrome 100: Reverse Origin Trialの実施
Chrome 101から110: 削減を段階的に実施
Chrome 113: 完了
Vue2のプロジェクトをVue3へマイグレーションするという記事では、@vue/compatを使いつつVue2で書かれたアプリケーションをVue3へマイグレーションしていく方法について書かれています…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js でページ遷移前後で共通するコンポーネントを残す]]></title>
        <id>https://zenn.dev/izumin/articles/fce4918f5f7946</id>
        <link href="https://zenn.dev/izumin/articles/fce4918f5f7946"/>
        <updated>2021-09-21T01:32:22.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Next.js アプリ内のページ遷移では、原則として元 page の component は unmount される
「遷移前後の page component が同じである」場合、および「App に記述されたコンポーネント（Layout）」は unmount されない

page component に getLayout 関数を定義するパターン[1]を適用することで、page ごとの Layout を細かく設定・管理できる


 モチベーション
たとえばタブを使ったページ遷移などで、一部のコンポーネントを引き継ぎたい場合。
zenn.dev でいうとトップページのグ...]]></summary>
        <author>
            <name>Masayuki Izumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[computed に引数を与えたい]]></title>
        <id>https://zenn.dev/gamin/articles/c58b8fb43c8a75</id>
        <link href="https://zenn.dev/gamin/articles/c58b8fb43c8a75"/>
        <updated>2021-09-21T01:29:51.000Z</updated>
        <summary type="html"><![CDATA[code の例 1

      
        
        const func = (key: string) => computed(() => (toggle.value === true ? key : 'false'))


      
      
 code の例 2
こんなのでも与えられるらしい。

      
        
        <template>
	{{ hoge('Momo') }}	
</template>


      
      
      
        
        cons...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[computed に引数を与えたい]]></title>
        <id>https://zenn.dev/gamin/articles/c58b8fb43c8a75</id>
        <link href="https://zenn.dev/gamin/articles/c58b8fb43c8a75"/>
        <updated>2021-09-21T01:29:51.000Z</updated>
        <summary type="html"><![CDATA[code の例 1

      
        
        const func = (key: string) => computed(() => (toggle.value === true ? key : 'false'))


      
      
 code の例 2
こんなのでも与えられるらしい。

      
        
        <template>
	{{ hoge('Momo') }}	
</template>


      
      
      
        
        cons...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】getServerSidePropsをリバースプロキシ化して遊ぼう]]></title>
        <id>https://zenn.dev/aiji42/articles/30116d3ffdb329</id>
        <link href="https://zenn.dev/aiji42/articles/30116d3ffdb329"/>
        <updated>2021-09-20T16:03:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.js には SSR するための getServerSideProps と SSG/ISR のための getStaticProps というデータフェッチファンクションが用意されています。
一般的な getServerSideProps は、次のようにレンダリングに必要な props を返却することが主な用途です。

      
        
        export async function getServerSideProps(context) {
  const data = await fetch('...').then((res) => ...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】getServerSidePropsをリバースプロキシ化して遊ぼう]]></title>
        <id>https://zenn.dev/aiji42/articles/30116d3ffdb329</id>
        <link href="https://zenn.dev/aiji42/articles/30116d3ffdb329"/>
        <updated>2021-09-20T16:03:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.js には SSR するための getServerSideProps と SSG/ISR のための getStaticProps というデータフェッチファンクションが用意されています。
一般的な getServerSideProps は、次のようにレンダリングに必要な props を返却することが主な用途です。

      
        
        export async function getServerSideProps(context) {
  const data = await fetch('...').then((res) => ...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apollo ServerとPrismaではじめるGraphQL API開発入門]]></title>
        <id>https://zenn.dev/eringiv3/books/a85174531fd56a</id>
        <link href="https://zenn.dev/eringiv3/books/a85174531fd56a"/>
        <updated>2021-09-20T13:26:40.000Z</updated>
        <summary type="html"><![CDATA[この本では、TypeScriptで型安全にGraphQLサーバーを構築する方法をハンズオン形式で学習することができます。
Todoアプリの開発を通して、GraphQLスキーマの扱いやCLIツールの設定方法、TypeScriptのORMであるPrismaの基本的な使用方法、CI/CDパイプラインの構築によるマイグレーションの自動化などを体験します。
GraphQLサーバー実装の素振りをしておきたい方や、フロントエンドからGraphQL APIを使用したことはあるけど自分でAPIを実装したことはないようなバックエンドの開発初心者の方に向けた内容となっております。]]></summary>
        <author>
            <name>Eringi_V3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[共有できるスタブAPIツールを公開してみた]]></title>
        <id>https://zenn.dev/aota/articles/49410ad98b33c7</id>
        <link href="https://zenn.dev/aota/articles/49410ad98b33c7"/>
        <updated>2021-09-20T13:07:53.000Z</updated>
        <summary type="html"><![CDATA[個人開発でco-metubというスタブAPIを共有できるGUIツールを作りました。
バックエンドとフロントエンドのチームで、スタブAPIを良い感じに共有したい時にお使いください。
https://github.com/solaoi/co-metub

 使い方

 インストール方法
Dockerが入った環境であれば、下記コマンドを実行するだけです。
空いてるサーバをスタブAPIサーバにしてしまいましょう。

      
        
        # 公開したいポートを決めます。
HOST_PORT=8080
# httpで公開するなら、セキュア属性クッキーの無効化をtrueに設...]]></summary>
        <author>
            <name>aota</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nuxt.jsでjestを使ってテストを始める]]></title>
        <id>https://zenn.dev/kata_n/articles/0e1c640c4d6680</id>
        <link href="https://zenn.dev/kata_n/articles/0e1c640c4d6680"/>
        <updated>2021-09-20T11:51:49.000Z</updated>
        <summary type="html"><![CDATA[jestとは
JestはJavaScriptの単体テストのフレームワークです。
単体テスト（ユニット(Unit)テストとも言います）とは、ボタンやセレクトボックスなど個々の機能を正しく果たしているかどうかを検証するテストの事を指します。
この記事はJavaScriptのテストフレームワークでよく使われているjestをNuxt.jsを使ってとりあえず試してみたものになります。

 バージョン
nuxt.js: 2.15.8
node.js:16.6.0

 nuxtcliでプロジェクト作成

      
        
        ❯ yarn create nuxt-app ...]]></summary>
        <author>
            <name>kata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nuxt.jsでjestを使ってテストを始める]]></title>
        <id>https://zenn.dev/kata_n/articles/0e1c640c4d6680</id>
        <link href="https://zenn.dev/kata_n/articles/0e1c640c4d6680"/>
        <updated>2021-09-20T11:51:49.000Z</updated>
        <summary type="html"><![CDATA[jestとは
JestはJavaScriptの単体テストのフレームワークです。
単体テスト（ユニット(Unit)テストとも言います）とは、ボタンやセレクトボックスなど個々の機能を正しく果たしているかどうかを検証するテストの事を指します。
この記事はJavaScriptのテストフレームワークでよく使われているjestをNuxt.jsを使ってとりあえず試してみたものになります。

 バージョン
nuxt.js: 2.15.8
node.js:16.6.0

 nuxtcliでプロジェクト作成

      
        
        ❯ yarn create nuxt-app ...]]></summary>
        <author>
            <name>kata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js]router.queryから初回のundefinedを消し去る方法]]></title>
        <id>https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7</id>
        <link href="https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7"/>
        <updated>2021-09-20T04:26:09.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの初回queryのundefined現象

src/pages/[q].tsx


      
        
        import { useRouter } from 'next/router'
import React from 'react'

const Page = () => {
  const router = useRouter()
  const q = router.query['q']
  console.log("q:",q)
  return <div>{q}</div>
}

export defa...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js]router.queryから初回のundefinedを消し去る方法]]></title>
        <id>https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7</id>
        <link href="https://zenn.dev/sora_kumo/articles/e86bbf0291d4a7"/>
        <updated>2021-09-20T04:26:09.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの初回queryのundefined現象

src/pages/[q].tsx


      
        
        import { useRouter } from 'next/router'
import React from 'react'

const Page = () => {
  const router = useRouter()
  const q = router.query['q']
  console.log("q:",q)
  return <div>{q}</div>
}

export defa...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3.2】styleタグ内でJavaScript変数をバインドできる]]></title>
        <id>https://zenn.dev/azukiazusa/articles/599baba4a32e14</id>
        <link href="https://zenn.dev/azukiazusa/articles/599baba4a32e14"/>
        <updated>2021-09-20T04:03:39.000Z</updated>
        <summary type="html"><![CDATA[Vue.js3.2からは、JavaScriptの変数をCSS変数としてバインドできるようになりました。
つまりは、CSSの値を動的に設定できるということです。
ものは試しのやってみましょう。

      
        
        <script setup lang="ts">
import { ref } from "@vue/reactivity";
const color = ref("#000000");
</script>

<template>
  <h1 class="title">タイトル</h1>
...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NuxtのSSGのgenerateの改善~payloadちゃんと使えてますか？~]]></title>
        <id>https://zenn.dev/kai/articles/nuxt-payload-generate</id>
        <link href="https://zenn.dev/kai/articles/nuxt-payload-generate"/>
        <updated>2021-09-20T02:06:13.000Z</updated>
        <summary type="html"><![CDATA[Nuxt の generate の改善を職場ですることがあったので、そこで学んだことを備忘録的に書いてきます。

 環境
nuxt v2.15.7

 Qiita の API について
Qiita api を使って実際にやってみます。
(Zenn に記事書いてるのに Qiita で申し訳ないですが、サンプルにちょうどよかったので。)
Qiita の API のドキュメントはこちら
一覧の取得のドキュメントはこちら
特定の記事の取得のドキュメントはこちら
100 件の記事を取得するには以下のような感じす。
https://qiita.com/api/v2/items?page=1&...]]></summary>
        <author>
            <name>カイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vueでjQueryのslideUp, slideDownを一瞬で実装しちゃう]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/a744298ec0d3a8"/>
        <updated>2021-09-20T00:44:32.000Z</updated>
        <summary type="html"><![CDATA[jQueryのslideUp, slideDownをvueで作る際に、transitionを使用するやり方があったのですが、高さを指定しないといけない？とかなんとかでよくわからなくてやめちゃったのですが、
結論から言うとライブラリを使用する方法が死ぬほど簡単でした。

 ライブラリインストール
vue-slide-up-downをインストールします

      
        
        npm i vue-slide-up-down


      
      
 インポートする
Laravelとvueをセットで使っているので、 僕はapp.jsというところでインポートしま...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ECMAScript Annex B と型定義、ついでに ES2022 __proto__]]></title>
        <id>https://zenn.dev/petamoriken/articles/a211183011cd58</id>
        <link href="https://zenn.dev/petamoriken/articles/a211183011cd58"/>
        <updated>2021-09-19T16:45:17.000Z</updated>
        <summary type="html"><![CDATA[この記事は Qiita からコピーされたものです。


 Annex B について
JavaScript の言語仕様には Annex B という項目があります。ここには Web 互換性のために残されているレガシーな機能の仕様について記述してあり、新たに ECMAScript のコードを書く際にこれらの機能を使用したり、その存在を前提にしたりしてはいけないと明記されています。
https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers
String#big などの今となっては全く実用性のないメソ...]]></summary>
        <author>
            <name>petamoriken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stage 2 Decorators の変遷と最新仕様]]></title>
        <id>https://zenn.dev/petamoriken/articles/ab9a7d7f654a79</id>
        <link href="https://zenn.dev/petamoriken/articles/ab9a7d7f654a79"/>
        <updated>2021-09-19T16:32:49.000Z</updated>
        <summary type="html"><![CDATA[この記事は Qiita からコピーされたものです。


 はじめに
個人的に TC39 meeting をウォッチしてまとめている @petamoriken です。
ESNext の Decorators の提案は何度も改定しています。その割にあまり知れ渡っていません。この記事ではその変遷と2021年7月現在における最新の Decorators について簡単にまとめようと思います。
https://github.com/tc39/proposal-decorators
こちらの発表スライドを見ると流れがわかりやすいかもしれません。


 最初の提案（2014年~2015年頃）
最初の提...]]></summary>
        <author>
            <name>petamoriken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptで時系列データのクラスタリングがしたい]]></title>
        <id>https://zenn.dev/yonda/articles/5366cb9beb312d</id>
        <link href="https://zenn.dev/yonda/articles/5366cb9beb312d"/>
        <updated>2021-09-19T16:31:06.000Z</updated>
        <summary type="html"><![CDATA[Pythonで時系列解析をしたい(時系列クラスタリング)
DTW(Dynamic Time Warping)で台風軌道をクラスタリングする
こんなふうに時系列データの分類をJavaScript（TypeScript）でしてみたい。
でも調べるとほとんどみんなPythonのtslean、sklearnやRを使っています。
調べればJavaScriptライブラリがあるのでしょうが、理屈の勉強がてら自分で実装（TypeScript）してみます。

 分類法
分類法においてメジャーなのはK-meansとK-medoids。
2つを比べたとき外れ値やノイズに強いとされている、また時系列データ同士の...]]></summary>
        <author>
            <name>yonda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spotify APIとDiscord.jsでBotを作ってみた]]></title>
        <id>https://zenn.dev/kyohei1212/articles/0da7851314cacd</id>
        <link href="https://zenn.dev/kyohei1212/articles/0da7851314cacd"/>
        <updated>2021-09-19T08:18:12.000Z</updated>
        <summary type="html"><![CDATA[時間があったのでDiscord Botを作ってみました。
SpotifyのAPIはSpotify Web API Nodeという素晴らしいラッパーライブラリがあるのでそれを使いました。

axiosやらなんやらで直接URLを叩いてもいいのですがせっかくライブラリがあるのでそっちを使いました。使わなくてもSpotify APIは使えます。

とりあえず基本のmessageCreateイベントでloginと入力されたらログイン用のURLを返すようにします。(Spotify APIのAuthenticationの関係でここだけはブラウザを開かないといけないっぽいです。もし間違ってたら教えていた...]]></summary>
        <author>
            <name>Kyohei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptの交差型]]></title>
        <id>https://zenn.dev/peg/articles/c5fb4ccf0a06b2</id>
        <link href="https://zenn.dev/peg/articles/c5fb4ccf0a06b2"/>
        <updated>2021-09-19T06:55:54.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptの型レベルコードについてあまり慣れてないので勉強を始めた。
以下のコードのItemFormがどういう型を持つのか。

      
        
        type Item = {
  id: string;
  title: string;
  body: string;
};


type ItemForm = Item & {
  edit: boolean;
};


      
      &はintersection type（交差型）という。

Intersection types are closely related t...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2 / Vue3 でも Chart.js 3 を使いたい]]></title>
        <id>https://zenn.dev/sa2knight/articles/cc60e3e7c44968</id>
        <link href="https://zenn.dev/sa2knight/articles/cc60e3e7c44968"/>
        <updated>2021-09-19T03:32:58.000Z</updated>
        <summary type="html"><![CDATA[Chart.js 3 について
Chart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。
v3 は従来の v2 と比べ、以下のような大きな改善が行われています。

webworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上
細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化

moment など、日付操作用のライブラリへの依存の撤廃
CSSインジェクションの廃止
膨大な数のバグフィックス

ただし、多くの破壊的変更を...]]></summary>
        <author>
            <name>shingo.sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2 / Vue3 でも Chart.js 3 を使いたい]]></title>
        <id>https://zenn.dev/sa2knight/articles/cc60e3e7c44968</id>
        <link href="https://zenn.dev/sa2knight/articles/cc60e3e7c44968"/>
        <updated>2021-09-19T03:32:58.000Z</updated>
        <summary type="html"><![CDATA[Chart.js 3 について
Chart.js 3 は、 Canvas を用いたグラフ描画ライブラリとして人気の高い Chart.js の最新バージョンで、 2021年4月にリリースされました。
v3 は従来の v2 と比べ、以下のような大きな改善が行われています。

webworkers を用いた並列レンダリングなどによるパフォーマンスの劇的向上
細分化されたモジュールを必要十分に import することによるツリーシェイキングの有効化

moment など、日付操作用のライブラリへの依存の撤廃
CSSインジェクションの廃止
膨大な数のバグフィックス

ただし、多くの破壊的変更を...]]></summary>
        <author>
            <name>shingo.sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim-quickrun 実行時に水平分割で表示する]]></title>
        <id>https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener</id>
        <link href="https://zenn.dev/oppara/articles/vim-quickrun-outputter-buffer-opener"/>
        <updated>2021-09-19T01:05:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
thinca/vim-quickrun をアップデート後、実行時に水平分割できなくなっていたので対応。

 動かなくなった設定

      
        
        let g:quickrun_config = {'*': {'split': ''}}


      
      
 水平分割できるようにした設定

      
        
        let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'outputt...]]></summary>
        <author>
            <name>oppara</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node + TypeScript で MySQL に接続して Read, Write してみる]]></title>
        <id>https://zenn.dev/tkm_kj/articles/111ef98ed6297e</id>
        <link href="https://zenn.dev/tkm_kj/articles/111ef98ed6297e"/>
        <updated>2021-09-18T20:40:45.000Z</updated>
        <summary type="html"><![CDATA[背景
node + TypeScript で MySQL に繋いで少しだけデータ操作をする場面があったのですが、あまり記事無くて苦戦したので備忘録として残しておきます。

 実装方針

O/Rマッパーのような大きいライブラリじゃなくても済む規模だったので mysql を使用して生クエリで対応
コールバック地獄にならないようにしたい
しっかりトランザクションはかけておきたい


 バージョン

node: v14.17
mysql(ライブラリ): 2.18.1
MySQL(DB): 5.7


 実装

 接続

      
        
        import { cre...]]></summary>
        <author>
            <name>Takumi Kaji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】アクセスコントロールパターン]]></title>
        <id>https://zenn.dev/aiji42/articles/450ce962cc225a</id>
        <link href="https://zenn.dev/aiji42/articles/450ce962cc225a"/>
        <updated>2021-09-18T17:11:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。
ここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。
例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…

一般ユーザ向けページは誰でもアクセス可能
マイページはログイン済みのユーザのみアクセス可能
ログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる

た...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】アクセスコントロールパターン]]></title>
        <id>https://zenn.dev/aiji42/articles/450ce962cc225a</id>
        <link href="https://zenn.dev/aiji42/articles/450ce962cc225a"/>
        <updated>2021-09-18T17:11:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.js で MPA を構築していると、ページ単位でアクアセスコントロールを行うニーズやケースがよく発生します。
ここでのアクセスコントロールは、ページごとにアクセス可能な条件を定義したり、ルールにそぐわないアクセスを別のページに転送させるなどの処理を意味します。
例えば、一般ユーザ向けのページと、登録済みユーザ向けのマイページを持つケースを考えてみると…

一般ユーザ向けページは誰でもアクセス可能
マイページはログイン済みのユーザのみアクセス可能
ログインのためのサインイン・アップフォームのページも存在するが、ログイン済みであればマイページにリダイレクトされる

た...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim でディレクトリ内のファイルを一括リネームする]]></title>
        <id>https://zenn.dev/anozon/articles/vimfilter-rename</id>
        <link href="https://zenn.dev/anozon/articles/vimfilter-rename"/>
        <updated>2021-09-18T13:58:17.000Z</updated>
        <summary type="html"><![CDATA[vimfiler の rename 機能が便利で、複数ファイルを自由自在にリネームできます。
Shougo/vimfiler.vim: Powerful file explorer implemented by Vim script

 やってみる

.js ファイルを .tsx に書き換えます。

 動画
oembed: https://www.youtube.com/watch?v=BxSkWfem7uI&feature=youtu.be


vim target/dir ディレクトリを開く

* 全ファイル選択

r リネームモード

vim 編集の例 1 解説


/js...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim の q マクロを保存して使いまわす]]></title>
        <id>https://zenn.dev/anozon/articles/vim-macro-save</id>
        <link href="https://zenn.dev/anozon/articles/vim-macro-save"/>
        <updated>2021-09-18T13:58:16.000Z</updated>
        <summary type="html"><![CDATA[1 度作ったマクロを保存して、 vim を開き直したときも使いまわしたいときの方法。
マクロ @b に保存する例で説明します。

 .vimrc に保存する

 q で macro を記録する
qb → 操作 → q で記録。

 .vimrc に追記する

      
        
        let @b = 'Gk$F_lvEygg$p


      
      
 (外部クリップボードにコピーしたりしたいとき)

      
        
        "bpyy


      
      "b b を選択 →p 貼り付け → yy コピーで外部クリップ...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim の visual mode で選択した範囲に paste できないとき]]></title>
        <id>https://zenn.dev/anozon/articles/vim-cannot-paste</id>
        <link href="https://zenn.dev/anozon/articles/vim-cannot-paste"/>
        <updated>2021-09-18T13:58:16.000Z</updated>
        <summary type="html"><![CDATA[恐らく visual mode で選択した範囲がコピーされています。
clipboard に autoselect が設定されているときの挙動です。

 設定

      
        
        -set clipboard=unnamed,autoselect
+set clipboard=unnamed]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js with TypeScript で最小限の _app.tsx, _document.tsx]]></title>
        <id>https://zenn.dev/anozon/articles/ts-nextjs-pages</id>
        <link href="https://zenn.dev/anozon/articles/ts-nextjs-pages"/>
        <updated>2021-09-18T13:58:15.000Z</updated>
        <summary type="html"><![CDATA[この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。
Gist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx

 pages/_app.tsx
こちらは Function Component でかけるのでシンプルです。

      
        
        import { AppProps } from 'next/app'
import Head from 'next/head'

const...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アロー関数とfunction それぞれの Type Guard 書き方]]></title>
        <id>https://zenn.dev/anozon/articles/type-guard-arrow-function</id>
        <link href="https://zenn.dev/anozon/articles/type-guard-arrow-function"/>
        <updated>2021-09-18T13:58:15.000Z</updated>
        <summary type="html"><![CDATA[この記事では アロー関数で Type Guard について紹介します。
TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript

      
        
        type Nigiri = {
  category: 'nigiri'
  neta: string
}
type Gunkan = {
  category: 'gunkan'
  neta: string
  nori: number
}
type Sushi = Nigiri | Gunkan...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js with TypeScript で最小限の _app.tsx, _document.tsx]]></title>
        <id>https://zenn.dev/anozon/articles/ts-nextjs-pages</id>
        <link href="https://zenn.dev/anozon/articles/ts-nextjs-pages"/>
        <updated>2021-09-18T13:58:15.000Z</updated>
        <summary type="html"><![CDATA[この記事では Next.js with TypeScript で最小限の _app.tsx, _document.tsx について紹介します。
Gist: Next.js with typescript minimum pages/_document.tsx, pages/_app.tsx

 pages/_app.tsx
こちらは Function Component でかけるのでシンプルです。

      
        
        import { AppProps } from 'next/app'
import Head from 'next/head'

const...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[surround.vim 入門【vim中級者向け】]]></title>
        <id>https://zenn.dev/anozon/articles/surround-vim-tutorial</id>
        <link href="https://zenn.dev/anozon/articles/surround-vim-tutorial"/>
        <updated>2021-09-18T13:58:14.000Z</updated>
        <summary type="html"><![CDATA[公式リポジトリ https://github.com/tpope/vim-surround

 why

周囲(クウォート, 括弧, タグ ...)の操作が楽になる
Vim plugin にデフォルトでついてることが多いのですぐ使える

VSCodeVim(VSCode), IdeaVIM(JetBrains)

      
        
        Plug 'tpope/vim-surround'


      
      
 demos
公式の Introduction にそって基本コマンドを紹介します。
vim-surround/surround.txt at ma...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[js で先頭以外(n行目以降)をソートする]]></title>
        <id>https://zenn.dev/anozon/articles/sort-without-head</id>
        <link href="https://zenn.dev/anozon/articles/sort-without-head"/>
        <updated>2021-09-18T13:58:12.000Z</updated>
        <summary type="html"><![CDATA[js で配列の 2 行目以降のみをソートする方法のメモです。
repl: https://repl.it/@anozon/sortbody#index.ts

 ソート対象の配列

      
        
        // js
const elems = [
  { name: 'primary', count: 10 }, // ソートしないで！
  { name: 'b', count: 2 },
  { name: 'd', count: 12 },
  { name: 'a', count: 1 },
  { name: 'c', count: 11 },
]

/...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ssh 接続先の vim でマウスの選択範囲をコピーする]]></title>
        <id>https://zenn.dev/anozon/articles/ssh-vim-copy</id>
        <link href="https://zenn.dev/anozon/articles/ssh-vim-copy"/>
        <updated>2021-09-18T13:58:12.000Z</updated>
        <summary type="html"><![CDATA[vim で mouse を off にする

      
        
        :set mouse=


      
      
 iTerm2 の設定]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React で URL props が変わったら fade アニメーションで 背景を変える]]></title>
        <id>https://zenn.dev/anozon/articles/react-transition-props-bg</id>
        <link href="https://zenn.dev/anozon/articles/react-transition-props-bg"/>
        <updated>2021-09-18T13:58:10.000Z</updated>
        <summary type="html"><![CDATA[props で指定された URL が変わったら フェードアウト し、
新しい URL 画像で フェードイン しながら表示するコンポーネントを作りました。
react-transition-group を使います。

 デモ
<iframe src="https://codesandbox.io/embed/react-animation-background-image-jznjc?fontsize=14&hidenavigation=1&theme=dark&view=preview"
style="width:100%; height:210px; bo...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React で特定の props を固定した特化コンポーネントを定義する]]></title>
        <id>https://zenn.dev/anozon/articles/react-set-props</id>
        <link href="https://zenn.dev/anozon/articles/react-set-props"/>
        <updated>2021-09-18T13:58:10.000Z</updated>
        <summary type="html"><![CDATA[React で特定の props を固定した特化コンポーネントを定義する方法をいくつかまとめました。
DEMO です。
react-set-props - CodeSandbox
以下の Message という自作コンポーネントと Star というライブラリのコンポーネントを例に使います。
Star は `material-ui の icon コンポーネントです。

      
        
        import Star from '@material-ui/icons/Star'

const Message = (props) => <p>mes: ...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React で複数の ref を 1つのコンポーネントにセットする]]></title>
        <id>https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component</id>
        <link href="https://zenn.dev/anozon/articles/react-multiple-ref-to-one-component"/>
        <updated>2021-09-18T13:58:09.000Z</updated>
        <summary type="html"><![CDATA[同じ div に useSize と useHover の両方を使いたいとがあった。
しかしどちらも ref を渡さなければいけなかったのでその方法です。
Share ref with multiple ref handlers · Issue #13029 · facebook/react

 useCombinedRefs
ref を合成する関数を用意する。
参考: https://github.com/facebook/react/issues/13029#issuecomment-497641073

      
        
        export const us...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React と display grid でメモリ付き定規]]></title>
        <id>https://zenn.dev/anozon/articles/react-memory-ruler</id>
        <link href="https://zenn.dev/anozon/articles/react-memory-ruler"/>
        <updated>2021-09-18T13:58:09.000Z</updated>
        <summary type="html"><![CDATA[メモリ付きの定規、ルーラーコンポーネントのサンプルです。


 コード
ruler-with-memory - CodeSandbox

      
        title=Ruler.tsx
        <Ruler
  memories={[1, 2, 4, 8, 16, 32, 64, 128]}
  colors={['#333', '#444', '#555', '#666', '#777', '#888', '#999']}
/>


      
      
      
        
        function Ruler({ memor...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[children を持つ Component を normal function で書くときの型定義]]></title>
        <id>https://zenn.dev/anozon/articles/react-fc-with-function</id>
        <link href="https://zenn.dev/anozon/articles/react-fc-with-function"/>
        <updated>2021-09-18T13:58:09.000Z</updated>
        <summary type="html"><![CDATA[この記事では children を持つ Component を function で書くときの型定義する方法を説明します。

 書き方
React.PropsWithChildren<Props> を使うことで書けます。
Sample PropsWithChildren - CodeSandbox

      
        
        type Props = {}
function Component(props: React.PropsWithChildren<Props>) {}


      
      
 それぞれの書き方

      ...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React で canvas から画像生成する最小コード]]></title>
        <id>https://zenn.dev/anozon/articles/react-canvas-to-img</id>
        <link href="https://zenn.dev/anozon/articles/react-canvas-to-img"/>
        <updated>2021-09-18T13:58:08.000Z</updated>
        <summary type="html"><![CDATA[この記事では React (と TypeScript で) canvas から画像生成する方法を紹介します。
文字描画や色変更をサンプルに説明していきます。

 React で Canvas を使うベースのコード

      
        
        import React, { useEffect, useState } from 'react'
const width = 255
const height = 255

function App() {
  const [png, setPng] = useState<string | null>(null)...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python で TypeScript の UnionType を使う]]></title>
        <id>https://zenn.dev/anozon/articles/python-typing-literal</id>
        <link href="https://zenn.dev/anozon/articles/python-typing-literal"/>
        <updated>2021-09-18T13:58:08.000Z</updated>
        <summary type="html"><![CDATA[TypeScript の UnionType は以下のように定義できます。

      
        
        type Color = 'red' | 'green'


      
      Python の type でも同じようなことができるのか調べました。
ちなみに typeing.Union というのがありますが別です。

 typeing.Literal を使う

      
        
        from typing import Literal, get_args

COLOR = Literal['red', 'green', 'bl...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js export 実行時のタイムスタンプをコンポーネントで使う]]></title>
        <id>https://zenn.dev/anozon/articles/next-initial-props-timestmap</id>
        <link href="https://zenn.dev/anozon/articles/next-initial-props-timestmap"/>
        <updated>2021-09-18T13:58:05.000Z</updated>
        <summary type="html"><![CDATA[next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。
jsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。
SSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。
(/pages 直下で export するコンポーネント)

 コード

      
        
        import { createConte...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js export 実行時のタイムスタンプをコンポーネントで使う]]></title>
        <id>https://zenn.dev/anozon/articles/next-initial-props-timestmap</id>
        <link href="https://zenn.dev/anozon/articles/next-initial-props-timestmap"/>
        <updated>2021-09-18T13:58:05.000Z</updated>
        <summary type="html"><![CDATA[next export を実行した時のタイムスタンプをレンダリングしたいときの方法です。
jsx 上で <span>{new Date()}</span> などとするとクライアントサイドでレンダリングされた時間が表示されてしまいます。
SSR 時のデータを React で使いたい場合は NextPage コンポーネント で Component.getInitialProps を使うと渡すことが出来ます。
(/pages 直下で export するコンポーネント)

 コード

      
        
        import { createConte...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[localhost.{appname}:3000 で開発してブラウザキャッシュを活用する案]]></title>
        <id>https://zenn.dev/anozon/articles/localhost-apphost-dev</id>
        <link href="https://zenn.dev/anozon/articles/localhost-apphost-dev"/>
        <updated>2021-09-18T13:58:02.000Z</updated>
        <summary type="html"><![CDATA[複数のアプリを同じ localhost:3000 で開発すると切り替えるたびにキャッシュが競合するので /etc/hosts で変える案です。

 /etc/hosts

      
        
        sudo vim /etc/hosts


      
      
      
        
        127.0.0.1 localhost.appname
127.0.0.1 localhost.othername
127.0.0.1 localhost.hoge
127.0.0.1 localhost.fuga


      
      
 フロ...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[5層 ReactComponent と TypeScript でカウンター書いてみる]]></title>
        <id>https://zenn.dev/anozon/articles/layer-react-counterapp</id>
        <link href="https://zenn.dev/anozon/articles/layer-react-counterapp"/>
        <updated>2021-09-18T13:58:01.000Z</updated>
        <summary type="html"><![CDATA[経年劣化に耐える ReactComponent の書き方 - Qiita
が良さそうだったので TypeScript で書く場合を試してみた。

 コード
CodeSandbox

      
        
        import React, { useState } from "react"
import styled from "styled-components"

type Props = {
  className?: string
  count: number
  handleCountUp: () => void
  handleCountDown: ...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[styled-components の keyframes で ts-styled-plugin のエラーが出る]]></title>
        <id>https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin</id>
        <link href="https://zenn.dev/anozon/articles/keyframes-ts-styled-plugin"/>
        <updated>2021-09-18T13:58:00.000Z</updated>
        <summary type="html"><![CDATA[css animation の 100% や 0% などのキーワードに対して ts-styled-plugin のエラーが出たので対処しました。
styled-components で animation を扱う場合以下のように書きます。 (styled-components@5.2.1)

      
        
        import styled, { keyframes } from 'styled-components'

const invert = keyframes`
0% {
	background: white;
	color: black;
}
100...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[component から props の型を取得する]]></title>
        <id>https://zenn.dev/anozon/articles/get-props-type-from-component</id>
        <link href="https://zenn.dev/anozon/articles/get-props-type-from-component"/>
        <updated>2021-09-18T13:57:52.000Z</updated>
        <summary type="html"><![CDATA[Storybook で props 型が必要だけど export したくなかったので。

 方法 1

      
        
        import { ComponentProps } from 'react'

type Props = ComponentProps<typeof TargetComponent>


      
      
 方法 2(古い)

      
        
        type Props = Parameters<typeof TargetComponent>[0]]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GatsbyJS を Typescript に移行した際の Type 付け]]></title>
        <id>https://zenn.dev/anozon/articles/gatsby-to-typescript</id>
        <link href="https://zenn.dev/anozon/articles/gatsby-to-typescript"/>
        <updated>2021-09-18T11:29:37.000Z</updated>
        <summary type="html"><![CDATA[GatsbyJS で書いているこのブログを Typescript 移行しました。
主に以下の記事を参考に移行しました。なので今回は Type づけに焦点を当てて書きます。
Gatsby.js を完全 TypeScript 化する - Qiita

 GraphQL Data, Page Component に型をつける
gatsby-plugin-graphql-codegen を使用する方法と @graphql-codegen/typescript を使用する方法がありましたが前者を選びました。セットアップが簡潔に済んだので。

 PageQuery

      
        
...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[fitty を React で使う useFitty hook]]></title>
        <id>https://zenn.dev/anozon/articles/fitty-in-react</id>
        <link href="https://zenn.dev/anozon/articles/fitty-in-react"/>
        <updated>2021-09-18T11:29:34.000Z</updated>
        <summary type="html"><![CDATA[fitty はコンテナに合わせてテキストのフォントサイズをフィットしてくれるライブラリです。
rikschennink/fitty: ✨ Makes text fit perfectly
それを React で使うための hooks を書いた。
Gist fitty for react

 コード

      
        
        import { useEffect, useRef } from 'react'
import fitty from 'fitty'

export function useFitty() {
  const ref = useRef<...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[絵文字を含めて文字数カウントするWebアプリ作った]]></title>
        <id>https://zenn.dev/anozon/articles/emoji-moji-count</id>
        <link href="https://zenn.dev/anozon/articles/emoji-moji-count"/>
        <updated>2021-09-18T11:29:32.000Z</updated>
        <summary type="html"><![CDATA[アプリ
文字頻度カウント(絵文字対応)


 絵文字対応
"text".split('') では絵文字が 1 文字として分割できません。

      
        
        > "😔"
'😔'
> "😔".split('')
[ '�', '�' ]


      
      punycode.js を使います。

      
        
        const punySplit = (s: string) =>
  punycode.ucs2.decode(s).map((v) => punycode.ucs2.encode(...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Clasp】GoogleAppScript のコードをローカルで開発する]]></title>
        <id>https://zenn.dev/anozon/articles/clasp-init-feels</id>
        <link href="https://zenn.dev/anozon/articles/clasp-init-feels"/>
        <updated>2021-09-18T11:29:30.000Z</updated>
        <summary type="html"><![CDATA[この記事では Clasp を使って GoogleAppScript のコードを手元で管理する方法を紹介します。
Clasp Command Line Interface using clasp | Google Developers

 手順 1. 初期化する
管理するディレクトリに移動してしてパッケージをインストールします。
その後 Google アカウントでログインします。

      
        
        yarn add @google/clasp -D
clasp login


      
      プロジェクトのみに入れてる場合は以降の clasp ho...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arrow function で generics にすると HTML タグとして認識されてしまうときの tips]]></title>
        <id>https://zenn.dev/anozon/articles/arrow-function-generics</id>
        <link href="https://zenn.dev/anozon/articles/arrow-function-generics"/>
        <updated>2021-09-18T11:29:28.000Z</updated>
        <summary type="html"><![CDATA[エディタなどによってうまくハイライトされなかったときはこうする。

      
        
        const double = <T>(v: T): [T, T] => [v, v]
const hello = () => <p>Hello</p>
// ↑ハイライトがおかしい


      
      <T>を<T,>にする。


      
        
        const double = <T,>(v: T): [T, T] => [v, v]
const...]]></summary>
        <author>
            <name>anozon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3】@capacitor-community/capacitor-googlemaps-native まとめ]]></title>
        <id>https://zenn.dev/tentel/articles/63bbb2c0fbb7b1</id>
        <link href="https://zenn.dev/tentel/articles/63bbb2c0fbb7b1"/>
        <updated>2021-09-18T06:28:44.000Z</updated>
        <summary type="html"><![CDATA[@capacitor-community/capacitor-googlemaps-nativeをVue3で利用する際の手順と各種説明です。

このライブラリはエミュレータもしくは実機でのみ確認できます。


現段階で未検証（実装されていない機能など）は説明を記載していません。


 環境



項目名
バージョン




vue
^3.0.0


@capacitor/core
^3.2.2


@capacitor/android
^3.2.2


@capacitor/ios
^3.2.2


@capacitor-community/capacitor-googlemaps-na...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[useStateの使いすぎで、収集つかなくなりそうになった時のためのリファクタリング方法🧹]]></title>
        <id>https://zenn.dev/mochinozenn/articles/173dd93e19ba18</id>
        <link href="https://zenn.dev/mochinozenn/articles/173dd93e19ba18"/>
        <updated>2021-09-18T02:33:00.000Z</updated>
        <summary type="html"><![CDATA[useStateで全てのstateを定義している人なら、ぶち当たるであろう「コードの肥大化問題」。
useStateで一つずつ定義していくのは、stateが１つか２つならいいんですけど、
増えてくると、同じような記述がたくさんでてきてコードが肥大化します。(例えば、入力フォームなど)
入力フォームの例↓

      
        
        export default function Home () {
	const [name, setName] = useState("");
	const [age, setAge] = useState(0);
	const [ge...]]></summary>
        <author>
            <name>RyosukeMochizuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next.jsで複数のAPIエンドポイントで同じhandlerを使う小技]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-09-16-next-js-api-same-handler"/>
        <updated>2021-09-17T14:07:30.000Z</updated>
        <summary type="html"><![CDATA[next.jsで同じエンドポイントをハンドラとして使い回すとちょっと便利だった

 ユースケース1: URLを変更したい場合
APIのURLを変更したいが後方互換を保ちたいようなケースがあるだろう。
リダイレクトを設定したり、Custom Serverを利用しても良いが、ちょっとそこまでやりたくないがコピペもしたくないようなときに利用できる
例えばこんなAPIが/api/greetとしてあったとする

      
        
        // /api/greet.ts

import { NextApiHandler } from "next"

const handler...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel Jetstream+Vueの多言語化(i18n)]]></title>
        <id>https://zenn.dev/yamabiko/articles/jetstream-i18n</id>
        <link href="https://zenn.dev/yamabiko/articles/jetstream-i18n"/>
        <updated>2021-09-17T03:41:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事を読むと、Laravel Jetstream+Vue環境をja.json等のファイルによって多言語化(i18n)できるようになります。
多言語化にはvue-i18nを使用します。
Jetstreamではフロントエンドとして、livewireまたはVueを選択できます。
livewireバージョンは既に多言語化対応されています。
しかし、現状、Vueバージョンの方は多言語化対応されていません。
この記事ではフロントエンドとしてvueを選択した場合の多言語化(i18n)について解説します。

 多言語化(i18n)

 １．ja.jsonファイル作成
以下のコマンドを実...]]></summary>
        <author>
            <name>やまびこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vercelのプレビューURLでは、sessionの保存ができないみたい🤔]]></title>
        <id>https://zenn.dev/mochinozenn/articles/8218f316e704e7</id>
        <link href="https://zenn.dev/mochinozenn/articles/8218f316e704e7"/>
        <updated>2021-09-17T00:41:23.000Z</updated>
        <summary type="html"><![CDATA[現在携わっているプロジェクトが、フロントNext.js, バックエンドrailsのジャムスタック構成です。
そこで、rails側で生成したsessionがブラウザのcookieに保存されない事件が起こり、解決に時間がかかったため、備忘録です。
(1ヶ月ほど時間が空いてしまったので、試したところは、覚えているものだけです、少し前後しているかも🙇‍♂️)
認証情報はブラウザのsessionで管理したいというものが前提のものです。

 問題の発端
ユーザー新規登録した際に、sessionを生成し、ブラウザのcookieに保存して、ユーザー情報を扱いたかった。
そのため、railsのinitia...]]></summary>
        <author>
            <name>RyosukeMochizuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactのライブラリでたまに見る<Component.Content />みたいなやつを調べた。~雰囲気でJSを書いている仲間へ届け~]]></title>
        <id>https://zenn.dev/mura_chan/articles/93c6027b176ce6</id>
        <link href="https://zenn.dev/mura_chan/articles/93c6027b176ce6"/>
        <updated>2021-09-16T19:22:48.000Z</updated>
        <summary type="html"><![CDATA[ことの発端

      
        
        <Alert variant="danger" onClose={() => setShow(false)} dismissible>
  <Alert.Heading>...</Alert.Heading>
  <p>
    str...
  </p>
</Alert>


      
      React Bootstrapを使用している時にこんなコードを目にし、私はこう思いました。
<Alert.Heading> ってなん...]]></summary>
        <author>
            <name>mm1995tk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactでpropsにスプレッド構文を使った場合にclassNameが意図通り適用されない]]></title>
        <id>https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite</id>
        <link href="https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite"/>
        <updated>2021-09-16T13:32:34.000Z</updated>
        <summary type="html"><![CDATA[ハマったのでメモ。
以下のような Text Component があるとする。
このコンポーネントでは div をラップしているので、Props には HTMLDivElement の attributes をユニオンしており、onClick などをいちいち定義しなくてよいようにしている。

      
        
        export type Props = React.HTMLAttributes<HTMLDivElement> & {
  size: number;
  weight?: Weight;
  align?: Align;
  c...]]></summary>
        <author>
            <name>Takashi Toyofuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactのinteractjsを使って3×3のスライドパズルを作った]]></title>
        <id>https://zenn.dev/beeeyan/articles/4e0737146199d7</id>
        <link href="https://zenn.dev/beeeyan/articles/4e0737146199d7"/>
        <updated>2021-09-16T11:07:38.000Z</updated>
        <summary type="html"><![CDATA[完成形はこんな感じ

動かして中途半端な位置だと他のパズルが動かせないのでご注意ください。
完成すると、「完成!! Congratulations!!」と表示されます。
私のポートフォリオサイトでも試せます。

 本記事内容
ソースコードは公開しているので（上記のcodesandbox内のものも含め）実装方法についてはあまり触れていません。（コメントは残したつもり）
参考情報とか、もしこのソースコードを利用する場合の注意点とか書いてます。
どっちかって言うと、「作ってみた」要素が強いです

 作った経緯
Reactで「コンポーネントをドラッグで動かす」をやってみたかった。
動かせるU...]]></summary>
        <author>
            <name>beeeyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hook Form(v7)を使ったコンポーネント設計案]]></title>
        <id>https://zenn.dev/manalink/articles/manalink-react-hook-form-v7</id>
        <link href="https://zenn.dev/manalink/articles/manalink-react-hook-form-v7"/>
        <updated>2021-09-16T09:22:21.000Z</updated>
        <summary type="html"><![CDATA[本記事ではReact Hook Form(v7)を使ったコンポーネント設計のアイデアについて話します。
https://react-hook-form.com/jp/
React Hook Formはその名の通り、Hooksをベースにフォームのバリデーション設定を記述できるライブラリで、特にv7で大きな変更が入りました。そのため、本記事ではv7前提であることをタイトルで明記しています。
Hooksにフォームのロジックが切り離されることにより、理論的には、TSXで記述されたView層と、バリデーションを司るロジック層を切り離して実装することができるはずです。
オンライン家庭教師マナリンクで...]]></summary>
        <author>
            <name>マナリンク Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TS】NestJSでFirebaseを使ってプッシュ通知を送るモック作成]]></title>
        <id>https://zenn.dev/nekoniki/articles/d4bd396476c107</id>
        <link href="https://zenn.dev/nekoniki/articles/d4bd396476c107"/>
        <updated>2021-09-16T08:37:28.000Z</updated>
        <summary type="html"><![CDATA[概要
今回はNestJSからfirebase-adminを使って端末にプッシュ通知を送るモックを作成する手順の私的メモです。
同様の構成でプッシュ通知の導通を試したい方もいるかなと思い記事にしました。
前提条件としてFirebaseのプロジェクトは作成済みで、アプリ側にもFirebaseは組み込み済み(=プッシュ通知を受け取る準備ができている)ものとします。

 NestJSとは
以下公式サイトです。
https://nestjs.com/
以下のような説明があります。

A progressive Node.js framework for building efficient, ...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.11.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1"/>
        <updated>2021-09-16T06:39:32.000Z</updated>
        <summary type="html"><![CDATA[Fixed: Unexpected nested element in author field crashes the parser
Thank you @ad-m]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NestJS + serverlessのアプリの一部にバッチ処理を入れる]]></title>
        <id>https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794</id>
        <link href="https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794"/>
        <updated>2021-09-16T06:15:42.000Z</updated>
        <summary type="html"><![CDATA[NestJSで構築した、ServerlessFrameworkを使ってデプロイするようなアプリケーションについて、普通のエンドポイントと別にバッチ処理を動かしたいことがありました。
結論から言うとbatch処理用のhandlerを用意して

 手法の比較
バッチ処理というキーワードだけだと

NestJSのTask Scheculingを使う
NestJSにAPIの口を普通に作って、APIを定期実行するLambdaを外で作る
APIを定期実行するLambdaをserverlessで新しく用意する
serverlessに新しいfunctionsの口を生やす

みたいな手法が自分にはぱっと思...]]></summary>
        <author>
            <name>ぴよまる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript Compiler API で型を自動生成する]]></title>
        <id>https://zenn.dev/panda_program/articles/typescript-compiler-api</id>
        <link href="https://zenn.dev/panda_program/articles/typescript-compiler-api"/>
        <updated>2021-09-16T02:00:57.000Z</updated>
        <summary type="html"><![CDATA[Compiler API で yaml から型を自動生成する
この記事は TypeScript Compiler API を実際に使って TypeScript の型を自動生成する方法を紹介しています。
記事内では Google Analytics のイベントの型の自動生成にトライしています。
題材として GA を選んだのは、以前 Next.js に Google Analytics（GA） を導入する方法を紹介した記事でGA のイベントで使う型を yaml から自動生成するのはどうか と書いていたからです。
正直なところ、GA のイベントに馴染みのない方もいらっしゃると思うので、最初...]]></summary>
        <author>
            <name>Panda_Program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでブラケット記法を使うときにハマったこと]]></title>
        <id>https://zenn.dev/katoaki/articles/37a8cff3a8a32a</id>
        <link href="https://zenn.dev/katoaki/articles/37a8cff3a8a32a"/>
        <updated>2021-09-16T00:54:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ブラケット記法でプロパティへアクセスしようとしたら「Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'xxx'. No index signature with a parameter of type 'string' was found on type 'xxx'」のエラーが出ました。
対応について整理しました。

 やってみたこと

 エラーの再現
エラーになった時のソースはこんな感じでした。

      
    ...]]></summary>
        <author>
            <name>katoaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript]モノレポ管理ツール比較検討]]></title>
        <id>https://zenn.dev/okmttdhr/articles/96506133e4efa0</id>
        <link href="https://zenn.dev/okmttdhr/articles/96506133e4efa0"/>
        <updated>2021-09-15T22:44:41.000Z</updated>
        <summary type="html"><![CDATA[モノレポ管理のツールを検討したときのメモ

 Background
自分が所属するチームで開発する JavaScript/TypeScript のプロダクトが増えてきて、同じような内容のリポジトリがいくつも存在している（n個とする）。
変更を加えていくにつれて、それぞれの差分が大きくなり、以下のような問題が発生する。

開発が止まっているプロジェクトの構成が古くなり、修正コストが発生する
開発が複数同時進行している場合、同じような実装を手動で同期する必要がある

これらは共通の基盤等があれば効率的に（理想的にはn分の1の労力で）開発が可能であり、将来的なコストを考えると、いまのうちにその...]]></summary>
        <author>
            <name>okmttdhr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.14.0 がリリースされたので新機能や変更点の紹介]]></title>
        <id>https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0</id>
        <link href="https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0"/>
        <updated>2021-09-15T17:25:27.000Z</updated>
        <summary type="html"><![CDATA[Copyright (c) 2018-2021 the Deno authors. MIT License.
日本時間の昨日（2021 年 9 月 15 日）に Deno の v1.14.0 がリリースされました。
https://deno.com/blog/v1.14
詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。


Web Crypto API の追加

deno lint と deno fmt に対するカスタマイズオプションの追加

URLPattern の実装
ネイティブ実装されたサーバーサイド WebSocket API の...]]></summary>
        <author>
            <name>magurotuna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[値を中継する関数の引数の型にParameters<T>を使う]]></title>
        <id>https://zenn.dev/sunnyone/articles/40a60f08eb391e</id>
        <link href="https://zenn.dev/sunnyone/articles/40a60f08eb391e"/>
        <updated>2021-09-15T15:39:05.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptでは、オーバーロードが行われていたりして、素直に定義したくない関数の型があったりする。例えば、こういう型。

      
        
            interface LogFn {
        <T extends object>(obj: T, msg?: string, ...args: any[]): void;
        (msg: string, ...args: any[]): void;
    }


      
      例えばこういう関数を何かしつつ呼びたいというとき、組み込みの型関数Parameter...]]></summary>
        <author>
            <name>sunnyone</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MicroCMSのAPIをTypeScriptで型カッチリに実装する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2876c8f98eca56</id>
        <link href="https://zenn.dev/sora_kumo/articles/2876c8f98eca56"/>
        <updated>2021-09-15T14:42:47.000Z</updated>
        <summary type="html"><![CDATA[MicroCMSとTypeScript
MicroCMSのAPIをTypeScript上で扱う場合、設定したスキーマに沿って自分で型を書かなければなりません。
この作業はそれなりに手間がかかるので、自動化していきたいと思います。

 今回使用しているソースコード
https://github.com/SoraKumo001/microcms-test

 MicroCMSの設定

 サービスの作成
まずはMicroCMS上でサービスを作成します。
名前は早い者勝ち方式のようなので、空いている名前を設定します。

開発確認用なのでプランは無料を選びます


 APIの作成
今回はAPI...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueの再描画されたコンポーネントをハイライトするChrome拡張を作った]]></title>
        <id>https://zenn.dev/yuichkun/articles/e4e8c7e633439c</id>
        <link href="https://zenn.dev/yuichkun/articles/e4e8c7e633439c"/>
        <updated>2021-09-15T11:07:35.000Z</updated>
        <summary type="html"><![CDATA[作ったもの
記事タイトルの通り、Vue.jsで再描画が走ったコンポーネントの輪郭をフラッシュしてハイライトしてくれるChrome拡張 + npmパッケージを作りました。

GitHub: yuichkun/vue-devtool-flash-updates

 背景
Vueの開発をする上で、Vue.js devtools を使っている人は多いと思います。
React Developer Tools では以前から再描画されたコンポーネントを光らせてくれる機能があり、パフォーマンス問題の解消などに役立っていたのですが、どうやらVue devtoolsにはそれがないらしいことをissueな...]]></summary>
        <author>
            <name>yuichkun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno標準ライブラリ0.107.0で増強されたcollectionsの紹介]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/db250a329c2f22</id>
        <link href="https://zenn.dev/kawarimidoll/articles/db250a329c2f22"/>
        <updated>2021-09-15T04:40:43.000Z</updated>
        <summary type="html"><![CDATA[Deno標準ライブラリのバージョン0.107.0が公開されました。
https://github.com/denoland/deno_std/releases/tag/0.107.0
こちらで増強されたcollectionsというモジュールを紹介します。
https://deno.land/std@0.107.0/collections
その名の通り、集合の扱いを支援してくれるモジュールです。
本記事では0.107.0のリリースで追加された関数を紹介します。
既存のものは以下の記事で解説していますので、あわせてご覧ください。
https://zenn.dev/kawarimidoll/a...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoのWeb Storage APIサポートとその将来について]]></title>
        <id>https://zenn.dev/uki00a/articles/web-storage-api-in-deno</id>
        <link href="https://zenn.dev/uki00a/articles/web-storage-api-in-deno"/>
        <updated>2021-09-14T22:38:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Denoはv1.10からWeb Storage APIをサポートしています。
この記事ではDenoにおけるWeb Storage APIのサポートについて解説します。

 前提
この記事はDeno v1.14を想定して記述されています。

 基本的な使い方

 localStorage
まず、localStorageの使い方について解説します。

      
        main.ts
        localStorage.setItem("foo", "bar");
console.assert(localStorage.getItem("foo") === "...]]></summary>
        <author>
            <name>uki00a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub風のキーボードショートカットをお手軽に追加する]]></title>
        <id>https://zenn.dev/imaginelab/articles/c59db2aa20aecf</id>
        <link href="https://zenn.dev/imaginelab/articles/c59db2aa20aecf"/>
        <updated>2021-09-14T08:29:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
個人開発しているWEBサービスにキーボードショートカットを追加しました。その時に使ったnpmパッケージがお手軽で素晴らしかったので記事にすることにしました。

 hotkey by GitHub
キーボードショートカットを実現するJSライブラリなどを探して、何を使うか検討していたところ、GitHub社が開発するnpmパッケージを見つけました。
https://github.com/github/hotkey
GitHubのサイトのHTMLソースを見ると、data-hotkey というhotkey由来の記述が発見できたので、GitHubのサービス内で実際に使っているようです。...]]></summary>
        <author>
            <name>ima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと]]></title>
        <id>https://zenn.dev/kanon_code/articles/4384426f8f8a80</id>
        <link href="https://zenn.dev/kanon_code/articles/4384426f8f8a80"/>
        <updated>2021-09-14T03:00:14.000Z</updated>
        <summary type="html"><![CDATA[【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと
フロント：Next.js
ホスティング：vercel
この記事ではOGPの説明は割愛します。

 参考記事一覧
Next.jsにおけるSSG（静的サイト生成）とISRについて（自分の）限界まで丁寧に説明する
nextjsのISRを使うときのfallback指定について理解するまでの話
fallbackに関して【公式】

 下調べが足りなかった箇所

OGPで表示される画像の拡張子
OGPで表示される画像の最小サイズ
fallbackの挙動についての理解


 OGPに関すること
これは自分がドキ...]]></summary>
        <author>
            <name>kanon_code</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebRTC(Amazon Chime SDK JS)で超解像を使ってみた]]></title>
        <id>https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc</id>
        <link href="https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc"/>
        <updated>2021-09-14T01:54:45.000Z</updated>
        <summary type="html"><![CDATA[この記事は、こちらの記事を改変したものになります。
https://cloud.flect.co.jp/entry/2021/09/14/105249

こんにちは。
前回の記事では、Amazon Chime SDK JSを用いたビデオ会議システムやゲーム配信システム(Among us auto mute)において、複数ユーザのビデオ映像を単一の映像に合成することでデータ通信量を削減する方法をご紹介しました。
今回は、データ通信量を削減する別の方法として、ビデオ映像の送信時には解像度を落として受信後に超解像技術を用いる方法を試みてみましたので、これを紹介したいと思います。
下図が実際に...]]></summary>
        <author>
            <name>wok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09-14のJS: Node v16.9.0(Corepack)、Spook.js(Same-Siteでのサイドチャネル攻撃)]]></title>
        <id>https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/</id>
        <link href="https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/"/>
        <updated>2021-09-14T01:00:58.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #557 - Node.js 16.9.0リリース。
Node v16.9.0 (Current) | Node.js
プロジェクトごとにnpm/yarn/pnpmなどのパッケージマネージャを切り替えて利用できるCorepackのサポートが実験的に追加されています。Corepackが有効時は、どのパッケージマネージャを使うかをpackage.json の packageManager フィールドで指定して、透過的にインストールや実行できるようになります。
また実験的であるため、利用するにはcorepack enable yarnなどのコマンドがオプトインで必要となっています。
Corepack | Node.js v16.9.0 Documentation
corepack is 何?
その他には、V8 9.3へアップデートしObject.hasOwnとError Causeをサポート、stream.composeの追加などが含まれています。
V8 release v9.3 · V8
Spook.jsという、投機的実行を利用したsame-siteでのサイドチャネル攻撃についての論文が公開されています。
same-site/cross-site, same-origin/cross-originをちゃんと理解する
以前、GoogleがSpectreの概念を説明するものとしてhttps://leaky.page/というサイトを公開しています。
Google Online Security Blog: A Spectre proof-of-concept for a Spectre-proof web
Spook.jsは、これをより実践的に検証した論文で、BitbucketやTumblrなどのユーザーコンテンツがサブドメインにあるサイト同士でのデモ、Googl…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでFirebase経由でGoogle認証を利用する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40</id>
        <link href="https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40"/>
        <updated>2021-09-14T00:01:35.000Z</updated>
        <summary type="html"><![CDATA[Firebaseを使えるようにするまで

 Firebaseでプロジェクトを作成
Firebaseを利用すると、無料で以下のサービスに対応した認証を行えます。
自力で一つ一つ対応するより遙かに簡単です。

上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。

 Google認証の有効化
Firebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。
先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。


 アプリケーションの登録
歯車ボタンからプロジェクトを設定を選びま...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでFirebase経由でGoogle認証を利用する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40</id>
        <link href="https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40"/>
        <updated>2021-09-14T00:01:35.000Z</updated>
        <summary type="html"><![CDATA[Firebaseを使えるようにするまで

 Firebaseでプロジェクトを作成
Firebaseを利用すると、無料で以下のサービスに対応した認証を行えます。
自力で一つ一つ対応するより遙かに簡単です。

上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。

 Google認証の有効化
Firebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。
先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。


 アプリケーションの登録
歯車ボタンからプロジェクトを設定を選びま...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)]]></title>
        <id>https://zenn.dev/dozo/articles/918416f96ee652</id>
        <link href="https://zenn.dev/dozo/articles/918416f96ee652"/>
        <updated>2021-09-13T21:52:39.000Z</updated>
        <summary type="html"><![CDATA[要素多過ぎ問題
関連記事:
Rustが征くシリーズ過去記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)
SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)  ← イマココ


前回の記事でTypeScriptとrollup.js、WebAssemblyを繋いだ。
次...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Souzoh Tech Talk #03: Frontend]]></title>
        <id>https://zenn.dev/cacbahbj/articles/4e72e38872d67f</id>
        <link href="https://zenn.dev/cacbahbj/articles/4e72e38872d67f"/>
        <updated>2021-09-13T16:15:39.000Z</updated>
        <summary type="html"><![CDATA[概要
2021/09/01に開催された下記勉強会のメモです
https://mercari.connpass.com/event/221978/
https://www.youtube.com/watch?v=YNLvIkqRC-g
https://engineering.mercari.com/blog/entry/20210823-a57631d32e/

 パネルディスカッション

 メルカリShopsの画面構成

メルカリトップからwebアプリケーションで埋め込み

タブの中がメルカリShopsのWebView
おすすめの商品をタップで商品画面を出す個別のWebView

検...]]></summary>
        <author>
            <name>terry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2のプロジェクトをVue3へマイグレーションする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8</id>
        <link href="https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8"/>
        <updated>2021-09-13T12:25:39.000Z</updated>
        <summary type="html"><![CDATA[Vue 3が正式リリースされてから約1年が経過しました。
Vuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？
この記事ではVue 2からVue 3への移行手順を記述していきます。
参考用のプロジェクトとして以下レポジトリを用意しました。
https://github.com/azukiazusa1/vue3-migrate-test
Vue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。

 移行ビルドを使用する
Vue 2からVue 3へ移行す...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2のプロジェクトをVue3へマイグレーションする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8</id>
        <link href="https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8"/>
        <updated>2021-09-13T12:25:39.000Z</updated>
        <summary type="html"><![CDATA[Vue 3が正式リリースされてから約1年が経過しました。
Vuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？
この記事ではVue 2からVue 3への移行手順を記述していきます。
参考用のプロジェクトとして以下レポジトリを用意しました。
https://github.com/azukiazusa1/vue3-migrate-test
Vue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。

 移行ビルドを使用する
Vue 2からVue 3へ移行す...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】CtoCのコードレビューサービス Kanon Code]]></title>
        <id>https://zenn.dev/kanon_code/articles/b3019ec509d6f5</id>
        <link href="https://zenn.dev/kanon_code/articles/b3019ec509d6f5"/>
        <updated>2021-09-13T10:38:44.000Z</updated>
        <summary type="html"><![CDATA[CtoCのコードレビューサービス Kanon Codeをリリースしました

本サイト
Kanon Code

 どんなサービス？
レビューして欲しい人がコードを投稿し、自由にレビューしてもらえるサービスです。
ユーザー登録でレビュイーにもレビュワーにもなれます。
また、レビューは販売することも可能で、販売システムはnoteを参考にしています。
もちろん無料でのレビューも可能です。

 技術スタック

Next.js
Lambda(node.js)
DynamoDB
vercel
SAM
Material UI
styled-component


 実際の画面

トップ画面はこのよう...]]></summary>
        <author>
            <name>kanon_code</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでWebサービス開発（Apollo Server/Prisma/Next.js etc...)]]></title>
        <id>https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b</id>
        <link href="https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b"/>
        <updated>2021-09-13T01:01:28.000Z</updated>
        <summary type="html"><![CDATA[最近開発しているBtoB SaaSサービスの技術スタックを、RailsからNode.jsに移行した。
これにより、フロントエンドもバックエンドも全てをTypeScriptで統一することができた。
特にNode.jsのWebバックエンドの構成について、まだまだ世の中に知見が少ない気がしているので記事にしておく。

 Webバックエンド - Node.js(TypeScript)

 Nexus/Apollo Server (Webサーバー)
GraphQLサーバーとして、コードファーストなアプローチのApollo ServerラッパーであるNexusを使っている。
https://nexu...]]></summary>
        <author>
            <name>Katsuma Narisawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでreact-pdf + react-konvaを使う]]></title>
        <id>https://zenn.dev/kin/articles/658b06a3233e60</id>
        <link href="https://zenn.dev/kin/articles/658b06a3233e60"/>
        <updated>2021-09-12T23:56:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ミチビク株式会社で開発に携わっております、Fiddler25と申します。
最近業務でreact-pdf, react-konvaを使う機会がありました。
画面上にPDFを表示し、PDF上で画像をドラッグ & ドロップする機能が必要だったのですが、Next.jsではインポートして利用できるようにするまでいくつかハマりポイントがあったため、解決方法を記したいと思います。
記事の最後にreact-pdf + react-konvaの簡単なサンプルコードを載せました。
こちらのコードで以下のような機能を作ることができます。

PDFはpdf.jsのExamplesにあるhe...]]></summary>
        <author>
            <name>Fiddler25</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js の Error を丁寧に扱う]]></title>
        <id>https://zenn.dev/takepepe/articles/nextjs-error-handling</id>
        <link href="https://zenn.dev/takepepe/articles/nextjs-error-handling"/>
        <updated>2021-09-12T16:39:51.000Z</updated>
        <summary type="html"><![CDATA[Next.js には組み込みのエラーフォールバック機構が存在します。pages/404.tsxとpages/500.tsx、Unhandled Error を捉えるpages/_error.tsxが組み込みフォールバックです。https://nextjs.org/docs/advanced-features/custom-error-page
実アプリケーションにおいてはこれだけでは不十分なケースが多く、意図的なもの・そうでないものをハンドリングしログ収集に繋げるなど、きちんとエラー設計をしたいところです。

 TypeScript 4.4 で try catch の推論が変更になった
...]]></summary>
        <author>
            <name>Takepepe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.JSでページ遷移する前にbeforeunloadはさみたい時]]></title>
        <id>https://zenn.dev/qaynam/articles/c4794537a163d2</id>
        <link href="https://zenn.dev/qaynam/articles/c4794537a163d2"/>
        <updated>2021-09-12T14:30:16.000Z</updated>
        <summary type="html"><![CDATA[フォームに入力中のデータがの残っていて、ページ遷移する前に注意(window.confirm())を出したくて、色々ハマりましたので、書き残しておきます。
結論から言う、beforeunloadはwindow.location.hrefやF5ようなページの再読み込むが発生する時には発火しますが、Next.jsのRouterのような ブラウザーのhistory APIでの画面遷移の場合は発火しないようです。
解決策をいくつか見つかったので、全部書いておきます。

 解決策1

      
        
        import SingletonRouter, { Router ...]]></summary>
        <author>
            <name>qaynam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript] 複数のKeyから引くMap]]></title>
        <id>https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117</id>
        <link href="https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117"/>
        <updated>2021-09-12T12:36:27.000Z</updated>
        <summary type="html"><![CDATA[type UniqueId = string
type Obj = ...

const numberKeyMap = new Map<number, UniqueId>()
const stringKeyMap = new Map<string, UniqueId>()
const map = new Map<UniqueId, Obj>()

function getObjByNumberKey(key: number): Obj | undefined {
  const id = numberK...]]></summary>
        <author>
            <name>みつよし</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactとかNext.jsのアクセス制御]]></title>
        <id>https://zenn.dev/peg/articles/dff5c97e5c41b0</id>
        <link href="https://zenn.dev/peg/articles/dff5c97e5c41b0"/>
        <updated>2021-09-12T07:00:06.000Z</updated>
        <summary type="html"><![CDATA[課題としては、SPAでのアクセス制御。

ユーザーがログインしたら特定の画面にアクセスできる
ログインしてない場合はアクセスできないようにする。
ログインしている時はログイン画面からリダイレクトする

などなど。
https://zenn.dev/nus3/scraps/d04f5026bab361
https://zenn.dev/catnose99/articles/2169dae14b58b6

 リダイレクトする前に画面が見えてしまう。
functional componentでuseEffectで制御しようとすると、見せたくない画面が一瞬表示される。
https://davec...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjsでの認証の記事を読んだ]]></title>
        <id>https://zenn.dev/peg/articles/61440985120417</id>
        <link href="https://zenn.dev/peg/articles/61440985120417"/>
        <updated>2021-09-12T06:59:39.000Z</updated>
        <summary type="html"><![CDATA[Nextjsでの認証のタイミングがどうなのか調べた。

 記事1
https://www.mikealche.com/software-development/how-to-implement-authentication-in-next-js-without-third-party-libraries

In this way, if you don’t check for authentication on the server, you can prevent adding getServerSideProps to your pages.


And if your pages ...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to chechk is home with useRouter in Next.js(React)]]></title>
        <id>https://zenn.dev/maztak/articles/0a59c556ce4b83</id>
        <link href="https://zenn.dev/maztak/articles/0a59c556ce4b83"/>
        <updated>2021-09-12T05:14:41.000Z</updated>
        <summary type="html"><![CDATA[Llike this👇

      
        
        {router.pathname !== '/' && (
    <div className=''>
	...
    </div>
)}


      
      
 Properties of router
Here is a example that shows what are propeties of router. This url is /search?q=aaa, not / so that we can understand. So don't us...]]></summary>
        <author>
            <name>Takuya Matsuda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript]非同期処理(promise)の最大並列実行数を5行で制限]]></title>
        <id>https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63</id>
        <link href="https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63"/>
        <updated>2021-09-12T01:55:08.000Z</updated>
        <summary type="html"><![CDATA[非同期処理の並列実行数に関して
大量の処理をAPIに投げるような場合、非同期処理が行われているとすぐに次の処理の実行が可能になります。そのためDoS攻撃のようなリクエストを投げてしまう場合があります。かといって一件ずつ処理待ちをしていると、待機時間が馬鹿になりません。
こういう場合に必要になってくるのが並列実行回数の制限です。

 よくある非同期待ちに関して
最大並列実行数を制御する場合、よくある処理としては実行処理そのものをキューに積んで、最大数を制限しながらキューの中の処理を実行していく方式です。この方法の問題点は、処理内容が10万件とか大規模な処理が必要な場合に、10万件の実行...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Headless UI + Vue3で作るUIコンポーネント]]></title>
        <id>https://zenn.dev/chabatake_i/articles/headlessui_introduction</id>
        <link href="https://zenn.dev/chabatake_i/articles/headlessui_introduction"/>
        <updated>2021-09-11T16:53:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Headless UIはTailwind CSSを開発しているTailwind Labsを中心に開発されているUIライブラリです。特徴として、スタイルは実装者側で自由に制御できること、アクセシビリティはライブラリ側で確保してくれること等が上げられます。React用とVue.js用がそれぞれ用意されていますが、今回はVue.jsでUIコンポーネントを作成してみました。
全体のコードは以下のリポジトリに公開しています。
https://github.com/K-shigehito/headlessui-example

本記事は学習ノートとして投稿させて頂きます。
内容に誤り等...]]></summary>
        <author>
            <name>k-shigehito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[useEffect has amissing dependencyのwarningを解消する]]></title>
        <id>https://zenn.dev/mackay/articles/1e8fcce329336d</id>
        <link href="https://zenn.dev/mackay/articles/1e8fcce329336d"/>
        <updated>2021-09-11T16:20:49.000Z</updated>
        <summary type="html"><![CDATA[こんにちは
マッケイです。
まとめまで書き終わった後に突如ページが消えて、まっさらのページを見ながら、それでもなお不屈の精神で書き上げた記事になります。

 はじめに
僕が運営するReact Bootcampというコミュニティにて、useEffect has amissing dependencyというwarningを解消したいという声を聞きました。
僕自身も体系だった情報がないかと探したところ、見当たらなかったのでこの記事を執筆しました。

 なぜwarningが発生する？
そもそもなぜこのwarningが発生しているのでしょうか？
このwarningを出している本体は、ESLintで...]]></summary>
        <author>
            <name>マッケイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 8のフロントエンド環境をReact+TypeScriptにする]]></title>
        <id>https://zenn.dev/laiso/articles/715543d2cd5552</id>
        <link href="https://zenn.dev/laiso/articles/715543d2cd5552"/>
        <updated>2021-09-11T15:56:43.000Z</updated>
        <summary type="html"><![CDATA[概要
Laravel標準のフロントエンド環境を自分好みにカスタマイズします

 方針

React+TypeScriptで画面を書く
Laravel Jetstream、Breezeを使わない(Livewire/Inertia.jsやAlpine.js、Blade Componentsが付属して入ってくるので)
Bladeテンプレートは画面構成に使わない
SPAにする
SSRはしない
Laravel Mixでアセットを管理する

なぜこうするかというとフロントエンドの環境だけ分離できる状態を維持しておいて、あとで複数人開発への移行やデプロイ分割をしたいためです。

 NPMモジュール...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ScalaとKotlinの分割代入(っぽい機構)の比較]]></title>
        <id>https://zenn.dev/gakuzzzz/articles/1fa87342be1f82</id>
        <link href="https://zenn.dev/gakuzzzz/articles/1fa87342be1f82"/>
        <updated>2021-09-11T15:48:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
世のプログラミング言語には「分割代入(Destructuring Assignment)」と呼ばれる機構を持つものがあります。
メジャーな所では ECMAScript/TypeScript や Python, PHP, Ruby などでしょうか。
実のところ Scala と Kotlin はこの分割代入という言語機構を持っていません。代わりに別の機構によって似たような目的を達成しています。
この記事では両者がとったアプローチを比較してそれぞれの違いについて紹介します。
使用する言語のバージョンは以下の通りです。

TypeScript 4.4

Scala 3.0.2

K...]]></summary>
        <author>
            <name>gakuzzzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[==（等価演算子）と===（厳密等価演算子）の違い]]></title>
        <id>https://zenn.dev/bokutano26/articles/442f11f4ec69bf</id>
        <link href="https://zenn.dev/bokutano26/articles/442f11f4ec69bf"/>
        <updated>2021-09-11T13:56:16.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。この記事ではjavaScriptにおける等価演算子（==）と厳密等価演算子（===）の違いについて解説していきます。実際の現場では、等価演算子は非推奨としているところが多い印象です。その理由も以下の解説を読むことで理解できるかと思います。

 等価演算子（==）と厳密等価演算子（===）の違い
まず初めにMDNを見てみましょう。
MDNには、等価演算子と厳密等価演算子の説明が以下のようにされています。

 等価演算子(==)

等価演算子 (==) は、二つのオペランドが等しいことを検査し、論理値で結果を返します。厳密等価演算子とは異なり、オペランドの型が異なる場合には型の変...]]></summary>
        <author>
            <name>bokutano26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChromaticとstorybookでUIのテストを自動化してみた]]></title>
        <id>https://zenn.dev/kyo9bo/articles/9909ba89c42a77</id>
        <link href="https://zenn.dev/kyo9bo/articles/9909ba89c42a77"/>
        <updated>2021-09-11T09:02:23.000Z</updated>
        <summary type="html"><![CDATA[やったこと
storybook + chromatic + githubActionでUIのテストを自動化させました。
今回mainとdevelopブランチにpull requestが行われた場合に実行させるようにしたので、手順を記事にします。

 手順

 chromaticのセットアップ
chromaticとは、storybookのメンテナーが作っているstorybookをホスティングするサービスです。加えてgithubと連携することで、PRと連携してUIのreviewを効率化してくれます。
現状、似たようなサービスとしてNetlifyがよく使われているように思われますが、sto...]]></summary>
        <author>
            <name>kyosuke kubo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptの全てのasを撲滅するas-safelyというOSSを作ったゾォォ〜]]></title>
        <id>https://zenn.dev/yuitosato/articles/fdbc464f31c292</id>
        <link href="https://zenn.dev/yuitosato/articles/fdbc464f31c292"/>
        <updated>2021-09-11T08:02:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
as-safelyというライブラリを作成しました。
このライブラリを使うと、型判定に失敗したときはその場で例外を投げてくれます。
危険なas(型Assertion)を撲滅し、真にタイプセーフなType Script環境を手に入れましょう。
https://github.com/YuitoSato/as-safely

      
        
        const str1: string = asSafely('1' as unknown, isString);
// => OK

const str2: string = asSafely(1 as u...]]></summary>
        <author>
            <name>Yuito Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ディレクトリ構造を保ったままwebp生成するNode.js/webp対応について]]></title>
        <id>https://zenn.dev/itomise/articles/72ab332bb8f506</id>
        <link href="https://zenn.dev/itomise/articles/72ab332bb8f506"/>
        <updated>2021-09-11T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[本記事の構成は、CIなどは使わずにすべてローカルで完結することを前提としています。


 モチベーション
自分の前回の記事で、Next.jsの画像最適化モジュール「next-optimized-images」を使った環境などについて書いたのですが、
実際に使っていていくつか問題があったため結局実務では使っていません...。
問題としては、

ほぼ空のプロジェクトでも、next-optimized-imagesを使っただけで生成ファイルのサイズが200kbほど増えてしまっていた（詳しくは調べていませんが）
ビルド毎に画像生成を行うので毎回ビルドが遅い

ということがありました。
画像最適...]]></summary>
        <author>
            <name>itomise</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【VSCode Extension】JavaScriptのconsoleを簡単に挿入できる拡張機能を作って公開してみた]]></title>
        <id>https://zenn.dev/rpf_nob/articles/vscode-extension-js-console</id>
        <link href="https://zenn.dev/rpf_nob/articles/vscode-extension-js-console"/>
        <updated>2021-09-11T06:41:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は以下を目的としています。

VSCodeの拡張機能を作って公開する方法の簡単な説明
作った拡張機能の宣伝


 どういうものを作ったのか❓
JavaScript(TypeScript)でconsole.logなどの構文を簡単に挿入できるものを作りました。今まで使用していたほぼ同じような拡張機能があり、ちょっと機能追加したかったのですが、しばらく更新されていないようだったので自身で作り直して公開してみることにしました。
ここからインストールできますのでよかったらインストールして試してみてください🙇‍♂️
https://marketplace.visualstudi...]]></summary>
        <author>
            <name>のふのふ🀄</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vuexの型定義でモジュールでの型解決してくれるようにしてみた]]></title>
        <id>https://zenn.dev/satohjohn/articles/b064cf966a9e20</id>
        <link href="https://zenn.dev/satohjohn/articles/b064cf966a9e20"/>
        <updated>2021-09-11T04:37:38.000Z</updated>
        <summary type="html"><![CDATA[前提
Nuxt.jsでVuexを使っているのでそのときに
https://github.com/ktsn/vuex-type-helper
以下を利用させてもらっていました
ただ、モジュールのstore場合利用時にtypeがうまくはまらないから、どうするんだろうとか色々見てたのですがあんまりいい手段が見つからなく、自分で型定義でテンプレートリテラル部分書いたらどうなんだろうとおもってやってみました。
正直もっと良い手段があると思いますが、今回は自分の勉強踏まえの備忘録。
そして、多分Vue3対応とかが入ったらちゃんと動いていくんだと思うので、後で書き換えればいいし、現状型の問題だけな...]]></summary>
        <author>
            <name>佐藤慧太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【StripeAPI】複数の送金先への山分けを実装する]]></title>
        <id>https://zenn.dev/mamushi/articles/multiple_transfer</id>
        <link href="https://zenn.dev/mamushi/articles/multiple_transfer"/>
        <updated>2021-09-11T04:31:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、ダイゴと申します。
先日、StripeAPI を使った山分けの決済（ 顧客：送金先 = １：n ）を実装する機会があったので、
インプットした情報を忘れないうちに整理しておきたい、と思い記事にしました。
どなたかの参考になれば幸いです。

 実装する機能
プラットフォーム型サービスで、以下のような決済要件を持つものとします。

決済総額のうち、10%をプラットフォーム手数料として徴収
残り 90%を複数の送金先へ均等に山分けする


 サービス全体のイメージ


 Customer
顧客。購入者でありお金を支払うユーザー。上の図で緑。

 Platform
その名の通りプラッ...]]></summary>
        <author>
            <name>Daigo Wakabayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[算数インベーダー(1)]]></title>
        <id>https://zenn.dev/open_sesame/articles/2f6442ccdddb1b</id>
        <link href="https://zenn.dev/open_sesame/articles/2f6442ccdddb1b"/>
        <updated>2021-09-11T01:10:07.000Z</updated>
        <summary type="html"><![CDATA[ゲーム
世の中的には、プログラミングする人＝ゲーマー という方程式があるようで(思い込みか?)
長いことプログラミングをしていますが、パソコンは購入しますが、ゲーム機なるものを購入したこともパソコンやスマホでゲームをすることもありません。

 ゲームと脳
何かを獲得したときや何かをやっつけたときに脳が快楽物質であるドーパミンを大量に分泌するらしいですね。
どうも自分には、これが不要なようで...
ゲームをすることに興味がありませヌ。

 本題に
小学生低学年に算数を楽しんで憶えてしかもドーパミンを大量にあびてもらおうと思い。
1995年ころ京都の幼稚園で実際に使われていたアプリをVu...]]></summary>
        <author>
            <name>open sesame</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js] AmplifyでSSRデプロイする方法]]></title>
        <id>https://zenn.dev/052hide/articles/e1b9f90013c7f2</id>
        <link href="https://zenn.dev/052hide/articles/e1b9f90013c7f2"/>
        <updated>2021-09-10T16:15:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsアプリ作成

      
        
        npx create-next-app --ts

# What is your project named?
nextjs-ssr-amplify-sample


      
      コードが生成されるまで待つ！

 GitHubにあげる
省略
https://github.com/052hide/nextjs-ssr-amplify-sample

 Amplifyにデプロイ

 AWSにログインしてAmplify Consoleを開く
https://ap-northeast-1.console...]]></summary>
        <author>
            <name>Hidetoshi Ota</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsにおけるSPA的遷移の考え方]]></title>
        <id>https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507</id>
        <link href="https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507"/>
        <updated>2021-09-10T10:28:59.000Z</updated>
        <summary type="html"><![CDATA[Next.jsにおけるSPA的遷移の考え方

 背景
インターン先で既存SSR(React)プロジェクトをNext.jsに移行する際に、プロフィールページのタブやモーダルといった箇所でコンポーネントの切り替えと共にURLも変わるようなSPA的遷移の実装を移行するのに苦労した
具体的にはreact-routerのhistory.push()にあたる機能が Next.js ですぐに見つけられなかった
今まではタブなどの切り替え時にhistory.push()をすることで実装していたが、
それがNext.jsではどのようにすれば実装できるかについて議論する

 単語定義

 SPA的遷移
...]]></summary>
        <author>
            <name>ichigo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニア向けライブ配信サービスに配信予約機能が追加されました！]]></title>
        <id>https://zenn.dev/stacklive/articles/bccf6d9a6d0806</id>
        <link href="https://zenn.dev/stacklive/articles/bccf6d9a6d0806"/>
        <updated>2021-09-10T03:40:19.000Z</updated>
        <summary type="html"><![CDATA[配信を予約して事前に告知することが可能になりました
今回のアップデートでは配信をする日時を予約することが可能になり、視聴者に事前にお知らせできるようになりました。予約配信機能により、「いきなり配信をしても視聴者が集まらない」「配信内容に需要があるかわからない」などの不安も軽減されより気軽に配信していただければと思います。


 配信予約をする方法

右上のLIVEボタンをクリック
通常の配信通りにタイトルと概要を記入
配信予約をONにする
配信予約日時を設定して予約する


配信を予約すると、ホーム画面にある予約配信の箇所に表示されるようになります。
また、自分が予約している配信はマ...]]></summary>
        <author>
            <name>StackLive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Namespace Import に補完を効かせる TypeScript プラグインを作った]]></title>
        <id>https://zenn.dev/yuku/articles/4d2f665cf42385</id>
        <link href="https://zenn.dev/yuku/articles/4d2f665cf42385"/>
        <updated>2021-09-10T02:27:35.000Z</updated>
        <summary type="html"><![CDATA[Namespace Import に補完を効かせる TypeScript Language Service Plugin[1]、typescript-plugin-namespace-import を作りました。
そのモチベーションと使い方を紹介します。


この記事・製作物は Named Export と Default Export の是非について主張をするものではなく、それらの話題に関連して作ったものでもありません


 TL;DR

普通のオブジェクトを名前空間として用いると Tree Shaking が効かずバンドルサイズが膨らむ
Namespace Import を用いれば ...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】dynamic-pathでindex.tsxのComponentが一瞬表示される]]></title>
        <id>https://zenn.dev/nitaking/articles/9ff4fca3e8e62e</id>
        <link href="https://zenn.dev/nitaking/articles/9ff4fca3e8e62e"/>
        <updated>2021-09-09T14:24:03.000Z</updated>
        <summary type="html"><![CDATA[何がおきたか


pages/index.tsxの内容が、pages/[hoge].tsxに一瞬表示される


 なぜか

SPAはWEBサーバーからindex.html受け取る

これがデフォルトの表示に関係している？？？




 どうしたか

      
        
          /**
   * dynamic-pathなどの場合、`pages/index.tsx`がSSRのデフォルトとして読み込まれるため、
   * SSRではそのまま、CSRではリダイレクトする.
   *
   *  SSR: Rootがレンダリング -> Contentがレンダリン...]]></summary>
        <author>
            <name>nitaking</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript 環境構築 v11.1]]></title>
        <id>https://zenn.dev/rabbit/articles/d7175e62dc56a5</id>
        <link href="https://zenn.dev/rabbit/articles/d7175e62dc56a5"/>
        <updated>2021-09-09T10:47:54.000Z</updated>
        <summary type="html"><![CDATA[2021/09/時点での Next.js + TypeScript の環境構築忘備録です。
主な環境のバージョン

next: v11.1.0
typescript: v4.3.5
eslint: v7.32.0
@emotion/react: v11.4.1


 1.Next.jsの環境を作成
https://nextjs.org/docs#setup
tpescript用の環境作成コマンドよしなにやってくれる便利なやつ。

      
        
        yarn create next-app --typescript


      
      
 ディレクト...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript 環境構築 v11.1]]></title>
        <id>https://zenn.dev/rabbit/articles/d7175e62dc56a5</id>
        <link href="https://zenn.dev/rabbit/articles/d7175e62dc56a5"/>
        <updated>2021-09-09T10:47:54.000Z</updated>
        <summary type="html"><![CDATA[2021/09/時点での Next.js + TypeScript の環境構築忘備録です。
主な環境のバージョン

next: v11.1.0
typescript: v4.3.5
eslint: v7.32.0
@emotion/react: v11.4.1


 1.Next.jsの環境を作成
https://nextjs.org/docs#setup
tpescript用の環境作成コマンドよしなにやってくれる便利なやつ。

      
        
        yarn create next-app --typescript


      
      
 ディレクト...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StorybookでuseSelectorのモックを追加]]></title>
        <id>https://zenn.dev/takayuri/articles/af583f251ed64d</id>
        <link href="https://zenn.dev/takayuri/articles/af583f251ed64d"/>
        <updated>2021-09-09T08:49:27.000Z</updated>
        <summary type="html"><![CDATA[Storybook、React初心者です。
Storyook内でuseSelector部分をモックにして表示パターンを作成した時のメモです。
(そもそもStorybookでそんなことするのが適切でないかもしれません。)

 前提

"react": 16.13.1
"storybook": 5.3.19
"react-redux": 7.2.0


      
        Fooコンポーネント(一部抜粋)
        import * as selectors from "src/selectors"; // Stateのデータを加工してる関数がまとまっている

export ...]]></summary>
        <author>
            <name>Take</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[まとめ] Jest について]]></title>
        <id>https://zenn.dev/azu369yu/articles/a9989d73b4d19d</id>
        <link href="https://zenn.dev/azu369yu/articles/a9989d73b4d19d"/>
        <updated>2021-09-09T06:18:50.000Z</updated>
        <summary type="html"><![CDATA[Jest とは
https://jestjs.io/ja/
Jestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール
Jest には

テストランナー
カバレッジ計測
モック
アサーション

など テストの実行を含めた 様々な機能がオールインワンで提供されているため
今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる
vueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる

 Jest の設定について

実行環境設定

どの環境で テストを動作させ...]]></summary>
        <author>
            <name>Yu Watanabe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[まとめ] Jest について]]></title>
        <id>https://zenn.dev/azu369yu/articles/a9989d73b4d19d</id>
        <link href="https://zenn.dev/azu369yu/articles/a9989d73b4d19d"/>
        <updated>2021-09-09T06:18:50.000Z</updated>
        <summary type="html"><![CDATA[Jest とは
https://jestjs.io/ja/
Jestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール
Jest には

テストランナー
カバレッジ計測
モック
アサーション

など テストの実行を含めた 様々な機能がオールインワンで提供されているため
今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる
vueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる

 Jest の設定について

実行環境設定

どの環境で テストを動作させ...]]></summary>
        <author>
            <name>Yu Watanabe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無名関数内でNuxt.jsのthisを利用したい。]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/311184ad511764</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/311184ad511764"/>
        <updated>2021-09-08T12:56:33.000Z</updated>
        <summary type="html"><![CDATA[これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）

 これダメ

      
        sample.vue
        <script>
  setTimeout(function() {
    this.data = false;
  }, 1000);
</script>


      
      
 JavaScriptだったら

      
        sample.v...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無名関数内でNuxt.jsのthisを利用したい。]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/311184ad511764</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/311184ad511764"/>
        <updated>2021-09-08T12:56:33.000Z</updated>
        <summary type="html"><![CDATA[これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）

 これダメ

      
        sample.vue
        <script>
  setTimeout(function() {
    this.data = false;
  }, 1000);
</script>


      
      
 JavaScriptだったら

      
        sample.v...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.js+TypeScriptにjQueryを導入するルーティン]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450"/>
        <updated>2021-09-08T12:44:09.000Z</updated>
        <summary type="html"><![CDATA[触れる回数は多いけどいまだに覚えられないのでメモ
これよりいい方法いっぱいあると思います

 コマンド

      
        コマンドライン
        $ npm install --save-dev jquery @types/jquery


      
      
 nuxt.config.js

      
        nuxt.config.js
        + const webpack = require('webpack')

export default {
// ...省略...
// Build Configuration: https...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.js+TypeScriptにjQueryを導入するルーティン]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450"/>
        <updated>2021-09-08T12:44:09.000Z</updated>
        <summary type="html"><![CDATA[触れる回数は多いけどいまだに覚えられないのでメモ
これよりいい方法いっぱいあると思います

 コマンド

      
        コマンドライン
        $ npm install --save-dev jquery @types/jquery


      
      
 nuxt.config.js

      
        nuxt.config.js
        + const webpack = require('webpack')

export default {
// ...省略...
// Build Configuration: https...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BashのParameter expansionの一部について整理]]></title>
        <id>https://zenn.dev/takasing/articles/parameter-extensions</id>
        <link href="https://zenn.dev/takasing/articles/parameter-extensions"/>
        <updated>2021-09-08T06:12:38.000Z</updated>
        <summary type="html"><![CDATA[シェル芸をする際にいつも何でググればよいかわからなくなるあれのことを Parameter expansion というらしい。
変数が存在しない際にデフォルト値設定したり、変数が存在する場合に変わりの文字を入れたりするあれ。
Next.js のアプリケーションを Vercel にデプロイする際に.env.localをうまく拡張する際に必要になったので一部だけ整理しとく。 .env.localでうまく展開されませんでした。。。

      
        
        #!/bin/bash

NO_VARIABLES=
VARIABLES=var

echo "- operator...]]></summary>
        <author>
            <name>Takashi Toyofuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Trendingを定期的につぶやくTwitter BotをFirebaseで作ってみた]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/github-trending-bot</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/github-trending-bot"/>
        <updated>2021-09-08T03:35:07.000Z</updated>
        <summary type="html"><![CDATA[📦 作ったもの
GitHub Trendingに掲載されたリポジトリを定期的につぶやく Twitter Bot を作りました。
全体のトレンドをつぶやく@gh_trending_と、JavaScript・TypeScript のトレンドをつぶやく@gh_trending_jsの 2 種類があります。



@gh_trending_
@gh_trending_js









仕様はこちらです。

30 分から 1 時間おきに GitHub Trending に掲載されているリポジトリをツイート
一度ツイートたリポジトリは再度掲載されていても 1 週間はつぶやかない
投稿内容は...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型変数に期待していない型推論がきいてしまうとき]]></title>
        <id>https://zenn.dev/qsf/articles/65afdf6a71bbc6</id>
        <link href="https://zenn.dev/qsf/articles/65afdf6a71bbc6"/>
        <updated>2021-09-07T18:25:35.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
NoInfer のような物があればいいのだが，ないのでこれを使う
https://github.com/microsoft/TypeScript/issues/14829#issuecomment-322267089

      
        
        export type NoInfer<T> = T & {[K in keyof T]: T[K]}


      
      
 Background
ものは違いますが，ReactのCustom Hooksを作っていて詰まりました．
以下の例を見てください．

      
   ...]]></summary>
        <author>
            <name>たふみ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[named exportは有害だと考えられます]]></title>
        <id>https://zenn.dev/yuhr/articles/668dba202726bf</id>
        <link href="https://zenn.dev/yuhr/articles/668dba202726bf"/>
        <updated>2021-09-07T16:22:44.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptの話です。default exportを使うことが有害であるかのような言説に異議を唱えるためにこの記事を書きました。
あらかじめ断っておきますが、この記事はTypeScriptを使っているプロジェクトのモジュール構成に関する話です。npmに上げられているようなNode.jsパッケージ間でのimport/exportはまた別のエコシステムが関わってくる話なので、分けて考えてください。Denoにおけるimport/exportに関しては、この記事での議論がそのまま通用します。

 基本的にdefault exportのみを使うべき
筆者の考えでは、named export...]]></summary>
        <author>
            <name>yuhr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[フロントエンド初心者がVueで作ったブログをNuxtのSSGで作り直した時につまずいたこと]]></title>
        <id>https://zenn.dev/shlia/articles/a6c2fb22ab7c6e</id>
        <link href="https://zenn.dev/shlia/articles/a6c2fb22ab7c6e"/>
        <updated>2021-09-07T10:16:24.000Z</updated>
        <summary type="html"><![CDATA[概要
業務で触れる技術はバックエンド関連が主で、フロントエンドを関連の技術に触れることが少ないのですが、勉強を兼ねてVue.jsとContentfulで作成したブログをSPAで、Netlifyにホスティングしていました。
その後、パフォーマンスの向上+OGPの設定を目的として、Nuxt.jsのSSG機能を使って書き換えてみました。

 リンク

 リプレイス後
https://github.com/shira79/MyBlog
https://shira-nuxt-static.netlify.app/
使用技術は以下です。
Nuxt.js or Next.js + Contenfu...]]></summary>
        <author>
            <name>shira79</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supabaseでuseswrを使ってみる。]]></title>
        <id>https://zenn.dev/byanbyan/articles/supabase_swr</id>
        <link href="https://zenn.dev/byanbyan/articles/supabase_swr"/>
        <updated>2021-09-07T08:07:18.000Z</updated>
        <summary type="html"><![CDATA[Supabase で swr 使えるのだろうか、、、
やってみたのでまとめ。
参考 🐈 Github
https://github.com/supabase/supabase/discussions/764
SWR
https://swr.vercel.app/ja
Supabase
https://app.supabase.io/


プロジェクト内に
pages/apiフォルダを作成し、supabase からデータ取得する処理を書く。


useSWR を使って、pages/apiからデータを取得する。



 0.supabase のクライアントの設定
https://supaba...]]></summary>
        <author>
            <name>ゆゆゆ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Issuesをキレイに外部公開するサービス「2go」作ってみた]]></title>
        <id>https://zenn.dev/nice2have/articles/aa15eccd13a23c</id>
        <link href="https://zenn.dev/nice2have/articles/aa15eccd13a23c"/>
        <updated>2021-09-07T07:58:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回初めて個人開発で作ったサービスを公開します。今までも何回かトライしていたのですが、なかなか公開までに至らないうちに、なにか問題にぶちあたったり、時間がかかりすぎて情熱が冷めてしまったりしていたので、今回はまずはスモールスタートで公開して改善していくことを心がけました。大体今回の公開まで、開発を始めてから1ヶ月程度になります。毎日朝4時半に起きて、子どもたちが起きる7時過ぎまでを開発時間として取り組んできました。


 どんな人向け？
自分で作っているサービスの開発ロードマップをユーザーに公開するために、都度ブログを書いたりするのも大変ですよね。もし、自分のサービスのソー...]]></summary>
        <author>
            <name>Nakajima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09-07のJS: Electron 14.0.0、node-fetch 3.0.0、replace-jquery]]></title>
        <id>https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/</id>
        <link href="https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/"/>
        <updated>2021-09-07T01:36:56.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #556 - Electron 14.0.0がリリースされました。
Electron 14.0.0 | Electron Blog
依存がそれぞれChromium 93、Node.js 14.17.0、V8 9.3へとアップデートされています。
app.allowRendererProcessReuseオプションの削除、worldSafeExecuteJavaScriptオプションを削除(trueがデフォルト)されています。
また、Electron 12でDeprecatedとなっていたremoteモジュールを削除し、@electron/remoteという外部モジュールへと変更されています。
contextBridgeを使っていく方向になっています。
Electron（v.14.0.0 現在）の IPC 通信入門 - よりセキュアな方法への変遷 - Qiita
Node.jsでのFetch APIのpolyfillライブラリであるnode-fetch 3.0.0がリリースされました。
Release v3.0.0 · node-fetch/node-fetch
破壊的な変更として、Node.jsのESMのサポート、Node.js 12未満のサポート終了されています。
timeoutオプションは不要となったため削除されています。
Should we deprecate timeout in favor of AbortController? · Issue #523 · node-fetch/node-fetch
一方で、非標準なhighWaterMarkオプションの追加されています。
When users clone(), automatically create streams with custom highWaterMark · Issue #38…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでSoracomの基地局の位置情報を取得できるAPIを実行する]]></title>
        <id>https://zenn.dev/bull/articles/8f1d28c8cfcdf1</id>
        <link href="https://zenn.dev/bull/articles/8f1d28c8cfcdf1"/>
        <updated>2021-09-06T14:02:36.000Z</updated>
        <summary type="html"><![CDATA[基地局の位置情報を取得できる API を公開しました！
に記載されているAPIを利用して位置情報を取得してみます。

 はじめに

 Soracom APIの使い方
リファレンスが公開されているのでこちらから使い方を試してみることが可能です
https://users.soracom.io/ja-jp/tools/api/reference/

 SoracomのAPIから基地局情報を取得するために必要なAPI
少なくとも以下の3つのAPIを実行する必要がありました。

APIトークンの取得(認証キーを利用してAPIを実行してトークンを取得します)
3G の場合： MCC（Mobile ...]]></summary>
        <author>
            <name>bull</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjs + typescript + jest + enzyme の最小サンプルを動かしたい]]></title>
        <id>https://zenn.dev/matsutoba/articles/fba1e8a7c41181</id>
        <link href="https://zenn.dev/matsutoba/articles/fba1e8a7c41181"/>
        <updated>2021-09-06T11:24:10.000Z</updated>
        <summary type="html"><![CDATA[nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。
先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。

 やりたいこと

ボタンを押したらテキストが変わるコンポーネントを作る。
ボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい


 動かした環境

macOS 11.5.2
Node.js 14.17.0
yarn 1.22.10

後述の cr...]]></summary>
        <author>
            <name>matsutoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjs + typescript + jest + enzyme の最小サンプルを動かしたい]]></title>
        <id>https://zenn.dev/matsutoba/articles/fba1e8a7c41181</id>
        <link href="https://zenn.dev/matsutoba/articles/fba1e8a7c41181"/>
        <updated>2021-09-06T11:24:10.000Z</updated>
        <summary type="html"><![CDATA[nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。
先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。

 やりたいこと

ボタンを押したらテキストが変わるコンポーネントを作る。
ボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい


 動かした環境

macOS 11.5.2
Node.js 14.17.0
yarn 1.22.10

後述の cr...]]></summary>
        <author>
            <name>matsutoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next jsをGitHub Pageにデプロイしたときにnext/linkが正しく遷移するようにする]]></title>
        <id>https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377</id>
        <link href="https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377"/>
        <updated>2021-09-06T09:06:53.000Z</updated>
        <summary type="html"><![CDATA[状況
Nextjs のプロジェクトで GitHub Pages にデプロイし 下のようなコードを書いた時に https://aaaaaaaaaaaaaa.github.io/bbbbbbbbbbbb/page1に遷移してほしいのに https://aaaaaaaaaaaaaa.github.io/page1に遷移してしまう。

      
        
        <Link href="/page1">
  <a>リンク</a>
</Link>


      
      
 解決策

 GitHub 側
GitHub の...]]></summary>
        <author>
            <name>mochi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gatsby.js + Emotion で環境構築]]></title>
        <id>https://zenn.dev/rabbit/articles/9b439fb4278ab9</id>
        <link href="https://zenn.dev/rabbit/articles/9b439fb4278ab9"/>
        <updated>2021-09-06T04:19:33.000Z</updated>
        <summary type="html"><![CDATA[Gatsby.jsにEmotionを導入した際の忘備録です。
今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。
https://github.com/tsuki-lab/gatsby-emotion-sample

Emotionの導入以降を参照したい場合は 1.Emotionをインストール から読み進めてください。


本記事は、javascriptベースのGatsby.jsを対象としていますが、typescriptの環境でも同様に導入可能です。最後に、typescript対応の追記をしてあります。

この記事は以下のバージョン時点の情報です。...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境]]></title>
        <id>https://zenn.dev/sprout2000/articles/a4c59a294dcbae</id>
        <link href="https://zenn.dev/sprout2000/articles/a4c59a294dcbae"/>
        <updated>2021-09-06T03:23:34.000Z</updated>
        <summary type="html"><![CDATA[サマリー
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone https://github.com/sprout2000/react-ts.git
% cd react-ts
% docker-compose up


      
      localhost:3000 を開きましょう。これだけです。
ローカルに Node.js がインストールされていなかったり、インストールされていてもこのコンテナで利用されているバージョンとは異なっていたりしても同じ（仮想）環境でプロジェク...]]></summary>
        <author>
            <name>k_touge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの Incremental Static Regenerationを試してみた]]></title>
        <id>https://zenn.dev/kamy112/articles/67ea5fca437d05</id>
        <link href="https://zenn.dev/kamy112/articles/67ea5fca437d05"/>
        <updated>2021-09-06T01:46:54.000Z</updated>
        <summary type="html"><![CDATA[Incremental Static Regeneration とは
Incremental Static Regeneration（ISR）はNext.jsのビルドパターンの内の１つです。
直訳すると"段階的な静的再生成"ですね。簡単に説明すると、

クライアント側のリクエストに対し静的にビルドされたページを返す
有効期限を越えた後にアクセスがあった場合、バックグラウンドで静的ページを再生成する
次回のアクセス時に、再生成されたページを表示する

という流れとなります。
俗に言うstale-while-revalidateというキャッシュ戦略をNext.js上で実現可能にしたもので...]]></summary>
        <author>
            <name>Kamy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rustのimage::load_from_memory遅すぎ問題]]></title>
        <id>https://zenn.dev/dozo/articles/14bc23b488c95a</id>
        <link href="https://zenn.dev/dozo/articles/14bc23b488c95a"/>
        <updated>2021-09-05T23:55:11.000Z</updated>
        <summary type="html"><![CDATA[load_from_memoryを迂回すればなんとかなる
関連記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)


こんな記事がある
https://qiita.com/yokra9/items/f9e98a9b47fe2d1234b0
(^_^;)煽ってんなぁ。。。
VanillaJS(素のJSのこと), WA...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Typescript]Jest入門を進めてみる（前半）]]></title>
        <id>https://zenn.dev/296u/articles/7175641f1c4492</id>
        <link href="https://zenn.dev/296u/articles/7175641f1c4492"/>
        <updated>2021-09-05T23:48:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Reactをtypescriptで始めたはいいものの、テストを書こうとすると、どういったテストを書けば良いのか、書いてもtypeエラーになることがままある。
その度にドキュメントを読みに行ったり、エラー文を検索したりするのだが、毎回解決に時間がかかっていた。（特に最初の頃はJestの構文を間違えているのが問題なのか、enzymeの構文を間違えているのが問題なのかもわからず）
そこで一度Jest側を体系的に勉強しなおそうと思い至った。
せっかくなので、ドキュメンのうち「はじめに」部分の内容について、若干コードを付け足しながら記事にしてみようと思う。

 はじめに
対象...]]></summary>
        <author>
            <name>296u</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtの動的ルーティングのSSGと静的サイトホスティングの404]]></title>
        <id>https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057</id>
        <link href="https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057"/>
        <updated>2021-09-05T14:44:24.000Z</updated>
        <summary type="html"><![CDATA[Nuxtの動的ルーティングの静的サイトジェネレート（SSG）と静的サイトホスティングサービス（Netlify、Vercel、GitHub Pages）の404ページの挙動について調べました。
結論からすると、存在しない動的ルーティングで404ページを表示させたい場合はvalidate関数()を設置する必要があります。

デモはこちら
コードはこちら


 やりたいこと
静的ジェネレート後、存在しないIDのURL（例：/blog/9999）の場合は404ページに飛ばしたいです。

 前提
/blog/以下が動的ルーティングになっています。動的ルーティングのID番号を拾ってAPIから該当デー...]]></summary>
        <author>
            <name>にしはら</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hook Form使ってみる]]></title>
        <id>https://zenn.dev/kimura141899/articles/ad3bfa42f25724</id>
        <link href="https://zenn.dev/kimura141899/articles/ad3bfa42f25724"/>
        <updated>2021-09-05T11:24:40.000Z</updated>
        <summary type="html"><![CDATA[React Hook Formとは？
公式

https://react-hook-form.com/jp/

React Hookを利用した柔軟かつ拡張可能な使いやすいフォームバリデーションライブラリ。

 導入するメリット

バリデーションが比較的簡単に実装できる
レンダリングが抑えられる⇒パフォーマンス向上
依存性が少ない
軽量なパッケージ
公式のドキュメントが豊富&日本語
などがあげられるようです。


 環境構築

Next.js
TypeScript
react-hook-form "^7.14.2"
MaterialUI(別記事予定)

今回はreact-hoo...]]></summary>
        <author>
            <name>taku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでIMappable(Functor)]]></title>
        <id>https://zenn.dev/eagle/articles/functor-in-ts</id>
        <link href="https://zenn.dev/eagle/articles/functor-in-ts"/>
        <updated>2021-09-05T10:53:35.000Z</updated>
        <summary type="html"><![CDATA[本記事について
IMappableというインターフェースを定義することを動機として
型レベル関数という概念を導入します。
後半では型レベル関数を用いてApplicativeやMonadに相当するインターフェースの定義や、
2引数以上の型レベル関数の定義を行ってその実用可能性を示します。

 IMappable導入の動機と障害
次の2つの関数を考えます。

      
        
        const mapArray: <A, B>(f: (a: A) => B) => (fa: A[]) => B[] =
  (f) => (fa)...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Firestore×Apexchartsでグラフ描画する方法]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3</id>
        <link href="https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3"/>
        <updated>2021-09-05T10:10:46.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

ApexChartsをNext.jsで使う方法
データをべた書きしてグラフ化
データをFirestoreから取得してグラフ化


 参考にした記事

https://qiita.com/IchiLab/ite...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Firestore×Apexchartsでグラフ描画する方法]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3</id>
        <link href="https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3"/>
        <updated>2021-09-05T10:10:46.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

ApexChartsをNext.jsで使う方法
データをべた書きしてグラフ化
データをFirestoreから取得してグラフ化


 参考にした記事

https://qiita.com/IchiLab/ite...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[WIP] Typescriptで書く関数型プログラミング]]></title>
        <id>https://zenn.dev/sterashima78/books/9dd0db90a6e532</id>
        <link href="https://zenn.dev/sterashima78/books/9dd0db90a6e532"/>
        <updated>2021-09-05T09:09:21.000Z</updated>
        <summary type="html"><![CDATA[Typescript での開発を普段行っている方向けに関数型プログラミングの要素の一部を紹介するものです。
関数型言語やその背景にある理論を紹介することは意図していません。
そのあたりのポリシーは『はじめに』に記載しているので御覧ください。

有料設定にしていますが基本的にはすべての章を無料で公開するつもりです。
気が向いた方や内容の充実を希望する方は支援いただけると幸いです。]]></summary>
        <author>
            <name>sterashima78</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gatsby.js + TypeScript + Linaria で環境構築]]></title>
        <id>https://zenn.dev/rabbit/articles/2dea91c4949604</id>
        <link href="https://zenn.dev/rabbit/articles/2dea91c4949604"/>
        <updated>2021-09-05T08:36:45.000Z</updated>
        <summary type="html"><![CDATA[以前まで、Emotion を用いてGatsby.jsを使っていたのですが、
iricoさんの「ReactのCSSの選択肢を比較してみた」という記事を読んで、Linariaに興味を持ち始めました。
zero runtimeとのことで、パフォーマンス向上が期待できるのは嬉しい点です。
https://linaria.dev/
今回は、LinariaとGatsbyの組み合わせでの記事が少なかったので忘備録としてこの記事を残します。
今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。
https://github.com/tsuki-lab/gatsby-...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[firestoreの型安全クエリができた]]></title>
        <id>https://zenn.dev/arark/articles/b5dc5e642e8d4e</id>
        <link href="https://zenn.dev/arark/articles/b5dc5e642e8d4e"/>
        <updated>2021-09-05T07:44:14.000Z</updated>
        <summary type="html"><![CDATA[以前超型安全firestoreができたと言った者なんですが、クエリも型安全にできたので紹介します。
例えばfirestoreでクエリするとき、where(age, ==, 30)したからtypescriptでもage:30で型ついてくんねえかな〜〜〜〜〜〜〜〜〜〜って思ったことある人人いませんか。これができます。さらに、firestore特有のクエリの制限、例えばage > 30とheight < 150を同時にできないみたいなそういうのも検知します。

 準備

      
        
        npm i firefuse firebase@9


    ...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d</id>
        <link href="https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d"/>
        <updated>2021-09-05T04:36:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
初めまして、みずねこです。
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

Firebaseのアプリ作成と初期設定
Firebase Authenticationで認証機能を実装
Materia-UIで認証画面のデザイン


 参考に...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d</id>
        <link href="https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d"/>
        <updated>2021-09-05T04:36:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
初めまして、みずねこです。
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

Firebaseのアプリ作成と初期設定
Firebase Authenticationで認証機能を実装
Materia-UIで認証画面のデザイン


 参考に...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[型レベルユニットテストのススメ]]></title>
        <id>https://zenn.dev/arark/articles/356a13c38a612b</id>
        <link href="https://zenn.dev/arark/articles/356a13c38a612b"/>
        <updated>2021-09-05T03:19:16.000Z</updated>
        <summary type="html"><![CDATA[準備

      
        
        export type Extends<E, A> = A extends E ? true : false;
export type NotExtends<E, A> = A extends E ? false : true;
export type Exact<A, B> = Extends<A, B> extends true
  ? Extends<B, A> extends true
    ? true
    : false
  : false;
expo...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FirestoreでDocumentのSnapShotからSubCollectionを取得する]]></title>
        <id>https://zenn.dev/matsuei/articles/908278e0c22eec</id>
        <link href="https://zenn.dev/matsuei/articles/908278e0c22eec"/>
        <updated>2021-09-05T02:30:12.000Z</updated>
        <summary type="html"><![CDATA[FirestoreではDocumentのSnapShotから、そのDocumentに紐づくSubCollectionを取得出来ないようになっています。
クエリで特定のDocumentのSnapShotを取得した後にSubCollectionを取得するには一手間必要なので、その方法を紹介します。

 例に使うデータ構造
ルートにUsersコレクションを持ち、各ユーザードキュメントがSubCollectionでPetsを持つデータ構造を考えます。



Collection
Document
Data(key)
Data(value)
SubCollection
Document
Data(...]]></summary>
        <author>
            <name>matsuei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[正確なCamelCaseのTemplate Literal Type定義を目指した]]></title>
        <id>https://zenn.dev/stomita/articles/9d1408c3447cd3</id>
        <link href="https://zenn.dev/stomita/articles/9d1408c3447cd3"/>
        <updated>2021-09-04T23:09:06.000Z</updated>
        <summary type="html"><![CDATA[概要
CamelCase<S>を TypeScriptのtemplate literal typesで実装するのは、ネット上にいくつかサンプルコードであがっているのを見たが、見つけたものはすべて不完全だった。types-festに含まれているCamelCase<S>もやはりおかしい。
とはいえ正確なCamelizationの定義というものがあるのかどうかもよく知らない。なので、npmで公開されているcamelcase の動作に近づけたCamelCase<S>の型定義を作成してみた。
ポイントは以下

複数区切り文字('-', '_', '.')に対...]]></summary>
        <author>
            <name>Shinichi Tomita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3】Vueで宣言した変数の値をCSSで読み込む]]></title>
        <id>https://zenn.dev/tentel/articles/736bfeaaa60ab3</id>
        <link href="https://zenn.dev/tentel/articles/736bfeaaa60ab3"/>
        <updated>2021-09-04T21:47:11.000Z</updated>
        <summary type="html"><![CDATA[Vue3.2からSFCの<style>内でのv-bind利用が実験的機能では無くなり、正式に導入されました。

 概要
SFCのdataもしくはsetup内で宣言した値を<style>で利用できます。

実際の値はハッシュ化されたCSS変数として書き出されるため、CSSは静的な状態です。
また、値が変更された場合はハッシュ化されたCSS変数が書き換えられるため、リアクティブです。


 書き方
書き方はシンプルで、<script>内で宣言した変数名を以下のようにv-bind()に渡すことで、<style>内で利用可能です。

      
...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovim luaのパフォーマンス計測方法]]></title>
        <id>https://zenn.dev/nazo6/articles/410be6ec751f9e</id>
        <link href="https://zenn.dev/nazo6/articles/410be6ec751f9e"/>
        <updated>2021-09-04T16:09:37.000Z</updated>
        <summary type="html"><![CDATA[やり方
plenary.nvimのprofilerを使います
plenary.nvimがインストールしてあれば使いかたは簡単で、計測したい範囲を

      
        
        require'plenary.profile'.start("profile.log")

-- code to be profiled

require'plenary.profile'.stop()


      
      のように囲むだけです。
これでinit.luaであれば~/.config/nvim以下にprofile.logができます。

 グラフにする
が、このログは超...]]></summary>
        <author>
            <name>nz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript + React + Jikan API で練習プロジェクト]]></title>
        <id>https://zenn.dev/kyohei1212/articles/4318cba26e9885</id>
        <link href="https://zenn.dev/kyohei1212/articles/4318cba26e9885"/>
        <updated>2021-09-04T16:04:27.000Z</updated>
        <summary type="html"><![CDATA[Jikan API(public API)を使ってTypescriptを勉強します。
基本は検索機能を使ってAnime Objectを取得します。
検索はカスタムフックを作ります。(importは省略してます。)

      
        
        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {
    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...]]></summary>
        <author>
            <name>Kyohei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript + React + Jikan API で練習プロジェクト]]></title>
        <id>https://zenn.dev/kyohei1212/articles/4318cba26e9885</id>
        <link href="https://zenn.dev/kyohei1212/articles/4318cba26e9885"/>
        <updated>2021-09-04T16:04:27.000Z</updated>
        <summary type="html"><![CDATA[Jikan API(public API)を使ってTypescriptを勉強します。
基本は検索機能を使ってAnime Objectを取得します。
検索はカスタムフックを作ります。(importは省略してます。)

      
        
        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {
    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...]]></summary>
        <author>
            <name>Kyohei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでの状態管理]]></title>
        <id>https://zenn.dev/peg/articles/f13b2608f682aa</id>
        <link href="https://zenn.dev/peg/articles/f13b2608f682aa"/>
        <updated>2021-09-04T13:05:11.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでの状態管理が気になったのでメモ。

Next.js の状態管理 2020

によく纏まっていた

 Context API
https://robinvdvleuten.nl/blog/how-to-use-react-context/

 Redux

Redux 入門 〜Reduxの基礎を理解する〜



 サンプル実装
サンプルの実装は公式のがわかりやすい

https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md


 Recoil
Facebook製

Recoilは20...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PhpStormでReact開発環境を整える]]></title>
        <id>https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87</id>
        <link href="https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87"/>
        <updated>2021-09-04T12:44:25.000Z</updated>
        <summary type="html"><![CDATA[Node.js（+Yarn）のインストール


anyenvをインストール
anyenvでnodenvをインストール
nodenvでNode.jsをインストール

Yarnをインストール


      
        
        npm install -g yarn


      
      
 Reactプロジェクトの作成

      
        
        npx create-react-app my-app --template typescript
cd my-app
yarn start


      
      
      
    ...]]></summary>
        <author>
            <name>nimusuke6</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[URLを解析するQsを丁寧に説明してみた]]></title>
        <id>https://zenn.dev/fujiyama/articles/bf26790ed81964</id>
        <link href="https://zenn.dev/fujiyama/articles/bf26790ed81964"/>
        <updated>2021-09-04T12:30:58.000Z</updated>
        <summary type="html"><![CDATA[Qsって何？

npm公式

クエリの解析，文字列化をするライブラリです．
使っていて非常に便利なので一旦まとめようと思います．

 基本的な使い方

      
        
        import qs from 'qs';  // (以下省略)

const obj = qs.parse('a=c');  // { a: 'c' }

const str = qs.stringify(obj);  // 'a=c'


      
      簡単に言うと，parseはURLなどの文字列をオブジェクトに変換するメソッドで， stringifyはオブジェクトをURL...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ddc.vimのlsp機能を強くする with nvim-lsp]]></title>
        <id>https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp</id>
        <link href="https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp"/>
        <updated>2021-09-04T09:04:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ddc.vimのLSPまわりの設定が良い感じになってきたので共有します。
前提として、補完ソースに関してはこちらを入れてください。
https://github.com/Shougo/ddc-nvim-lsp
最終的にはこんな感じで使えるようになります。


 補完候補のプレビュー & signature help
以下のgifにあるような機能で、前者は、補完候補を選択したときにその詳細情報をfloating windowに表示します。signature helpは、補完候補を選択して関数の中身を書いているときに、引数などの情報を表示する機能です。

vim-lsp...]]></summary>
        <author>
            <name>matsui54</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする]]></title>
        <id>https://zenn.dev/gomi_ningen/articles/f1c285f586215b</id>
        <link href="https://zenn.dev/gomi_ningen/articles/f1c285f586215b"/>
        <updated>2021-09-04T07:30:17.000Z</updated>
        <summary type="html"><![CDATA[Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする際の記述方法がわからなくて 30 分くらい溶けたのでメモっておきます。

 配列

      
        
        export interface AppParameters {
    items: string[]
}

const AppParametersSchema: JTDSchemaType<AppParameters> = {
    properties: {
        items: { elements: { type: 'string' }...]]></summary>
        <author>
            <name>ゴミ人間</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3】v-memoディレクティブでレンダリングを最適化する]]></title>
        <id>https://zenn.dev/tentel/articles/886dc6b615528f</id>
        <link href="https://zenn.dev/tentel/articles/886dc6b615528f"/>
        <updated>2021-09-04T06:27:40.000Z</updated>
        <summary type="html"><![CDATA[Vue3.2からv-memoディレクティブが追加されました。
v-memoディレクティブを利用することで、不要な再レンダリングを省略することができるので、パフォーマンスの向上につながります。

 概要
v-memoディレクティブは、指定したすべての値が最後のレンダリング結果と同じであれば、サブツリー全体の再レンダリングをスキップします。

DOMの更新だけでなく、仮想DOMのVNodeの作成もスキップされます。


 v-memoディレクティブの書き方
以下のように、コンポーネントが再レンダリングされた際に、配列に指定したvalueA及びvalueBが、最後のレンダリング時と同じ値の場合...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 3のエッセンシャルガイドを会話風に説明してみる]]></title>
        <id>https://zenn.dev/rgbkids/articles/694a5a491494b8</id>
        <link href="https://zenn.dev/rgbkids/articles/694a5a491494b8"/>
        <updated>2021-09-04T03:03:55.000Z</updated>
        <summary type="html"><![CDATA[原文を元に、会話風（入門編によくある感じ）にしたてあげました。
わかりにくいところは説明を足しています。
原文：
https://v3.ja.vuejs.org/guide/introduction.html

 Vue.js とは？
🙍‍♀️「Vue (発音はビュー) は、ユーザーインターフェイスを構築するためのプログレッシブフレームワークです。Vue は少しずつ適用していけるように設計されています」
🙂「SPAだから、Reactと類似の技術ってことですね」
🙍‍♀️「その通りです。Vueの最新バージョンは3です。Vue3の説明をしていきます」

 はじめに
🙍‍♀️「Vue.js を...]]></summary>
        <author>
            <name>vteacher</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ページ内の文字列を検索してフィルタリングするコンポーネント]]></title>
        <id>https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1</id>
        <link href="https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1"/>
        <updated>2021-09-03T13:05:34.000Z</updated>
        <summary type="html"><![CDATA[ページ内の文字列を検索して、それだけ残す

 こんなかんじに検索して、絞り込むものを作ります。


前提として、環境は
・Next.js
・TypeScript
となっています。
※アイコンとかは違うコンポーネントなので省略して書きます。

      
        index.tsx
        import styles from './SearchForm.module.scss'
import cn from 'classnames'

export interface Props = {
  placeholder?: string
  className?: st...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ページ内の文字列を検索してフィルタリングするコンポーネント]]></title>
        <id>https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1</id>
        <link href="https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1"/>
        <updated>2021-09-03T13:05:34.000Z</updated>
        <summary type="html"><![CDATA[ページ内の文字列を検索して、それだけ残す

 こんなかんじに検索して、絞り込むものを作ります。


前提として、環境は
・Next.js
・TypeScript
となっています。
※アイコンとかは違うコンポーネントなので省略して書きます。

      
        index.tsx
        import styles from './SearchForm.module.scss'
import cn from 'classnames'

export interface Props = {
  placeholder?: string
  className?: st...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境【入門編】]]></title>
        <id>https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb</id>
        <link href="https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb"/>
        <updated>2021-09-03T09:08:44.000Z</updated>
        <summary type="html"><![CDATA[サマリー
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone https://github.com/sprout2000/cra.git
% cd cra
% docker-compose up


      
      localhost:3000 を開きましょう。これだけです。
https://github.com/sprout2000/cra

このコンテナの実行を停止するには以下のようにしてください。

      
        bash
        ^C  ...]]></summary>
        <author>
            <name>k_touge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptのPartialを再帰的にするやつ。]]></title>
        <id>https://zenn.dev/umezo/articles/dc452d9a1a24f2</id>
        <link href="https://zenn.dev/umezo/articles/dc452d9a1a24f2"/>
        <updated>2021-09-03T07:14:04.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと

      
        
        type T1 = {
    a: {
        a1: string;
	a2: number;
    };
    b: {
        b1: string;
        b2: number;
    }[];
};

type T2: DeepPartial<T1>;

const t2: T2 = {
    a: {
        a2: "1",
    },
    b: [
        {
	    b2: 1
	}
    ],
};


      
     ...]]></summary>
        <author>
            <name>umezo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptのPickをTypeで指定できるやつ。]]></title>
        <id>https://zenn.dev/umezo/articles/06bd73b3a02be3</id>
        <link href="https://zenn.dev/umezo/articles/06bd73b3a02be3"/>
        <updated>2021-09-03T06:42:39.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
こういうことをしたい。

      
        
        type T1 = {
    a: number,
    b: string,
};

type T2 = PickUpByType<T1, number>;

const t2: T2 = {
    a: 1,
};


      
      
 解決
実装はこう

      
        
        type KeysByType<T, Type> = {
  [key in keyof T]: T[key] extends Type ? key ...]]></summary>
        <author>
            <name>umezo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「5分でTypeScript」を会話風に説明してみる]]></title>
        <id>https://zenn.dev/rgbkids/articles/3ab4c91b3b028c</id>
        <link href="https://zenn.dev/rgbkids/articles/3ab4c91b3b028c"/>
        <updated>2021-09-03T03:50:41.000Z</updated>
        <summary type="html"><![CDATA[原文を元に、会話風（入門編によくある感じ）にしたてあげました。
わかりにくいところは説明を足しています。
原文：
https://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html

 あいさつ
🙍‍♀️「TypeScriptを使用して簡単なWebアプリケーションを構築することから始めましょう」
🙂「うう…TypeScriptって、使っていないとなんとなくマウントを取られた感じがするあれですね」
🙍‍♀️「そうですね。小さいストレスでもバグの元。フロントエンドの開発にTypeScriptは必須...]]></summary>
        <author>
            <name>vteacher</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【RN】端末のカレンダーにイベントを追加する]]></title>
        <id>https://zenn.dev/nekoniki/articles/26dfda35b90377</id>
        <link href="https://zenn.dev/nekoniki/articles/26dfda35b90377"/>
        <updated>2021-09-03T01:20:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はReactNativeアプリから端末のカレンダーへイベントを登録する方法について紹介します。
会議やイベント情報などを表示するようなタイプのアプリでは、OSのカレンダーと同期を行いたいケースも多いので役立つかと思います。

 使用するライブラリ
使用するライブラリはreact-native-calendar-eventsです。
端末内のカレンダー情報の取得から、そこにイベントを追加するまでを行うことができます。
https://github.com/wmcmahan/react-native-calendar-events

 インストール
以下コマンドでインストール...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Headless UI + Tailwind CSS で Twitter 風のドロワーを作ってみた]]></title>
        <id>https://zenn.dev/heavenosk/articles/headless-ui-drawer</id>
        <link href="https://zenn.dev/heavenosk/articles/headless-ui-drawer"/>
        <updated>2021-09-02T17:40:36.000Z</updated>
        <summary type="html"><![CDATA[Headless UI + Tailwind CSS を組み合わせてドロワーを楽に実装できたので紹介します。
以下のような Twitter っぽいのドロワーを作成しました。
https://twitter.com/heavenOSK/status/1433431433146605571?s=20

 Headless UI とは
Headless UI はスタイルを排除したコンポーネント集で、Tailwind CSS と相性がいいとのことです。
https://headlessui.dev/

 スタイルを排除した設計
各コンポーネントのスタイルを切り替えるタイミングを抽象化してくれてい...]]></summary>
        <author>
            <name>へぶん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vimにeskkをインストールする]]></title>
        <id>https://zenn.dev/kato_k/articles/753b36262b3213</id>
        <link href="https://zenn.dev/kato_k/articles/753b36262b3213"/>
        <updated>2021-09-02T15:04:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Vim上での日本語入力の手段としてeskk.vimを導入しましたので自分用のメモも兼ねて残します。
SKK・eskk.vim共にこれまで使ったことがないので、参考程度に見てください。

 インストール

 eskk.vim
https://github.com/tyru/eskk.vim
好みのプラグインマネージャでeskkを導入してください。

 辞書
skkを使うには読みとの対応が列挙された辞書が必要になるので、ダウンロードしてeskkに教えてあげる必要があります。
辞書ファイルはこちら↓などで公開されている物を利用しましょう。
https://skk-dev.gith...]]></summary>
        <author>
            <name>kato-k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則で考えるReact設計]]></title>
        <id>https://zenn.dev/koki_tech/articles/361bb8f2278764</id>
        <link href="https://zenn.dev/koki_tech/articles/361bb8f2278764"/>
        <updated>2021-09-02T07:49:17.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、株式会社スタメンでオンラインサロンFANTSのフロントエンドエンジニアをしている@0906kokiです。
今回はSOLID原則の5つの設計原則を、Reactのコードをベースにして解説できればと思います。

 SOLID原則とは？
SOLID原則とは、ソフトウェアを柔軟に、メンテナンス性を高く設計するための5つの原則となります。
Robert C. Martinによって、5つの原則の頭文字をとってSOLIDという名前が付けられました。5つの原則とは以下の通りです。

SRP: 単一責任の原則
OCP: 開放閉鎖の原則
LSP: リスコフの置換原則
ISP: インタフェース分離の...]]></summary>
        <author>
            <name>Koki Nagai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[これからFirebaseでプロジェクトを始めようとする全ての人が知っておくべきこと v8→v9リリース]]></title>
        <id>https://zenn.dev/hiro__dev/articles/605161cd5a7875</id>
        <link href="https://zenn.dev/hiro__dev/articles/605161cd5a7875"/>
        <updated>2021-09-02T01:01:39.000Z</updated>
        <summary type="html"><![CDATA[環境
・MacOS BigSur（11.5.2）
・VScode（1.59.1）
・Node.js   (16.1.1）
・Firebase （9.0.0）←New!
・yarn (1.22.11)
・TypeScript(4.4.2)

 対象
・これからFirebaseでプロジェクトを始めようとする人
✍️8月25日以前に出された教材やチュートリアル、記事、そして現時点での日本語の公式ドキュメントを参考にしようとしている人は特に！
・教材や記事、ハンズオン通りにFirebaseでプロジェクトを始めたのに原因不明のエラーぶつかった人
・8月25日以前にFirebaseプロジェクト作って...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SWRとReact hooksで条件を満たすまで定期的にデータフェッチする処理を実現]]></title>
        <id>https://zenn.dev/creamstew/articles/674a0e2208a2befc131f</id>
        <link href="https://zenn.dev/creamstew/articles/674a0e2208a2befc131f"/>
        <updated>2021-09-01T14:52:24.000Z</updated>
        <summary type="html"><![CDATA[ある特定の条件を満たすまで、定期的にデータフェッチしたかった。
SWRとReact hooksを使って、ある程度簡単に処理が書けたので紹介します。
例えば、すごく時間がかかる処理（動画のアップロードとか）を今どのくらいまで処理が進んでるのかユーザーにステータス画面として表示したい場合などに使えると思います。

 完成形
これで条件を満たすまで、定期的なデータフェッチを実現しています。

      
        
        import useSWR from 'swr'
import { useEffect, useState } from 'react';

functio...]]></summary>
        <author>
            <name>creamstew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Sass】Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル (2021/09)]]></title>
        <id>https://zenn.dev/yknight/articles/1e46d3754e7f3b</id>
        <link href="https://zenn.dev/yknight/articles/1e46d3754e7f3b"/>
        <updated>2021-09-01T07:40:37.000Z</updated>
        <summary type="html"><![CDATA[node-sassの終了アナウンスから、dart-sassを使う
Sass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。

 node-sassの終了に関してはこちらの記事を参照


前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。


 sass-loaderに依存するNext.js（v11系）と、Storybook（v6.3.7）へ、「dart-sassの導入」...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Sass】node-sassの終了アナウンスから、dart-sassを使う (2021/09)]]></title>
        <id>https://zenn.dev/yknight/articles/1e46d3754e7f3b</id>
        <link href="https://zenn.dev/yknight/articles/1e46d3754e7f3b"/>
        <updated>2021-09-01T07:40:37.000Z</updated>
        <summary type="html"><![CDATA[Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル
Sass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。

 node-sassの終了に関してはこちらの記事を参照


前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。


 sass-loaderに依存するNext.js（v11系）と、Storybook（v...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Material-UIのDate Pickerをカスタマイズしよう]]></title>
        <id>https://zenn.dev/ryoryo16/articles/7a62ca4634685f</id>
        <link href="https://zenn.dev/ryoryo16/articles/7a62ca4634685f"/>
        <updated>2021-09-01T07:18:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Material-UIのDate Pickerって見た目もシンプルでかなりいい感じですよね～

デフォルトのDate Picker
しかし、やはりデフォルで使用するには表示が日本人向けではない...
英語というだけでかなりの拒否反応を起こしてしまう方もいたりいなかったりしますよね。
ここはしっかりと日本人向けにカスタマイズしていこうじゃないかという趣旨の記事となっております。

 基本の使い方
ここはドキュメントをサラッと読むだけでも分かる部分なので読み飛ばしていただいても OK

 インストール
Date Pickerですがcoreパッケージではなく「Material-U...]]></summary>
        <author>
            <name>ryoryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Material-UIのwithStylesでカスタマイズ]]></title>
        <id>https://zenn.dev/ryoryo16/articles/076cc7e7391467</id>
        <link href="https://zenn.dev/ryoryo16/articles/076cc7e7391467"/>
        <updated>2021-09-01T00:39:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Material-UI のコンポーネントのスタイルを変更したいなーと思った際に、公式ドキュメントだけでは"withStyles"の利用方法が分かりづらかったので。
色々と使い方はあるみたいだが、とりあえず基本の基本をピックアップ。

 withStyles の基本
下記のように withStyles によってコンポーネントを作成し配置する。

      
        
        const CustomComponent = withStyles({
  root: {
    // ここにスタイルを書いたり
  },
  label: {},
  // etc...]]></summary>
        <author>
            <name>ryoryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsで郵便番号自動入力機能を作成する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15"/>
        <updated>2021-09-01T00:38:19.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsだけで郵便番号自動入力機能を作成します。
CORSのエラーが発生してしまうので、jsonpを使用してCORSのエラーが出ないようにしていきます。

 jsonpインストール

      
        
        npm install axios-jsonp


      
      
 郵便番号から住所を取得してセットする取得実装
jsonpのaxiosを使用して、郵便局dが出している郵便番号取得APiを叩きに行きます。

      
        
        <div class="form-group">
  <label&g...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Auth0 の onContinuePostLogin を理解して Actions を柔軟に実装する]]></title>
        <id>https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd</id>
        <link href="https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd"/>
        <updated>2021-09-01T00:07:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 ( @okunokentaro ) です。
今回はAuth0が提供する、ログインフローを拡張する仕組みであるActionsと、さらに強力な機能であるonContinuePostLogin()について紹介します。Auth0は認証認可の機能を扱うIDaaSのひとつで、サービス自体の詳解は省略します。
Auth0 Actionsは2021年5月にGAされた比較的新しい機能であるため、日本語情報どころか英語圏の情報がそもそも少ないため、頼りになるのは公式ドキュメント、及び試行錯誤の結果となります。今回紹介するonContinuePostLogin()...]]></summary>
        <author>
            <name>okunokentaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React hooksでfactoryパターンっぽいことをしたいときは結局コンポーネントを分離するのが妥当]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory"/>
        <updated>2021-08-31T14:49:44.000Z</updated>
        <summary type="html"><![CDATA[Reactでhooksを切り替えしたい時について考えたケースがあったので書き残し。
中盤は悪例を挟みます。悪例については利用しないことをおすすめします
結論だけ知りたい方向け -> 結論へ

 前提
React hooksで例えばパターンA、パターンBを切り替える、factoryパターンっぽいことをやりたくなることがある。
コンポーネントより外側で切り替えることが可能であればこちらの記事などのようなことが可能だが、コンポーネントの内部で切り替えたいケースだとこのやり方だと処理出来ない
例えばこのようなカウンターを考えてみたい。

      
        
        
/...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Symbol x Angular その1 Angularでsymbol-sdkを使うための環境構築]]></title>
        <id>https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk</id>
        <link href="https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk"/>
        <updated>2021-08-31T03:08:26.000Z</updated>
        <summary type="html"><![CDATA[Angularでsymbol-sdkを使うための環境構築

 概要
この記事では、Angularで作成されたWebアプリ上でsymbol-sdkというnpmパッケージを用いてSymbolというブロックチェーンを利用するための第一歩となる環境構築について説明します。Angularのデフォルトの設定のままsymbol-sdkをインストールするといくつかのエラーが発生します。それを修正するための方法について説明し、同時にsymbol-sdkをAngularプロジェクトで使う際のサンプルコードを紹介します。
以下URLでサンプルコードを実際に動かしているので、必要に応じてご参照ください。

...]]></summary>
        <author>
            <name>NEMTUS公式</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-31のJS: TypeScript 4.4、PageSpeed InsightsのLab/Field data、Packemon(ライブラリ向けビルドツール)]]></title>
        <id>https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/</id>
        <link href="https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/"/>
        <updated>2021-08-30T22:46:59.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #555 - TypeScript 4.4が正式にリリースされました。
Announcing TypeScript 4.4 | TypeScript
Control Flow Analysisの改善、Index SignaturesにSymbolやTemplate Stringを利用できるようになっています。
unknown型にするuseUnknownInCatchVariablesオプションと
undefined値の区別をするexactOptionalPropertyTypesオプションの追加されています。
useUnknownInCatchVariablesはstrictオプションが有効の場合は自動的にONとなります。
exactOptionalPropertyTypesはstrictオプションとは別途設定が必要になります。
また、ES Proposal Stage 3のclass static blockがサポートされています。
tsc --helpの表示を改善、ビルドパフォーマンスの改善も含まれています。
Why lab and field data can be different (and what to do about it)という記事では、PageSpeed Insightsなどに表示される"lab data"と"field data"の違いについて解説しています。
Lab dataは、ネットワークは実行環境を固定したSynthetic モニタリングのデータとなっています。
Chrome User Experience Reportで収集されたChromeユーザーのRUMデータを元にしています。
この2つのデータの違い、どのようなケースで値に違いがでるかなどを解説しています。
Packemonはnpmで公開するパッケージ向けのビルドツー…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js BFFとかExpress記事]]></title>
        <id>https://zenn.dev/peg/articles/1878a6d6661295</id>
        <link href="https://zenn.dev/peg/articles/1878a6d6661295"/>
        <updated>2021-08-30T08:06:42.000Z</updated>
        <summary type="html"><![CDATA[Next.jsにExpressを使うという記事を見かけて???となったので調べた。
まずこの記事をコピペしてやってみた。
https://www.forcia.com/blog/001559.html

Next.jsはデフォルトではパスと一致するpagesディレクトリ配下の各ファイルにルーティングされます。 このルーティングに独自実装を組み込みたい場合にカスタムサーバを利用します。 例えば、特定のパスの場合のCookie操作やリダイレクト処理の実装などが挙げられます。
参考: https://nextjs-ja-translation-docs.vercel.app/docs/adva...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作ったのでコード全公開&解説]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/82871052dad5ff</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/82871052dad5ff"/>
        <updated>2021-08-30T03:16:03.000Z</updated>
        <summary type="html"><![CDATA[最近公開した Chrome 拡張の紹介と技術的なポイントの解説です。

 ✨ 何を作った？
実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作りました。
https://twitter.com/KawamataRyo/status/1430730469260234756
https://chrome.google.com/webstore/detail/sync-raise-hand/pimhkdcdgmedijjnjeagagnnddgbcnkm
大人数のミーティングで挙手ボタンを使う機会があるのですが、ボタンを押すという動作が億劫 & 挙手...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.vimrc  を packadd で整理するとめっちゃ便利だった！]]></title>
        <id>https://zenn.dev/nyarla/articles/0a171145604993</id>
        <link href="https://zenn.dev/nyarla/articles/0a171145604993"/>
        <updated>2021-08-30T02:34:07.000Z</updated>
        <summary type="html"><![CDATA[お前が思うんならそうなんだろう。お前ん中ではな


 話の前提
私は普段プログラミングやテキスト管理に NeoVim を使っていて、.vimrc （NeoVim だと init.vim）に色々な場面で必要になる設定や関数、あるいは機能拡張などを記述していました。
しかし最初は機能ごとにファイルを分けたり init.vim を一つに統一したりと、色々と調整していたものの、どの方法も上手くファイルを整理するに至らず、

さてどうしたもんかな……これは……

と考え込んでいたところで、

あ！ 試しに vim 組み込みのパッケージ管理機能を使ってみるか！

と思いつき、実際にやってみたら結構...]]></summary>
        <author>
            <name>にゃるら（テック系）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで学ぶ古典的ADT - Maybe]]></title>
        <id>https://zenn.dev/eagle/articles/ts-maybe-introduction</id>
        <link href="https://zenn.dev/eagle/articles/ts-maybe-introduction"/>
        <updated>2021-08-29T10:42:49.000Z</updated>
        <summary type="html"><![CDATA[本記事はこの記事の続きです。
https://zenn.dev/eagle/articles/ts-coproduct-introduction
実用性の観点から割愛したMaybeを改めて紹介します。
代数的データ型をコードで表現するために次のコード群を使用します。

      
        
        type Coproduct<T> = {
  [K in keyof T]: Record<"type", K> & T[K];
}[keyof T];

type Individual<TCoproduct extends Recor...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート]]></title>
        <id>https://zenn.dev/otanu/articles/f0a0b2bd0d9c44</id>
        <link href="https://zenn.dev/otanu/articles/f0a0b2bd0d9c44"/>
        <updated>2021-08-29T10:19:30.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js 11.1がリリースされました。
https://nextjs.org/blog/next-11-1
Storybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。
構成は以下のようになっています。

yarn
Next.js v11.1.0
ESLint v7.32.0(Next.js v11.1から含まれるように)
TypeScript v4.4.2
Tailwind v2.2.8
Storybook v6.3
Prettier v2.3.2
Jest v27.1.0

コー...]]></summary>
        <author>
            <name>otanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート]]></title>
        <id>https://zenn.dev/otanu/articles/f0a0b2bd0d9c44</id>
        <link href="https://zenn.dev/otanu/articles/f0a0b2bd0d9c44"/>
        <updated>2021-08-29T10:19:30.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js 11.1がリリースされました。
https://nextjs.org/blog/next-11-1
Storybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。
構成は以下のようになっています。

yarn
Next.js v11.1.0
ESLint v7.32.0(Next.js v11.1から含まれるように)
TypeScript v4.4.2
Tailwind v2.2.8
Storybook v6.3
Prettier v2.3.2
Jest v27.1.0

コー...]]></summary>
        <author>
            <name>otanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[microCMS + TailwindCSSでのHTMLコンテンツに対するスタイル適用]]></title>
        <id>https://zenn.dev/crea7/articles/5b2fde4be6b6f3</id>
        <link href="https://zenn.dev/crea7/articles/5b2fde4be6b6f3"/>
        <updated>2021-08-29T09:57:18.000Z</updated>
        <summary type="html"><![CDATA[以前Crea7というタイムラインとブログ機能を持ったサイトを作成した時に、Next.js + microCMS + Tailwind CSSで実装を行いました。

 問題点
記事の詳細画面では、microCMSのリッチエディタで作成した記事を、HTML形式で取得しinnerHTMLで表示を行なっています。

      
        
        <div
className="text-black pt-7"
dangerouslySetInnerHTML={{ __html: `${article.body}` }}
></div>


      
...]]></summary>
        <author>
            <name>Crea7</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colabのターミナルでvimから抜けられないとき]]></title>
        <id>https://zenn.dev/e4exp/articles/ee523772afa0e5</id>
        <link href="https://zenn.dev/e4exp/articles/ee523772afa0e5"/>
        <updated>2021-08-29T03:04:42.000Z</updated>
        <summary type="html"><![CDATA[前提

Colabはproプランでターミナルが使える
ブラウザ(Chrome)にVimiumという拡張が入っている
普段はEscキーでvimのinsertモードから抜けているが，Vimiumが有効だとEscキーを押すとターミナル領域ごと閉じてしまう


 解決方法


ctrl + cでinsertモードから抜けられる

または

Vimiumを無効化する(特定urlのみ無効化もできる)


 参考


Exit insert mode in Google Colab 2020]]></summary>
        <author>
            <name>e4exp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React + Highcharts で都道府県の人口をグラフで表示するアプリ]]></title>
        <id>https://zenn.dev/shimapon3/articles/13e3d4b147742c</id>
        <link href="https://zenn.dev/shimapon3/articles/13e3d4b147742c"/>
        <updated>2021-08-28T23:43:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初めて記事のようなものを書きます．よろしくお願いします．
今回は2020年のインターンシップ選考で私が開発した，都道府県ごとの人口を表示するアプリについて開発した手順を書いていきたいと思います．
至らない点があれば、遠慮なくご指摘いただければとも思います。

 Demo
県名にチェックを入れると，その県の人口推移が表示されます．
複数選択すると、まとめて表示されます。

https://react-highcharts-resas.web.app/

 環境

macOS Catalina (v10.15.6)
Node.js (v14.8.0)


 使用技術

Reac...]]></summary>
        <author>
            <name>shimapon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超型安全firestoreができた(更新)]]></title>
        <id>https://zenn.dev/arark/articles/0ee7d75dd200db</id>
        <link href="https://zenn.dev/arark/articles/0ee7d75dd200db"/>
        <updated>2021-08-28T16:04:02.000Z</updated>
        <summary type="html"><![CDATA[firebaseってtypescriptと相性わるいな～～～～～～～～～とまじで思ってたので超型安全firestore作ってみたらできました。パスまで型安全でやってくれます。これです。
https://github.com/Hagihara-A/fire-fuse
npm i firefuse
で使えます
firestore-v9を想定しています。

 特徴/出来ること

ただのユーティリティパッケージなので、一切の独自実装がない。ただし型安全。
パスの型付け
パスを解析してReferenceを型付けできる


 なにができるか

      
        
        // /...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NextJSでSSR/SSGの挙動を確認する。]]></title>
        <id>https://zenn.dev/peg/articles/bca7b0ba13bce3</id>
        <link href="https://zenn.dev/peg/articles/bca7b0ba13bce3"/>
        <updated>2021-08-28T14:20:08.000Z</updated>
        <summary type="html"><![CDATA[https://qiita.com/G-awa/items/639f4f83aa4d97bc1f0d
こちらのサンプルプロジェクトを利用。
serveパッケージで静的ファイルをホスティングするローカルサーバーを立ち上げる。

      
        
        yarn add -D serve


      
      
https://qiita.com/Nossa/items/bdc6a9705e89ea8fc250
https://rennnosukesann.hatenablog.com/entry/2018/03/19/233245

export, serv...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
</feed>