<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-07-24T01:04:53.628Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Vue3で掲示板（BBS）を作ろうという試み]]></title>
        <id>https://zenn.dev/sakots/articles/fb6529ee401fd3</id>
        <link href="https://zenn.dev/sakots/articles/fb6529ee401fd3"/>
        <updated>2021-07-23T17:48:15.000Z</updated>
        <summary type="html"><![CDATA[やあ、さこつです。
これは最初の記事だよ！　お手柔らかに。

 今作ってるやつ

このお絵かき掲示板はSQLiteとさらにBladeを（以下略
Github

phpとBladeでつくったお絵描き掲示板です。データベースにSQLiteを使用。

 なぜまた新しく作るのか

 新技術のへの渇望
とにかくいろいろできたほうが仕事が多い。んで、ReactとVueでどっちからやるか比べてたんですけども、どうもJSXに慣れるまで時間がかかりそうだったのでVueから勉強することに決定。

 というわけで
Githubにページだけ作りました。こんごともよろしく。
veita

にゃー]]></summary>
        <author>
            <name>sakots</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js × Tailwind.cssでAMP対応させてみる]]></title>
        <id>https://zenn.dev/dl10yr/articles/582fd609078cea</id>
        <link href="https://zenn.dev/dl10yr/articles/582fd609078cea"/>
        <updated>2021-07-23T13:53:31.000Z</updated>
        <summary type="html"><![CDATA[こちらを参考にさせていただきながら（なぞりながら）やってみました。詳しい解説はこちらの方が良いです。
https://sunday-morning.app/posts/2020-12-25-next-js-10-tailwind-2-hybrid-amp

 まずはNext.js × Tailwind.cssの環境構築
以前自分が作ったコマンドを調整して（storybookを外して）環境構築を行いました。
https://zenn.dev/dl10yr/articles/0e31819e983a28

      
        
         git clone -b not-i...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TailwindcssでMaterial UI風のカードデザイン作ってみました]]></title>
        <id>https://zenn.dev/yusuke_akiyama/articles/1c786c10a22fa8</id>
        <link href="https://zenn.dev/yusuke_akiyama/articles/1c786c10a22fa8"/>
        <updated>2021-07-23T12:23:07.000Z</updated>
        <summary type="html"><![CDATA[Tailwindcssとは、ユーティリティファーストのCSSフレームワークです。
https://tailwindcss.com/
ユーティリティファーストなのでCSS設計など考慮しなくてもいいので、個人的に好きです！

 Tailwindcssのカードデザイン
codepenに残しておいたのでHTMLのコードはそこから拾って使ってみてください。


 できなかったこと

当然ですがクリック時の「ripple efect」（波紋のアニメーション）の表現ができないのは残念ですね...。
ボタンを押した後のアクションなどの指定をしたかったのですが、設定ファイルに記述が必要でCDNでは無理そ...]]></summary>
        <author>
            <name>Yusuke Akiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nest.js Version8がリリースされたので新機能についてまとめる : API Versioning編]]></title>
        <id>https://zenn.dev/sojiro/articles/3d678492f1d94b</id>
        <link href="https://zenn.dev/sojiro/articles/3d678492f1d94b"/>
        <updated>2021-07-23T06:52:48.000Z</updated>
        <summary type="html"><![CDATA[Nest.js Version 8が7月7日にリリース!
https://trilon.io/blog/announcing-nestjs-8-whats-new

 新機能: API Versioning
Controller及び各Routesをバージョン管理できるようになりました。

 1.URI Versioning
URIの中にVersion情報を含める。

      
        
        import { VersioningType } from '@nestjs/common';

const app = await NestFactory.create...]]></summary>
        <author>
            <name>So Koyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CamelCase な型と SnakeCase な型の変換]]></title>
        <id>https://zenn.dev/ulcttku/articles/conversion-of-camel-case-and-snake-case-types</id>
        <link href="https://zenn.dev/ulcttku/articles/conversion-of-camel-case-and-snake-case-types"/>
        <updated>2021-07-23T04:33:05.000Z</updated>
        <summary type="html"><![CDATA[TypeScript で、(Lower)CamelCase な型を SnakeCase な型に、SnakeCase な型を(Lower)CamelCase な型に変換する型を作りました。
具体的には、

      
        
        type camelCase = SnakeToCamel<"camel_case">;
// type camelCase = "camelCase"

type snakeCase = CamelToSnake<"snakeCase">;
// type snakeCase = "snake_case";


 ...]]></summary>
        <author>
            <name>ulcttku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueからGoogle OAuthを使用してログインする]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0f463859b6b462</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0f463859b6b462"/>
        <updated>2021-07-23T00:19:37.000Z</updated>
        <summary type="html"><![CDATA[僕の場合はLaravel×Vueを使っており本来であれば、Laravelの方でsocialiteというパッケージを使用してgoogle oauth認証を行うのが一般的なのですが、
諸事情でVue側でgoogle oauth認証を行いアクセストークンを使用してから、バックエンドにリクエストを送るという方法をしたかったのです。
そこで今回はvue側でgoogle認証を実装する方法をメモとして残しておきます。

 1-1. Google Cloud Platformにアクセスし、プロジェクトを作成する
Google Cloud Platformにアクセスしてプロジェクトを作成してください。
こ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prisma と express でつくる REST API]]></title>
        <id>https://zenn.dev/yamo/articles/prisma-express-rest-api</id>
        <link href="https://zenn.dev/yamo/articles/prisma-express-rest-api"/>
        <updated>2021-07-22T16:45:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前から気になっていた Prisma を触ってみました。
公式ドキュメントを読みながら、練習として Prisma + Express で REST API を作ってみました。
自分と同じように入門してみたい人の参考になれば幸いです。
ソースコードはこちらになります。
https://github.com/yamosan/prisma-rest-api

 環境構築

 プロジェクトの作成

      
        
        $ npm init -y


      
      
 パッケージのインストール
必要なパッケージを予めインストールしていきます。
つ...]]></summary>
        <author>
            <name>yamo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript で値が Union Type にマッチするかを検証したい]]></title>
        <id>https://zenn.dev/hokaccha/articles/a665b7406b9773</id>
        <link href="https://zenn.dev/hokaccha/articles/a665b7406b9773"/>
        <updated>2021-07-22T13:58:02.000Z</updated>
        <summary type="html"><![CDATA[TypeScript version: v4.3.5
元々やりたかったのは以下のようなこと。外部入力の文字列を Union Type にマッチするか検証してマッチしなければデフォルト値を返すみたいなやつ。

      
        
        const colors = ["red", "blue", "yellow"] as const;
type Color = typeof colors[number];
const defaultColor = colors[0];

function toColor(color: string): Color {
  return...]]></summary>
        <author>
            <name>hokaccha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSSの単位を型安全にしつつ相互に変換出来るライブラリを更新した]]></title>
        <id>https://zenn.dev/karibash/articles/c093902e8294d1</id>
        <link href="https://zenn.dev/karibash/articles/c093902e8294d1"/>
        <updated>2021-07-22T12:06:19.000Z</updated>
        <summary type="html"><![CDATA[https://www.npmjs.com/package/@karibash/pixel-units

 設計の大幅な見直し
以前作成したライブラリをとある記事を参考に、クラスに依存しない設計へと大幅に改修を加え作り直しました。
インスタンス化が不要になったのでパフォーマンスもたぶん上がってると思います。しらんけど。

      
        
        // old
const pixel = new Pixel(16);
console.log(`${pixel}`}
// -> 16px

// new
const pixel: Unit<'px'>...]]></summary>
        <author>
            <name>Karibash</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Type Script × Axios リポジトリパターン]]></title>
        <id>https://zenn.dev/chida/articles/5756a54d94230a</id>
        <link href="https://zenn.dev/chida/articles/5756a54d94230a"/>
        <updated>2021-07-22T08:53:00.000Z</updated>
        <summary type="html"><![CDATA[概要
リポジトリパターンは、データの操作（作成、削除など）をビジネスロジックから分離します。ビジネスロジック内でAxiosをインスタンス化すると単体テストが難しくなったり、各ファイルにエンドポイントの定義を書いている場合、そのエンドポイントが変わった時に多数のファイルを更新しなければいけません。
リポジトリパターンはそのような問題を解決し、コードの柔軟性・保守性を高めてくれます。

 実装

APIはJSONPlaceholderというサービスを使い、userを取得します
リポジトリパターンのコードをすぐに動作確認したい場合は、CodeSandboxなどのオンラインエディタを使うと良...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【連休】Reactのカスタムフックを勉強してみる]]></title>
        <id>https://zenn.dev/fujiyama/articles/53ec18ca9367e8</id>
        <link href="https://zenn.dev/fujiyama/articles/53ec18ca9367e8"/>
        <updated>2021-07-22T07:40:34.000Z</updated>
        <summary type="html"><![CDATA[始めに
Reactのhooksを使うことは多いと思うのですが，recoilでログインユーザーの状態管理を勉強しているときにカスタムフックをちゃんと勉強しようと思ったのでまとめます.

 公式解説
公式にチャットアプリでのフレンドがオンラインかどうかを示すコンポーネントがありました．

      
        FriendStatus.tsx
        import React, { useState, useEffect } from 'react';

function FriendStatus(props) {
  const [isOnline, setIsOnli...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データの整形は末端で行うようにしている]]></title>
        <id>https://zenn.dev/gamin/articles/b509c1d9b08816</id>
        <link href="https://zenn.dev/gamin/articles/b509c1d9b08816"/>
        <updated>2021-07-22T03:35:55.000Z</updated>
        <summary type="html"><![CDATA[概要
mutation 処理で、親子コンポーネントでデータのやりとりをする時。
例えば、親コンポーネントの中に

      
        
        XXX - XXXX


      
      みたいな郵便番号の Input box が連なっている子コンポーネントがある時を考える。
郵便番号自体はサーバから XXX-XXXX と、一つのまとまりで送られてくる。
仮に郵便番号の Input box がハイフンつなぎでふたつあるとする。ふたつあるので、どこかでデータをふたつに整形するる必要がある。
さてさて fetch、 親、 子、どこで整形するのが正しいのだろうか？...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[スマホでコード書く 環境構築編]]></title>
        <id>https://zenn.dev/ssssssigma/articles/coding-on-smartphone-1</id>
        <link href="https://zenn.dev/ssssssigma/articles/coding-on-smartphone-1"/>
        <updated>2021-07-21T18:26:58.000Z</updated>
        <summary type="html"><![CDATA[スマホでコードを書くとなると、パソコンの場合と前提条件が異なります。スマホは画面が小さく、可能な限りテキスト編集のみにリソースを割くべきで、また、スマホのIMEを使った快適なテキスト編集のため、高度な補完も大切です。任意のキーバインドが使えることもアドバンテージとなるでしょう。

 Vimを使う
スマホでVimを使うことは非常に理に適っています。Vimはディスプレイが限られた文字数の文字しか表示できない時代から支持されてきたエディタであり、またスマホのテキストの表示能力はその時代のディスプレイよりもリッチです。
また、Vimはキーボードが標準化される前から存在していてスマホのIMEのよう...]]></summary>
        <author>
            <name>sigma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[amazon-chime-sdk でWebとReact Nativeでビデオ通話ができるアプリを作る(後編)]]></title>
        <id>https://zenn.dev/kondo_script/articles/adef37669545a1</id>
        <link href="https://zenn.dev/kondo_script/articles/adef37669545a1"/>
        <updated>2021-07-21T15:00:39.000Z</updated>
        <summary type="html"><![CDATA[前編の続きです

 要約

Android/iOSともに殆どネイティブアプリを触ったことがない人が頑張った話

Kotlin/Objective-Cデビューしながらの体験記です
誤記/誤解などありましたらDiscussionで教えてください🙏


React Native 対応は結構しんどい

公式から RN のライブラリは出ていない  - サンプル はある
kotlin/Objective-Cの知識が必要
ios/androidともにシミュレータだと動作に問題があるため開発には 実機が必須 となる




 前提 amazon-chime-sdkとreact-native
公式からre...]]></summary>
        <author>
            <name>kondo_script</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript + Laravel Passportで実装するOAuth2認証]]></title>
        <id>https://zenn.dev/kaibuki0315/articles/39fe0e38f6635e</id>
        <link href="https://zenn.dev/kaibuki0315/articles/39fe0e38f6635e"/>
        <updated>2021-07-21T12:59:55.000Z</updated>
        <summary type="html"><![CDATA[今回は認証サーバとしてLaravelを使った場合を想定したOAuth2の認可コードフローに基づいた認証機能の実装をしていきます。
Next.jsでは認証を楽に作れるNextAuthというライブラリがあるので、今回はそれを使っていきますが、NextAuthはパスワードなしの認証(Passwordless Authentication)を推奨しているということもあり、OAuth2の認可コードフロー実装に関する情報が少ないように思えたので備忘録も兼ねて記事として残してみます。
今回Laravel側で認証基盤を実装するためのものとしてLaravel Passportを使います。
OAuthで定義...]]></summary>
        <author>
            <name>かわみつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFront のログを JS (TS) で分析する]]></title>
        <id>https://zenn.dev/mryhryki/articles/2021-07-21-parse-cloudfront-logs</id>
        <link href="https://zenn.dev/mryhryki/articles/2021-07-21-parse-cloudfront-logs"/>
        <updated>2021-07-21T09:55:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
CloudFront のログを解析して、リクエストされたパスごとの転送容量を出したい、という場面があったので、その時にやったことのメモです。
半分は備忘録として、半分は誰かやってみたい人もいるかも、と思ったので書き残しておこうと思った次第です。

 CloudFront のログ
CloudFront で設定しておけば、S3バケットに出力されます。
詳しくはこちらの公式ドキュメントをご覧ください。
https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html

...]]></summary>
        <author>
            <name>Moriya Hiroyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マルチプレイヤーゲーム実況システムをAmazon Chime SDK JSで作る。 - Among Us Auto Mute -]]></title>
        <id>https://zenn.dev/wok/articles/0017_multi-players-gameplay-with-chime</id>
        <link href="https://zenn.dev/wok/articles/0017_multi-players-gameplay-with-chime"/>
        <updated>2021-07-21T02:41:12.000Z</updated>
        <summary type="html"><![CDATA[この記事は、こちらの記事を改変したものになります。
https://cloud.flect.co.jp/entry/2021/07/21/113845

こんにちは。
オリンピックの開催が間近になりましたが、最近はデジタルの界隈でもe-sportsがにわかに注目を集め始めていますね。これを後押しするというわけでもありませんが、今回はAmazon Chime SDK JSを用いてマルチプレイヤーゲームの実況配信システムを作ってみたいと思います。特に今回は、公式がファン創作についてポリシーを明確にしてくれているAmong Usを題材にしてみようと思います(ref)。
具体的には下図のような...]]></summary>
        <author>
            <name>wok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron アプリのテンプレート 2021]]></title>
        <id>https://zenn.dev/hokaccha/articles/887e1af361faa8</id>
        <link href="https://zenn.dev/hokaccha/articles/887e1af361faa8"/>
        <updated>2021-07-20T14:58:32.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/hokaccha/electron-template-2021
作ったので公開しておくが、こういうテンプレートはメンテしないとすぐ腐ってしまうけどメンテするモチベーションも特にないのでスナップショットという意味合いも込めて2021をつけている。

 electron-next
ベースに electron-next というのを使っていて、これがけっこうよくできていた。やっていることはシンプルで、レンダラプロセスに Next.js を使っていて、開発時は Next.js のサーバーを起動し、production build では next export ...]]></summary>
        <author>
            <name>hokaccha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 非公式（半分公式？）な Next.js スターターキット登場]]></title>
        <id>https://zenn.dev/nshiro/articles/49b0c7b5fabef5</id>
        <link href="https://zenn.dev/nshiro/articles/49b0c7b5fabef5"/>
        <updated>2021-07-20T07:16:47.000Z</updated>
        <summary type="html"><![CDATA[Laravel 作成者の Taylor さんより、Next.js スターターキットがリリースされました。
https://twitter.com/taylorotwell/status/1417148351506681859
https://github.com/taylorotwell/next-example-frontend
https://github.com/taylorotwell/next-example-backend
Taylor さん個人のリポジトリなので、Laravel 公式という訳では無いですが、まぁ、Laravel 作成者の方ですからね。半分公式と言えなくはない...]]></summary>
        <author>
            <name>nshiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-20のJS: Node.js 16.5.0(WHATWG Stream)、npm 7.20.0(`npm pkg`)、Ember 4のロードマップ]]></title>
        <id>https://jser.info/2021/07/20/node.js-16.5.0whatwg-stream-npm-7.20.0npm-pkg-ember-4/</id>
        <link href="https://jser.info/2021/07/20/node.js-16.5.0whatwg-stream-npm-7.20.0npm-pkg-ember-4/"/>
        <updated>2021-07-20T02:16:58.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #549 - Node.js 16.5.0がリリースされました。
Node v16.5.0 (Current) | Node.js
16.5.0では試験的に、WHATWGで仕様策定されウェブブラウザに実装されているWHATWG Streams APIが実装されました。(stream/web)
Node.js Stream APIがありますが、これとは異なる実装です。
Node.js StreamとWHATWG Streamの違いについては次のドキュメントにも書かれています。
streams/FAQ.md at main · whatwg/streams
Node.jsでWHATWG Streamを実装している理由としてはQUIC/HTTP3のサポートなどが挙げられています。
HTTP/3 support · Issue #38478 · nodejs/node
また、Node.js StreamとWHATWG Streamの棲み分けや相互運用性については次のIssueで議論されています。
Future of streams · Issue #39093 · nodejs/node
npm 7.20.0がリリースされました。
Release v7.20.0 · npm/cli
npm 7.20.0では、package.jsonの任意のフィールドを読み書きできるnpm pkgコマンドが追加されています。
feat: npm pkg by ruyadorno · Pull Request #3487 · npm/cli
The Road to Ember 4.0という記事では、Ember 4のロードマップが公開されています。
Ember 4は2021年9月20日にリリース予定としています。
それぞれのマイグレーションガイドも公開されています。
Ember.js…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoのDateTimeライブラリPteraをリリースしました]]></title>
        <id>https://zenn.dev/tak_iwamoto/articles/8b32b27bd577b1</id>
        <link href="https://zenn.dev/tak_iwamoto/articles/8b32b27bd577b1"/>
        <updated>2021-07-20T00:48:58.000Z</updated>
        <summary type="html"><![CDATA[Ptera

DenoのDateTimeライブラリであるPteraをリリースしたので、その紹介(宣伝)をします。
素敵なロゴはDenoのイラストを数多く書いてらっしゃる hashrockさんにデザインしていただきました！
これまでNode.jsのライブラリはMoment.js、Day.js、Luxon、date-fns
などいくつか選択肢がありました。
ただ、Denoで書かれているThird Partyライブラリは自分が調査した限り見当たらなかったので、作ってみました。

 Getting Started
メインで使用するAPIはdatetimeです。
引数なしの場合、ローカルの現在...]]></summary>
        <author>
            <name>tak_iwamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで作る簡易検索機能]]></title>
        <id>https://zenn.dev/himenon/articles/4c6d7ed8b7df30</id>
        <link href="https://zenn.dev/himenon/articles/4c6d7ed8b7df30"/>
        <updated>2021-07-19T12:36:13.000Z</updated>
        <summary type="html"><![CDATA[配列操作を利用した検索機能を紹介します。UI化することで利便性が一気に向上する機能を紹介します。

 DEMO
まずはデモです。入力欄に適当なアルファベットを入力することで、続くリストが増減します。

※ DemoのサンプルデータはWikipediaのプログラミング言語を利用しています。

 基本的な仕組み
基本的な仕組みはfitlerを利用した配列操作です。

      
        
        ["a", "b", "c"].filter((text) => {
  return text === "a";
});
// #=> ["a"];


      ...]]></summary>
        <author>
            <name>Himenon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next + typescript で i18n対応し、SSR、SSGを行うexample]]></title>
        <id>https://zenn.dev/sirosuzume/articles/393b17b21034a7</id>
        <link href="https://zenn.dev/sirosuzume/articles/393b17b21034a7"/>
        <updated>2021-07-19T10:11:01.000Z</updated>
        <summary type="html"><![CDATA[Next + typescript で i18n 対応し、SSR、SSG を行う example
本項では、Next を使用して i18n 対応(SSR, SSG)を方法を解説します。

 記事の要約


next-i18nextを使うとi18nextを使用して、SSR、SSG を比較的手軽に行う事ができる

react-i18nextは typescript 対応を行っているので、.d.tsでネームスペースごとに追加の定義を行うと便利

参考


i18n 対応時はnext-seoが便利

i18n 対応していない場合も便利
i18n 対応時はalternatesの設定をきちんとす...]]></summary>
        <author>
            <name>白雀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next + typescript で i18n対応し、SSR、SSGを行うexample]]></title>
        <id>https://zenn.dev/sirosuzume/articles/393b17b21034a7</id>
        <link href="https://zenn.dev/sirosuzume/articles/393b17b21034a7"/>
        <updated>2021-07-19T10:11:01.000Z</updated>
        <summary type="html"><![CDATA[Next + typescript で i18n 対応し、SSR、SSG を行う example
本項では、Next を使用して i18n 対応(SSR, SSG)を方法を解説します。

 記事の要約


next-i18nextを使うとi18nextを使用して、SSR、SSG を比較的手軽に行う事ができる

react-i18nextは typescript 対応を行っているので、.d.tsでネームスペースごとに追加の定義を行うと便利

参考


i18n 対応時はnext-seoが便利

i18n 対応していない場合も便利
i18n 対応時はalternatesの設定をきちんとす...]]></summary>
        <author>
            <name>白雀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next] API Routesのreq, resの型について]]></title>
        <id>https://zenn.dev/eitches/articles/2021-0719-api-routes-http-request-type</id>
        <link href="https://zenn.dev/eitches/articles/2021-0719-api-routes-http-request-type"/>
        <updated>2021-07-19T09:47:20.000Z</updated>
        <summary type="html"><![CDATA[前提
Next.jsでAPI Routesを使用する際、以下のようなコードを書くと思います。

      
        
        const handler = (req, res) => { 
  res.status(200).json({ ... })
}

export default handler


      
      このreq, resに型をつける方法がわからなかったので調べました。

 Next.jsの公式ページを確認する
公式ページのAPI Routesの部分にreq, resについての情報がありました。
https://nextjs....]]></summary>
        <author>
            <name>eitches</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim/Neovimでdockerを操作できるdenops-docker.vimを作った]]></title>
        <id>https://zenn.dev/skanehira/articles/2021-07-18-vim-denops-docker</id>
        <link href="https://zenn.dev/skanehira/articles/2021-07-18-vim-denops-docker"/>
        <updated>2021-07-19T01:50:16.000Z</updated>
        <summary type="html"><![CDATA[初めに
最近denops.vimを使ってプラグインを作るのが自分の中で流行っています。
denops.vimはTypeScriptメインでVim/Neovim対応のプラグインを書けるところが魅力的で、型システムがあることでデータ構造が明確にわかるためとても書きやすいので、
今後プラグインを作るときは基本denops.vimで書こうと考えています。
denops.vimの詳細に関してこれ以上触れないので、気になる方はこちらの記事を参照してください。
本題ですが、Vimを初めたころにdocker.vimというプラグインを作りました。
本記事はdocker.vimをdenops.vimで書...]]></summary>
        <author>
            <name>シン・ゴリラ@上野動物園休園中</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeのTrigger Suggestionの紹介と、macOSで有効化するための工夫]]></title>
        <id>https://zenn.dev/hiroga/articles/vscode-trigger-suggestion-macos</id>
        <link href="https://zenn.dev/hiroga/articles/vscode-trigger-suggestion-macos"/>
        <updated>2021-07-18T12:22:01.000Z</updated>
        <summary type="html"><![CDATA[VSCodeでTypescriptを書くときに、「一文字も入力していないんだけど、予測変換が出てほしいな...」と思うことはありませんか？
それ、Trigger Suggestion で可能です。macOSユーザーで「何それ？」って人は、私のようにOSのショートカットと衝突しているせいで見逃しているかもしれないです。

 デモ
Ctrl + Spaceでショートカットを表示しています。


 Trigger Suggestionについて
VSCodeには Trigger Suggestionというショートカットがあります。
いまVSCodeを開いている人は、Cmd + Shift + P...]]></summary>
        <author>
            <name>hiroga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NPM パッケージ作成講座]]></title>
        <id>https://zenn.dev/sprout2000/books/9325fe6c9c1ba9</id>
        <link href="https://zenn.dev/sprout2000/books/9325fe6c9c1ba9"/>
        <updated>2021-07-18T08:17:52.000Z</updated>
        <summary type="html"><![CDATA[TypeScript を使ってオリジナルの NPM パッケージを作ろう！]]></summary>
        <author>
            <name>sprout2000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Test Double】JestでMockとStubを確認する]]></title>
        <id>https://zenn.dev/chida/articles/cec625e3b6aa7b</id>
        <link href="https://zenn.dev/chida/articles/cec625e3b6aa7b"/>
        <updated>2021-07-18T07:24:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
MockとStubの違いをソースコードレベルで理解出来ていないと思い、記事を書いて整理してみました。色々検索して調べましたが、もし間違えている箇所がありましたら、ご指摘いただけると有り難いです。

 Test Doubleとは
Test Doubleは、テストの対象が他のモジュール（クラスや関数など）に依存している場合、その代役として使われるモジュールのことです。
TestsDoublesの作成者であるGerardMeszarosによると、Test Doubleは5つのカテゴリに分類できます。その中でも今回は、JestでMockとStubについて書きます。

http://...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Svelte】on:clickで呼ばれる関数をpropsとして渡す方法]]></title>
        <id>https://zenn.dev/ezryow/articles/08d8a7bf16ac1f</id>
        <link href="https://zenn.dev/ezryow/articles/08d8a7bf16ac1f"/>
        <updated>2021-07-18T06:18:48.000Z</updated>
        <summary type="html"><![CDATA[いつも忘れてしまうので，書きます．
HogeButton.svelteがあります．

      
        
        <button on:click>ClickMe</button>


      
      on:clickは通常on:click={f}などの形式で，呼び出し関数を波括弧の中に書きますが，上記例では何も書いていません．
そして，propsとして呼び出したい関数は次のような形式で渡します．

      
        
        <script lang="ts">
    import HogeButt...]]></summary>
        <author>
            <name>EZryow</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をyamlファイルかつコンポーネント(SFC)毎にする普通ではない方法[改良版]]]></title>
        <id>https://zenn.dev/yukihirop/articles/20920804228834</id>
        <link href="https://zenn.dev/yukihirop/articles/20920804228834"/>
        <updated>2021-07-18T05:34:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はvue-i18nの翻訳ファイルをコンポーネント毎に管理したいという思いで書いた前回の記事の改良版です。
https://zenn.dev/yukihirop/articles/b36c43014355fd
前回のやり方が「ほぼタラバガニ」なら今回のやり方は「タラバガニ」です。🦀
前回のやり方には以下の問題がありました。

      
        
        - $etという$tを拡張したグローバルなプロパティーをVueプラグインで用意しなくちゃいけなかった
- 生成物にファイル構造が分かってしまう情報が出てしまう
 - 翻訳のルートキーをSFCへの相対...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をyamlファイルかつコンポーネント(SFC)毎にする普通ではない方法[改良版]]]></title>
        <id>https://zenn.dev/yukihirop/articles/20920804228834</id>
        <link href="https://zenn.dev/yukihirop/articles/20920804228834"/>
        <updated>2021-07-18T05:34:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はvue-i18nの翻訳ファイルをコンポーネント毎に管理したいという思いで書いた前回の記事の改良版です。
https://zenn.dev/yukihirop/articles/b36c43014355fd
前回のやり方が「ほぼタラバガニ」なら今回のやり方は「タラバガニ」です。🦀
前回のやり方には以下の問題がありました。

      
        
        - $etという$tを拡張したグローバルなプロパティーをVueプラグインで用意しなくちゃいけなかった
- 生成物にファイル構造が分かってしまう情報が出てしまう
 - 翻訳のルートキーをSFCへの相対...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 開発環境構築メモ 2021年7月版 - Yarn, TypeScript, ESLint, Prettier, VSCode]]></title>
        <id>https://zenn.dev/15/articles/aa8c322c85d27f</id>
        <link href="https://zenn.dev/15/articles/aa8c322c85d27f"/>
        <updated>2021-07-18T04:27:20.000Z</updated>
        <summary type="html"><![CDATA[まえがき
このあたりを参考に環境構築をしたが、そのままでは動かない or 好みに変えたい部分があったので自分の手順を作ってみた。
詳しい手順の理解が必要であればリンク先を参照してほしい。
https://zenn.dev/66ed3gs/articles/99aa613a86f21f
https://zenn.dev/januswel/articles/402774d76424e71ac906

 create-next-app
ts版で実行する。

      
        
        npx create-next-app --ts sample-app
cd samp...]]></summary>
        <author>
            <name>15</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 開発環境構築メモ 2021年7月版 - Yarn, TypeScript, ESLint, Prettier, VSCode]]></title>
        <id>https://zenn.dev/15/articles/aa8c322c85d27f</id>
        <link href="https://zenn.dev/15/articles/aa8c322c85d27f"/>
        <updated>2021-07-18T04:27:20.000Z</updated>
        <summary type="html"><![CDATA[まえがき
このあたりを参考に環境構築をしたが、そのままでは動かない or 好みに変えたい部分があったので自分の手順を作ってみた。
詳しい手順の理解が必要であればリンク先を参照してほしい。
https://zenn.dev/66ed3gs/articles/99aa613a86f21f
https://zenn.dev/januswel/articles/402774d76424e71ac906

 create-next-app
ts版で実行する。

      
        
        npx create-next-app --ts sample-app
cd samp...]]></summary>
        <author>
            <name>15</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js（TypeScript）で Firebase を利用し, Google ログインを]]></title>
        <id>https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth"/>
        <updated>2021-07-18T00:16:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って TypeScript を使用した Next アプリに Google ログインを実装する方法を記述します.
JavaScript を使用した Next アプリに Google ログインを実装する方法はこちらに記述しています.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


TypeScript
4.3.5...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js（TypeScript）で Firebase を利用し, Google ログインを]]></title>
        <id>https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth"/>
        <updated>2021-07-18T00:16:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って TypeScript を使用した Next アプリに Google ログインを実装する方法を記述します.
JavaScript を使用した Next アプリに Google ログインを実装する方法はこちらに記述しています.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


TypeScript
4.3.5...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】みんな next.confing.js にどんなプラグイン入れてる？]]></title>
        <id>https://zenn.dev/aiji42/articles/1de8f9ea7b8a10</id>
        <link href="https://zenn.dev/aiji42/articles/1de8f9ea7b8a10"/>
        <updated>2021-07-17T14:43:03.000Z</updated>
        <summary type="html"><![CDATA[https://twitter.com/aiji42_dev/status/1415711986608795648?s=20


Why Next.js
私は、業務でもプライベートでも Next.js を使っています。
Next.js は "Zero Config" をうたっているわけですが、実際業務で使うとなると、なかなか Zero とはいきません。IE11用にトランスパイルが必要になったり、ソースマップのアップロードのために webpack の拡張が必要なるケースにおいては、next.config.js のカスタマイズが必要になります。
そういったカスタマイズをサポートし、設定のスト...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt+TS+CompositionAPI+Vercel+VSCodeのセットアップ手順]]></title>
        <id>https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel</id>
        <link href="https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel"/>
        <updated>2021-07-17T13:08:22.000Z</updated>
        <summary type="html"><![CDATA[ずっとNext.jsを使っていたんだが、Nuxt.jsに切り替えるにあたって何回も挫折したので、正直二度とやりたくないが 一応メモする。

最終更新: 2021年7月17日
筆者はNuxtに関しては初心者ですので、細かい説明が不正確かもしれません。また、Vue/Nuxtはすごい速度で進化しています。仕様変更に注意してください


 何をセットアップするか


yarn create nuxt-appで以下を済ませる

TypeScript化
Prettier+ESLint
TailwindCSS対応
PWA対応


コンフィグをTS化する

srcディレクトリにまとめる
OGPを設定する...]]></summary>
        <author>
            <name>sasigume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt+TS+CompositionAPI+Vercel+VSCodeのセットアップ手順]]></title>
        <id>https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel</id>
        <link href="https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel"/>
        <updated>2021-07-17T13:08:22.000Z</updated>
        <summary type="html"><![CDATA[ずっとNext.jsを使っていたんだが、Nuxt.jsに切り替えるにあたって何回も挫折したので、正直二度とやりたくないが 一応メモする。

最終更新: 2021年7月17日
筆者はNuxtに関しては初心者ですので、細かい説明が不正確かもしれません。また、Vue/Nuxtはすごい速度で進化しています。仕様変更に注意してください


 何をセットアップするか


yarn create nuxt-appで以下を済ませる

TypeScript化
Prettier+ESLint
TailwindCSS対応
PWA対応


コンフィグをTS化する

srcディレクトリにまとめる
OGPを設定する...]]></summary>
        <author>
            <name>sasigume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[転職後2週間でフロントエンドの開発環境を大工事して、React を導入した話]]></title>
        <id>https://zenn.dev/nappa/articles/e7759c7e65df9a</id>
        <link href="https://zenn.dev/nappa/articles/e7759c7e65df9a"/>
        <updated>2021-07-17T11:46:33.000Z</updated>
        <summary type="html"><![CDATA[ども、今月スタートアップ企業に転職した nappa です。現在新規事業の開発に携わっています。
今日は転職後2週間でフロントエンドの環境を大工事 & React 導入した話を書きます。

 面接まで
面接では「新規事業では Vue.js を使っている」と言われて、ある程度フロントエンドの環境が整ってるだろうと思っていました。サーバサイドは Rails を使っているとのことだったので、技術的には前職の経験もあるので、大丈夫だろうと思っていました。

 入社後、フタを開けてみたら...
入社後、ソースコードを拝見して度肝を抜かれました。
当初、面接から入社まで Vue.js を使って...]]></summary>
        <author>
            <name>nappa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をコンポーネント(SFC)毎にする普通ではない方法]]></title>
        <id>https://zenn.dev/yukihirop/articles/b36c43014355fd</id>
        <link href="https://zenn.dev/yukihirop/articles/b36c43014355fd"/>
        <updated>2021-07-17T11:27:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
vue-i18nを使っている人なら一度や二度は翻訳のキーのつけ方に悩んだ人は多いかと思います。
しかも複数人で開発していると人によってキーのつけ方の癖が違ったり、ルール化していてもそのルールを常に意識しながら開発するのは辛いです。そういう問題に対しての一つの解決策を提示してみようかと思います。
「コンポーネント専用の翻訳ファイルでルートキーがユニークならそれに続くキーは適当でも大して問題ないのではないか？ キーのつけ方が適当になってしまったとしてもそれはそのコンポーネントの翻訳で閉じているし、影響範囲は明確なので大して問題ないのではなかろうか？」
です。

 環境

vue...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでベース配列型で新しい型を作って初期化するとエラーになる。]]></title>
        <id>https://zenn.dev/hashito/articles/54d9167e7b5624</id>
        <link href="https://zenn.dev/hashito/articles/54d9167e7b5624"/>
        <updated>2021-07-17T00:31:52.000Z</updated>
        <summary type="html"><![CDATA[現象

      
        
        type History=Array<string>;
history:History=new History();


      
      下記のようなエラーが出る。

TS2693: 'History' only refers to a type, but is being used as a value here.


 解決
下記のように修正すれば解決される。

      
        
        type History=Array<string>;
history:Histo...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue.jsのcomputedとmethodsの使い分け]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/8c99581ca5bdd0</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/8c99581ca5bdd0"/>
        <updated>2021-07-16T02:14:23.000Z</updated>
        <summary type="html"><![CDATA[vue.jsには算出プロパティを意味する「computed」と関数を意味する「methods」があります。
少しオブジェクト指向を知っている人ならプロパティ とメソッドは全然別物だということが分かりますが、Vue.jsのcomputedでは計算ができてしまうので、実際にできることととしてはほとんど変わらないのです。
では、どういうときにプロパティを使って、どういうときにメソッドを使えば良いのでしょうか？

 computedとmethodsの大きな違いはキャッシュ機能があるかどうか
computedにはキャッシュ機能がありページをリロードしてもキャッシュした値を表示するため、データが変わ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovim+pyls+flake8でテキスト領域に警告内容が表示されないようにする]]></title>
        <id>https://zenn.dev/hhatto/articles/38cc31b301ede3</id>
        <link href="https://zenn.dev/hhatto/articles/38cc31b301ede3"/>
        <updated>2021-07-16T00:16:17.000Z</updated>
        <summary type="html"><![CDATA['sys' imported but unused はflake8による警告メッセージ

 結論
let g:lsp_diagnostics_virtual_text_enabled = 0 の設定にしておく

 使用環境

neovim(NVIM): v0.5.0


 設定ファイル

      
        .config/nvim/init.vim
        call plug#begin('~/.config/nvim/plugged')
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
call...]]></summary>
        <author>
            <name>hhatto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase: AppCheck 導入]]></title>
        <id>https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031</id>
        <link href="https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031"/>
        <updated>2021-07-15T19:54:35.000Z</updated>
        <summary type="html"><![CDATA[Firebase AppCheck 導入

 対応サービス

Realtime Database
Cloud Storage
Cloud Functions (callable functions)


 前提
Firebase のプロジェクト作成まで完了している

 1. reCAPTCHA 登録
https://www.google.com/recaptcha/admin/create

以下の情報を登録

ラベル
reCAPTCHA タイプ: "reCAPTCHA v3" を選択
ドメイン: ドメイン設定


 2. コンソール画面からAppCheck登録
https://co...]]></summary>
        <author>
            <name>Yuuya Miyamae</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase: AppCheck 導入]]></title>
        <id>https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031</id>
        <link href="https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031"/>
        <updated>2021-07-15T19:54:35.000Z</updated>
        <summary type="html"><![CDATA[Firebase AppCheck 導入

 対応サービス

Realtime Database
Cloud Storage
Cloud Functions (callable functions)


 前提
Firebase のプロジェクト作成まで完了している

 1. reCAPTCHA 登録
https://www.google.com/recaptcha/admin/create

以下の情報を登録

ラベル
reCAPTCHA タイプ: "reCAPTCHA v3" を選択
ドメイン: ドメイン設定


 2. コンソール画面からAppCheck登録
https://co...]]></summary>
        <author>
            <name>Yuuya Miyamae</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React+TypeScript+ESLint+Prettierをまとめて環境構築]]></title>
        <id>https://zenn.dev/jpn_asane/articles/d7f44682b74fdc</id>
        <link href="https://zenn.dev/jpn_asane/articles/d7f44682b74fdc"/>
        <updated>2021-07-15T18:19:10.000Z</updated>
        <summary type="html"><![CDATA[環境構築をしっかりするメリット
正直な話、React+TypeScriptは公式にあるコマンドを一個打ち込めばプロジェクト自体は出来ます。
環境構築がめんどくさくてそれだけで済ませていた人も多いと思いますが、今回紹介する環境構築をする事で、様々なメリットがあります。

チーム制作などでコーディングルールを厳格化できる
->チーム一人一人が我流のコーディングをすると誰も読み取る事が出来ないモノが完成します。
初心者のうちからコーディングの変な癖をなくす
->初心者のうちから変な癖がついてしまうと、修正するのが大変です。
コーディングの穴をなくす
->JavaScrip...]]></summary>
        <author>
            <name>Asane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくのかんがえたさいきょうのデータフェッチ 2021Summer🏄‍♂️【Next.js / Hasura】]]></title>
        <id>https://zenn.dev/eringiv3/articles/56f2b9f90a0632</id>
        <link href="https://zenn.dev/eringiv3/articles/56f2b9f90a0632"/>
        <updated>2021-07-15T15:16:24.000Z</updated>
        <summary type="html"><![CDATA[フロントエンドアプリケーションの開発を行う上で避けては通れないデータフェッチの実装。
REST APIを使うか、GraphQLを使うか、クライアントでキャッシュするか、APIレスポンスにどのようにして型を付けるか、状態管理はどうするのかなど、開発者の悩みが尽きないけれども、それに関しての設計を考えたり議論を行うのはフロントエンド開発の楽しいポイントだと僕は思っています。
この記事では、バックエンドにHasura、フロントエンドにNext.jsを使用する場合に僕が最強だと感じたツールの組み合わせ・使い方を紹介します。

 モチベーション

APIからのレスポンスにはTypeScriptの型...]]></summary>
        <author>
            <name>Eringi_V3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくのかんがえたさいきょうのデータフェッチ 2021Summer🏄‍♂️【Next.js / Hasura】]]></title>
        <id>https://zenn.dev/eringiv3/articles/56f2b9f90a0632</id>
        <link href="https://zenn.dev/eringiv3/articles/56f2b9f90a0632"/>
        <updated>2021-07-15T15:16:24.000Z</updated>
        <summary type="html"><![CDATA[フロントエンドアプリケーションの開発を行う上で避けては通れないデータフェッチの実装。
REST APIを使うか、GraphQLを使うか、クライアントでキャッシュするか、APIレスポンスにどのようにして型を付けるか、状態管理はどうするのかなど、開発者の悩みが尽きないけれども、それに関しての設計を考えたり議論を行うのはフロントエンド開発の楽しいポイントだと僕は思っています。
この記事では、バックエンドにHasura、フロントエンドにNext.jsを使用する場合に僕が最強だと感じたツールの組み合わせ・使い方を紹介します。

 モチベーション

APIからのレスポンスにはTypeScriptの型...]]></summary>
        <author>
            <name>Eringi_V3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularでundefinedな可能性のある要素を表示する]]></title>
        <id>https://zenn.dev/hashito/articles/f0c4c0441b4cd2</id>
        <link href="https://zenn.dev/hashito/articles/f0c4c0441b4cd2"/>
        <updated>2021-07-15T13:42:14.000Z</updated>
        <summary type="html"><![CDATA[問題
下記のように|undefinedなどがある場合に、HTML上で参照しようとすると、下記のようなエラーが出る。

      
        
        import {
  Component
} from '@angular/core';
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user: { name: string; a...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularで生のDOMを操作する]]></title>
        <id>https://zenn.dev/hashito/articles/f9b9c2401e0318</id>
        <link href="https://zenn.dev/hashito/articles/f9b9c2401e0318"/>
        <updated>2021-07-15T13:19:13.000Z</updated>
        <summary type="html"><![CDATA[結論
下記のようにする。

      
        
        import {
  Component,
  ViewChild,
  AfterViewInit,
  OnInit,
  ElementRef
} from '@angular/core';
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements AfterVi...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chart.jsをNuxt.jsで使って時間の折線を作ったので個人的にメモした]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c"/>
        <updated>2021-07-15T13:00:42.000Z</updated>
        <summary type="html"><![CDATA[ほんと適当ですみません。

 Install

      
        
        $ npm install vue-chartjs@2 chart.js@2


      
      なんかこのバージョンじゃないとだめだった。よくわかんないけど両方2にした。
vue-chartjsの導入を忘れないこと。

      
        
        $ npm install @nuxtjs/moment


      
      時間の管理しやすさのためにMoment.jsを。入らなくてもいいかも。

      
        
        $ np...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chart.jsをNuxt.jsで使って時間の折線を作ったので個人的にメモした]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c"/>
        <updated>2021-07-15T13:00:42.000Z</updated>
        <summary type="html"><![CDATA[ほんと適当ですみません。

 Install

      
        
        $ npm install vue-chartjs@2 chart.js@2


      
      なんかこのバージョンじゃないとだめだった。よくわかんないけど両方2にした。
vue-chartjsの導入を忘れないこと。

      
        
        $ npm install @nuxtjs/moment


      
      時間の管理しやすさのためにMoment.jsを。入らなくてもいいかも。

      
        
        $ np...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js環境で、PythonのFastAPIみたいなOpenAPIドキュメント自動生成を求めて、Fastifyに手を出してみる]]></title>
        <id>https://zenn.dev/ibaraki/articles/7a6368bdfb890f</id>
        <link href="https://zenn.dev/ibaraki/articles/7a6368bdfb890f"/>
        <updated>2021-07-15T12:17:44.000Z</updated>
        <summary type="html"><![CDATA[やりたかったこと
Node.jsでAPIを書いたら、OpenAPIドキュメントを自動生成して欲しい

 背景
APIを書く場合に使うFrameworkにおいてPythonではDjangoやFlaskが有名ですが、最近注目されているFrameworkにFastAPIというものがあります。FastAPIは、動作がNode.js並に早いとか習得が容易といった特徴もありますが、コードを書くと自動でOpenAPIドキュメントを作ってくれてwebインターフェースも用意してくれる機能がとても便利です。
詳しくは知りたい方は、ドキュメントを読んでください。
https://fastapi.tiang...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leaner の技術スタック紹介(2021年7月版)]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107"/>
        <updated>2021-07-15T01:51:12.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
以前 Leaner の技術スタックを記事にまとめましたが、Copilot CLIでのコンテナ化やAmplify ConsoleでのSPA配信で技術スタックが更新されたことで少々古い内容になっています。
https://zenn.dev/leaner_tech/articles/20210608-leaner-techstack
また新規プロダクトの立ち上げが始まっており、そちらでは従前のプロダクトと異なる技術選定をした部分もあります。
これらの点を踏まえ、本記事では Leaner で採用している現在の技術ス...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leaner の技術スタック紹介(2021年7月版)]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107"/>
        <updated>2021-07-15T01:51:12.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
以前 Leaner の技術スタックを記事にまとめましたが、Copilot CLIでのコンテナ化やAmplify ConsoleでのSPA配信で技術スタックが更新されたことで少々古い内容になっています。
https://zenn.dev/leaner_tech/articles/20210608-leaner-techstack
また新規プロダクトの立ち上げが始まっており、そちらでは従前のプロダクトと異なる技術選定をした部分もあります。
これらの点を踏まえ、本記事では Leaner で採用している現在の技術ス...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHPでもNextしたい]]></title>
        <id>https://zenn.dev/quocca/articles/36182859d30b22</id>
        <link href="https://zenn.dev/quocca/articles/36182859d30b22"/>
        <updated>2021-07-14T13:36:47.000Z</updated>
        <summary type="html"><![CDATA[したかったので開発しました！
https://quocca-works.com/accela/
ドキュメントはサイト内にあるので、この記事ではNext.jsとの対比や簡単なコードで、Accelaの特徴を紹介していきます。実際にどういった動作をするかは当サイトで確認することができ、サイトのデータ自体もダウンロードできるので、サンプルとしてお使いください。

 Next.jsを参考にした機能
Next.js(React)の設計思想やNode.jsのエコシステムは素晴らしいものですが、Accelaはその全てを参考にして作っているわけではありません。主に以下の3点を踏襲した上で、別のコンセプトを...]]></summary>
        <author>
            <name>quocca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの環境を構築する（+TypeScript, Storybook, Hygen）]]></title>
        <id>https://zenn.dev/nihashi/articles/f532d43bd52e6f</id>
        <link href="https://zenn.dev/nihashi/articles/f532d43bd52e6f"/>
        <updated>2021-07-14T11:48:49.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの導入

      
        
        npx create-next-app project-name


      
      typescriptを導入したい場合はオプションに--typescript（もしくは--ts）を追加するか、プロジェクト作成後に必要なファイルの作成およびパッケージのインストールを行います。

      
         プロジェクト作成時に導入
        npx create-next-app project-name --typescript


      
      
      
        ...]]></summary>
        <author>
            <name>nihashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[小規模環境のi18nで、t("Hello","こんにちは")のように日本語をfallbackに入れる運用したら良かった話]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-07-13-i18n</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-07-13-i18n"/>
        <updated>2021-07-14T10:10:29.000Z</updated>
        <summary type="html"><![CDATA[Reactアプリケーションをi18nをするにあたって、t("Hello", "こんにちは")のように日本語をfallback値として設定するようにしたらわりと良かったのでまとめる

 前提
あくまで今回の話は下記のような前提としている。

小規模で、複雑な多言語化処理を要する部分が少ない
日本語から他言語への変換である
多言語化の種類は少なく、多言語化後も日本語が中心。
組織のコミュニケーションパスが少なく、実装者がUIを変更する事が出来る環境である


 準備
本題に入る前の前提として、ライブラリと外部サービス選びについて。

 ライブラリ選び
i18n自体はマッピングさえできれば十分...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.12.0 がリリースされたので新機能や変更点の紹介]]></title>
        <id>https://zenn.dev/magurotuna/articles/deno-release-note-1-12-0</id>
        <link href="https://zenn.dev/magurotuna/articles/deno-release-note-1-12-0"/>
        <updated>2021-07-14T04:30:36.000Z</updated>
        <summary type="html"><![CDATA[Copyright (c) 2018-2021 the Deno authors. MIT License.
日本時間の昨日（2021 年 7 月 13 日）に Deno の v1.12.0 がリリースされました。
https://deno.com/blog/v1.12
詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。


generateKey, sign, verify の3つの Web Crypto API がサポート
ネイティブ HTTP サーバーでの WebSocket サポート
REPL における TypeScript のサポ...]]></summary>
        <author>
            <name>magurotuna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-14のJS: Firefox 90、npm auditの問題、Access Guide]]></title>
        <id>https://jser.info/2021/07/14/firefox-90-npm-audit-access-guide/</id>
        <link href="https://jser.info/2021/07/14/firefox-90-npm-audit-access-guide/"/>
        <updated>2021-07-14T03:24:13.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #548 - Firefox 90がリリースされました。
Firefox 90.0, See All New Features, Updates and Fixes
Firefox 90 for developers - Mozilla | MDN
Firefox 90ではECMAScript Proposal Stage 4のPrivate class fieldsをデフォルトでサポート、Stage 3のString/Arrayのat()をサポートしています。FTPサポートの削除、WheelEventの互換性を改善なども含まれています。
また、Chromeでも実装されていたFetch metadata request headersが実装されています。
Sec-Fetch-Site、Sec-Fetch-Mode、Sec-Fetch-User、Sec-Fetch-Destのリクエストヘッダがそれぞれのリクエストに追加され、サーバ側でのチェックに利用できます。
Firefox 90 supports Fetch Metadata Request Headers - Mozilla Security Blog
Protect your resources from web attacks with Fetch Metadata
Fetch metadata request headersはSafariとIE以外のブラウザで実装されています。
npm audit: Broken by Design — Overreactedという記事では、create-react-appを例に npm audit で報告される脆弱性の問題について書かれています。
報告される脆弱性の殆どはReDOSとなっていて、devDependenciesとして扱うツールにおいてはfalse…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless FrameworkとTypeScriptでCQRSを実現する 実装編1]]></title>
        <id>https://zenn.dev/makumattun/articles/e3e598ff8c6dd3</id>
        <link href="https://zenn.dev/makumattun/articles/e3e598ff8c6dd3"/>
        <updated>2021-07-14T01:20:29.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事の続きです。
https://zenn.dev/makumattun/articles/474fbe08a5111c
※この記事ではEventStoreとmain関数の流れまでを紹介します。
この部分


 イベントソーシングでテーブル格納時にやりたいこと
やりたいこと
・一つのテーブルにすべてのイベントを格納したい
・複数のドメインイベントをAcidに登録したい
・整合性を持たせるために誤って２回登録のイベントが発火されたときは失敗させたい
ここらへんを満たすようにテーブルの設計をする必要があります。

 DynamoDBのインデックス設計
ごちゃごちゃ記載するよりも、Ev...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ViteでReact17以降のJSXトランスフォームに対応する]]></title>
        <id>https://zenn.dev/sykmhmh/articles/086eef9300ac2d</id>
        <link href="https://zenn.dev/sykmhmh/articles/086eef9300ac2d"/>
        <updated>2021-07-13T14:13:21.000Z</updated>
        <summary type="html"><![CDATA[概要
Viteで、React17以降のJSXトランスフォームに対応する方法です。
https://ja.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html

 動機
React16以前では、JSXを利用するには明示的にReactをインポートする必要がありましたが、React 17以降は新しいトランスフォームの方法が提供され(現在は16以前のバージョンでも提供されています)、babelやtsconfigの設定を変更することで明示的にReactをインポートせずともJSXが利用できるようになりました。
しかし...]]></summary>
        <author>
            <name>sykmhmh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueでドラムロールを実装する]]></title>
        <id>https://zenn.dev/syuri/articles/ea7117bfb35a09</id>
        <link href="https://zenn.dev/syuri/articles/ea7117bfb35a09"/>
        <updated>2021-07-13T13:58:19.000Z</updated>
        <summary type="html"><![CDATA[ドラムロールとは・・・
数字がじゃかじゃか回るやつです。
今回は数字が画面内に入ってきたら、数字のドラムロールが開始されるというアニメーションをプラグインを使わずに実装したいと思います。(Nuxt＋Typescriptで開発しています。)


 目次
最初に考えた方法
もうちょっと賢い方法
最終型を見たい方はもうちょっと賢い方法から見てください。

 最初に考えた方法
まずはコードから。

      
        
        <div data-destination="2000"　class="number">0</div>


      
   ...]]></summary>
        <author>
            <name>syuri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueでドラムロールを実装する]]></title>
        <id>https://zenn.dev/syuri/articles/ea7117bfb35a09</id>
        <link href="https://zenn.dev/syuri/articles/ea7117bfb35a09"/>
        <updated>2021-07-13T13:58:19.000Z</updated>
        <summary type="html"><![CDATA[ドラムロールとは・・・
数字がじゃかじゃか回るやつです。
今回は数字が画面内に入ってきたら、数字のドラムロールが開始されるというアニメーションをプラグインを使わずに実装したいと思います。(Nuxt＋Typescriptで開発しています。)


 目次
最初に考えた方法
もうちょっと賢い方法
最終型を見たい方はもうちょっと賢い方法から見てください。

 最初に考えた方法
まずはコードから。

      
        
        <div data-destination="2000"　class="number">0</div>


      
   ...]]></summary>
        <author>
            <name>syuri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ViteをNuxtで試した]]></title>
        <id>https://zenn.dev/kai/articles/try-nuxt-vite</id>
        <link href="https://zenn.dev/kai/articles/try-nuxt-vite"/>
        <updated>2021-07-13T13:36:11.000Z</updated>
        <summary type="html"><![CDATA[最近話題となっている Vite を Nuxt で試してみました。
Vite とは簡単に言ってしまうと、速い、フロントエンドのビルドツールです。
調べてみると、Nuxt Vite というのがあるんですね。
そちらで試したことを書いていきます。

 Nuxt に Vite を導入する

 Nuxt のプロジェクトを作成

      
        
        $ yarn create nuxt-app vite-nuxt


      
      vite-nuxtのところは任意の名前で大丈夫です。
Vite を試したいだけなので、とりあえず最小限の構成にしました。
targ...]]></summary>
        <author>
            <name>カイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[apollo graphqlアプリのUIテスト]]></title>
        <id>https://zenn.dev/kupuma_ru21/articles/bb3d32e6e27102</id>
        <link href="https://zenn.dev/kupuma_ru21/articles/bb3d32e6e27102"/>
        <updated>2021-07-13T13:14:30.000Z</updated>
        <summary type="html"><![CDATA[apollo graphqlを使ったUIテストのセットアップをしてみました。
備忘録で残します。
テストはreact-tesing-liblaryで行います。
以下、テスト対象のアプリです。
https://github.com/kupuma-ru21/apollo_relay_style_cursor_pagination
(以前、書いた記事にテスト対象のアプリの作成方法を記載してます。読まなくてもできるように進めたいと思います。)
https://zenn.dev/kupuma_ru21/articles/f56148ffcac7b0


 前提
まず、普通にreact-tesing...]]></summary>
        <author>
            <name>くぷまーる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[１００万円失いながらハッキングを乗り越え誰でも１分で切り抜きを作れるサービスを公開するまでの失敗と学び]]></title>
        <id>https://zenn.dev/kendai/articles/b6a3467eafb7db</id>
        <link href="https://zenn.dev/kendai/articles/b6a3467eafb7db"/>
        <updated>2021-07-13T03:19:32.000Z</updated>
        <summary type="html"><![CDATA[先日、誰でも最短1分でYouTubeの切り抜きを作れるウェブサービスを公開しました。
私はプログラミングの勉強を始めて1年半の初学者ですが、個人開発でサービスを公開するまでに、数多くの失敗と苦労をしてきました(そして今もしてます笑)。後ほど詳しく書きますが、以下のような経験をしました。

ハッキングを受けデータを盗まれる
α版をリリースするも作り直しを決意する
巻き返しのため海外フリーランサーを雇うも無駄金となる
公開前に本家が同じ機能を発表し諦めかける
β版をリリースするも使われない

同じようにプログラミングの勉強をし始めたばかりの方や、個人開発でいつかはサービスを公開したいと考えて...]]></summary>
        <author>
            <name>Kendai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JestでModuleNameMapperを使うとVSCodeくんがモジュール参照してくれない時～～]]></title>
        <id>https://zenn.dev/huequica/articles/fix_module_decralation_in_vscode</id>
        <link href="https://zenn.dev/huequica/articles/fix_module_decralation_in_vscode"/>
        <updated>2021-07-12T18:13:43.000Z</updated>
        <summary type="html"><![CDATA[悲しい時～～～～～悲し以下略
Jestには ModuleNameMapper なる、テスト対象のオブジェクトを import してくる際にパス名を特定の prefix で代用する機能があります。
例えば、以下のようなディレクトリ構成のプロジェクトであると仮定します。

      
        
        $ tree  -L 1
.
├── LICENSE
├── README.md
├── dist
├── jest.config.js
├── node_modules
├── package.json
├── src
├── tests
├── tsconfig.json...]]></summary>
        <author>
            <name>Haru_Yakumo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue3 + Composition API でフォーム操作]]></title>
        <id>https://zenn.dev/fjsh/articles/aa17332a126162</id>
        <link href="https://zenn.dev/fjsh/articles/aa17332a126162"/>
        <updated>2021-07-12T16:21:10.000Z</updated>
        <summary type="html"><![CDATA[Vue3 を使ってフォーム操作のサンプルを作ります。

 プロジェクトの作成

      
        
        $ vue create form-handling

? Please pick a preset: Manually select features
? Check the features needed for your project: Choose Vue version, TS, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Use ...]]></summary>
        <author>
            <name>Sho Fujimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt TypeScript（Composition API）、Django REST Framework で、・・・]]></title>
        <id>https://zenn.dev/jqinglong/articles/e901ca698f2158</id>
        <link href="https://zenn.dev/jqinglong/articles/e901ca698f2158"/>
        <updated>2021-07-12T12:49:03.000Z</updated>
        <summary type="html"><![CDATA[タイトル長すぎですね。途中で切れました。
本当は

 Nuxt TypeScript（Composition API）、Django REST Framework で、Docker Compose上での開発基盤を作る
こいつの続きというか。
https://zenn.dev/jqinglong/scraps/168d1bb5dd4832
この悪戦苦闘の結果、まあまあ良い構成ができたと思っており、それを使って、さらにもう一つアプリを作ってます。スッキリいくと思うので、そのスッキリした記録を残そうと思ったのですが、そうは問屋はおろさず・・・それでも、上記よりは落ち着いてできたので、こちらに残...]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt TypeScript（Composition API）、Django REST Framework で、・・・]]></title>
        <id>https://zenn.dev/jqinglong/articles/e901ca698f2158</id>
        <link href="https://zenn.dev/jqinglong/articles/e901ca698f2158"/>
        <updated>2021-07-12T12:49:03.000Z</updated>
        <summary type="html"><![CDATA[タイトル長すぎですね。途中で切れました。
本当は

 Nuxt TypeScript（Composition API）、Django REST Framework で、Docker Compose上での開発基盤を作る
こいつの続きというか。
https://zenn.dev/jqinglong/scraps/168d1bb5dd4832
この悪戦苦闘の結果、まあまあ良い構成ができたと思っており、それを使って、さらにもう一つアプリを作ってます。スッキリいくと思うので、そのスッキリした記録を残そうと思ったのですが、そうは問屋はおろさず・・・それでも、上記よりは落ち着いてできたので、こちらに残...]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[denopsでPaiza IOのwebAPIを実行するプラグインを作った]]></title>
        <id>https://zenn.dev/omochice/articles/35e339fdfb5241</id>
        <link href="https://zenn.dev/omochice/articles/35e339fdfb5241"/>
        <updated>2021-07-12T03:16:14.000Z</updated>
        <summary type="html"><![CDATA[denopsでPaiza IOのwebAPIを実行するプラグインを作った

手元に特定の言語の実行環境がなくてもクラウドでコードを実行できるwebAPI(paiza.io)をvim上から実行するプラグインを作った。
denopsについては以下を参照。


 使い方

 インストール
私がdein.vimを使ってるのでdeinの例で。

      
        
        call dein#add("vim-denops/denops.vim")
call dein#add("Omochice/dps-paiza-io-vim")


      
      
 実行
...]]></summary>
        <author>
            <name>Omochice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-clipboard2でクリップボードにコピーを簡単に実現する（laravel×vue.js）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/af1723805deef4</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/af1723805deef4"/>
        <updated>2021-07-11T23:35:18.000Z</updated>
        <summary type="html"><![CDATA[vue-clipboardを使えば、vue.jsでクリップボードにコピーがめちゃくちゃ簡単に実現することができます！

 VueClipboard2をインストールする
普通にインストールしていきます

      
        
        npm install --save vue-clipboard2


      
      
 VueClipboard2をインポートする

      
        
        import VueClipboard from 'vue-clipboard2'
Vue.use(VueClipboard)


      
 ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AngularでRoutingしてもServiceが再作成されるときの原因]]></title>
        <id>https://zenn.dev/hashito/articles/f24b066962f58d</id>
        <link href="https://zenn.dev/hashito/articles/f24b066962f58d"/>
        <updated>2021-07-11T23:32:45.000Z</updated>
        <summary type="html"><![CDATA[背景
AngularでServiceを作成して下記の一文を入れておくとクラスがシングルストン構成となるはずです。

      
        
        @Injectable({
  providedIn: 'root'
})


      
      シングルストン構成とは、アプリケーション上単一のインスタンスしか持たいない構成で、通常のクラスは複数の実態を持つが、シングルストンなクラスはどこからアクセスしても単一な実態へアクセスすることになります。
詳しくは下記。
https://ja.wikipedia.org/wiki/Singleton_パターン
これで構成...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google App Script 開発 のための Templateリポジトリを作った]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/2c6cc4e7c27210</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/2c6cc4e7c27210"/>
        <updated>2021-07-11T23:15:22.000Z</updated>
        <summary type="html"><![CDATA[GAS を書くたびに開発環境構築を調べている気がするので、GAS 開発用の Template リポジトリを作ってみました。

 Templateリポジトリ
https://github.com/kawamataryo/google-app-script-starter-template
機能はこちらです。


claspによる App Script へのデプロイ
TypeScript 対応
Webpack5 でのビルド※

ESLint / prettier でのコード整形

husky / lint-stage でのプレコミットフック


Clasp を使えば TypeScrip での...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでFind型を作ってみた]]></title>
        <id>https://zenn.dev/schrosis/articles/ec2e43e2bd72c2</id>
        <link href="https://zenn.dev/schrosis/articles/ec2e43e2bd72c2"/>
        <updated>2021-07-11T20:08:43.000Z</updated>
        <summary type="html"><![CDATA[作ったもの
以下のテストが通る Find 型

型テストのための Equal ,  Expect は @type-challenges/utils の型


      
        
        import { Equal, Expect } from '@type-challenges/utils'

type Lang = 'TypeScript'|'PHP'|'Swift'|'Python'

type cases = [
  // 配列側が確定していて、探す要素が1通りしかないとき
  // 探していた要素か undefined を明確に返す
  Expect&l...]]></summary>
        <author>
            <name>シュレシス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[warn(prisma-client) Already 10 Prisma Clients are actively runningの対処]]></title>
        <id>https://zenn.dev/kanasugi/articles/368d0b39c94daf</id>
        <link href="https://zenn.dev/kanasugi/articles/368d0b39c94daf"/>
        <updated>2021-07-11T15:45:42.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
new PrismaClient() を複数回書いてる可能性があるので、
root直下でlibのようなファイルを作り、そこで、PrsimaClientのインスタンスを１度だけ生成し、そこからimportする形で、PrismaClientのインスタンスを使用すれば解決。

 概要
Prismaを使用している時、
warn(prisma-client) Already 10 Prisma Clients are actively runningというメッセージがコンソールに表示されることがある。
本番Build時にこの箇所が原因で、DBのコネクション数の制限のエラーになること...]]></summary>
        <author>
            <name>Kanasugi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless FrameworkとTypeScriptでCQRSを実現する 概要編]]></title>
        <id>https://zenn.dev/makumattun/articles/474fbe08a5111c</id>
        <link href="https://zenn.dev/makumattun/articles/474fbe08a5111c"/>
        <updated>2021-07-11T15:02:47.000Z</updated>
        <summary type="html"><![CDATA[CQRS イベントソーシングやってますか？
なかなかCQRSとイベントソーシングを個人でちゃんとやろうと思うと難しいですよね。
そして本気でパフォーマンス考えるならスナップショットなども考慮してAkka一択な感じがありますよね。
でもそれなりのパフォーマンスを実現するのであれば、
それを実現できるデータベースはいくつかあります。そうDynamoDBもね！

 参考
https://zenn.dev/j5ik2o/articles/368e0ab78f105f2a0fae
https://techblog.zozo.com/entry/zozomat-cqrs
zozo technol...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでtodoアプリ を作ろうとしたらRecoil + React Hook Form v7で楽ができた件]]></title>
        <id>https://zenn.dev/din/articles/15d27a4bff3b5c</id>
        <link href="https://zenn.dev/din/articles/15d27a4bff3b5c"/>
        <updated>2021-07-11T15:01:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
なろう形式のタイトルってわかりやすいですね。
初投稿です。
Reactの学習のため、Todoアプリを作成しました。
どうせなら最新のライブラリを使用しようとRecoil, React Hook Form v7を使ってみましたので、備忘録がてらその内容を紹介します。

 環境
Windows10 64bit(20H2)
WSL(Ubuntu 18.) v1
node v14.17.1
yarn 1.22.5
VSCode

 完成図
こんな感じの簡単なtodoアプリを作ってみました。
見た目は完全に度外視しています。


 install
まずWSLで下記コマンドを実行して、...]]></summary>
        <author>
            <name>din</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでtodoアプリ を作ろうとしたらRecoil + React Hook Form v7で楽ができた件]]></title>
        <id>https://zenn.dev/din/articles/15d27a4bff3b5c</id>
        <link href="https://zenn.dev/din/articles/15d27a4bff3b5c"/>
        <updated>2021-07-11T15:01:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
なろう形式のタイトルってわかりやすいですね。
初投稿です。
Reactの学習のため、Todoアプリを作成しました。
どうせなら最新のライブラリを使用しようとRecoil, React Hook Form v7を使ってみましたので、備忘録がてらその内容を紹介します。

 環境
Windows10 64bit(20H2)
WSL(Ubuntu 18.) v1
node v14.17.1
yarn 1.22.5
VSCode

 完成図
こんな感じの簡単なtodoアプリを作ってみました。
見た目は完全に度外視しています。


 install
まずWSLで下記コマンドを実行して、...]]></summary>
        <author>
            <name>din</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスト駆動開発（TDD）でコードを書く]]></title>
        <id>https://zenn.dev/chida/articles/6d1882c2e00d0a</id>
        <link href="https://zenn.dev/chida/articles/6d1882c2e00d0a"/>
        <updated>2021-07-11T09:59:28.000Z</updated>
        <summary type="html"><![CDATA[テスト駆動開発の本を買って少し読みましたが、実際に自分でコードを書いて表現してみたく、TypeScriptとJestでテスト駆動開発を実践します。
https://www.amazon.co.jp/-/en/Kent-Beck/dp/4274217884/ref=sr_1_1?crid=29A7GYVAMFT8E&dchild=1&keywords=テスト駆動開発&language=ja_JP&qid=1625801931&sprefix=テスト駆動%2Caps%2C282&sr=8-1
この記事では簡単なコードをテスト駆動開発の手順に沿っ...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vercelを使わずにNext.jsするのはまだ早かった]]></title>
        <id>https://zenn.dev/makumattun/articles/c091602d3060d3</id>
        <link href="https://zenn.dev/makumattun/articles/c091602d3060d3"/>
        <updated>2021-07-11T08:10:46.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事の続きになります。
https://zenn.dev/articles/6e260f3a5af117

 serverless-nextjs
2021年7月11日現在
https://www.serverless.com/plugins/serverless-nextjs-plugin/
こちらを使うことによって、Next.jsの10系の機能をAWSにデプロイできると歓喜してそちらをつかいながら実装しておりました。

 ISRを設定したページで503エラーの頻発
こちらエラーの全文を載せておきます。

      
        
        503 ERROR
The...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsプロジェクトにCypressを導入してGitHub ActionsでVercelのPreview環境のE2Eテストをする]]></title>
        <id>https://zenn.dev/a_da_chi/articles/7ba871c23c5510</id>
        <link href="https://zenn.dev/a_da_chi/articles/7ba871c23c5510"/>
        <updated>2021-07-11T07:56:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
今回はNext.jsプロジェクトにCypressを導入してGitHub ActionsでVercelのPreview環境のE2Eテストをするまでの手順を書いていきたい思います。

 前提

Next.jsでsrcディレクトリ配下にアプリケーションコードを配置していること
Vercelを使用しており、PRごとにPreview環境がデ...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【簡単】Next.jsによるSSGの実装]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/implement-ssg-article</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/implement-ssg-article"/>
        <updated>2021-07-11T02:03:43.000Z</updated>
        <summary type="html"><![CDATA[Next.jsではAPIを叩くときにgetStaticPropsを使うことで、ビルド時にデータを取得して事前にHTMLファイルのレンダリングを行うことができます。ビルド時にデータを取得して事前にHTMLファイルのレンダリングを行うことをSSGと呼びます。
TypeScriptを使う場合はgetStaticPropsの型にGetStaticProps[1]を指定します。
SSG(StaticSiteGeneration)とは
Static Generationと呼ばれることもあります。
ビルド時にデータを取得することでpre-renderされるため高速にデータを読むことができます。
リアル...]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue.js】スライドアップダウン・ドロップダウン・アコーディオン]]></title>
        <id>https://zenn.dev/ymkn8crz/articles/25c7962dd20d54</id>
        <link href="https://zenn.dev/ymkn8crz/articles/25c7962dd20d54"/>
        <updated>2021-07-10T15:20:44.000Z</updated>
        <summary type="html"><![CDATA[以前実装に使ったVueのライブラリについてメモ。
スライドアップダウンメニュー、ドロップダウンメニュー、アコーディオンメニューなど言い方がいろいろあるやつ。

 今回の仕様
「詳しくはこちら」と書いてある赤色ヘッダーをクリックすると、

スライドがアニメーションで開き、詳細を表示する。周りの要素もスライドに合わせて移動する。

もう一度クリックすると元に戻る。

 vue-slide-up-down
Vue.jsの開発で、スライド機能を実装するならvue-slide-up-downを使うと簡単に実装できた。
https://github.com/danieldiekmeier/vue-s...]]></summary>
        <author>
            <name>ymkn8crz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vite + React + TS + vanilla-extract +α が動作するサンプルリポジトリを作った]]></title>
        <id>https://zenn.dev/meijin/articles/vite-react-ts-vanilla-extract-playground</id>
        <link href="https://zenn.dev/meijin/articles/vite-react-ts-vanilla-extract-playground"/>
        <updated>2021-07-10T08:32:49.000Z</updated>
        <summary type="html"><![CDATA[概要
以下のGitHubリポジトリに、Vite + React + TS + vanilla-extract +α が動作するサンプルリポジトリを作った。
https://github.com/TeXmeijin/vite-react-playground
本記事では動作させるための設定のポイントや、各利用技術、ライブラリの概要について説明する。
リポジトリ名をplaygroundとしているとおり、今後このリポジトリには色々なライブラリ(react-hook-form, SWRなど)の検証内容を追記していく予定だが、ひとまず環境構築で一段落したので記事を書いた。


 動作確認時のバ...]]></summary>
        <author>
            <name>Meijin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueで「$」から始まる謎のモノに困惑した]]></title>
        <id>https://zenn.dev/lemonadern/articles/6194cc19b71d61</id>
        <link href="https://zenn.dev/lemonadern/articles/6194cc19b71d61"/>
        <updated>2021-07-10T07:43:20.000Z</updated>
        <summary type="html"><![CDATA[チーム開発でVueを使っていると、突然$hoge(hogeは任意の文字列)とかいう変数や関数に遭遇することがある。
中途半端にVueを知っていると、
「知らない機能だな、$emit()みたいなやつかな？」
と思ってGoogle検索をするも、何も結果が得られない...
「じゃあ普通に関数とかかな？」
と思ってコード内を検索しても、定義箇所が見当たらない...　　
という状況に陥ることがある。
かなり困惑したので調べた。

 $hogeとは？
Vueの場合、$hogeというのはすべてのコンポーネントからアクセスできるデータやメゾッドを示している可能性が高い。
もしファイル内で宣言もなく、im...]]></summary>
        <author>
            <name>Taishi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【React Native】React Navigationで遷移時に受け渡すパラメータに型を設定する方法]]></title>
        <id>https://zenn.dev/garmi/articles/e761f112d9c48a</id>
        <link href="https://zenn.dev/garmi/articles/e761f112d9c48a"/>
        <updated>2021-07-10T07:38:49.000Z</updated>
        <summary type="html"><![CDATA[JavaScriptで書かれたReact NativeアプリをTypeScriptへ変換しているのですが、その際にReactNavigation（v5）で画面遷移を実装している箇所に型を定義する際に躓いたのでその時の設定方法を載せておきます。
以下は公式ドキュメントをなぞって実装しています。
https://reactnavigation.org/docs/typescript/

 Navigator (Router)の設定
まずは画面を管理しているファイルに型を定義します。（プロジェクトによって異なると思いますが、私の場合はRouter.tsx)

      
        
 ...]]></summary>
        <author>
            <name>がーみ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスタブルなReact Componentの書き方]]></title>
        <id>https://zenn.dev/yuki0410/articles/2ad97915768826</id>
        <link href="https://zenn.dev/yuki0410/articles/2ad97915768826"/>
        <updated>2021-07-10T06:35:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近、JESTとReact Testing Libraryを使ってテストを書く機会が増えてきました。
最初は愚直にテストを書いていたのですが、以下のような課題が出てきたため、コンポーネント構成を見直してみました。

コンポーネント外のパラメータ(Props や store, API など) と画面表示項目の間に複雑な変換ロジックが入っていてテストを書くのが大変
UI の変更などによりテストが通らなくなる


 Before
1 コンポーネントの中に表示値への変換ロジックが入っているコンポーネントになります。
変換部分が複雑化するとテストを書くのがだんだん億劫になってきます。...]]></summary>
        <author>
            <name>らんす🍐</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【React Native】端末で設定している文字サイズによる影響を制限したい]]></title>
        <id>https://zenn.dev/garmi/articles/6bdab5527ca325</id>
        <link href="https://zenn.dev/garmi/articles/6bdab5527ca325"/>
        <updated>2021-07-10T06:34:13.000Z</updated>
        <summary type="html"><![CDATA[React Nativeでアプリを開発している際に、スマートフォンの端末で文字サイズを大きく設定している場合に文字サイズによってはレイアウトが崩れてしまうことがありました。一旦文字サイズを端末に影響されないよう固定にしたいと思ったのでそのときの調査メモです。

 結論
TextコンポーネントのPropsに以下の項目を設定

      
        
        allowFontScaling={false}


      
      
 コンポーネント共通化
Expo環境で実装しているので、app.jsonにフォントサイズの固定の設定などはあるか調べてみましたが見当たらな...]]></summary>
        <author>
            <name>がーみ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composition API で @vue/test-utils 使ってみた]]></title>
        <id>https://zenn.dev/gamin/articles/796f8b643c8401</id>
        <link href="https://zenn.dev/gamin/articles/796f8b643c8401"/>
        <updated>2021-07-10T02:21:24.000Z</updated>
        <summary type="html"><![CDATA[これまでの経緯
jest で Unit Test 描けるようになった。
次のステップ行ってみよう。
「「 Component Test だ！」」

 環境とか

Jest
Vue.js Composition API


 環境を整える
必要なものを import する。

      
        
        import { createLocalVue, shallowMount } from '@vue/test-utils'
import VueCompositionApi from '@vue/composition-api'
import CalendarTe...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Composition API で @vue/test-utils 使ってみた]]></title>
        <id>https://zenn.dev/gamin/articles/796f8b643c8401</id>
        <link href="https://zenn.dev/gamin/articles/796f8b643c8401"/>
        <updated>2021-07-10T02:21:24.000Z</updated>
        <summary type="html"><![CDATA[これまでの経緯
jest で Unit Test 描けるようになった。
次のステップ行ってみよう。
「「 Component Test だ！」」

 環境とか

Jest
Vue.js Composition API


 環境を整える
必要なものを import する。

      
        
        import { createLocalVue, shallowMount } from '@vue/test-utils'
import VueCompositionApi from '@vue/composition-api'
import CalendarTe...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロライブラリのスニペット化作業の自動化]]></title>
        <id>https://zenn.dev/kawagh/articles/library2snippets</id>
        <link href="https://zenn.dev/kawagh/articles/library2snippets"/>
        <updated>2021-07-10T00:12:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに

筆者は競技プログラミングで使用頻度の高い処理を関数やクラスとしてライブラリ化しています。
そのライブラリをコンテスト中に素早く確実に使用するためにスニペット(snippet)化しました。
ライブラリからsnippet化への作業をライブラリ更新の度に変更を手動で反映させるのは面倒かつ不確実なのでその作業を自動化するシェルスクリプトを作成しました。
本記事ではsnippet化に伴い行った作業やスクリプト、感じたことをまとめておきます。


 依存関係

vim
coc.nvim(https://github.com/neoclide/coc.nvim)
coc-snippet...]]></summary>
        <author>
            <name>kawagh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[graphqL-code-generatorをセットアップしますた]]></title>
        <id>https://zenn.dev/kupuma_ru21/articles/8003e5dd765b72</id>
        <link href="https://zenn.dev/kupuma_ru21/articles/8003e5dd765b72"/>
        <updated>2021-07-09T15:49:41.000Z</updated>
        <summary type="html"><![CDATA[graphqL-code-generatorとは、GraphQLのスキーマからTypeScriptの型を自動生成してくれるライブラリです。便利です。
普段、何気なく使ってたのですがセットアップ周りとか、あんま知らないなあ。。。
と思ったのでセットアップしてみました。
備忘録で残します。


初期セットアップ


      
        
        npx create-react-app graphql-codegen-github-app --template typescript


      
      でappを作成します。
次に、パッケージをinstallします...]]></summary>
        <author>
            <name>くぷまーる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[npmのパッケージをリリースしてCI/CDさせるまでやってみた]]></title>
        <id>https://zenn.dev/huequica/articles/first_npm_package</id>
        <link href="https://zenn.dev/huequica/articles/first_npm_package"/>
        <updated>2021-07-09T15:07:12.000Z</updated>
        <summary type="html"><![CDATA[以前ヒカキンシンメトリーbotを書き直したという話をしたのですが一応まだメンテナンスを続けており、それなりに改善を続けています。
今回はそのbotの新機能を入れるにあたりコードの分割の目的で自作パッケージをリリースした話をします。

 内容

既存の Array クラスに対し、最後の要素と引数が等しいかどうかを返す


['hoge', fuga].lastItemIs('fuga') みたいに使いたい



これだけ。故に超軽量超簡単です。
まあ今後なにか追加したいものを思いついたら追加していく感じの運用を考えているので、パッケージの名前としては @huequica/native_ex...]]></summary>
        <author>
            <name>Haru_Yakumo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js x Notion APIで個人ブログをつくりました]]></title>
        <id>https://zenn.dev/st43/articles/ff9ac1b0c7d057</id>
        <link href="https://zenn.dev/st43/articles/ff9ac1b0c7d057"/>
        <updated>2021-07-09T09:28:10.000Z</updated>
        <summary type="html"><![CDATA[一ヶ月くらいかけて、念願だった個人サイトをつくりました。
https://www.shetommy.com/
ポートフォリオサイト + 個人ブログ + Web技術の実験場的な使い方をするためにつくりました。
ポートフォリオサイトとしての実装は割とすぐできたんですが、ブログ機能が大変でした。
この記事ではそこメインで書きたいと思います。
Notion APIをガチャガチャした詳細は長くなるので、後で記事を書いて、とりあえずこの記事は個人サイト開発のまとめとしてもうちょっと雑多に書いていきます。
同じようなことをしたい方の参考になれば幸いです。

 ソース
公開しています。
https://...]]></summary>
        <author>
            <name>蔀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase Firestore Rule Jest Test Memo]]></title>
        <id>https://zenn.dev/yoneapp/articles/d01628752f3267</id>
        <link href="https://zenn.dev/yoneapp/articles/d01628752f3267"/>
        <updated>2021-07-09T02:48:16.000Z</updated>
        <summary type="html"><![CDATA[npm install --save-dev jest @types/jest
npm install --save-dev @firebase/rules-unit-testing


      
      package.json に test scripts を追加

      
        
        "scripts": {
  "test": "firebase emulators:exec --only firestore jest"
}


      
      package.json に jest ...]]></summary>
        <author>
            <name>米本剛士</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[amazon-chime-sdk でWebとReact Nativeでビデオ通話ができるアプリを作る(前編)]]></title>
        <id>https://zenn.dev/kondo_script/articles/217a9d5285e35f</id>
        <link href="https://zenn.dev/kondo_script/articles/217a9d5285e35f"/>
        <updated>2021-07-09T01:16:00.000Z</updated>
        <summary type="html"><![CDATA[要約

amazon-chime-sdk を web + react-native で使う機会があって色々調べたのでまとめた
API は素直で使いやすい。が、高機能な割にドキュメントがまとまりきっていない

aws のコンソールに管理画面もなく準備しなくてはいけないことはそこそこある
amazon-chime と amazon-chime-sdk は別物だが、ドキュメントは一つにまとまっている

Amazon Chime Documentation




とりあえず最初は web版/React版のサンプルを触って基本的なアーキテクチャを理解する。

amazon-chime-sdk...]]></summary>
        <author>
            <name>kondo_script</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptプロジェクトのCIでやってること]]></title>
        <id>https://zenn.dev/daikik/articles/b1a2061162ed83</id>
        <link href="https://zenn.dev/daikik/articles/b1a2061162ed83"/>
        <updated>2021-07-09T00:44:31.000Z</updated>
        <summary type="html"><![CDATA[概要
最近退職に伴いTypeScriptプロジェクトのCI/CDの見直しを行っているので主にプルリクに対するCIを中心に何をやっているのか(やっていた＆やろうとしているもの含む)紹介します。
それぞれはさらっとした紹介のみです。

 tsc, prettier, eslint
基本です。恐らく殆どのプロジェクトでやっているかと思います。
tscは--noEmitオプションを付けて実行、eslintは--cacheと--quietオプションを付けて実行しています。
prettierは--list-differentオプションを付けると差分があった場合(=prettierが適用されていな...]]></summary>
        <author>
            <name>daikik</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-toastedで処理成功時・エラー時の通知を楽に実装する（laravel×vue.js）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/3c829d8669e188</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/3c829d8669e188"/>
        <updated>2021-07-08T23:56:57.000Z</updated>
        <summary type="html"><![CDATA[vue-toastedは処理成功したときの「処理が完了しました」やエラーが発生したときの「エラーが発生しました」の実装がかんたんにできるライブラリです。
そもそも、 真ん中の下や右上あたりからすっと通知が出てきて、すっと隠れるやつを「トースター」っていうんですね。
ではさっそく使ってみます。

 vue-toastedをインストールする
ささっとインストールしちゃいます。

      
        
        npm install vue-toasted --save


      
      
 app.jsでインポートする
このあたりはライブラリを使うときのルーティ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub API v4 でページネーションを考慮したクエリの実装]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/github-api-v4-pagenation</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/github-api-v4-pagenation"/>
        <updated>2021-07-08T23:05:36.000Z</updated>
        <summary type="html"><![CDATA[GitHub API v4 でページネーションを考慮してクエリを投げる機会があったので、その作業メモです。

 GitHub API v4のページネーション
GitHub API v4 で nodes や edges を持つリソースには、PageInfoというオブジェクトフィールドがあり、以下 4 つのフィールドを持ちます。

endCursor
hasNextPage
hasPreviousPage
startCursor

ページングでは、このendCursorとhasNextPageのペア又はstartCursorとhasPreviousPageのペアを使います。
endCurso...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript で「コンストラクタで渡さなかった引数だけ後で必須にする」の型制約を書く]]></title>
        <id>https://zenn.dev/mpyw/articles/3c063143fe884a</id>
        <link href="https://zenn.dev/mpyw/articles/3c063143fe884a"/>
        <updated>2021-07-08T15:50:06.000Z</updated>
        <summary type="html"><![CDATA[実装

      
        
        /**
 * [α] T 型から undefined 不可キーの union を抽出
 */
type RequiredKeys<T> = {
  [K in keyof T]-?: Record<any, any> extends Pick<T, K>
    ? never
    : K;
}[keyof T];

/**
 * [β] α を利用し， Passed 型から Req 型の条件を満たさないものだけを抽出
 */
type MissingKeys<Req, Passed...]]></summary>
        <author>
            <name>mpyw</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[mdn expressJs local library website rebuilt with Strapi and NextJS]]></title>
        <id>https://zenn.dev/okuninoshi/articles/a63131abf7d9ae</id>
        <link href="https://zenn.dev/okuninoshi/articles/a63131abf7d9ae"/>
        <updated>2021-07-08T13:02:52.000Z</updated>
        <summary type="html"><![CDATA[How to Rebuild the mdn express local library website with strapi and nextjs

 1-Intro
Welcome to the "Local Library" Strapijs, Nextjs tutorial, in which we develop a web app that might be used to manage the catalog for a local library.
this tutorial is a rebuild of the MDN "Local Library" Expre...]]></summary>
        <author>
            <name>okuninoshi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Storybook導入時に、webpackのバージョンで詰まった話]]></title>
        <id>https://zenn.dev/urasaku77/articles/7fefb518fe91db</id>
        <link href="https://zenn.dev/urasaku77/articles/7fefb518fe91db"/>
        <updated>2021-07-08T07:45:05.000Z</updated>
        <summary type="html"><![CDATA[経緯
Storybookの公式に沿ってインストールして実行する際、下記のようなエラーが発生

TypeError: Cannot read property 'get' of undefined


 原因
見ただけではなんのことではわからなかったのだが、調べてみると使っているwebpackのバージョンが違うことが原因だった
公式のinitコマンドを打つと、自動的にwebpack4が使われるらしく、webpack5を使っている場合はエラーが出るみたい（もう少しわかりやすいエラー出してほしい・・・）

 解決策
.storybook/main.jsを書き換えることでwebpack5を適...]]></summary>
        <author>
            <name>urasaku77</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Storybook導入時に、webpackのバージョンで詰まった話]]></title>
        <id>https://zenn.dev/urasaku77/articles/7fefb518fe91db</id>
        <link href="https://zenn.dev/urasaku77/articles/7fefb518fe91db"/>
        <updated>2021-07-08T07:45:05.000Z</updated>
        <summary type="html"><![CDATA[経緯
Storybookの公式に沿ってインストールして実行する際、下記のようなエラーが発生

TypeError: Cannot read property 'get' of undefined


 原因
見ただけではなんのことではわからなかったのだが、調べてみると使っているwebpackのバージョンが違うことが原因だった
公式のinitコマンドを打つと、自動的にwebpack4が使われるらしく、webpack5を使っている場合はエラーが出るみたい（もう少しわかりやすいエラー出してほしい・・・）

 解決策
.storybook/main.jsを書き換えることでwebpack5を適...]]></summary>
        <author>
            <name>urasaku77</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[styled-componentsをTypescriptで使う上でのTips]]></title>
        <id>https://zenn.dev/nekoniki/articles/f8600d1ab7d908</id>
        <link href="https://zenn.dev/nekoniki/articles/f8600d1ab7d908"/>
        <updated>2021-07-08T05:17:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はTypescript + Reactでstyled-componentsを使う場合のTipsを紹介します。
styleプロパティで直接記載するよりもスタイルの管理がしやすい+使い回しやすいといったメリットがあるのでおすすめです。
※普段はReact Nativeを扱っていますが、styled-componentsに着目した場合の使用感はほぼ同じといっていいので、サンプルコードはReactのものになります。

 そもそもstyled-componentsとは
styled-componentsは所謂CSS in JSライブラリの一種になります。
名前が表す通り、JSもし...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[なぜWebpackの設定はTypeScriptで書けるのか？]]></title>
        <id>https://zenn.dev/uttk/articles/ab7afa61eb481f</id>
        <link href="https://zenn.dev/uttk/articles/ab7afa61eb481f"/>
        <updated>2021-07-08T04:36:31.000Z</updated>
        <summary type="html"><![CDATA[この記事について
webpackの設定ファイルであるwebpack.config.jsは、TypeScriptで書いてNode.js上で実行できます。しかし、本来であればTypeScriptのソースコードはNode.jsでは実行できないはずです。 この事が気になった私は、今回その仕組みを調べてみたので、この場を借りてその調査結果を共有したいと思います💪
参照
https://webpack.js.org/configuration/configuration-languages/

 記事の概要
概要のみ知りたい人に向けて、以下にこの記事で解説する内容のまとめを書いておきます👇


...]]></summary>
        <author>
            <name>uttk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[今更だけど、Next.jsをさわるんだ！]]></title>
        <id>https://zenn.dev/ignorant_kenji/articles/3c74e04a99bb0362c554</id>
        <link href="https://zenn.dev/ignorant_kenji/articles/3c74e04a99bb0362c554"/>
        <updated>2021-07-08T00:25:45.000Z</updated>
        <summary type="html"><![CDATA[経緯
業務でさわることになり、学習としてアウトプットさせて頂きます。

 はじめに
Next.js はReactを基礎としたフレームワークです。そして、Vercel社が提供するOSS プロジェクトになっています。
Webのデプロイ・ホスティングサービス Vercel を運営しており Next.js と Vercel を合わせて使用し、容易にWebサイトを制作することができるようになっています。
SPA (Single Page Application)　では,Webサイトへ遷移するとローディングが表示され、次々にコンポーネントが表示されることがあったのではないでしょうか？ユーザの行動...]]></summary>
        <author>
            <name>Kenji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kindle で購入した書籍をブクログへ自動で登録する]]></title>
        <id>https://zenn.dev/ysmtegsr/articles/c9077709acb67ff3f1d9</id>
        <link href="https://zenn.dev/ysmtegsr/articles/c9077709acb67ff3f1d9"/>
        <updated>2021-07-07T14:35:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
いきなりですが、みなさん読書の管理ってどうしていますか？
僕は、ブクログ というサービスを使っています。以前は、読書メーター を使っていたんですが、ブクログは本に記載されている ISBN コードや Amazon の Asin コードから本を登録できる[1]ということを知って最近移行しました。
どうせなら自動化したいなと思い、調べてみると同じことを考えた先人たちがいらっしゃったので参考にしつつやってみたのでその紹介です。

 作ったもの
Kindle で書籍を購入した際に Amazon からメールが届きます。そのメールから使いたい Asin コードだけを抜き出して、購入した書...]]></summary>
        <author>
            <name>ysmtegsr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generate AWS Cognito password]]></title>
        <id>https://zenn.dev/hugtech/articles/90abb52f28bc68</id>
        <link href="https://zenn.dev/hugtech/articles/90abb52f28bc68"/>
        <updated>2021-07-07T13:24:03.000Z</updated>
        <summary type="html"><![CDATA[https://www.npmjs.com/package/aws-cognito-temporary-password-generator

      
        
        /**
 * Configuration of Password generation.
 * Only possible to specify length. default: 16
 * All Other requirements are automatically satisfy
 * Require numbers
 * Require a special character from t...]]></summary>
        <author>
            <name>hugtech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で SSR/SSG したページに Cache-Control などのヘッダを設定する]]></title>
        <id>https://zenn.dev/yuku/articles/f5a728808c4efa</id>
        <link href="https://zenn.dev/yuku/articles/f5a728808c4efa"/>
        <updated>2021-07-07T12:35:13.000Z</updated>
        <summary type="html"><![CDATA[Next.js には強力な Incremental Static Regeneration がありますが、Vercel 以外にホストしている場合は使うことができません。そのとき、Cache-Control や Surrogate-Control ヘッダを用いて Fastly のような CDN にキャッシュを持たせたくなります。
このヘッダの持たせ方に少しクセがあったので備忘録的に書きます。
例えば、/articles/[id] にヘッダを持たせたいとします。

 方法1. next.config.js で設定
next.config.js の headers で設定する方法です。

  ...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL でフェッチした部分的なモデルのドメインロジックを TypeScript と Proxy で表現する試み]]></title>
        <id>https://zenn.dev/yuku/articles/45bb0d6cf3da85</id>
        <link href="https://zenn.dev/yuku/articles/45bb0d6cf3da85"/>
        <updated>2021-07-07T08:53:13.000Z</updated>
        <summary type="html"><![CDATA[仕事で GraphQL を使ったプロダクトに DDD のエッセンスを取り入れたく、GraphQL で部分的にフェッチしたドメインモデルに堅牢な型付けを試みたので、まだまだ荒削りですが紹介します。

 やりたいこと
このような GraphQL スキーマがあったとします。

      
        
        type Person {
  firstName: String!
  lastName: String!
  age: Int!
}

type Query {
  person: Person!
}


      
      この Person に対して、以下よう...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the launch.json of tsdx + jest + vscode]]></title>
        <id>https://zenn.dev/hugtech/articles/79d6d9f74e3deb</id>
        <link href="https://zenn.dev/hugtech/articles/79d6d9f74e3deb"/>
        <updated>2021-07-07T08:04:34.000Z</updated>
        <summary type="html"><![CDATA[tsdx
https://github.com/formium/tsdx

 .launch.json

      
        
        {
	"version": "0.2.0",
	"configurations": [
		{
			"type": "node",
			"request": "launch",
			"name": "Jest All",
			"program": "${workspaceFolder}/node_modules/.bin/tsdx",
			"args": ["test", "--runInBand"],
			"conso...]]></summary>
        <author>
            <name>hugtech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サクッとReact + typescript書きたいとき一発で環境構築するシェルスクリプトを作る]]></title>
        <id>https://zenn.dev/masakitm/articles/8d8271b9fdbee8</id>
        <link href="https://zenn.dev/masakitm/articles/8d8271b9fdbee8"/>
        <updated>2021-07-07T07:29:27.000Z</updated>
        <summary type="html"><![CDATA[概要
Reactの環境構築はcreate-react-appで全然いい。
Next.jsでもGatsbyでも全然いい。
いいのだけど、サッと書きたいだけのときは重い。
そう思って最低限必要だと思うものを1コマンド叩けばいいようにスクリプトを書いた。

 解説
eslintやprettierは必要なら別途入れる。
個人でサクッと書く分にはvscode側のlint拡張とかで済ませていいと思うので含めていない。
css in jsも必要なら後で入れればいい。プロダクト開発のテンプレートではないので。
まずはtsconfigファイルを生成する関数を作る。
シェルはzshを使っている。

  ...]]></summary>
        <author>
            <name>masakitm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[輪読会の読み順をランダムで決める chrome 拡張機能を作る for Google Meet ［React + TypeScript］]]></title>
        <id>https://zenn.dev/sota_yamaguchi/articles/a138b03e62595b</id>
        <link href="https://zenn.dev/sota_yamaguchi/articles/a138b03e62595b"/>
        <updated>2021-07-07T02:09:31.000Z</updated>
        <summary type="html"><![CDATA[最近弊社の開発メンバーでブログを書こうという運動があります。
ネタ探しをしていたらよさげな記事を見つけたのでアイデアをお借りします。
shohei さんありがとう🙏
※決してパ○リではありません
https://techblog.roxx.co.jp/entry/2021/04/23/064837
毎週チーム内での読書会や、部署をまたいだエンジニアでの輪読会を行っているのですが、都度読み順を決めるのが面倒なので、参加メンバーをシャッフルしてリストで返す chrome 拡張機能を作ってみました。
なお、弊社の読書会は Google Meet で行うことが多いため必然的に Google Me...]]></summary>
        <author>
            <name>sota_yamaguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-js-modalで超簡単にモーダルを実装する（laravel×vue）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/9cb55513c40848</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/9cb55513c40848"/>
        <updated>2021-07-07T00:06:49.000Z</updated>
        <summary type="html"><![CDATA[今回は vue-js-modalで超簡単にモーダルを表示させる方法について紹介したいと思います。
ではさっそくいってみましょう💨

 vue-js-modalをインストール
まずはライブラリをインストールします

      
        
        npm install vue-js-modal --save


      
      僕の場合はバージョン1.3.xじゃないとインストールできなかったので、 npm install vue-js-modal@1.3 --save  という指定をしました。
どんなバージョンがあるかはこちらで確認できます

 vue-js-m...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則 ◆オープン・クローズドの原則◆]]></title>
        <id>https://zenn.dev/bonfireman/articles/400142b4d65409</id>
        <link href="https://zenn.dev/bonfireman/articles/400142b4d65409"/>
        <updated>2021-07-06T14:32:18.000Z</updated>
        <summary type="html"><![CDATA[オープン・クローズドの原則とは
SOLID原則の、Open Closed Principle（以下：OCP）のことで、「ソフトウェアの構成要素は拡張に対して開いていて、修正に対して閉じていなければならない」という原則です。
言い換えると、ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきであるということです。
以下の仕様になっているサンプルコードを見ながら実際にGoodコードとBadコードを見ながら、理解を深めてみます。

      
        
        - ある会員制ECサイトの決済システムで、会員のグレードによって割引がされる
- Discou...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecoilでFirebase Authを使う]]></title>
        <id>https://zenn.dev/yiwa/articles/3d4b91fd4fb467</id>
        <link href="https://zenn.dev/yiwa/articles/3d4b91fd4fb467"/>
        <updated>2021-07-06T03:22:43.000Z</updated>
        <summary type="html"><![CDATA[Recoilを使ってみたいので、Firebase Authで使ってみました。
なるべく複雑なことをしないようにRecoilでFirebaseのUserオブジェクトを保持して、認証状態でルーティングするだけのシンプルなものです。

 使うもの

React
Recoil
React Router Dom
Firebase


 ディレクトリ

src/

index.tsx
App.tsx
firebase.js
hooks/Auth.tsx
pages/Login.tsx




 1. Atomの設定

      
        /hooks/Auth.tsx
        im...]]></summary>
        <author>
            <name>yiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtでi18n化対応]]></title>
        <id>https://zenn.dev/toshinobu/articles/233aa9b1b65115</id>
        <link href="https://zenn.dev/toshinobu/articles/233aa9b1b65115"/>
        <updated>2021-07-06T00:21:30.000Z</updated>
        <summary type="html"><![CDATA[Nuxtでi18n化対応
昨今、というかだいぶ前からグローバリゼーションが進んできていますが、それにつれアプリ多言語化が必要な場面が増えてきたかと思います。
規模やコンテクストにもよると思いますが、現在ではほとんどのアプリで多言語化が必要ではないでしょうか？

 そもそもi18nとは
そもそもi18nってなんぞ？って疑問に思われたかもしれないですが、私も最初はそうでした笑
i18nとはInternationalizationつまり国際化の略です。
最初のIと最後のnの間に18文字あるからi18nなんですね。k8sといい、これ初見じゃ絶対わからないでしょ
(余談ですが、こうゆう略し方を...]]></summary>
        <author>
            <name>toshinobu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-06のJS: TypeScript 4.4 Beta、immutable-js 4.0.0-rc.13、petite-vue]]></title>
        <id>https://jser.info/2021/07/06/typescript-4.4-beta-immutable-js-4.0.0-rc.13-petite-vue/</id>
        <link href="https://jser.info/2021/07/06/typescript-4.4-beta-immutable-js-4.0.0-rc.13-petite-vue/"/>
        <updated>2021-07-05T22:36:05.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #547 - TypeScript 4.4 betaがリリースされました。
Announcing TypeScript 4.4 Beta | TypeScript
Control Flow Analysisの改善され、Type Gurdeの結果を変数に入れてから扱うようなAliasのケースも正しく推論されるようになっています。
unknown型にするuseUnknownInCatchVariablesオプションの追加と
undefined値の区別をするexactOptionalPropertyTypesオプションの追加されています。
その他には、declarationの生成やstrictモードでのビルドパフォーマンスの改善も含まれています。
immutable-js 4.0.0-rc.13がリリースされています。
Release 4.0.0-rc.13 · immutable-js/immutable-js
immutable-jsはv4.0.0-rc.12でメンテナンスが停止して、immutable-oss organiztionにてforkとしてメンテナンスがされていました。
今回のリリースでは、immutable-js organizationにimmutable-ossのメンテナが追加され、immutable-ossの変更内容もimmutable-js 4.0.0-rc.13へとマージされています。
immutable-jsとしてメンテナンスを再開するリリースとなっています。
Immutable.js is essentially unmaintained · Issue #1689 · immutable-js/immutable-js
Integrate immutable-js-oss fork into main repository b…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で Firebase Authentication を利用し, Google ログインを実装した]]></title>
        <id>https://zenn.dev/minguu42/articles/20210705-nextjs-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210705-nextjs-auth"/>
        <updated>2021-07-05T11:20:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って Next アプリに Google ログインを実装する方法を記述します.
Next アプリの初期化, Firebase アカウントの作成は済んでいることを前提とします.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


Next.js
11.0.1


React
17.0.2


Firebase Jav...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則 ◆単一責任の原則◆]]></title>
        <id>https://zenn.dev/bonfireman/articles/736a5b5fa36b2c</id>
        <link href="https://zenn.dev/bonfireman/articles/736a5b5fa36b2c"/>
        <updated>2021-07-05T10:14:29.000Z</updated>
        <summary type="html"><![CDATA[単一責任の原則とは
SOLID原則の、Single Reaponsibility Principleのことで、「モジュールはたったひとつのアクターに対して責務を負うべきである」という原則です。
「モジュール」は、ここではいくつかの関数やデータをまとめた凝集性のあるのものと捉えてください。
「アクター」はシステムを利用するユーザーやステークホルダーを指します。
なぜ、モジュールはたったひとつのアクターに対して責務を負うべきなのでしょうか？
それは、1つのモジュールが複数のアクターに対して責務を持っている状態だと、1つのアクターに対するモジュールの役割を変更したい場合に、別のアクターへの...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js version 11.0.0 で ESLint を使うために公式ドキュメントを紐解く]]></title>
        <id>https://zenn.dev/ken505/articles/c049a64f3a2989</id>
        <link href="https://zenn.dev/ken505/articles/c049a64f3a2989"/>
        <updated>2021-07-05T07:08:15.000Z</updated>
        <summary type="html"><![CDATA[以下の公式ドキュメントを参考にしながら、Next.js で ESLint を設定します

 ESLint.org


 docs/rules


 npm/ESLint


 Next.js/ESLint


バージョン11.0.0以降、Next.jsは統合されたESLint体験をすぐに提供します。
next lintをスクリプトとしてpackage.jsonに追加します。


      
        
        "scripts": {
  "lint": "next lint"
}


      
      とのことなので npx create-next-app を実...]]></summary>
        <author>
            <name>ken505</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[esquery 便利ラッパー]]></title>
        <id>https://zenn.dev/sosukesuzuki/articles/9c17507e7c34f1</id>
        <link href="https://zenn.dev/sosukesuzuki/articles/9c17507e7c34f1"/>
        <updated>2021-07-05T06:31:49.000Z</updated>
        <summary type="html"><![CDATA[ESTree を CSS のセレクター風の記法で走査する esquery というライブラリがある。
https://github.com/estools/esquery
直接使ったことがある人は少ないかもしれないが、ESLint ルールを書くときに使ことがあるので esquery の構文を使ったことがある人は多いのではないだろうか。
esquery は便利だが、長いクエリを文字列で渡したりするのが微妙。テンプレートリテラルでいい感じにしたい。ということで outdent と組み合わせる小さなラッパーを書いた。

      
        
        import esquery...]]></summary>
        <author>
            <name>Sosuke Suzuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript で JavaScript をパースするときの型]]></title>
        <id>https://zenn.dev/sosukesuzuki/articles/161ad4870a0f8c</id>
        <link href="https://zenn.dev/sosukesuzuki/articles/161ad4870a0f8c"/>
        <updated>2021-07-05T05:33:52.000Z</updated>
        <summary type="html"><![CDATA[この記事では TypeScript から既存のパーサーライブラリを使って JavaScript をパースするときにどのように型をつけるか、自分がやっている方法を紹介する。TypeScript を使って1から JavaScript のパーサーを書く話ではないので注意。
仕事で、TypeScript で JavaScript をパースして構文木をゴニョゴニョやるツールを書いていた。
こういうとき、まずどのパーサーを使うかを考える。
パースする対象が絶対に JavaScript であることがわかっている場合、自分は Acorn を使うことが多い(TypeScript や Flow をパースする...]]></summary>
        <author>
            <name>Sosuke Suzuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno Deploy用コードで[deno-ts 2339]が発生するときの対処法]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/efed8ada433f24</id>
        <link href="https://zenn.dev/kawarimidoll/articles/efed8ada433f24"/>
        <updated>2021-07-05T02:28:21.000Z</updated>
        <summary type="html"><![CDATA[Deno Deployの勉強をしています。
https://zenn.dev/kawarimidoll/articles/b0a5064befcd31
本記事では、Deno Deploy用のコードを書いている際に遭遇した[deno-ts 2339]エラーの対処をまとめました。

 発生するエラー
エラーはエディタ内で表示されるもので、[deno-ts 2339] [E] Property 'respondWith' does not exist on type 'Event'です。
例として、公式ドキュメントのHello Worldページのコードを使います。
https://deno.c...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Theme UIをReact×TypeScriptのプロジェクトで使う。]]></title>
        <id>https://zenn.dev/beeeyan/articles/d3c40cea9158075a3dcb</id>
        <link href="https://zenn.dev/beeeyan/articles/d3c40cea9158075a3dcb"/>
        <updated>2021-07-05T02:08:52.000Z</updated>
        <summary type="html"><![CDATA[ことの経緯
React × TypeScript のプロジェクトでRebass使おうかな。
↓
Rebassの開発者さんが最近開発しているのはTheme UIらしい。
参考 : Theme UI で Theme Driven な快適 React スタイリング生活
↓
Theme UI使ってみよう。
↓
動かない（表示されない）。。。
↓
動かそう!!!
※ TypeScriptでTheme UIを導入するときの注意点くらいの記事です。

 インストール方法
公式サイトのGetting Startedには以下のコマンドが記載されている。

      
        
       ...]]></summary>
        <author>
            <name>beeeyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsを使って管理画面を作る]]></title>
        <id>https://zenn.dev/dfukui/articles/e8ff9f66ae094c</id>
        <link href="https://zenn.dev/dfukui/articles/e8ff9f66ae094c"/>
        <updated>2021-07-05T01:45:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Cloud9 + Vue.jsを使って管理画面を作成するチュートリアルとなります。

 管理画面テンプレートの導入
Cloud9のターミナルで以下実行します。
Cloud9の基本的な操作方法は以下を参考にしてください。
https://26gram.com/how-to-use-cloud9

 Core UI のダウンロード

      
        
        # リポジトリのクローン
git clone https://github.com/coreui/coreui-free-vue-admin-template.git CoreUI-Vue

# ダウ...]]></summary>
        <author>
            <name>dfukui</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-infinite-scrollで超簡単無限スクロールを実装する（vue.js）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/776b9052f47d52</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/776b9052f47d52"/>
        <updated>2021-07-04T23:58:01.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsで無限スクロールを実装したい場合は vue-infinite-scroll というライブラリを使用することをおすすめします。
超簡単に実装できます
公式ページはこちら

 ライブラリのインストール
ライブラリをインストールします

      
        
        npm install vue-infinite-loading -S


      
      
 infinite-loadingコンポーネントを設置する
ライブラリをインストールしたらinfinite-loadingコンポーネントが使えるようになっているので、設置します。
@infinite...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの環境変数取得方法]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/nextjs-environment-variables</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/nextjs-environment-variables"/>
        <updated>2021-07-04T22:23:27.000Z</updated>
        <summary type="html"><![CDATA[Nextjsでは、たとえばデータベースに接続するときに使う環境変数を設定することができます。
設定方法は、ルートディレクトリ直下にあるnext.config.jsにあるmodule.exports...とあるところに変数を追加すればOKです。(ファイルがなければnext.config.jsをルート直下に作ってください)

      
        next.config.js
        module.exports = {
  env: {
    // customKeyは任意の変数名でOK
    // 'my-value'のところで値を設定する
    customKey...]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゲームを作ってpetite-vueを完全に理解する]]></title>
        <id>https://zenn.dev/yuneco/articles/petite-vue-hello</id>
        <link href="https://zenn.dev/yuneco/articles/petite-vue-hello"/>
        <updated>2021-07-04T17:58:47.000Z</updated>
        <summary type="html"><![CDATA[petite-vueは軽量・簡易版のVue.js
2021/7/2にVue.js作者のEvan Youさんの新作、petite-vueがリリースされました。
ざっくりした概要は『petite-vue 最速 使い方』など、早速日本語でまとめてくださっている方がいるので、そちらを参照いただくと良いと思います。
（ただし、当面は破壊的な変更や機能追加が頻繁に入ると思われるので、日本語の記事と併せて公式もチェックするのが良いと思います）

 習うより慣れろ。ゲーム作って「完全に理解」してみた
公式のREADMEやサンプルが結構丁寧なので、眺めてみるだけでなんとなく理解できた気になってきます。...]]></summary>
        <author>
            <name>yuki matsumoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ログイン機能】jwt（JSON Web Token Authentication）でログイン機能実装手順（Laravel/Nuxt）]]></title>
        <id>https://zenn.dev/tanoken729/articles/a0b556cd6d53ec</id>
        <link href="https://zenn.dev/tanoken729/articles/a0b556cd6d53ec"/>
        <updated>2021-07-04T15:57:58.000Z</updated>
        <summary type="html"><![CDATA[Laravel側
https://jwt-auth.readthedocs.io/en/docs/laravel-installation/

 JWTライブラリ（tymon/jwt-auth）をインストール
Laravel 6 の場合はバージョンに:1.0.0-rc.5を指定しないとエラーになります

      
        
        composer require tymon/jwt-auth:1.0.0-rc.5


      
      
 設定を一部変更
以下コマンドでconfig/jwt.phpというファイルを生成

      
        
 ...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React vs Hotwire ~ 私とHotwireとその後]]></title>
        <id>https://zenn.dev/mast1ff/articles/efc41938236c51</id>
        <link href="https://zenn.dev/mast1ff/articles/efc41938236c51"/>
        <updated>2021-07-04T12:39:28.000Z</updated>
        <summary type="html"><![CDATA[半年くらい前にこんな記事を書きました。
https://zenn.dev/mast1ff/articles/3d6f4b9e4a38bb
様々なプロダクトにメインとして使用しているNext.js製のフロントエンドをStimulusとTurboに書き換えて運用してみました。
https://hotwired.dev/
今回は実際に運用してみた所管などをまとめたいと思います。

 はじめに
とはいえ、Hotwireたちは飽くまでフロントエンドのみ。バックエンド側のロジックを持つことのできないこれらのライブラリとの単純な比較対象としては、サーバーレスでも運用できるNext.jsとは若干ズレが出...]]></summary>
        <author>
            <name>Mast1ff</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】Firebase Storageに画像をアップしてURLを取得する]]></title>
        <id>https://zenn.dev/fujiyama/articles/50b0a73acd89b7</id>
        <link href="https://zenn.dev/fujiyama/articles/50b0a73acd89b7"/>
        <updated>2021-07-04T11:35:45.000Z</updated>
        <summary type="html"><![CDATA[経緯
Firebase Storageを初めて使ってみて，とても使いやすいと感じたので共有したいと思いました．
Next.jsをフレームワークとして利用しています．


 環境

      
        
        react@17.0.2
firebase@8.6.8
typescript@4.3.4
next@11.0.1
tailwindcss@2.2.4


      
      
 事前準備
事前にFirebaseプロジェクトを作成し，Reactのfirebase.jsなどにfirebaseの設定を記述してください．また

      
        
 ...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker-composeでVue.jsの開発環境を構築する]]></title>
        <id>https://zenn.dev/chida/articles/8f16e42364398c</id>
        <link href="https://zenn.dev/chida/articles/8f16e42364398c"/>
        <updated>2021-07-04T09:56:17.000Z</updated>
        <summary type="html"><![CDATA[Dockerは事前にMacにインストールされていることを前提とします。

 手順
Vue.jsの開発環境を構築して起動するまでの手順です。

Node.jsのバージョンを確認
dockerhubを確認
Dockerfileの作成
docker-compose.ymlの作成
コンテナの起動
コンテナ内の作業


 Node.jsのバージョンを確認
Node.jsを利用するため、必要なバージョンを確認します。様々なバージョンの中でも、公式サイトを見て推奨版であるLTSを確認します。
https://nodejs.org/en/
LTSとはLong-term Supportの略で、長期の保守運...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[denops.vimを使ってポモドーロタイマーを実装してみた]]></title>
        <id>https://zenn.dev/uki00a/articles/implemented-pomodoro-timer-using-denops</id>
        <link href="https://zenn.dev/uki00a/articles/implemented-pomodoro-timer-using-denops"/>
        <updated>2021-07-04T08:56:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
denops.vimを使って、Vim/Neovim上でポモドーロテクニックを実践するためのプラグインを作成してみました。
https://github.com/uki00a/denops-pomodoro.vim/
この記事ではdenops-pomodoro.vimの使い方やdenops.vimを使ってプラグインを実装する上でのノウハウなどについて紹介します。

 denops.vimとは?
denops.vimとはDenoを使ってVimやNeovimのプラグインを書くためのエコシステムです。
より詳しくは以下の記事を参照いただければと思います。
https://zenn....]]></summary>
        <author>
            <name>uki00a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kindle のセール本をウォッチできるサイトを作った。]]></title>
        <id>https://zenn.dev/takanopontaro/articles/dde9458c32f3f9</id>
        <link href="https://zenn.dev/takanopontaro/articles/dde9458c32f3f9"/>
        <updated>2021-07-04T01:51:37.000Z</updated>
        <summary type="html"><![CDATA[数年前に Kindle を購入してから結構本を読むようになり、今はだいたい年間 80 冊程度読んでいます。半額セールとか 50% ポイント還元とか、そういったセールを Kindle ストアは頻繁に行っているので、そういうときに一気にまとめ買いするのが習慣になりました。
アマゾンのほしい物リストに本を登録しておくと、安くなったときにその旨表示されて便利なんですが、これってポイント還元の時は分からないのでちょっと困っていました。どんなキャンペーンなのかはあまり重要ではなく、欲しい本が得になっているかどうかだけ分かればいいので、そういった事が簡単に分かるサービスはないかな〜と探してみたんですが...]]></summary>
        <author>
            <name>takanopontaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FGO】「村正ぁーーー！」するためのネタサイト作成記録]]></title>
        <id>https://zenn.dev/foxtail88/articles/574fab811df26d</id>
        <link href="https://zenn.dev/foxtail88/articles/574fab811df26d"/>
        <updated>2021-07-03T23:13:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こちらのサイトの作成備忘録です。インフラ等の全体像は別途記事にしたいと思います。
https://tenkoh.github.io/fgo-scenes/
Fate/Grand Orderというスマートフォン向けゲームのコラージュ画像を生成するお遊びサイトです😇


(C) TYPE-MOON


 方針検討
やりたいことは 「既存の画像に、セリフだけ好きに挿入する」 という簡単なものです。なんとなくフロントだけでもできそうですが、ある程度フォントを原作に近づけたいと考えたので、特定のフォントを気兼ねなく使えるかな？と思い、バックエンドも構築することにしました。
またお遊び...]]></summary>
        <author>
            <name>こぎつね</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next-optimized-images で next/image っぽいものをつくる]]></title>
        <id>https://zenn.dev/itomise/articles/20356a794b665f</id>
        <link href="https://zenn.dev/itomise/articles/20356a794b665f"/>
        <updated>2021-07-03T14:26:36.000Z</updated>
        <summary type="html"><![CDATA[next/image での画像最適化が最近のホットなトピックではありますが、見た感じ、next/imageは画像の最適化をサーバサイドで処理する前提のコンポーネントのようです。
Next.jsでサーバを立てられる場合は使っていきたいのですが、個人的に案件でそういう構成になっていることはあまりないです。
そこで、next export で使える画像最適化についてまとめてnext/imageっぽいコンポーネントを作ってみようと考えました。
一応、公式の next export での next/image の使用法についてのページはこちら です。

 前提
今回はnext/imageのソースを...]]></summary>
        <author>
            <name>itomise</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+CSSModules(Saas)+Storybookのセットアップ]]></title>
        <id>https://zenn.dev/thim/articles/7c8ceba730dad35d27dc</id>
        <link href="https://zenn.dev/thim/articles/7c8ceba730dad35d27dc"/>
        <updated>2021-07-03T12:41:24.000Z</updated>
        <summary type="html"><![CDATA[Next.js のプロジェクトにCSSModules(Sass)+Storybookをセットアップしようとしてハマり倒したので手順を記録しておきます。
セットアップ完了状態のソースはこちら
https://github.com/TakahiroHimi/Next-CSSModules-SB-sample

 Next.js アプリ作成

      
        
        npx create-next-app --example with-typescript myapp


      
      
 CSSModules(Sass)セットアップ

 パッケージ追加

...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[petite-vue 最速 使い方]]></title>
        <id>https://zenn.dev/silloi/articles/ecfab241f3fea9</id>
        <link href="https://zenn.dev/silloi/articles/ecfab241f3fea9"/>
        <updated>2021-07-03T07:40:54.000Z</updated>
        <summary type="html"><![CDATA[2021年7月3日（日本時間）、Vueの創始者Evan Youが新たなパッケージをリリースしました。
https://github.com/vuejs/petite-vue

 petite-vue
petite-vue（プティットゥ・ヴュー「プチVue」の意）は先進的な機能を備えた、超軽量なVueの下位互換です。スタンダードなVueと同等のテンプレート構文・リアクティビティモデルを有していますが、かつてサーバーフレームワークで所々に書かれていたような、ちょっとしたインタラクションを置き換えられるよう特化しています。

5.7KB以下
DOMベース（仮想DOMを使用しない）
@vue/r...]]></summary>
        <author>
            <name>silloi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsがESModuleフォーマットサポートしてない問題（ERR_REQUIRE_ESM）の回避策]]></title>
        <id>https://zenn.dev/dl10yr/articles/b592e36d852e8c</id>
        <link href="https://zenn.dev/dl10yr/articles/b592e36d852e8c"/>
        <updated>2021-07-03T01:23:44.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでd3使おうとしたら、ハマりました。
Next.jsがESModuleフォーマットをサポートしてないのが原因のようです。
https://github.com/vercel/next.js/issues/9607

      
        
        Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: /Users/hogehoge/node_modules/robust-predicates/index.js
require() of ES modules is not supported.
...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsプロジェクトにJestを導入してGitHub Actionsでユニットテストをする]]></title>
        <id>https://zenn.dev/a_da_chi/articles/0ea66053a8b778</id>
        <link href="https://zenn.dev/a_da_chi/articles/0ea66053a8b778"/>
        <updated>2021-07-02T13:43:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
ReactでユニットテストといえばJestですよね。
今回はNext.jsプロジェクトにJestを導入してGitHub Actionsでユニットテストをするまでの手順を書いていきたい思います。

 前提

Next.jsでsrcディレクトリ配下にアプリケーションコードを配置していること。


 導入手順

必要なパッケージをインス...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 2 × TSX で完璧な型サポートを手に入れる]]></title>
        <id>https://zenn.dev/ytr0903/articles/eacee1dee6b055</id>
        <link href="https://zenn.dev/ytr0903/articles/eacee1dee6b055"/>
        <updated>2021-07-02T11:46:58.000Z</updated>
        <summary type="html"><![CDATA[この記事は、昨日会社のテックブログに寄稿した記事
https://tech.andpad.co.jp/entry/2021/07/01/170000
に入りきらなかった情報の補足です。
元の記事では、Vue + JSX + Nuxt Composition APIという組み合わせで開発を行う際の、環境設定・導入方法、メリットとデメリット、そしてJSXに限らないComposition APIのTipsまでいろいろ書いていますので、興味のある方は先にそちらの記事をご覧ください【PR】！

さて、冒頭の記事ではVue + JSX（TSX）の組み合わせでの開発のメリデメを挙げる中で、
現状のVu...]]></summary>
        <author>
            <name>ykoizumi0903</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 2 × TSX で完璧な型サポートを手に入れる]]></title>
        <id>https://zenn.dev/ytr0903/articles/eacee1dee6b055</id>
        <link href="https://zenn.dev/ytr0903/articles/eacee1dee6b055"/>
        <updated>2021-07-02T11:46:58.000Z</updated>
        <summary type="html"><![CDATA[この記事は、昨日会社のテックブログに寄稿した記事
https://tech.andpad.co.jp/entry/2021/07/01/170000
に入りきらなかった情報の補足です。
元の記事では、Vue + JSX + Nuxt Composition APIという組み合わせで開発を行う際の、環境設定・導入方法、メリットとデメリット、そしてJSXに限らないComposition APIのTipsまでいろいろ書いていますので、興味のある方は先にそちらの記事をご覧ください【PR】！

さて、冒頭の記事ではVue + JSX（TSX）の組み合わせでの開発のメリデメを挙げる中で、
現状のVu...]]></summary>
        <author>
            <name>ykoizumi0903</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js×microCMS製のメディアサイトをリニューアルした話]]></title>
        <id>https://zenn.dev/manalink/articles/manalink-for-teachers-renewal-202107</id>
        <link href="https://zenn.dev/manalink/articles/manalink-for-teachers-renewal-202107"/>
        <updated>2021-07-02T09:25:52.000Z</updated>
        <summary type="html"><![CDATA[マナリンクCTOの名人です。
2021年7月1日に、弊社が運営しているマナリンクTeachersというメディアサイトをリニューアルしました！
https://for-teachers.manalink.jp/
このメディアサイトはNext.js×microCMSで構築されています。初回リリースは2020年秋ごろだったので、半年以上運用してのリニューアルとなりガッツリ実装を書き換えました。
そのため本記事では前回の復習も兼ねて、リニューアルの流れやTipsをまとめてみようと思います。

 メディアの概要
マナリンクTeachersは、オンライン家庭教師向けの情報をまとめているメディアサイト...]]></summary>
        <author>
            <name>マナリンク Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[もしもvimを使っているときに記憶喪失になったら…]]></title>
        <id>https://zenn.dev/kouta/articles/ab2d9df961238e</id>
        <link href="https://zenn.dev/kouta/articles/ab2d9df961238e"/>
        <updated>2021-07-01T16:12:11.000Z</updated>
        <summary type="html"><![CDATA[ここはどこだ

「あれ、なんの作業をしてたっけ?」
彼の名前はkoutarn、しがないタッチタイピング虚無僧。
今日も元気にお経を唱えながらコーディングをしていたのですが、
度重なるデスマーチのせいで軽く記憶を無くしてしまったようです。
「vimで作業をしていたんだけど基本的な操作方法以外思いだせない…」
おっと、彼はvimという 素晴しいエディタ で作業をしていたようですね。
ご都合主義なこの状況から彼と一緒にvimの操作方法を思い出してみましょう。

 この記事の対象の方
✅ この記事は以下の人を想定して書いています。


もの忘れが激しい人
vimって便利なんだけど覚える事が多...]]></summary>
        <author>
            <name>koutarn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsのサイトにmicroCMSをAPI接続する]]></title>
        <id>https://zenn.dev/renshimosawa/articles/266b780292aadd</id>
        <link href="https://zenn.dev/renshimosawa/articles/266b780292aadd"/>
        <updated>2021-07-01T13:50:49.000Z</updated>
        <summary type="html"><![CDATA[今回はこのようなサイト内のニュース欄をmicroCMSを用いて作ります。
デプロイはAWS amplifyでする前提です。


 microCMSの設定

 (1)プロジェクトを作る


個人開発レベルではHobbyで事足りるかと（検証中）。

 (2)APIを作成

リスト形式を選択


 (3)投稿したい項目を定義


 APIで取得したデータをmapで出す

 (1)API keyを.envに書き込む

      
        .env.production
        NEXT_PUBLIC_API_KEY=your key


      
      keyはこちら...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplify ConsoleでSPA配信を置き換えたら最高だった]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210630-replace-spa-with-amplify</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210630-replace-spa-with-amplify"/>
        <updated>2021-07-01T01:22:13.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
最近は Nintendo Switch のはじめてゲームプログラミングでプログラミングを勉強しています。めっちゃ褒められるので最高。
https://twitter.com/kokuyouwind/status/1406600715426926595
いろんなゲームが作れそうでワクワクしますね。任天堂はいいものを作るなぁ。

 Elastic Beanstalk を Amplify Console で置き換えた
Leaner の技術スタック紹介 で「配信環境が Beanstalk になっているのはちょっと冗...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueのmethods、computedの挙動・使い分けに混乱した記憶があったので整理してみる]]></title>
        <id>https://zenn.dev/yuki__k/articles/7ec08743230e49</id>
        <link href="https://zenn.dev/yuki__k/articles/7ec08743230e49"/>
        <updated>2021-06-30T13:53:11.000Z</updated>
        <summary type="html"><![CDATA[まずはmethods!
まずはボタンをクリックして呼び出した時の挙動。ボタンをクリックした時のみ呼び出されます。
当たり前だよね。問題は後者よ😩

      
        index.html
        <div id="app">
  <button @click="method">クリック</button>
</div>


      
      
      
        index.js
        const app = {
  methods: {
    method() {
      conso...]]></summary>
        <author>
            <name>@yuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【早めにつけたいVSCode習慣】何度もよく使うコードのテンプレートはスムーズにコードスニペットへ！]]></title>
        <id>https://zenn.dev/dialbird/articles/0f79de871fe543</id>
        <link href="https://zenn.dev/dialbird/articles/0f79de871fe543"/>
        <updated>2021-06-30T12:18:04.000Z</updated>
        <summary type="html"><![CDATA[「あー。このパターンのコード、何度も書いてるな〜」と思っているそこのVSCodeユーザーさん。
エンジニアらしく「パパッと」コードテンプレートを登録して、VSCodeから召喚できるようにしませんか？

「ただ、設定とか調べるのがちょっと...」という方！
今この方法を知って、普段から使えるようになるだけで、どんどんコーディングのスピードを加速していけるようになります！
こちらも5分コースです。

 プラグインのインストール
まずはこのプラグインをインストールしましょう！
https://marketplace.visualstudio.com/items?itemName=inu1255...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NuxtでSvelteコンポーネントを動かしてみる]]></title>
        <id>https://zenn.dev/katsuking/articles/16578da99271aa</id>
        <link href="https://zenn.dev/katsuking/articles/16578da99271aa"/>
        <updated>2021-06-30T06:14:36.000Z</updated>
        <summary type="html"><![CDATA[note社の記事で、共通コンポーネントにSvelteを使うと聞いて、なるほど面白いと思ってやってみました。
https://note.jp/n/n7f757d7050f6
今回は、Nuxt上でSvelteコンポーネントを動かすまでをやっていきます。
上記の記事にもある通り、通常Svelteを動かすには以下のようにtargetにnewすると動くのですが、SSRでは動きません。

      
        
        import App from './App.svelte';

const app = new App({
	target: document.body,
	pro...]]></summary>
        <author>
            <name>KatsuKiNG👑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtのロゴは変わったの？]]></title>
        <id>https://zenn.dev/jqinglong/articles/c8843bce4c475e</id>
        <link href="https://zenn.dev/jqinglong/articles/c8843bce4c475e"/>
        <updated>2021-06-29T13:40:01.000Z</updated>
        <summary type="html"><![CDATA[ちょいぶりに、create nuxt-app してみたら、ちょっとロゴが変わってました。

以上です・・・]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-06-29のJS: ES2021公開、Storybook 6.3、styled-componentsの仕組み]]></title>
        <id>https://jser.info/2021/06/29/es2021-storybook-6.3-styled-components/</id>
        <link href="https://jser.info/2021/06/29/es2021-storybook-6.3-styled-components/"/>
        <updated>2021-06-29T01:10:45.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #546 - ECMAScript 2021(ES2021)がEcma Internationalに承認され、正式にリリースされました。 
Ecma International approves new standards - Ecma International
ES2021では、主に次の機能や構文が追加されています。
Numeric separators
Promise combinators
Weak references and finalizers
String.prototype.replaceAll
Logical assignment
また、JavaScriptの入門書のJavaScript PrimerもES2021対応した更新がされています。
ES2021に対応したJavaScript Primer 3.0を公開しました - JavaScript入門 | Web Scratch
Storybook 6.3リリースされました。
メジャーやアウトライン表示などの視覚的なデバッグ機能の追加がされています。
また@storybook/testing-vueと@storybook/testing-reactでのテストのサポート。 Angular 12、Lit 2のサポート、webpack 5のサポートのStable化、Viteのサポートが追加されています。
Storybook for Vite
Demystifying styled-componentsという記事では、styled-componentsのミニクローンを作りながらどのような仕組みで動いているのかを解説しています。
ヘッドライン
[Release News] TOAST UI Editor 3.0 is here! | by TOAST UI | Jun, 2021 | Mediu…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美味しい店レコメンドアプリをLaravel × Vue.js のSPAで作った]]></title>
        <id>https://zenn.dev/goemon/articles/738ef819f68998</id>
        <link href="https://zenn.dev/goemon/articles/738ef819f68998"/>
        <updated>2021-06-29T01:09:01.000Z</updated>
        <summary type="html"><![CDATA[始めに
2020年1月から受託開発会社に異業種から転職してから1年半が経ち、ある程度の経験をつけてきたもののECのデモアプリは作ったことがありますが、自分でオリジナルアプリを作ってこなかったので今回、個人で運用することも視野にアプリを作ることにしました。

 アプリの概要

 なぜこのアプリを作ろうと思ったか
自分自身、インスタグラムやRetty,食べログなどから美味しい店を探すことが多く、探すこと自体に苦を感じることはないですが、一方探すことに時間がかかりすぎ、結局目当ての店が見つからない、もしくは多すぎてなかなか決められないということがありました。自分で探すよりも勝手にピックアッ...]]></summary>
        <author>
            <name>Goemon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[create-nuxt-appで既存のディレクトリを上書きできるようになった]]></title>
        <id>https://zenn.dev/uta_mory/articles/f8bad2ffa86d99</id>
        <link href="https://zenn.dev/uta_mory/articles/f8bad2ffa86d99"/>
        <updated>2021-06-28T10:24:38.000Z</updated>
        <summary type="html"><![CDATA[今までは、プロジェクトを作りたいディレクトリに何かファイルがあるとエラーになった

      
        
        projects/test-pj
> touch Makefile


      
      
      
        
        projects/test-pj
> npx create-nuxt-app .


create-nuxt-app v3.7.0
Could not create project in test-pj because the directory is not empty.


      
    ...]]></summary>
        <author>
            <name>utamori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[create-nuxt-appで既存のディレクトリを上書きできるようになった]]></title>
        <id>https://zenn.dev/uta_mory/articles/f8bad2ffa86d99</id>
        <link href="https://zenn.dev/uta_mory/articles/f8bad2ffa86d99"/>
        <updated>2021-06-28T10:24:38.000Z</updated>
        <summary type="html"><![CDATA[今までは、プロジェクトを作りたいディレクトリに何かファイルがあるとエラーになった

      
        
        projects/test-pj
> touch Makefile


      
      
      
        
        projects/test-pj
> npx create-nuxt-app .


create-nuxt-app v3.7.0
Could not create project in test-pj because the directory is not empty.


      
    ...]]></summary>
        <author>
            <name>utamori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2でvim/tmuxでクリップボード共有できるようにする]]></title>
        <id>https://zenn.dev/u1tnk/articles/303ed2cd4fff6c</id>
        <link href="https://zenn.dev/u1tnk/articles/303ed2cd4fff6c"/>
        <updated>2021-06-28T06:38:47.000Z</updated>
        <summary type="html"><![CDATA[自ブログから転載 https://u1tnk.github.io/blog/2021/06/28/wsl2_clipboard_config/

 概要
vim、tmux、windws側のcopy/pasteを全て連携させる。
WSL2移行前に使っていたVIrtualBox環境からの移行で、結局の所ssh+x転送をやめた結果 xselが使えなくなったのでwindowsのexeを直接叩けばOKだった…というだけ。

 windows側のクリップボードを双方向で使えるアプリをインストール
https://github.com/equalsraf/win32yank  を利用。
windows...]]></summary>
        <author>
            <name>yuichi tanaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新規ユーザー登録機能】axiosを使ったapi呼び出しメモ]]></title>
        <id>https://zenn.dev/tanoken729/articles/e9185ede462fc3</id>
        <link href="https://zenn.dev/tanoken729/articles/e9185ede462fc3"/>
        <updated>2021-06-27T17:27:09.000Z</updated>
        <summary type="html"><![CDATA[全指定
Signup.vue

      
        
        await this.$axios.post('http://localhost:8000/api/register',this.user)


      
      baseURLの指定
auth-moduleでの設定
nuxt.config.js

      
        
          axios: {
    // baseURL: 'http://localhost:3000',
    // baseURL: 'http://localhost:8000',
    baseURL...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新規ユーザー登録機能】ブラウザが表示しているエラーメッセージ消えない]]></title>
        <id>https://zenn.dev/tanoken729/articles/fc1e0079b9bd03</id>
        <link href="https://zenn.dev/tanoken729/articles/fc1e0079b9bd03"/>
        <updated>2021-06-27T17:17:51.000Z</updated>
        <summary type="html"><![CDATA[laravel
解決
https://teratail.com/questions/178343
nuxt側も出てくるから後で調査]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小限の構成でVue.extendとクラスコンポーネントを比べてみる]]></title>
        <id>https://zenn.dev/kata_n/articles/233ee8e03c5cb1</id>
        <link href="https://zenn.dev/kata_n/articles/233ee8e03c5cb1"/>
        <updated>2021-06-27T07:52:56.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsでTypeScriptを使う時、いくつか選択肢があるのを知って整理したくなったので最小限の構成で同じ機能のものを作成し見比べて見ました。
Vueのバージョンは２.x系です。
なお、Vueの3系では、クラスコンポーネント以外にComposition APIといった新しい書き方が主流になりつつありますが、2.x系を使用したプロジェクトはまだ沢山ある、現在携わっているプロジェクトもクラスコンポーネントを使用している為、TypeScriptの理解を深めるためにもVue.extendとクラスコンポーネントの比較をしています。

 検証する

ボタンをクリックすると、数字がカウントアップ...]]></summary>
        <author>
            <name>kata-n</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue Apollo の useMutation でつまづいたところ]]></title>
        <id>https://zenn.dev/gamin/articles/58bf5f1b9e8ea2</id>
        <link href="https://zenn.dev/gamin/articles/58bf5f1b9e8ea2"/>
        <updated>2021-06-27T04:09:40.000Z</updated>
        <summary type="html"><![CDATA[概要
useMutation を使いたい!使おう！怒られる！なんで！

      
        
        TypeError: Cannot read property '$root' of null
    at getAppTracking (loadingTracking.js?b1f0:5)
    at getCurrentTracking (loadingTracking.js?b1f0:25)
    at track (loadingTracking.js?b1f0:50)
    at Object.trackMutation (loadingTrac...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでVueのIntellisense(入力補完)が遅いとき]]></title>
        <id>https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a</id>
        <link href="https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a"/>
        <updated>2021-06-26T09:20:12.000Z</updated>
        <summary type="html"><![CDATA[前提

Veturを利用している
jsconfig.jsonを書いている
NuxtかVueで開発している


 参考にしたサイト
ずっと理由がわからず、VS Codeくそやん！とか思ってしまいましたがどうやらVS Codeは悪くないようです。
Vetur Intellisense slow and incomplete if project has jsconfig #547


 結論
jsconfigの「include」には、veturに適用する必要のあるフォルダーのみを含める。
プロジェクトフォルダのjsconfig.jsonを

      
        
       ...]]></summary>
        <author>
            <name>tatsuhiko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでVueのIntellisense(入力補完)が遅いとき]]></title>
        <id>https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a</id>
        <link href="https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a"/>
        <updated>2021-06-26T09:20:12.000Z</updated>
        <summary type="html"><![CDATA[前提

Veturを利用している
jsconfig.jsonを書いている
NuxtかVueで開発している


 参考にしたサイト
ずっと理由がわからず、VS Codeくそやん！とか思ってしまいましたがどうやらVS Codeは悪くないようです。
Vetur Intellisense slow and incomplete if project has jsconfig #547


 結論
jsconfigの「include」には、veturに適用する必要のあるフォルダーのみを含める。
プロジェクトフォルダのjsconfig.jsonを

      
        
       ...]]></summary>
        <author>
            <name>tatsuhiko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL*Plusでviを使う]]></title>
        <id>https://zenn.dev/lunarxlark/articles/how-to-use-vi-in-sqlplus</id>
        <link href="https://zenn.dev/lunarxlark/articles/how-to-use-vi-in-sqlplus"/>
        <updated>2021-06-26T04:01:08.000Z</updated>
        <summary type="html"><![CDATA[SQL> DEFINE _EDITOR = vi
SQL> edit
SQL> /   -- 実行


      
      glogin.sqlに設定することでDEFINE _EDITOR = viを省略できる]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From denite.nvim To fzf.vim]]></title>
        <id>https://zenn.dev/lunarxlark/articles/from-denite-to-fzf</id>
        <link href="https://zenn.dev/lunarxlark/articles/from-denite-to-fzf"/>
        <updated>2021-06-26T04:01:02.000Z</updated>
        <summary type="html"><![CDATA[denite.nvimとfzf.vimって比較記事?

違います。断捨離した結果、fzf.vimで事足りてしまったという記事です。
denite.nvimとfzf.vimは、一見やれることが似ているように見えますが提供しているインタフェースが違います。
denite.nvimの方が拡張性/汎用性が高いです。Pythonスクリプトを呼び出せますし。

どうしてやめたん？

Python3とpipの環境整備に疲れたというのが理由で完全に力不足なだけです。
そもそも使いこなせていなかったっていうのも大きい。自分に必要な機能が何か見直したら次のがあれば十分っぽい。

コマンドの結果の一覧表示(...]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年版 vim + goplsの設定]]></title>
        <id>https://zenn.dev/lunarxlark/articles/2021_vim_gopls</id>
        <link href="https://zenn.dev/lunarxlark/articles/2021_vim_gopls"/>
        <updated>2021-06-26T03:16:35.000Z</updated>
        <summary type="html"><![CDATA[goplsが出てから, vimでも定義ジャンプやシンボル検索、ドキュメント参照等が行えるようになった。
たまにVSCodeを触りvimでの作業を改善できないか考える中で、自身の設定が古いことに気付いた。また、ググってもなかなか出てこなかったのでメモとして記述する。
cf. GitHub dotfiles
いきなりだが、vimrcとvim-lsp-settings/settings.jsonを抜粋して貼り付ける。
以前、GoではLspCodeAction, LspCodeLens等をサポートしていなかったが、今では使えるようになっている。
キーマップに設定している関数は全てGoで使用出来る...]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript * GraphQLのバックエンド設計プラクティス]]></title>
        <id>https://zenn.dev/tatta/books/5096cb23126e64</id>
        <link href="https://zenn.dev/tatta/books/5096cb23126e64"/>
        <updated>2021-06-25T06:49:19.000Z</updated>
        <summary type="html"><![CDATA[Typescriptを使いはじめて1年になるので、バックエンドのWebアプリを設計するときに気を付けていることをまとめました。（※社内勉強会用資料の公開版です。）

Typescriptについては、Next.jsを中心にフロントエンドに関する公開情報が豊富です。一方でバックエンドに関する公開情報が少ないと感じています。（かくいう私もNext.jsからTypescriptデビューしたわけですが）

TypeScript * GraphQL という構成は仕事・趣味で採用されている方も多いのではないでしょうか？
私もその1人です。私のような方のためにも、バックエンドの設計プラクティスについてまとめようと思い筆を取りました。

本書がこれから始める読者にとっては教科書のようになり、既に経験がある読者にとっては意見交換の場になったら嬉しいと考えています。]]></summary>
        <author>
            <name>たった</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Buefy Placeholderの色変更　メモ]]></title>
        <id>https://zenn.dev/koniman/articles/e5355a16a5261c</id>
        <link href="https://zenn.dev/koniman/articles/e5355a16a5261c"/>
        <updated>2021-06-24T13:11:39.000Z</updated>
        <summary type="html"><![CDATA[概要

Nuxt.jsでbuefyを使用。


 満たしたいこと
placeholderで表示される文字列の色を変更。
参考：
CSS：input要素のplaceholderの色を変更する方法
上記の記事参考に記述してみる。

      
        
        input::placeholder {
  color: red;
}


      
      これでは変わらない。

 解決策
原因がわからないので最強の上書きで対応。

      
        
        ::v-deep input::placeholder {
  color: red...]]></summary>
        <author>
            <name>こにまん</name>
        </author>
    </entry>
</feed>