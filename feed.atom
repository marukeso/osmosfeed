<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-07-08T18:42:06.703Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Storybook導入時に、webpackのバージョンで詰まった話]]></title>
        <id>https://zenn.dev/urasaku77/articles/7fefb518fe91db</id>
        <link href="https://zenn.dev/urasaku77/articles/7fefb518fe91db"/>
        <updated>2021-07-08T07:45:05.000Z</updated>
        <summary type="html"><![CDATA[経緯
Storybookの公式に沿ってインストールして実行する際、下記のようなエラーが発生

TypeError: Cannot read property 'get' of undefined


 原因
見ただけではなんのことではわからなかったのだが、調べてみると使っているwebpackのバージョンが違うことが原因だった
公式のinitコマンドを打つと、自動的にwebpack4が使われるらしく、webpack5を使っている場合はエラーが出るみたい（もう少しわかりやすいエラー出してほしい・・・）

 解決策
.storybook/main.jsを書き換えることでwebpack5を適...]]></summary>
        <author>
            <name>urasaku77</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[styled-componentsをTypescriptで使う上でのTips]]></title>
        <id>https://zenn.dev/nekoniki/articles/f8600d1ab7d908</id>
        <link href="https://zenn.dev/nekoniki/articles/f8600d1ab7d908"/>
        <updated>2021-07-08T05:17:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はTypescript + Reactでstyled-componentsを使う場合のTipsを紹介します。
styleプロパティで直接記載するよりもスタイルの管理がしやすい+使い回しやすいといったメリットがあるのでおすすめです。
※普段はReact Nativeを扱っていますが、styled-componentsに着目した場合の使用感はほぼ同じといっていいので、サンプルコードはReactのものになります。

 そもそもstyled-componentsとは
styled-componentsは所謂CSS in JSライブラリの一種になります。
名前が表す通り、JSもし...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[なぜWebpackの設定はTypeScriptで書けるのか？]]></title>
        <id>https://zenn.dev/uttk/articles/ab7afa61eb481f</id>
        <link href="https://zenn.dev/uttk/articles/ab7afa61eb481f"/>
        <updated>2021-07-08T04:36:31.000Z</updated>
        <summary type="html"><![CDATA[この記事について
webpackの設定ファイルであるwebpack.config.jsは、TypeScriptで書いてNode.js上で実行できます。しかし、本来であればTypeScriptのソースコードはNode.jsでは実行できないはずです。 この事が気になった私は、今回その仕組みを調べてみたので、この場を借りてその調査結果を共有したいと思います💪
参照
https://webpack.js.org/configuration/configuration-languages/

 記事の概要
概要のみ知りたい人に向けて、以下にこの記事で解説する内容のまとめを書いておきます👇


...]]></summary>
        <author>
            <name>uttk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[今更だけど、Next.jsをさわるんだ！]]></title>
        <id>https://zenn.dev/ignorant_kenji/articles/3c74e04a99bb0362c554</id>
        <link href="https://zenn.dev/ignorant_kenji/articles/3c74e04a99bb0362c554"/>
        <updated>2021-07-08T00:25:45.000Z</updated>
        <summary type="html"><![CDATA[経緯
業務でさわることになり、学習としてアウトプットさせて頂きます。

 はじめに
Next.js はReactを基礎としたフレームワークです。そして、Vercel社が提供するOSS プロジェクトになっています。
Webのデプロイ・ホスティングサービス Vercel を運営しており Next.js と Vercel を合わせて使用し、容易にWebサイトを制作することができるようになっています。
SPA (Single Page Application)　では,Webサイトへ遷移するとローディングが表示され、次々にコンポーネントが表示されることがあったのではないでしょうか？ユーザの行動...]]></summary>
        <author>
            <name>Kenji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kindle で購入した書籍をブクログへ自動で登録する]]></title>
        <id>https://zenn.dev/ysmtegsr/articles/c9077709acb67ff3f1d9</id>
        <link href="https://zenn.dev/ysmtegsr/articles/c9077709acb67ff3f1d9"/>
        <updated>2021-07-07T14:35:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
いきなりですが、みなさん読書の管理ってどうしていますか？
僕は、ブクログ というサービスを使っています。以前は、読書メーター を使っていたんですが、ブクログは本に記載されている ISBN コードや Amazon の Asin コードから本を登録できる[1]ということを知って最近移行しました。
どうせなら自動化したいなと思い、調べてみると同じことを考えた先人たちがいらっしゃったので参考にしつつやってみたのでその紹介です。

 作ったもの
Kindle で書籍を購入した際に Amazon からメールが届きます。そのメールから使いたい Asin コードだけを抜き出して、購入した書...]]></summary>
        <author>
            <name>ysmtegsr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generate AWS Cognito password]]></title>
        <id>https://zenn.dev/hugtech/articles/90abb52f28bc68</id>
        <link href="https://zenn.dev/hugtech/articles/90abb52f28bc68"/>
        <updated>2021-07-07T13:24:03.000Z</updated>
        <summary type="html"><![CDATA[https://www.npmjs.com/package/aws-cognito-temporary-password-generator

      
        
        /**
 * Configuration of Password generation.
 * Only possible to specify length. default: 16
 * All Other requirements are automatically satisfy
 * Require numbers
 * Require a special character from t...]]></summary>
        <author>
            <name>hugtech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で SSR/SSG したページに Cache-Control などのヘッダを設定する]]></title>
        <id>https://zenn.dev/yuku/articles/f5a728808c4efa</id>
        <link href="https://zenn.dev/yuku/articles/f5a728808c4efa"/>
        <updated>2021-07-07T12:35:13.000Z</updated>
        <summary type="html"><![CDATA[Next.js には強力な Incremental Static Regeneration がありますが、Vercel 以外にホストしている場合は使うことができません。そのとき、Cache-Control や Surrogate-Control ヘッダを用いて Fastly のような CDN にキャッシュを持たせたくなります。
このヘッダの持たせ方に少しクセがあったので備忘録的に書きます。
例えば、/articles/[id] にヘッダを持たせたいとします。

 方法1. next.config.js で設定
next.config.js の headers で設定する方法です。

  ...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL でフェッチした部分的なモデルのドメインロジックを TypeScript と Proxy で表現する試み]]></title>
        <id>https://zenn.dev/yuku/articles/45bb0d6cf3da85</id>
        <link href="https://zenn.dev/yuku/articles/45bb0d6cf3da85"/>
        <updated>2021-07-07T08:53:13.000Z</updated>
        <summary type="html"><![CDATA[仕事で GraphQL を使ったプロダクトに DDD のエッセンスを取り入れたく、GraphQL で部分的にフェッチしたドメインモデルに堅牢な型付けを試みたので、まだまだ荒削りですが紹介します。

 やりたいこと
このような GraphQL スキーマがあったとします。

      
        
        type Person {
  firstName: String!
  lastName: String!
  age: Int!
}

type Query {
  person: Person!
}


      
      この Person に対して、以下よう...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the launch.json of tsdx + jest + vscode]]></title>
        <id>https://zenn.dev/hugtech/articles/79d6d9f74e3deb</id>
        <link href="https://zenn.dev/hugtech/articles/79d6d9f74e3deb"/>
        <updated>2021-07-07T08:04:34.000Z</updated>
        <summary type="html"><![CDATA[tsdx
https://github.com/formium/tsdx

 .launch.json

      
        
        {
	"version": "0.2.0",
	"configurations": [
		{
			"type": "node",
			"request": "launch",
			"name": "Jest All",
			"program": "${workspaceFolder}/node_modules/.bin/tsdx",
			"args": ["test", "--runInBand"],
			"conso...]]></summary>
        <author>
            <name>hugtech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サクッとReact + typescript書きたいとき一発で環境構築するシェルスクリプトを作る]]></title>
        <id>https://zenn.dev/masakitm/articles/8d8271b9fdbee8</id>
        <link href="https://zenn.dev/masakitm/articles/8d8271b9fdbee8"/>
        <updated>2021-07-07T07:29:27.000Z</updated>
        <summary type="html"><![CDATA[概要
Reactの環境構築はcreate-react-appで全然いい。
Next.jsでもGatsbyでも全然いい。
いいのだけど、サッと書きたいだけのときは重い。
そう思って最低限必要だと思うものを1コマンド叩けばいいようにスクリプトを書いた。

 解説
eslintやprettierは必要なら別途入れる。
個人でサクッと書く分にはvscode側のlint拡張とかで済ませていいと思うので含めていない。
css in jsも必要なら後で入れればいい。プロダクト開発のテンプレートではないので。
まずはtsconfigファイルを生成する関数を作る。
シェルはzshを使っている。

  ...]]></summary>
        <author>
            <name>masakitm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[輪読会の読み順をランダムで決める chrome 拡張機能を作る for Google Meet ［React + TypeScript］]]></title>
        <id>https://zenn.dev/sota_yamaguchi/articles/a138b03e62595b</id>
        <link href="https://zenn.dev/sota_yamaguchi/articles/a138b03e62595b"/>
        <updated>2021-07-07T02:09:31.000Z</updated>
        <summary type="html"><![CDATA[最近弊社の開発メンバーでブログを書こうという運動があります。
ネタ探しをしていたらよさげな記事を見つけたのでアイデアをお借りします。
shohei さんありがとう🙏
※決してパ○リではありません
https://techblog.roxx.co.jp/entry/2021/04/23/064837
毎週チーム内での読書会や、部署をまたいだエンジニアでの輪読会を行っているのですが、都度読み順を決めるのが面倒なので、参加メンバーをシャッフルしてリストで返す chrome 拡張機能を作ってみました。
なお、弊社の読書会は Google Meet で行うことが多いため必然的に Google Me...]]></summary>
        <author>
            <name>sota_yamaguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-js-modalで超簡単にモーダルを実装する（laravel×vue）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/9cb55513c40848</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/9cb55513c40848"/>
        <updated>2021-07-07T00:06:49.000Z</updated>
        <summary type="html"><![CDATA[今回は vue-js-modalで超簡単にモーダルを表示させる方法について紹介したいと思います。
ではさっそくいってみましょう💨

 vue-js-modalをインストール
まずはライブラリをインストールします

      
        
        npm install vue-js-modal --save


      
      僕の場合はバージョン1.3.xじゃないとインストールできなかったので、 npm install vue-js-modal@1.3 --save  という指定をしました。
どんなバージョンがあるかはこちらで確認できます

 vue-js-m...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則 ◆オープン・クローズドの原則◆]]></title>
        <id>https://zenn.dev/bonfireman/articles/400142b4d65409</id>
        <link href="https://zenn.dev/bonfireman/articles/400142b4d65409"/>
        <updated>2021-07-06T14:32:18.000Z</updated>
        <summary type="html"><![CDATA[オープン・クローズドの原則とは
SOLID原則の、Open Closed Principle（以下：OCP）のことで、「ソフトウェアの構成要素は拡張に対して開いていて、修正に対して閉じていなければならない」という原則です。
言い換えると、ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきであるということです。
以下の仕様になっているサンプルコードを見ながら実際にGoodコードとBadコードを見ながら、理解を深めてみます。

      
        
        - ある会員制ECサイトの決済システムで、会員のグレードによって割引がされる
- Discou...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecoilでFirebase Authを使う]]></title>
        <id>https://zenn.dev/yiwa/articles/3d4b91fd4fb467</id>
        <link href="https://zenn.dev/yiwa/articles/3d4b91fd4fb467"/>
        <updated>2021-07-06T03:22:43.000Z</updated>
        <summary type="html"><![CDATA[Recoilを使ってみたいので、Firebase Authで使ってみました。
なるべく複雑なことをしないようにRecoilでFirebaseのUserオブジェクトを保持して、認証状態でルーティングするだけのシンプルなものです。

 使うもの

React
Recoil
React Router Dom
Firebase


 ディレクトリ

src/

index.tsx
App.tsx
firebase.js
hooks/Auth.tsx
pages/Login.tsx




 1. Atomの設定

      
        /hooks/Auth.tsx
        im...]]></summary>
        <author>
            <name>yiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtでi18n化対応]]></title>
        <id>https://zenn.dev/toshinobu/articles/233aa9b1b65115</id>
        <link href="https://zenn.dev/toshinobu/articles/233aa9b1b65115"/>
        <updated>2021-07-06T00:21:30.000Z</updated>
        <summary type="html"><![CDATA[Nuxtでi18n化対応
昨今、というかだいぶ前からグローバリゼーションが進んできていますが、それにつれアプリ多言語化が必要な場面が増えてきたかと思います。
規模やコンテクストにもよると思いますが、現在ではほとんどのアプリで多言語化が必要ではないでしょうか？

 そもそもi18nとは
そもそもi18nってなんぞ？って疑問に思われたかもしれないですが、私も最初はそうでした笑
i18nとはInternationalizationつまり国際化の略です。
最初のIと最後のnの間に18文字あるからi18nなんですね。k8sといい、これ初見じゃ絶対わからないでしょ
(余談ですが、こうゆう略し方を...]]></summary>
        <author>
            <name>toshinobu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-06のJS: TypeScript 4.4 Beta、immutable-js 4.0.0-rc.13、petite-vue]]></title>
        <id>https://jser.info/2021/07/06/typescript-4.4-beta-immutable-js-4.0.0-rc.13-petite-vue/</id>
        <link href="https://jser.info/2021/07/06/typescript-4.4-beta-immutable-js-4.0.0-rc.13-petite-vue/"/>
        <updated>2021-07-05T22:36:05.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #547 - TypeScript 4.4 betaがリリースされました。
Announcing TypeScript 4.4 Beta | TypeScript
Control Flow Analysisの改善され、Type Gurdeの結果を変数に入れてから扱うようなAliasのケースも正しく推論されるようになっています。
unknown型にするuseUnknownInCatchVariablesオプションの追加と
undefined値の区別をするexactOptionalPropertyTypesオプションの追加されています。
その他には、declarationの生成やstrictモードでのビルドパフォーマンスの改善も含まれています。
immutable-js 4.0.0-rc.13がリリースされています。
Release 4.0.0-rc.13 · immutable-js/immutable-js
immutable-jsはv4.0.0-rc.12でメンテナンスが停止して、immutable-oss organiztionにてforkとしてメンテナンスがされていました。
今回のリリースでは、immutable-js organizationにimmutable-ossのメンテナが追加され、immutable-ossの変更内容もimmutable-js 4.0.0-rc.13へとマージされています。
immutable-jsとしてメンテナンスを再開するリリースとなっています。
Immutable.js is essentially unmaintained · Issue #1689 · immutable-js/immutable-js
Integrate immutable-js-oss fork into main repository b…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で Firebase Authentication を利用し, Google ログインを実装した]]></title>
        <id>https://zenn.dev/minguu42/articles/20210705-nextjs-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210705-nextjs-auth"/>
        <updated>2021-07-05T11:20:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って Next アプリに Google ログインを実装する方法を記述します.
Next アプリの初期化, Firebase アカウントの作成は済んでいることを前提とします.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


Next.js
11.0.1


React
17.0.2


Firebase Jav...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則 ◆単一責任の原則◆]]></title>
        <id>https://zenn.dev/bonfireman/articles/736a5b5fa36b2c</id>
        <link href="https://zenn.dev/bonfireman/articles/736a5b5fa36b2c"/>
        <updated>2021-07-05T10:14:29.000Z</updated>
        <summary type="html"><![CDATA[単一責任の原則とは
SOLID原則の、Single Reaponsibility Principleのことで、「モジュールはたったひとつのアクターに対して責務を負うべきである」という原則です。
「モジュール」は、ここではいくつかの関数やデータをまとめた凝集性のあるのものと捉えてください。
「アクター」はシステムを利用するユーザーやステークホルダーを指します。
なぜ、モジュールはたったひとつのアクターに対して責務を負うべきなのでしょうか？
それは、1つのモジュールが複数のアクターに対して責務を持っている状態だと、1つのアクターに対するモジュールの役割を変更したい場合に、別のアクターへの...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js version 11.0.0 で ESLint を使うために公式ドキュメントを紐解く]]></title>
        <id>https://zenn.dev/ken505/articles/c049a64f3a2989</id>
        <link href="https://zenn.dev/ken505/articles/c049a64f3a2989"/>
        <updated>2021-07-05T07:08:15.000Z</updated>
        <summary type="html"><![CDATA[以下の公式ドキュメントを参考にしながら、Next.js で ESLint を設定します

 ESLint.org


 docs/rules


 npm/ESLint


 Next.js/ESLint


バージョン11.0.0以降、Next.jsは統合されたESLint体験をすぐに提供します。
next lintをスクリプトとしてpackage.jsonに追加します。


      
        
        "scripts": {
  "lint": "next lint"
}


      
      とのことなので npx create-next-app を実...]]></summary>
        <author>
            <name>ken505</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[esquery 便利ラッパー]]></title>
        <id>https://zenn.dev/sosukesuzuki/articles/9c17507e7c34f1</id>
        <link href="https://zenn.dev/sosukesuzuki/articles/9c17507e7c34f1"/>
        <updated>2021-07-05T06:31:49.000Z</updated>
        <summary type="html"><![CDATA[ESTree を CSS のセレクター風の記法で走査する esquery というライブラリがある。
https://github.com/estools/esquery
直接使ったことがある人は少ないかもしれないが、ESLint ルールを書くときに使ことがあるので esquery の構文を使ったことがある人は多いのではないだろうか。
esquery は便利だが、長いクエリを文字列で渡したりするのが微妙。テンプレートリテラルでいい感じにしたい。ということで outdent と組み合わせる小さなラッパーを書いた。

      
        
        import esquery...]]></summary>
        <author>
            <name>Sosuke Suzuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript で JavaScript をパースするときの型]]></title>
        <id>https://zenn.dev/sosukesuzuki/articles/161ad4870a0f8c</id>
        <link href="https://zenn.dev/sosukesuzuki/articles/161ad4870a0f8c"/>
        <updated>2021-07-05T05:33:52.000Z</updated>
        <summary type="html"><![CDATA[この記事では TypeScript から既存のパーサーライブラリを使って JavaScript をパースするときにどのように型をつけるか、自分がやっている方法を紹介する。TypeScript を使って1から JavaScript のパーサーを書く話ではないので注意。
仕事で、TypeScript で JavaScript をパースして構文木をゴニョゴニョやるツールを書いていた。
こういうとき、まずどのパーサーを使うかを考える。
パースする対象が絶対に JavaScript であることがわかっている場合、自分は Acorn を使うことが多い(TypeScript や Flow をパースする...]]></summary>
        <author>
            <name>Sosuke Suzuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno Deploy用コードで[deno-ts 2339]が発生するときの対処法]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/efed8ada433f24</id>
        <link href="https://zenn.dev/kawarimidoll/articles/efed8ada433f24"/>
        <updated>2021-07-05T02:28:21.000Z</updated>
        <summary type="html"><![CDATA[Deno Deployの勉強をしています。
https://zenn.dev/kawarimidoll/articles/b0a5064befcd31
本記事では、Deno Deploy用のコードを書いている際に遭遇した[deno-ts 2339]エラーの対処をまとめました。

 発生するエラー
エラーはエディタ内で表示されるもので、[deno-ts 2339] [E] Property 'respondWith' does not exist on type 'Event'です。
例として、公式ドキュメントのHello Worldページのコードを使います。
https://deno.c...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Theme UIをReact×TypeScriptのプロジェクトで使う。]]></title>
        <id>https://zenn.dev/beeeyan/articles/d3c40cea9158075a3dcb</id>
        <link href="https://zenn.dev/beeeyan/articles/d3c40cea9158075a3dcb"/>
        <updated>2021-07-05T02:08:52.000Z</updated>
        <summary type="html"><![CDATA[ことの経緯
React × TypeScript のプロジェクトでRebass使おうかな。
↓
Rebassの開発者さんが最近開発しているのはTheme UIらしい。
参考 : Theme UI で Theme Driven な快適 React スタイリング生活
↓
Theme UI使ってみよう。
↓
動かない（表示されない）。。。
↓
動かそう!!!
※ TypeScriptでTheme UIを導入するときの注意点くらいの記事です。

 インストール方法
公式サイトのGetting Startedには以下のコマンドが記載されている。

      
        
       ...]]></summary>
        <author>
            <name>beeeyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsを使って管理画面を作る]]></title>
        <id>https://zenn.dev/dfukui/articles/e8ff9f66ae094c</id>
        <link href="https://zenn.dev/dfukui/articles/e8ff9f66ae094c"/>
        <updated>2021-07-05T01:45:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Cloud9 + Vue.jsを使って管理画面を作成するチュートリアルとなります。

 管理画面テンプレートの導入
Cloud9のターミナルで以下実行します。
Cloud9の基本的な操作方法は以下を参考にしてください。
https://26gram.com/how-to-use-cloud9

 Core UI のダウンロード

      
        
        # リポジトリのクローン
git clone https://github.com/coreui/coreui-free-vue-admin-template.git CoreUI-Vue

# ダウ...]]></summary>
        <author>
            <name>dfukui</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-infinite-scrollで超簡単無限スクロールを実装する（vue.js）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/776b9052f47d52</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/776b9052f47d52"/>
        <updated>2021-07-04T23:58:01.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsで無限スクロールを実装したい場合は vue-infinite-scroll というライブラリを使用することをおすすめします。
超簡単に実装できます
公式ページはこちら

 ライブラリのインストール
ライブラリをインストールします

      
        
        npm install vue-infinite-loading -S


      
      
 infinite-loadingコンポーネントを設置する
ライブラリをインストールしたらinfinite-loadingコンポーネントが使えるようになっているので、設置します。
@infinite...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの環境変数取得方法]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/nextjs-environment-variables</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/nextjs-environment-variables"/>
        <updated>2021-07-04T22:23:27.000Z</updated>
        <summary type="html"><![CDATA[Nextjsでは、たとえばデータベースに接続するときに使う環境変数を設定することができます。
設定方法は、ルートディレクトリ直下にあるnext.config.jsにあるmodule.exports...とあるところに変数を追加すればOKです。(ファイルがなければnext.config.jsをルート直下に作ってください)

      
        next.config.js
        module.exports = {
  env: {
    // customKeyは任意の変数名でOK
    // 'my-value'のところで値を設定する
    customKey...]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゲームを作ってpetite-vueを完全に理解する]]></title>
        <id>https://zenn.dev/yuneco/articles/petite-vue-hello</id>
        <link href="https://zenn.dev/yuneco/articles/petite-vue-hello"/>
        <updated>2021-07-04T17:58:47.000Z</updated>
        <summary type="html"><![CDATA[petite-vueは軽量・簡易版のVue.js
2021/7/2にVue.js作者のEvan Youさんの新作、petite-vueがリリースされました。
ざっくりした概要は『petite-vue 最速 使い方』など、早速日本語でまとめてくださっている方がいるので、そちらを参照いただくと良いと思います。
（ただし、当面は破壊的な変更や機能追加が頻繁に入ると思われるので、日本語の記事と併せて公式もチェックするのが良いと思います）

 習うより慣れろ。ゲーム作って「完全に理解」してみた
公式のREADMEやサンプルが結構丁寧なので、眺めてみるだけでなんとなく理解できた気になってきます。...]]></summary>
        <author>
            <name>yuki matsumoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ログイン機能】jwt（JSON Web Token Authentication）でログイン機能実装手順（Laravel/Nuxt）]]></title>
        <id>https://zenn.dev/tanoken729/articles/a0b556cd6d53ec</id>
        <link href="https://zenn.dev/tanoken729/articles/a0b556cd6d53ec"/>
        <updated>2021-07-04T15:57:58.000Z</updated>
        <summary type="html"><![CDATA[Laravel側
https://jwt-auth.readthedocs.io/en/docs/laravel-installation/

 JWTライブラリ（tymon/jwt-auth）をインストール
Laravel 6 の場合はバージョンに:1.0.0-rc.5を指定しないとエラーになります

      
        
        composer require tymon/jwt-auth:1.0.0-rc.5


      
      
 設定を一部変更
以下コマンドでconfig/jwt.phpというファイルを生成

      
        
 ...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React vs Hotwire ~ 私とHotwireとその後]]></title>
        <id>https://zenn.dev/mast1ff/articles/efc41938236c51</id>
        <link href="https://zenn.dev/mast1ff/articles/efc41938236c51"/>
        <updated>2021-07-04T12:39:28.000Z</updated>
        <summary type="html"><![CDATA[半年くらい前にこんな記事を書きました。
https://zenn.dev/mast1ff/articles/3d6f4b9e4a38bb
様々なプロダクトにメインとして使用しているNext.js製のフロントエンドをStimulusとTurboに書き換えて運用してみました。
https://hotwired.dev/
今回は実際に運用してみた所管などをまとめたいと思います。

 はじめに
とはいえ、Hotwireたちは飽くまでフロントエンドのみ。バックエンド側のロジックを持つことのできないこれらのライブラリとの単純な比較対象としては、サーバーレスでも運用できるNext.jsとは若干ズレが出...]]></summary>
        <author>
            <name>Mast1ff</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】Firebase Storageに画像をアップしてURLを取得する]]></title>
        <id>https://zenn.dev/fujiyama/articles/50b0a73acd89b7</id>
        <link href="https://zenn.dev/fujiyama/articles/50b0a73acd89b7"/>
        <updated>2021-07-04T11:35:45.000Z</updated>
        <summary type="html"><![CDATA[経緯
Firebase Storageを初めて使ってみて，とても使いやすいと感じたので共有したいと思いました．
Next.jsをフレームワークとして利用しています．


 環境

      
        
        react@17.0.2
firebase@8.6.8
typescript@4.3.4
next@11.0.1
tailwindcss@2.2.4


      
      
 事前準備
事前にFirebaseプロジェクトを作成し，Reactのfirebase.jsなどにfirebaseの設定を記述してください．また

      
        
 ...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker-composeでVue.jsの開発環境を構築する]]></title>
        <id>https://zenn.dev/chida/articles/8f16e42364398c</id>
        <link href="https://zenn.dev/chida/articles/8f16e42364398c"/>
        <updated>2021-07-04T09:56:17.000Z</updated>
        <summary type="html"><![CDATA[Dockerは事前にMacにインストールされていることを前提とします。

 手順
Vue.jsの開発環境を構築して起動するまでの手順です。

Node.jsのバージョンを確認
dockerhubを確認
Dockerfileの作成
docker-compose.ymlの作成
コンテナの起動
コンテナ内の作業


 Node.jsのバージョンを確認
Node.jsを利用するため、必要なバージョンを確認します。様々なバージョンの中でも、公式サイトを見て推奨版であるLTSを確認します。
https://nodejs.org/en/
LTSとはLong-term Supportの略で、長期の保守運...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[denops.vimを使ってポモドーロタイマーを実装してみた]]></title>
        <id>https://zenn.dev/uki00a/articles/implemented-pomodoro-timer-using-denops</id>
        <link href="https://zenn.dev/uki00a/articles/implemented-pomodoro-timer-using-denops"/>
        <updated>2021-07-04T08:56:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
denops.vimを使って、Vim/Neovim上でポモドーロテクニックを実践するためのプラグインを作成してみました。
https://github.com/uki00a/denops-pomodoro.vim/
この記事ではdenops-pomodoro.vimの使い方やdenops.vimを使ってプラグインを実装する上でのノウハウなどについて紹介します。

 denops.vimとは?
denops.vimとはDenoを使ってVimやNeovimのプラグインを書くためのエコシステムです。
より詳しくは以下の記事を参照いただければと思います。
https://zenn....]]></summary>
        <author>
            <name>uki00a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kindle のセール本をウォッチできるサイトを作った。]]></title>
        <id>https://zenn.dev/takanopontaro/articles/dde9458c32f3f9</id>
        <link href="https://zenn.dev/takanopontaro/articles/dde9458c32f3f9"/>
        <updated>2021-07-04T01:51:37.000Z</updated>
        <summary type="html"><![CDATA[数年前に Kindle を購入してから結構本を読むようになり、今はだいたい年間 80 冊程度読んでいます。半額セールとか 50% ポイント還元とか、そういったセールを Kindle ストアは頻繁に行っているので、そういうときに一気にまとめ買いするのが習慣になりました。
アマゾンのほしい物リストに本を登録しておくと、安くなったときにその旨表示されて便利なんですが、これってポイント還元の時は分からないのでちょっと困っていました。どんなキャンペーンなのかはあまり重要ではなく、欲しい本が得になっているかどうかだけ分かればいいので、そういった事が簡単に分かるサービスはないかな〜と探してみたんですが...]]></summary>
        <author>
            <name>takanopontaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FGO】「村正ぁーーー！」するためのネタサイト作成記録]]></title>
        <id>https://zenn.dev/foxtail88/articles/574fab811df26d</id>
        <link href="https://zenn.dev/foxtail88/articles/574fab811df26d"/>
        <updated>2021-07-03T23:13:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こちらのサイトの作成備忘録です。インフラ等の全体像は別途記事にしたいと思います。
https://tenkoh.github.io/fgo-scenes/
Fate/Grand Orderというスマートフォン向けゲームのコラージュ画像を生成するお遊びサイトです😇


(C) TYPE-MOON


 方針検討
やりたいことは 「既存の画像に、セリフだけ好きに挿入する」 という簡単なものです。なんとなくフロントだけでもできそうですが、ある程度フォントを原作に近づけたいと考えたので、特定のフォントを気兼ねなく使えるかな？と思い、バックエンドも構築することにしました。
またお遊び...]]></summary>
        <author>
            <name>こぎつね</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next-optimized-images で next/image っぽいものをつくる]]></title>
        <id>https://zenn.dev/itomise/articles/20356a794b665f</id>
        <link href="https://zenn.dev/itomise/articles/20356a794b665f"/>
        <updated>2021-07-03T14:26:36.000Z</updated>
        <summary type="html"><![CDATA[next/image での画像最適化が最近のホットなトピックではありますが、見た感じ、next/imageは画像の最適化をサーバサイドで処理する前提のコンポーネントのようです。
Next.jsでサーバを立てられる場合は使っていきたいのですが、個人的に案件でそういう構成になっていることはあまりないです。
そこで、next export で使える画像最適化についてまとめてnext/imageっぽいコンポーネントを作ってみようと考えました。
一応、公式の next export での next/image の使用法についてのページはこちら です。

 前提
今回はnext/imageのソースを...]]></summary>
        <author>
            <name>itomise</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+CSSModules(Saas)+Storybookのセットアップ]]></title>
        <id>https://zenn.dev/thim/articles/7c8ceba730dad35d27dc</id>
        <link href="https://zenn.dev/thim/articles/7c8ceba730dad35d27dc"/>
        <updated>2021-07-03T12:41:24.000Z</updated>
        <summary type="html"><![CDATA[Next.js のプロジェクトにCSSModules(Sass)+Storybookをセットアップしようとしてハマり倒したので手順を記録しておきます。
セットアップ完了状態のソースはこちら
https://github.com/TakahiroHimi/Next-CSSModules-SB-sample

 Next.js アプリ作成

      
        
        npx create-next-app --example with-typescript myapp


      
      
 CSSModules(Sass)セットアップ

 パッケージ追加

...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[petite-vue 最速 使い方]]></title>
        <id>https://zenn.dev/silloi/articles/ecfab241f3fea9</id>
        <link href="https://zenn.dev/silloi/articles/ecfab241f3fea9"/>
        <updated>2021-07-03T07:40:54.000Z</updated>
        <summary type="html"><![CDATA[2021年7月3日（日本時間）、Vueの創始者Evan Youが新たなパッケージをリリースしました。
https://github.com/vuejs/petite-vue

 petite-vue
petite-vue（プティットゥ・ヴュー「プチVue」の意）は先進的な機能を備えた、超軽量なVueの下位互換です。スタンダードなVueと同等のテンプレート構文・リアクティビティモデルを有していますが、かつてサーバーフレームワークで所々に書かれていたような、ちょっとしたインタラクションを置き換えられるよう特化しています。

5.7KB以下
DOMベース（仮想DOMを使用しない）
@vue/r...]]></summary>
        <author>
            <name>silloi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsがESModuleフォーマットサポートしてない問題（ERR_REQUIRE_ESM）の回避策]]></title>
        <id>https://zenn.dev/dl10yr/articles/b592e36d852e8c</id>
        <link href="https://zenn.dev/dl10yr/articles/b592e36d852e8c"/>
        <updated>2021-07-03T01:23:44.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでd3使おうとしたら、ハマりました。
Next.jsがESModuleフォーマットをサポートしてないのが原因のようです。
https://github.com/vercel/next.js/issues/9607

      
        
        Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: /Users/hogehoge/node_modules/robust-predicates/index.js
require() of ES modules is not supported.
...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsプロジェクトにJestを導入してGitHub Actionsでユニットテストをする]]></title>
        <id>https://zenn.dev/a_da_chi/articles/0ea66053a8b778</id>
        <link href="https://zenn.dev/a_da_chi/articles/0ea66053a8b778"/>
        <updated>2021-07-02T13:43:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
ReactでユニットテストといえばJestですよね。
今回はNext.jsプロジェクトにJestを導入してGitHub Actionsでユニットテストをするまでの手順を書いていきたい思います。

 前提

Next.jsでsrcディレクトリ配下にアプリケーションコードを配置していること。


 導入手順

必要なパッケージをインス...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 2 × TSX で完璧な型サポートを手に入れる]]></title>
        <id>https://zenn.dev/ytr0903/articles/eacee1dee6b055</id>
        <link href="https://zenn.dev/ytr0903/articles/eacee1dee6b055"/>
        <updated>2021-07-02T11:46:58.000Z</updated>
        <summary type="html"><![CDATA[この記事は、昨日会社のテックブログに寄稿した記事
https://tech.andpad.co.jp/entry/2021/07/01/170000
に入りきらなかった情報の補足です。
元の記事では、Vue + JSX + Nuxt Composition APIという組み合わせで開発を行う際の、環境設定・導入方法、メリットとデメリット、そしてJSXに限らないComposition APIのTipsまでいろいろ書いていますので、興味のある方は先にそちらの記事をご覧ください【PR】！

さて、冒頭の記事ではVue + JSX（TSX）の組み合わせでの開発のメリデメを挙げる中で、
現状のVu...]]></summary>
        <author>
            <name>ykoizumi0903</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 2 × TSX で完璧な型サポートを手に入れる]]></title>
        <id>https://zenn.dev/ytr0903/articles/eacee1dee6b055</id>
        <link href="https://zenn.dev/ytr0903/articles/eacee1dee6b055"/>
        <updated>2021-07-02T11:46:58.000Z</updated>
        <summary type="html"><![CDATA[この記事は、昨日会社のテックブログに寄稿した記事
https://tech.andpad.co.jp/entry/2021/07/01/170000
に入りきらなかった情報の補足です。
元の記事では、Vue + JSX + Nuxt Composition APIという組み合わせで開発を行う際の、環境設定・導入方法、メリットとデメリット、そしてJSXに限らないComposition APIのTipsまでいろいろ書いていますので、興味のある方は先にそちらの記事をご覧ください【PR】！

さて、冒頭の記事ではVue + JSX（TSX）の組み合わせでの開発のメリデメを挙げる中で、
現状のVu...]]></summary>
        <author>
            <name>ykoizumi0903</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js×microCMS製のメディアサイトをリニューアルした話]]></title>
        <id>https://zenn.dev/manalink/articles/manalink-for-teachers-renewal-202107</id>
        <link href="https://zenn.dev/manalink/articles/manalink-for-teachers-renewal-202107"/>
        <updated>2021-07-02T09:25:52.000Z</updated>
        <summary type="html"><![CDATA[マナリンクCTOの名人です。
2021年7月1日に、弊社が運営しているマナリンクTeachersというメディアサイトをリニューアルしました！
https://for-teachers.manalink.jp/
このメディアサイトはNext.js×microCMSで構築されています。初回リリースは2020年秋ごろだったので、半年以上運用してのリニューアルとなりガッツリ実装を書き換えました。
そのため本記事では前回の復習も兼ねて、リニューアルの流れやTipsをまとめてみようと思います。

 メディアの概要
マナリンクTeachersは、オンライン家庭教師向けの情報をまとめているメディアサイト...]]></summary>
        <author>
            <name>マナリンク Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[もしもvimを使っているときに記憶喪失になったら…]]></title>
        <id>https://zenn.dev/kouta/articles/ab2d9df961238e</id>
        <link href="https://zenn.dev/kouta/articles/ab2d9df961238e"/>
        <updated>2021-07-01T16:12:11.000Z</updated>
        <summary type="html"><![CDATA[ここはどこだ

「あれ、なんの作業をしてたっけ?」
彼の名前はkoutarn、しがないタッチタイピング虚無僧。
今日も元気にお経を唱えながらコーディングをしていたのですが、
度重なるデスマーチのせいで軽く記憶を無くしてしまったようです。
「vimで作業をしていたんだけど基本的な操作方法以外思いだせない…」
おっと、彼はvimという 素晴しいエディタ で作業をしていたようですね。
ご都合主義なこの状況から彼と一緒にvimの操作方法を思い出してみましょう。

 この記事の対象の方
✅ この記事は以下の人を想定して書いています。


もの忘れが激しい人
vimって便利なんだけど覚える事が多...]]></summary>
        <author>
            <name>koutarn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsのサイトにmicroCMSをAPI接続する]]></title>
        <id>https://zenn.dev/renshimosawa/articles/266b780292aadd</id>
        <link href="https://zenn.dev/renshimosawa/articles/266b780292aadd"/>
        <updated>2021-07-01T13:50:49.000Z</updated>
        <summary type="html"><![CDATA[今回はこのようなサイト内のニュース欄をmicroCMSを用いて作ります。
デプロイはAWS amplifyでする前提です。


 microCMSの設定

 (1)プロジェクトを作る


個人開発レベルではHobbyで事足りるかと（検証中）。

 (2)APIを作成

リスト形式を選択


 (3)投稿したい項目を定義


 APIで取得したデータをmapで出す

 (1)API keyを.envに書き込む

      
        .env.production
        NEXT_PUBLIC_API_KEY=your key


      
      keyはこちら...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplify ConsoleでSPA配信を置き換えたら最高だった]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210630-replace-spa-with-amplify</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210630-replace-spa-with-amplify"/>
        <updated>2021-07-01T01:22:13.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
最近は Nintendo Switch のはじめてゲームプログラミングでプログラミングを勉強しています。めっちゃ褒められるので最高。
https://twitter.com/kokuyouwind/status/1406600715426926595
いろんなゲームが作れそうでワクワクしますね。任天堂はいいものを作るなぁ。

 Elastic Beanstalk を Amplify Console で置き換えた
Leaner の技術スタック紹介 で「配信環境が Beanstalk になっているのはちょっと冗...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueのmethods、computedの挙動・使い分けに混乱した記憶があったので整理してみる]]></title>
        <id>https://zenn.dev/yuki__k/articles/7ec08743230e49</id>
        <link href="https://zenn.dev/yuki__k/articles/7ec08743230e49"/>
        <updated>2021-06-30T13:53:11.000Z</updated>
        <summary type="html"><![CDATA[まずはmethods!
まずはボタンをクリックして呼び出した時の挙動。ボタンをクリックした時のみ呼び出されます。
当たり前だよね。問題は後者よ😩

      
        index.html
        <div id="app">
  <button @click="method">クリック</button>
</div>


      
      
      
        index.js
        const app = {
  methods: {
    method() {
      conso...]]></summary>
        <author>
            <name>@yuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【早めにつけたいVSCode習慣】何度もよく使うコードのテンプレートはスムーズにコードスニペットへ！]]></title>
        <id>https://zenn.dev/dialbird/articles/0f79de871fe543</id>
        <link href="https://zenn.dev/dialbird/articles/0f79de871fe543"/>
        <updated>2021-06-30T12:18:04.000Z</updated>
        <summary type="html"><![CDATA[「あー。このパターンのコード、何度も書いてるな〜」と思っているそこのVSCodeユーザーさん。
エンジニアらしく「パパッと」コードテンプレートを登録して、VSCodeから召喚できるようにしませんか？

「ただ、設定とか調べるのがちょっと...」という方！
今この方法を知って、普段から使えるようになるだけで、どんどんコーディングのスピードを加速していけるようになります！
こちらも5分コースです。

 プラグインのインストール
まずはこのプラグインをインストールしましょう！
https://marketplace.visualstudio.com/items?itemName=inu1255...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NuxtでSvelteコンポーネントを動かしてみる]]></title>
        <id>https://zenn.dev/katsuking/articles/16578da99271aa</id>
        <link href="https://zenn.dev/katsuking/articles/16578da99271aa"/>
        <updated>2021-06-30T06:14:36.000Z</updated>
        <summary type="html"><![CDATA[note社の記事で、共通コンポーネントにSvelteを使うと聞いて、なるほど面白いと思ってやってみました。
https://note.jp/n/n7f757d7050f6
今回は、Nuxt上でSvelteコンポーネントを動かすまでをやっていきます。
上記の記事にもある通り、通常Svelteを動かすには以下のようにtargetにnewすると動くのですが、SSRでは動きません。

      
        
        import App from './App.svelte';

const app = new App({
	target: document.body,
	pro...]]></summary>
        <author>
            <name>KatsuKiNG👑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtのロゴは変わったの？]]></title>
        <id>https://zenn.dev/jqinglong/articles/c8843bce4c475e</id>
        <link href="https://zenn.dev/jqinglong/articles/c8843bce4c475e"/>
        <updated>2021-06-29T13:40:01.000Z</updated>
        <summary type="html"><![CDATA[ちょいぶりに、create nuxt-app してみたら、ちょっとロゴが変わってました。

以上です・・・]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-06-29のJS: ES2021公開、Storybook 6.3、styled-componentsの仕組み]]></title>
        <id>https://jser.info/2021/06/29/es2021-storybook-6.3-styled-components/</id>
        <link href="https://jser.info/2021/06/29/es2021-storybook-6.3-styled-components/"/>
        <updated>2021-06-29T01:10:45.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #546 - ECMAScript 2021(ES2021)がEcma Internationalに承認され、正式にリリースされました。 
Ecma International approves new standards - Ecma International
ES2021では、主に次の機能や構文が追加されています。
Numeric separators
Promise combinators
Weak references and finalizers
String.prototype.replaceAll
Logical assignment
また、JavaScriptの入門書のJavaScript PrimerもES2021対応した更新がされています。
ES2021に対応したJavaScript Primer 3.0を公開しました - JavaScript入門 | Web Scratch
Storybook 6.3リリースされました。
メジャーやアウトライン表示などの視覚的なデバッグ機能の追加がされています。
また@storybook/testing-vueと@storybook/testing-reactでのテストのサポート。 Angular 12、Lit 2のサポート、webpack 5のサポートのStable化、Viteのサポートが追加されています。
Storybook for Vite
Demystifying styled-componentsという記事では、styled-componentsのミニクローンを作りながらどのような仕組みで動いているのかを解説しています。
ヘッドライン
[Release News] TOAST UI Editor 3.0 is here! | by TOAST UI | Jun, 2021 | Mediu…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美味しい店レコメンドアプリをLaravel × Vue.js のSPAで作った]]></title>
        <id>https://zenn.dev/goemon/articles/738ef819f68998</id>
        <link href="https://zenn.dev/goemon/articles/738ef819f68998"/>
        <updated>2021-06-29T01:09:01.000Z</updated>
        <summary type="html"><![CDATA[始めに
2020年1月から受託開発会社に異業種から転職してから1年半が経ち、ある程度の経験をつけてきたもののECのデモアプリは作ったことがありますが、自分でオリジナルアプリを作ってこなかったので今回、個人で運用することも視野にアプリを作ることにしました。

 アプリの概要

 なぜこのアプリを作ろうと思ったか
自分自身、インスタグラムやRetty,食べログなどから美味しい店を探すことが多く、探すこと自体に苦を感じることはないですが、一方探すことに時間がかかりすぎ、結局目当ての店が見つからない、もしくは多すぎてなかなか決められないということがありました。自分で探すよりも勝手にピックアッ...]]></summary>
        <author>
            <name>Goemon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[create-nuxt-appで既存のディレクトリを上書きできるようになった]]></title>
        <id>https://zenn.dev/uta_mory/articles/f8bad2ffa86d99</id>
        <link href="https://zenn.dev/uta_mory/articles/f8bad2ffa86d99"/>
        <updated>2021-06-28T10:24:38.000Z</updated>
        <summary type="html"><![CDATA[今までは、プロジェクトを作りたいディレクトリに何かファイルがあるとエラーになった

      
        
        projects/test-pj
> touch Makefile


      
      
      
        
        projects/test-pj
> npx create-nuxt-app .


create-nuxt-app v3.7.0
Could not create project in test-pj because the directory is not empty.


      
    ...]]></summary>
        <author>
            <name>utamori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[create-nuxt-appで既存のディレクトリを上書きできるようになった]]></title>
        <id>https://zenn.dev/uta_mory/articles/f8bad2ffa86d99</id>
        <link href="https://zenn.dev/uta_mory/articles/f8bad2ffa86d99"/>
        <updated>2021-06-28T10:24:38.000Z</updated>
        <summary type="html"><![CDATA[今までは、プロジェクトを作りたいディレクトリに何かファイルがあるとエラーになった

      
        
        projects/test-pj
> touch Makefile


      
      
      
        
        projects/test-pj
> npx create-nuxt-app .


create-nuxt-app v3.7.0
Could not create project in test-pj because the directory is not empty.


      
    ...]]></summary>
        <author>
            <name>utamori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2でvim/tmuxでクリップボード共有できるようにする]]></title>
        <id>https://zenn.dev/u1tnk/articles/303ed2cd4fff6c</id>
        <link href="https://zenn.dev/u1tnk/articles/303ed2cd4fff6c"/>
        <updated>2021-06-28T06:38:47.000Z</updated>
        <summary type="html"><![CDATA[自ブログから転載 https://u1tnk.github.io/blog/2021/06/28/wsl2_clipboard_config/

 概要
vim、tmux、windws側のcopy/pasteを全て連携させる。
WSL2移行前に使っていたVIrtualBox環境からの移行で、結局の所ssh+x転送をやめた結果 xselが使えなくなったのでwindowsのexeを直接叩けばOKだった…というだけ。

 windows側のクリップボードを双方向で使えるアプリをインストール
https://github.com/equalsraf/win32yank  を利用。
windows...]]></summary>
        <author>
            <name>yuichi tanaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新規ユーザー登録機能】axiosを使ったapi呼び出しメモ]]></title>
        <id>https://zenn.dev/tanoken729/articles/e9185ede462fc3</id>
        <link href="https://zenn.dev/tanoken729/articles/e9185ede462fc3"/>
        <updated>2021-06-27T17:27:09.000Z</updated>
        <summary type="html"><![CDATA[全指定
Signup.vue

      
        
        await this.$axios.post('http://localhost:8000/api/register',this.user)


      
      baseURLの指定
auth-moduleでの設定
nuxt.config.js

      
        
          axios: {
    // baseURL: 'http://localhost:3000',
    // baseURL: 'http://localhost:8000',
    baseURL...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新規ユーザー登録機能】ブラウザが表示しているエラーメッセージ消えない]]></title>
        <id>https://zenn.dev/tanoken729/articles/fc1e0079b9bd03</id>
        <link href="https://zenn.dev/tanoken729/articles/fc1e0079b9bd03"/>
        <updated>2021-06-27T17:17:51.000Z</updated>
        <summary type="html"><![CDATA[laravel
解決
https://teratail.com/questions/178343
nuxt側も出てくるから後で調査]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最小限の構成でVue.extendとクラスコンポーネントを比べてみる]]></title>
        <id>https://zenn.dev/kata_n/articles/233ee8e03c5cb1</id>
        <link href="https://zenn.dev/kata_n/articles/233ee8e03c5cb1"/>
        <updated>2021-06-27T07:52:56.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsでTypeScriptを使う時、いくつか選択肢があるのを知って整理したくなったので最小限の構成で同じ機能のものを作成し見比べて見ました。
Vueのバージョンは２.x系です。
なお、Vueの3系では、クラスコンポーネント以外にComposition APIといった新しい書き方が主流になりつつありますが、2.x系を使用したプロジェクトはまだ沢山ある、現在携わっているプロジェクトもクラスコンポーネントを使用している為、TypeScriptの理解を深めるためにもVue.extendとクラスコンポーネントの比較をしています。

 検証する

ボタンをクリックすると、数字がカウントアップ...]]></summary>
        <author>
            <name>kata-n</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue Apollo の useMutation でつまづいたところ]]></title>
        <id>https://zenn.dev/gamin/articles/58bf5f1b9e8ea2</id>
        <link href="https://zenn.dev/gamin/articles/58bf5f1b9e8ea2"/>
        <updated>2021-06-27T04:09:40.000Z</updated>
        <summary type="html"><![CDATA[概要
useMutation を使いたい!使おう！怒られる！なんで！

      
        
        TypeError: Cannot read property '$root' of null
    at getAppTracking (loadingTracking.js?b1f0:5)
    at getCurrentTracking (loadingTracking.js?b1f0:25)
    at track (loadingTracking.js?b1f0:50)
    at Object.trackMutation (loadingTrac...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでVueのIntellisense(入力補完)が遅いとき]]></title>
        <id>https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a</id>
        <link href="https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a"/>
        <updated>2021-06-26T09:20:12.000Z</updated>
        <summary type="html"><![CDATA[前提

Veturを利用している
jsconfig.jsonを書いている
NuxtかVueで開発している


 参考にしたサイト
ずっと理由がわからず、VS Codeくそやん！とか思ってしまいましたがどうやらVS Codeは悪くないようです。
Vetur Intellisense slow and incomplete if project has jsconfig #547


 結論
jsconfigの「include」には、veturに適用する必要のあるフォルダーのみを含める。
プロジェクトフォルダのjsconfig.jsonを

      
        
       ...]]></summary>
        <author>
            <name>tatsuhiko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでVueのIntellisense(入力補完)が遅いとき]]></title>
        <id>https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a</id>
        <link href="https://zenn.dev/tatsuhiko/articles/d7cedc5a1a3f5a"/>
        <updated>2021-06-26T09:20:12.000Z</updated>
        <summary type="html"><![CDATA[前提

Veturを利用している
jsconfig.jsonを書いている
NuxtかVueで開発している


 参考にしたサイト
ずっと理由がわからず、VS Codeくそやん！とか思ってしまいましたがどうやらVS Codeは悪くないようです。
Vetur Intellisense slow and incomplete if project has jsconfig #547


 結論
jsconfigの「include」には、veturに適用する必要のあるフォルダーのみを含める。
プロジェクトフォルダのjsconfig.jsonを

      
        
       ...]]></summary>
        <author>
            <name>tatsuhiko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL*Plusでviを使う]]></title>
        <id>https://zenn.dev/lunarxlark/articles/how-to-use-vi-in-sqlplus</id>
        <link href="https://zenn.dev/lunarxlark/articles/how-to-use-vi-in-sqlplus"/>
        <updated>2021-06-26T04:01:08.000Z</updated>
        <summary type="html"><![CDATA[SQL> DEFINE _EDITOR = vi
SQL> edit
SQL> /   -- 実行


      
      glogin.sqlに設定することでDEFINE _EDITOR = viを省略できる]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[From denite.nvim To fzf.vim]]></title>
        <id>https://zenn.dev/lunarxlark/articles/from-denite-to-fzf</id>
        <link href="https://zenn.dev/lunarxlark/articles/from-denite-to-fzf"/>
        <updated>2021-06-26T04:01:02.000Z</updated>
        <summary type="html"><![CDATA[denite.nvimとfzf.vimって比較記事?

違います。断捨離した結果、fzf.vimで事足りてしまったという記事です。
denite.nvimとfzf.vimは、一見やれることが似ているように見えますが提供しているインタフェースが違います。
denite.nvimの方が拡張性/汎用性が高いです。Pythonスクリプトを呼び出せますし。

どうしてやめたん？

Python3とpipの環境整備に疲れたというのが理由で完全に力不足なだけです。
そもそも使いこなせていなかったっていうのも大きい。自分に必要な機能が何か見直したら次のがあれば十分っぽい。

コマンドの結果の一覧表示(...]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年版 vim + goplsの設定]]></title>
        <id>https://zenn.dev/lunarxlark/articles/2021_vim_gopls</id>
        <link href="https://zenn.dev/lunarxlark/articles/2021_vim_gopls"/>
        <updated>2021-06-26T03:16:35.000Z</updated>
        <summary type="html"><![CDATA[goplsが出てから, vimでも定義ジャンプやシンボル検索、ドキュメント参照等が行えるようになった。
たまにVSCodeを触りvimでの作業を改善できないか考える中で、自身の設定が古いことに気付いた。また、ググってもなかなか出てこなかったのでメモとして記述する。
cf. GitHub dotfiles
いきなりだが、vimrcとvim-lsp-settings/settings.jsonを抜粋して貼り付ける。
以前、GoではLspCodeAction, LspCodeLens等をサポートしていなかったが、今では使えるようになっている。
キーマップに設定している関数は全てGoで使用出来る...]]></summary>
        <author>
            <name>lunarxlark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript * GraphQLのバックエンド設計プラクティス]]></title>
        <id>https://zenn.dev/tatta/books/5096cb23126e64</id>
        <link href="https://zenn.dev/tatta/books/5096cb23126e64"/>
        <updated>2021-06-25T06:49:19.000Z</updated>
        <summary type="html"><![CDATA[Typescriptを使いはじめて1年になるので、バックエンドのWebアプリを設計するときに気を付けていることをまとめました。（※社内勉強会用資料の公開版です。）

Typescriptについては、Next.jsを中心にフロントエンドに関する公開情報が豊富です。一方でバックエンドに関する公開情報が少ないと感じています。（かくいう私もNext.jsからTypescriptデビューしたわけですが）

TypeScript * GraphQL という構成は仕事・趣味で採用されている方も多いのではないでしょうか？
私もその1人です。私のような方のためにも、バックエンドの設計プラクティスについてまとめようと思い筆を取りました。

本書がこれから始める読者にとっては教科書のようになり、既に経験がある読者にとっては意見交換の場になったら嬉しいと考えています。]]></summary>
        <author>
            <name>たった</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Buefy Placeholderの色変更　メモ]]></title>
        <id>https://zenn.dev/koniman/articles/e5355a16a5261c</id>
        <link href="https://zenn.dev/koniman/articles/e5355a16a5261c"/>
        <updated>2021-06-24T13:11:39.000Z</updated>
        <summary type="html"><![CDATA[概要

Nuxt.jsでbuefyを使用。


 満たしたいこと
placeholderで表示される文字列の色を変更。
参考：
CSS：input要素のplaceholderの色を変更する方法
上記の記事参考に記述してみる。

      
        
        input::placeholder {
  color: red;
}


      
      これでは変わらない。

 解決策
原因がわからないので最強の上書きで対応。

      
        
        ::v-deep input::placeholder {
  color: red...]]></summary>
        <author>
            <name>こにまん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.11.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.0"/>
        <updated>2021-06-23T05:57:59.000Z</updated>
        <summary type="html"><![CDATA[Added: support an experimental template for YouTube feed 📺 Demo | Source

Aggregate content from any YouTube channel rss url https://www.youtube.com/feeds/videos.xml?channel_id=<replace_with_channel_id>
Videos are embedded via iframe and loading accelerated by youtube-lite-embed
Ads are reduced thanks to YouTube's policy for embedded videos 🙃
Works on mobile devices with butter smooth horizontal scroll.
Caveat: the template works only with YouTube content. You cannot mix textual RSS feed or other video sources such as Vimeo.
Changed: Default HTML template meta tag adjusted to match convention
Changed: sources in template data is now ordered by last update timestamp (as opposed to alphabetical)
Thank you @PiyushLosalka]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt Sass サーバ起動時のエラー対処法 TypeError: this.getOptions is not a function]]></title>
        <id>https://zenn.dev/katsuking/articles/1fb93bc3bfe70e</id>
        <link href="https://zenn.dev/katsuking/articles/1fb93bc3bfe70e"/>
        <updated>2021-06-23T05:01:34.000Z</updated>
        <summary type="html"><![CDATA[NuxtでSassを使用するにあたって、node-sassとsass-loaderをインストールした後、サーバ起動すると、sass-loaderで以下のエラーが発生しました。

      
        
        ERROR  Failed to compile with 1 errors                                     

ERROR  in ./components/Header.vue?vue&type=style&index=0&id=1a9bb128&lang=sass&scoped=t...]]></summary>
        <author>
            <name>KatsuKiNG👑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[@nuxt/postcss8 使用時 "Cannot find module 0" エラーが発生する場合とその対処]]></title>
        <id>https://zenn.dev/philomagi/articles/nuxt_postcss8_error_with_array_plugins_config</id>
        <link href="https://zenn.dev/philomagi/articles/nuxt_postcss8_error_with_array_plugins_config"/>
        <updated>2021-06-23T02:14:03.000Z</updated>
        <summary type="html"><![CDATA[現象
autoprefixer を v10 にバージョンアップする時、postcssをv8以上に更新する必要が生じた。
そこで、 postcss8の移行ガイド に従って以下を試みた。

Nuxt.js を >= 2.15.3 に更新

@nuxt/postcss8 を追加

その後、 nuxt generate によって静的ファイルを生成しようとしたところ、掲題のエラーによって失敗した。

      
        
        ╭──────────────────────────────────────────────────────────────────────...]]></summary>
        <author>
            <name>philomagi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-06-22のJS: undici 4.0.0(HTTPクライアント)、Next.js 11、Safari 15 Beta]]></title>
        <id>https://jser.info/2021/06/22/undici-4.0.0http-next.js-11-safari-15-beta/</id>
        <link href="https://jser.info/2021/06/22/undici-4.0.0http-next.js-11-safari-15-beta/"/>
        <updated>2021-06-22T00:30:43.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #545 - Node.js向けのHTTPクライアントであるUndici 4がリリースされました。
Introducing Undici@4. After a few years since the first… | by Node.js | Jun, 2021 | Medium
Release v4.0.0 - Unified API, Docs Site, WASM, Redirect and Mocking · nodejs/undici
Undiciは、Node.jsのhttpの代わりとして使えるように、netやtlsを使って一から書き直されているHTTPクライアントです。
It’s implemented from scratch. The old client cannot be due to inefficient design of the internals, as well as years of maintaining legacy APIs!
— Matteo Collina (@matteocollina) February 15, 2021
 

Undici 4.0では、Node.js 10のサポートが終了されています。
maxRedirectionsでのリダイレクトサポート、nockをインスパイアしたモックのサポートなどが含まれています。
また、4.0にあわせて https://undici.nodejs.org/ にウェブサイトが公開されています。
Next.js 11がリリースされました。
Blog - Next.js 11 | Next.js
Next.js向けの設定でLintをするnpx next lintというESLintの連携が追加されています。
Basic Features: ESLint | Next.js…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VIMの起動時間の調査方法]]></title>
        <id>https://zenn.dev/uu64/articles/6518c75cdf5e02</id>
        <link href="https://zenn.dev/uu64/articles/6518c75cdf5e02"/>
        <updated>2021-06-21T14:58:40.000Z</updated>
        <summary type="html"><![CDATA[最近 VIM の起動時間が遅いことが気になり、高速化のために起動時間の内訳を調査した。
歴戦の Vimmer の皆様には常識かもしれないが、私のような VIM 初学者の助けになればと思い調査方法を備忘録として残す。

 --startuptime オプション
vim/neovim には --startuptime という起動時間の内訳を調査するための
オプションが用意されている。
以下のようにして用いる。オプションの後ろに指定したファイルパスに、起動ログが出力される。

      
        
        $ vim --startuptime /tmp/startup.lo...]]></summary>
        <author>
            <name>uu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Denoを（Vimで）開発するときのテンプレートを作った]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/1c48c097020cbc</id>
        <link href="https://zenn.dev/kawarimidoll/articles/1c48c097020cbc"/>
        <updated>2021-06-20T12:06:58.000Z</updated>
        <summary type="html"><![CDATA[Denoの開発をする際に毎回同じような設定を行っているのでテンプレートリポジトリを作りました。
https://github.com/kawarimidoll/deno-dev-template
作業記録（Zenn scrap）はこちら

 Loggerの設定
出力したログがコンソールだけでなくファイルに残っていると後から見直しやすく便利です。
これに関しては以下の記事でまとめました。
https://zenn.dev/kawarimidoll/articles/b1d9bc15aaa99c
ここで作ったlogger.tsを入れておきます。

 Dotenvの設定
dotenvも使用頻度...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ログイン機能】laravel-ui]]></title>
        <id>https://zenn.dev/tanoken729/articles/bada725ab82399</id>
        <link href="https://zenn.dev/tanoken729/articles/bada725ab82399"/>
        <updated>2021-06-19T16:09:58.000Z</updated>
        <summary type="html"><![CDATA[同じプロジェクトでvueを使う場合のみ？
Laravel6からデフォルトで入っているモダンフロントエンドフレームワーク(Vue、React等)をLaravelで使う事ができるライブラリ

 laravel-uiのインストール
以下を実施

      
        
        composer require laravel/ui "^1.0" --dev

php artisan ui vue --auth


      
      
 スカフォールド（足場）を各フレームワークから選べる

      
        
        php artisan ui bo...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron API レシピブック 2021]]></title>
        <id>https://zenn.dev/sprout2000/books/3691a679478de2</id>
        <link href="https://zenn.dev/sprout2000/books/3691a679478de2"/>
        <updated>2021-06-19T08:12:26.000Z</updated>
        <summary type="html"><![CDATA[Electron の多彩な API を実例とともに紹介する Tips 集]]></summary>
        <author>
            <name>sprout2000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[microCMS+NuxtのJamstackブログをS3にデプロイしてみる]]></title>
        <id>https://zenn.dev/ikeo/articles/8dfbfac7ad4cb5226b4d</id>
        <link href="https://zenn.dev/ikeo/articles/8dfbfac7ad4cb5226b4d"/>
        <updated>2021-06-18T02:34:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ヘッドレスCMSを使ってJamstackなブログを構築する機会があったので、使った技術や設定方法をまとめておきます。

 構成
技術構成です。

Headless CMS: microCMS
source repository: GitHub
CI: GitHub Actions
SSG: Nuxt.js
Hosting: Aamazon S3

Headless CMSには日本製のmicroCMSを選びました。
公式ブログにNuxt.jsを使ったJamstackの記事があったため、今回参考にしています。
https://blog.microcms.io/microcms-...]]></summary>
        <author>
            <name>ikeo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vimプラグインを書く言語について と宣伝]]></title>
        <id>https://zenn.dev/octaltree/articles/c5757d9a126415</id>
        <link href="https://zenn.dev/octaltree/articles/c5757d9a126415"/>
        <updated>2021-06-17T14:49:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Rust 1.53が本日リリースされ、rustdocが吐く目次データのフォーマットが変わりました。これによりdocを高速に検索するための自作ツールrustdoc-index[1][2]がstableでも使えるようになりました。

ここからがvimの話です。私がvim-jpのslackコミュニティに参加したのはこのツールの宣伝が目的[3]でした。そこはvim猛者がたくさんいて、2021/04/01に参加してたった2ヶ月で、7年テキトーに使っていたvimについて学ぶことが多くありました。細々とした知見を書き連ねるのはまとめきれないので、この記事ではvimプラグインとプログラミン...]]></summary>
        <author>
            <name>octaltree</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim コマンド]]></title>
        <id>https://zenn.dev/meiden362/articles/7c26bb46197eab7dbe50</id>
        <link href="https://zenn.dev/meiden362/articles/7c26bb46197eab7dbe50"/>
        <updated>2021-06-17T00:42:38.000Z</updated>
        <summary type="html"><![CDATA[コピー，ペースト，切り取り

 一行コピー
yy

 ペースト
p

 範囲選択してコピー
vで押すと範囲選択モードになる．
vim以外のエディタのShift押しながらカーソル移動と同じ．
カーソル移動して
y
でコピー

 切り取り
v
を押すと範囲選択にする．
カーソル移動して
d
で切り取り.
後はpでペースト.

 削除

 一文字削除
x

 一行削除
dd

 元に戻す,元に戻すを戻す
windowsならctrl+zとかctrl+yのやつ．
元に戻すが「undo」で，元に戻すを戻すが「redo」といいます．
undoがu
redoがctrl+u

 移動

 最終行
G
...]]></summary>
        <author>
            <name>kouhirose</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows と WSL2 の neovim を使ったときの 日本語入力をもうちょっとなんとかしたい]]></title>
        <id>https://zenn.dev/kaz399/articles/50b5f2fdc2afcf</id>
        <link href="https://zenn.dev/kaz399/articles/50b5f2fdc2afcf"/>
        <updated>2021-06-15T11:36:29.000Z</updated>
        <summary type="html"><![CDATA[vim(neovim)はとても便利で気に入っていますが、日本語入力が不便です。
vimのモード切替＋IMEの切り替え が、とにかく面倒です。
日本語入力が必要になるときは別のエディタを使ったりしていますが、それはそれで面倒なので、なんとか改善したいです。

 やりたいこと
個人的には

ノーマルモードに移る時には、IMEがオフになってほしい
インサートモードに移る時には、直前のインサートモードでのIME状態に戻ってほしい

と思っています。
ついでに、Windowsのneovimだけでなく日頃の開発環境であるWSL2のneovimでも同様なことをしたいと思っています。

 既存の解決方法...]]></summary>
        <author>
            <name>kaz399</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-06-15のJS: React 18 αリリース、Deno 1.11(Docker Images)、Plotly.js 2.0]]></title>
        <id>https://jser.info/2021/06/15/react-18-a-deno-1.11docker-images-plotly.js-2.0/</id>
        <link href="https://jser.info/2021/06/15/react-18-a-deno-1.11docker-images-plotly.js-2.0/"/>
        <updated>2021-06-15T00:52:12.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #544 - React 18のα版のリリースとReact 18での変更予定についての記事が公開されています。
The Plan for React 18 – React Blog
React 18のα版はライブラリのメンテナー向けで、これにあわせてReactのワーキンググループが作られています。
Discussions · reactwg/react-18
React 18の変更は基本的に ReactDOM.createRootという新しいAPIを使った場合のopt-in方式となっています。
全体的な概要は次のスレッドにまとめられています。
 Introducing React 18 · Discussion #4 · reactwg/react-18
それぞれの変更のサマリは次のようになっています。
Replacing render with createRoot · Discussion #5 · reactwg/react-18


ReactDOM.renderの代わりとなるReact.createRoot というRoot(Container)を作るためのAPIが追加された
Legacy renderのAPIは互換性のために維持される
React 18の機能変更や機能追加は、基本的にこの新しいReact.createRoot 以下のTreeに適応される

Automatic batching for fewer renders in React 18 · Discussion #21 · reactwg/react-18


stateの変更が自動的にbatch処理(グループ化)して、レンダリングがまとめられる
以前あったunstable_batchedUpdatesに相当する処理
意図的にそれぞれの変更でレンダリングする方法としてReactD…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[denops.vimを使って引用符と括弧を操作するVimのプラグインを書いた]]></title>
        <id>https://zenn.dev/tayusa/articles/58d1c20172f662</id>
        <link href="https://zenn.dev/tayusa/articles/58d1c20172f662"/>
        <updated>2021-06-13T15:41:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
かねてから、Denoを触ってみたいけど肝心の作るものがないなと思っていました。
そんな矢先にたまたまdenops.vimとの邂逅を果たしたので、昔作ったプラグインを書き直してみました。
denops.vimについては
https://github.com/vim-denops/denops.vim
https://zenn.dev/lambdalisue/articles/b4a31fba0b1ce95104c9

 作ったもの
https://github.com/tayusa/surround.vim
題目のとおり、引用符と括弧を操作するvimのプラグインです。

 行...]]></summary>
        <author>
            <name>tayusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vim] 重複行の抽出]]></title>
        <id>https://zenn.dev/rapan931/articles/a5dfdb14ad1a1b</id>
        <link href="https://zenn.dev/rapan931/articles/a5dfdb14ad1a1b"/>
        <updated>2021-06-11T10:55:33.000Z</updated>
        <summary type="html"><![CDATA[ソート済みのテキストから重複行の抽出がしたかったので、vimで対応

      
        
        " 重複行は連続で2行まで。
aa
bbb
ccc
cccc
dddddddd
dddddddd
eeeeeeee
eeeeeeee
eeeeeeee.txt
eeeeeeee.txt
fff
fff
ddd
↓
dddddddd
eeeeeeee
eeeeeeee.txt
fff


      
      以下で実施できます。

      
        
        :v/\(^.*$\)\n\1$/delete


      
      行っているこ...]]></summary>
        <author>
            <name>rapan931</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Xcode 13 で Vim mode を有効にする]]></title>
        <id>https://zenn.dev/ykws/articles/xcode13-vim-mode</id>
        <link href="https://zenn.dev/ykws/articles/xcode13-vim-mode"/>
        <updated>2021-06-09T18:22:11.000Z</updated>
        <summary type="html"><![CDATA[Xcode13 で Vim mode が導入されました
Xcode

Vim mode
Many common key combinations and editing modes familiar to Vim users are supported directly within the code editor, using the new bottom bar to show mode indicators.

Xcode 13 Beta Release Notes

Xcode 13 beta requires a Mac running macOS 11.3 or late...]]></summary>
        <author>
            <name>ykws</name>
        </author>
    </entry>
</feed>