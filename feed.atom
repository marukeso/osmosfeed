<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-09-17T01:13:08.608Z</updated>
    <generator>osmosfeed 1.11.1</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Reactのライブラリでたまに見る<Component.Content />みたいなやつを調べた。~雰囲気でJSを書いている仲間へ届け~]]></title>
        <id>https://zenn.dev/mura_chan/articles/93c6027b176ce6</id>
        <link href="https://zenn.dev/mura_chan/articles/93c6027b176ce6"/>
        <updated>2021-09-16T19:22:48.000Z</updated>
        <summary type="html"><![CDATA[ことの発端

      
        
        <Alert variant="danger" onClose={() => setShow(false)} dismissible>
  <Alert.Heading>...</Alert.Heading>
  <p>
    str...
  </p>
</Alert>


      
      React Bootstrapを使用している時にこんなコードを目にし、私はこう思いました。
<Alert.Heading> ってなん...]]></summary>
        <author>
            <name>mm1995tk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactでpropsにスプレッド構文を使った場合にclassNameが意図通り適用されない]]></title>
        <id>https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite</id>
        <link href="https://zenn.dev/takasing/articles/tsx-spread-operator-overwrite"/>
        <updated>2021-09-16T13:32:34.000Z</updated>
        <summary type="html"><![CDATA[ハマったのでメモ。
以下のような Text Component があるとする。
このコンポーネントでは div をラップしているので、Props には HTMLDivElement の attributes をユニオンしており、onClick などをいちいち定義しなくてよいようにしている。

      
        
        export type Props = React.HTMLAttributes<HTMLDivElement> & {
  size: number;
  weight?: Weight;
  align?: Align;
  c...]]></summary>
        <author>
            <name>Takashi Toyofuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactのinteractjsを使って3×3のスライドパズルを作った]]></title>
        <id>https://zenn.dev/beeeyan/articles/4e0737146199d7</id>
        <link href="https://zenn.dev/beeeyan/articles/4e0737146199d7"/>
        <updated>2021-09-16T11:07:38.000Z</updated>
        <summary type="html"><![CDATA[完成形はこんな感じ

動かして中途半端な位置だと他のパズルが動かせないのでご注意ください。
完成すると、「完成!! Congratulations!!」と表示されます。
私のポートフォリオサイトでも試せます。

 本記事内容
ソースコードは公開しているので（上記のcodesandbox内のものも含め）実装方法についてはあまり触れていません。（コメントは残したつもり）
参考情報とか、もしこのソースコードを利用する場合の注意点とか書いてます。
どっちかって言うと、「作ってみた」要素が強いです

 作った経緯
Reactで「コンポーネントをドラッグで動かす」をやってみたかった。
動かせるU...]]></summary>
        <author>
            <name>beeeyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hook Form(v7)を使ったコンポーネント設計案]]></title>
        <id>https://zenn.dev/manalink/articles/manalink-react-hook-form-v7</id>
        <link href="https://zenn.dev/manalink/articles/manalink-react-hook-form-v7"/>
        <updated>2021-09-16T09:22:21.000Z</updated>
        <summary type="html"><![CDATA[本記事ではReact Hook Form(v7)を使ったコンポーネント設計のアイデアについて話します。
https://react-hook-form.com/jp/
React Hook Formはその名の通り、Hooksをベースにフォームのバリデーション設定を記述できるライブラリで、特にv7で大きな変更が入りました。そのため、本記事ではv7前提であることをタイトルで明記しています。
Hooksにフォームのロジックが切り離されることにより、理論的には、TSXで記述されたView層と、バリデーションを司るロジック層を切り離して実装することができるはずです。
オンライン家庭教師マナリンクで...]]></summary>
        <author>
            <name>マナリンク Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TS】NestJSでFirebaseを使ってプッシュ通知を送るモック作成]]></title>
        <id>https://zenn.dev/nekoniki/articles/d4bd396476c107</id>
        <link href="https://zenn.dev/nekoniki/articles/d4bd396476c107"/>
        <updated>2021-09-16T08:37:28.000Z</updated>
        <summary type="html"><![CDATA[概要
今回はNestJSからfirebase-adminを使って端末にプッシュ通知を送るモックを作成する手順の私的メモです。
同様の構成でプッシュ通知の導通を試したい方もいるかなと思い記事にしました。
前提条件としてFirebaseのプロジェクトは作成済みで、アプリ側にもFirebaseは組み込み済み(=プッシュ通知を受け取る準備ができている)ものとします。

 NestJSとは
以下公式サイトです。
https://nestjs.com/
以下のような説明があります。

A progressive Node.js framework for building efficient, ...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.11.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.1"/>
        <updated>2021-09-16T06:39:32.000Z</updated>
        <summary type="html"><![CDATA[Fixed: Unexpected nested element in author field crashes the parser
Thank you @ad-m]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NestJS + serverlessのアプリの一部にバッチ処理を入れる]]></title>
        <id>https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794</id>
        <link href="https://zenn.dev/xxpiyomaruxx/articles/8f7b45d1c4e794"/>
        <updated>2021-09-16T06:15:42.000Z</updated>
        <summary type="html"><![CDATA[NestJSで構築した、ServerlessFrameworkを使ってデプロイするようなアプリケーションについて、普通のエンドポイントと別にバッチ処理を動かしたいことがありました。
結論から言うとbatch処理用のhandlerを用意して

 手法の比較
バッチ処理というキーワードだけだと

NestJSのTask Scheculingを使う
NestJSにAPIの口を普通に作って、APIを定期実行するLambdaを外で作る
APIを定期実行するLambdaをserverlessで新しく用意する
serverlessに新しいfunctionsの口を生やす

みたいな手法が自分にはぱっと思...]]></summary>
        <author>
            <name>ぴよまる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript Compiler API で型を自動生成する]]></title>
        <id>https://zenn.dev/panda_program/articles/typescript-compiler-api</id>
        <link href="https://zenn.dev/panda_program/articles/typescript-compiler-api"/>
        <updated>2021-09-16T02:00:57.000Z</updated>
        <summary type="html"><![CDATA[Compiler API で yaml から型を自動生成する
この記事は TypeScript Compiler API を実際に使って TypeScript の型を自動生成する方法を紹介しています。
記事内では Google Analytics のイベントの型の自動生成にトライしています。
題材として GA を選んだのは、以前 Next.js に Google Analytics（GA） を導入する方法を紹介した記事でGA のイベントで使う型を yaml から自動生成するのはどうか と書いていたからです。
正直なところ、GA のイベントに馴染みのない方もいらっしゃると思うので、最初...]]></summary>
        <author>
            <name>Panda_Program</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでブラケット記法を使うときにハマったこと]]></title>
        <id>https://zenn.dev/katoaki/articles/37a8cff3a8a32a</id>
        <link href="https://zenn.dev/katoaki/articles/37a8cff3a8a32a"/>
        <updated>2021-09-16T00:54:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ブラケット記法でプロパティへアクセスしようとしたら「Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'xxx'. No index signature with a parameter of type 'string' was found on type 'xxx'」のエラーが出ました。
対応について整理しました。

 やってみたこと

 エラーの再現
エラーになった時のソースはこんな感じでした。

      
    ...]]></summary>
        <author>
            <name>katoaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript]モノレポ管理ツール比較検討]]></title>
        <id>https://zenn.dev/okmttdhr/articles/96506133e4efa0</id>
        <link href="https://zenn.dev/okmttdhr/articles/96506133e4efa0"/>
        <updated>2021-09-15T22:44:41.000Z</updated>
        <summary type="html"><![CDATA[モノレポ管理のツールを検討したときのメモ

 Background
自分が所属するチームで開発する JavaScript/TypeScript のプロダクトが増えてきて、同じような内容のリポジトリがいくつも存在している（n個とする）。
変更を加えていくにつれて、それぞれの差分が大きくなり、以下のような問題が発生する。

開発が止まっているプロジェクトの構成が古くなり、修正コストが発生する
開発が複数同時進行している場合、同じような実装を手動で同期する必要がある

これらは共通の基盤等があれば効率的に（理想的にはn分の1の労力で）開発が可能であり、将来的なコストを考えると、いまのうちにその...]]></summary>
        <author>
            <name>okmttdhr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.14.0 がリリースされたので新機能や変更点の紹介]]></title>
        <id>https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0</id>
        <link href="https://zenn.dev/magurotuna/articles/deno-release-note-1-14-0"/>
        <updated>2021-09-15T17:25:27.000Z</updated>
        <summary type="html"><![CDATA[Copyright (c) 2018-2021 the Deno authors. MIT License.
日本時間の昨日（2021 年 9 月 15 日）に Deno の v1.14.0 がリリースされました。
https://deno.com/blog/v1.14
詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。


Web Crypto API の追加

deno lint と deno fmt に対するカスタマイズオプションの追加

URLPattern の実装
ネイティブ実装されたサーバーサイド WebSocket API の...]]></summary>
        <author>
            <name>magurotuna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[値を中継する関数の引数の型にParameters<T>を使う]]></title>
        <id>https://zenn.dev/sunnyone/articles/40a60f08eb391e</id>
        <link href="https://zenn.dev/sunnyone/articles/40a60f08eb391e"/>
        <updated>2021-09-15T15:39:05.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptでは、オーバーロードが行われていたりして、素直に定義したくない関数の型があったりする。例えば、こういう型。

      
        
            interface LogFn {
        <T extends object>(obj: T, msg?: string, ...args: any[]): void;
        (msg: string, ...args: any[]): void;
    }


      
      例えばこういう関数を何かしつつ呼びたいというとき、組み込みの型関数Parameter...]]></summary>
        <author>
            <name>sunnyone</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MicroCMSのAPIをTypeScriptで型カッチリに実装する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2876c8f98eca56</id>
        <link href="https://zenn.dev/sora_kumo/articles/2876c8f98eca56"/>
        <updated>2021-09-15T14:42:47.000Z</updated>
        <summary type="html"><![CDATA[MicroCMSとTypeScript
MicroCMSのAPIをTypeScript上で扱う場合、設定したスキーマに沿って自分で型を書かなければなりません。
この作業はそれなりに手間がかかるので、自動化していきたいと思います。

 今回使用しているソースコード
https://github.com/SoraKumo001/microcms-test

 MicroCMSの設定

 サービスの作成
まずはMicroCMS上でサービスを作成します。
名前は早い者勝ち方式のようなので、空いている名前を設定します。

開発確認用なのでプランは無料を選びます


 APIの作成
今回はAPI...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueの再描画されたコンポーネントをハイライトするChrome拡張を作った]]></title>
        <id>https://zenn.dev/yuichkun/articles/e4e8c7e633439c</id>
        <link href="https://zenn.dev/yuichkun/articles/e4e8c7e633439c"/>
        <updated>2021-09-15T11:07:35.000Z</updated>
        <summary type="html"><![CDATA[作ったもの
記事タイトルの通り、Vue.jsで再描画が走ったコンポーネントの輪郭をフラッシュしてハイライトしてくれるChrome拡張 + npmパッケージを作りました。

GitHub: yuichkun/vue-devtool-flash-updates

 背景
Vueの開発をする上で、Vue.js devtools を使っている人は多いと思います。
React Developer Tools では以前から再描画されたコンポーネントを光らせてくれる機能があり、パフォーマンス問題の解消などに役立っていたのですが、どうやらVue devtoolsにはそれがないらしいことをissueな...]]></summary>
        <author>
            <name>yuichkun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno標準ライブラリ0.107.0で増強されたcollectionsの紹介]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/db250a329c2f22</id>
        <link href="https://zenn.dev/kawarimidoll/articles/db250a329c2f22"/>
        <updated>2021-09-15T04:40:43.000Z</updated>
        <summary type="html"><![CDATA[Deno標準ライブラリのバージョン0.107.0が公開されました。
https://github.com/denoland/deno_std/releases/tag/0.107.0
こちらで増強されたcollectionsというモジュールを紹介します。
https://deno.land/std@0.107.0/collections
その名の通り、集合の扱いを支援してくれるモジュールです。
本記事では0.107.0のリリースで追加された関数を紹介します。
既存のものは以下の記事で解説していますので、あわせてご覧ください。
https://zenn.dev/kawarimidoll/a...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoのWeb Storage APIサポートとその将来について]]></title>
        <id>https://zenn.dev/uki00a/articles/web-storage-api-in-deno</id>
        <link href="https://zenn.dev/uki00a/articles/web-storage-api-in-deno"/>
        <updated>2021-09-14T22:38:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Denoはv1.10からWeb Storage APIをサポートしています。
この記事ではDenoにおけるWeb Storage APIのサポートについて解説します。

 前提
この記事はDeno v1.14を想定して記述されています。

 基本的な使い方

 localStorage
まず、localStorageの使い方について解説します。

      
        main.ts
        localStorage.setItem("foo", "bar");
console.assert(localStorage.getItem("foo") === "...]]></summary>
        <author>
            <name>uki00a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub風のキーボードショートカットをお手軽に追加する]]></title>
        <id>https://zenn.dev/imaginelab/articles/c59db2aa20aecf</id>
        <link href="https://zenn.dev/imaginelab/articles/c59db2aa20aecf"/>
        <updated>2021-09-14T08:29:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
個人開発しているWEBサービスにキーボードショートカットを追加しました。その時に使ったnpmパッケージがお手軽で素晴らしかったので記事にすることにしました。

 hotkey by GitHub
キーボードショートカットを実現するJSライブラリなどを探して、何を使うか検討していたところ、GitHub社が開発するnpmパッケージを見つけました。
https://github.com/github/hotkey
GitHubのサイトのHTMLソースを見ると、data-hotkey というhotkey由来の記述が発見できたので、GitHubのサービス内で実際に使っているようです。...]]></summary>
        <author>
            <name>ima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと]]></title>
        <id>https://zenn.dev/kanon_code/articles/4384426f8f8a80</id>
        <link href="https://zenn.dev/kanon_code/articles/4384426f8f8a80"/>
        <updated>2021-09-14T03:00:14.000Z</updated>
        <summary type="html"><![CDATA[【個人開発】コードレビューサービスKanon CodeでOGP設定するときにハマったこと
フロント：Next.js
ホスティング：vercel
この記事ではOGPの説明は割愛します。

 参考記事一覧
Next.jsにおけるSSG（静的サイト生成）とISRについて（自分の）限界まで丁寧に説明する
nextjsのISRを使うときのfallback指定について理解するまでの話
fallbackに関して【公式】

 下調べが足りなかった箇所

OGPで表示される画像の拡張子
OGPで表示される画像の最小サイズ
fallbackの挙動についての理解


 OGPに関すること
これは自分がドキ...]]></summary>
        <author>
            <name>kanon_code</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebRTC(Amazon Chime SDK JS)で超解像を使ってみた]]></title>
        <id>https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc</id>
        <link href="https://zenn.dev/wok/articles/0019_super-resolution-with-webrtc"/>
        <updated>2021-09-14T01:54:45.000Z</updated>
        <summary type="html"><![CDATA[この記事は、こちらの記事を改変したものになります。
https://cloud.flect.co.jp/entry/2021/09/14/105249

こんにちは。
前回の記事では、Amazon Chime SDK JSを用いたビデオ会議システムやゲーム配信システム(Among us auto mute)において、複数ユーザのビデオ映像を単一の映像に合成することでデータ通信量を削減する方法をご紹介しました。
今回は、データ通信量を削減する別の方法として、ビデオ映像の送信時には解像度を落として受信後に超解像技術を用いる方法を試みてみましたので、これを紹介したいと思います。
下図が実際に...]]></summary>
        <author>
            <name>wok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09-14のJS: Node v16.9.0(Corepack)、Spook.js(Same-Siteでのサイドチャネル攻撃)]]></title>
        <id>https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/</id>
        <link href="https://jser.info/2021/09/14/node-v16.9.0corepack-spook.jssame-site/"/>
        <updated>2021-09-14T01:00:58.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #557 - Node.js 16.9.0リリース。
Node v16.9.0 (Current) | Node.js
プロジェクトごとにnpm/yarn/pnpmなどのパッケージマネージャを切り替えて利用できるCorepackのサポートが実験的に追加されています。Corepackが有効時は、どのパッケージマネージャを使うかをpackage.json の packageManager フィールドで指定して、透過的にインストールや実行できるようになります。
また実験的であるため、利用するにはcorepack enable yarnなどのコマンドがオプトインで必要となっています。
Corepack | Node.js v16.9.0 Documentation
corepack is 何?
その他には、V8 9.3へアップデートしObject.hasOwnとError Causeをサポート、stream.composeの追加などが含まれています。
V8 release v9.3 · V8
Spook.jsという、投機的実行を利用したsame-siteでのサイドチャネル攻撃についての論文が公開されています。
same-site/cross-site, same-origin/cross-originをちゃんと理解する
以前、GoogleがSpectreの概念を説明するものとしてhttps://leaky.page/というサイトを公開しています。
Google Online Security Blog: A Spectre proof-of-concept for a Spectre-proof web
Spook.jsは、これをより実践的に検証した論文で、BitbucketやTumblrなどのユーザーコンテンツがサブドメインにあるサイト同士でのデモ、Googl…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでFirebase経由でGoogle認証を利用する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40</id>
        <link href="https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40"/>
        <updated>2021-09-14T00:01:35.000Z</updated>
        <summary type="html"><![CDATA[Firebaseを使えるようにするまで

 Firebaseでプロジェクトを作成
Firebaseを利用すると、無料で以下のサービスに対応した認証を行えます。
自力で一つ一つ対応するより遙かに簡単です。

上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。

 Google認証の有効化
Firebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。
先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。


 アプリケーションの登録
歯車ボタンからプロジェクトを設定を選びま...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでFirebase経由でGoogle認証を利用する]]></title>
        <id>https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40</id>
        <link href="https://zenn.dev/sora_kumo/articles/2bcd0c9ced9b40"/>
        <updated>2021-09-14T00:01:35.000Z</updated>
        <summary type="html"><![CDATA[Firebaseを使えるようにするまで

 Firebaseでプロジェクトを作成
Firebaseを利用すると、無料で以下のサービスに対応した認証を行えます。
自力で一つ一つ対応するより遙かに簡単です。

上記の一覧はFirebaseにプロジェクトを作成し、Authenticationを選ぶと表示されます。

 Google認証の有効化
Firebaseの中でも最も認証が簡単に実装できるのが、Googleアカウントの認証です。
先ほどのメニューからGoogleを選んで有効にするを押すだけで、ほぼ設定が完了します。


 アプリケーションの登録
歯車ボタンからプロジェクトを設定を選びま...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)]]></title>
        <id>https://zenn.dev/dozo/articles/918416f96ee652</id>
        <link href="https://zenn.dev/dozo/articles/918416f96ee652"/>
        <updated>2021-09-13T21:52:39.000Z</updated>
        <summary type="html"><![CDATA[要素多過ぎ問題
関連記事:
Rustが征くシリーズ過去記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)
SvelteでWebAssemblyでTypeScriptでRollupで: Rustが征く(5)  ← イマココ


前回の記事でTypeScriptとrollup.js、WebAssemblyを繋いだ。
次...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Souzoh Tech Talk #03: Frontend]]></title>
        <id>https://zenn.dev/cacbahbj/articles/4e72e38872d67f</id>
        <link href="https://zenn.dev/cacbahbj/articles/4e72e38872d67f"/>
        <updated>2021-09-13T16:15:39.000Z</updated>
        <summary type="html"><![CDATA[概要
2021/09/01に開催された下記勉強会のメモです
https://mercari.connpass.com/event/221978/
https://www.youtube.com/watch?v=YNLvIkqRC-g
https://engineering.mercari.com/blog/entry/20210823-a57631d32e/

 パネルディスカッション

 メルカリShopsの画面構成

メルカリトップからwebアプリケーションで埋め込み

タブの中がメルカリShopsのWebView
おすすめの商品をタップで商品画面を出す個別のWebView

検...]]></summary>
        <author>
            <name>terry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2のプロジェクトをVue3へマイグレーションする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8</id>
        <link href="https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8"/>
        <updated>2021-09-13T12:25:39.000Z</updated>
        <summary type="html"><![CDATA[Vue 3が正式リリースされてから約1年が経過しました。
Vuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？
この記事ではVue 2からVue 3への移行手順を記述していきます。
参考用のプロジェクトとして以下レポジトリを用意しました。
https://github.com/azukiazusa1/vue3-migrate-test
Vue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。

 移行ビルドを使用する
Vue 2からVue 3へ移行す...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2のプロジェクトをVue3へマイグレーションする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8</id>
        <link href="https://zenn.dev/azukiazusa/articles/c8d76eb56f5fd8"/>
        <updated>2021-09-13T12:25:39.000Z</updated>
        <summary type="html"><![CDATA[Vue 3が正式リリースされてから約1年が経過しました。
Vuetifyのリリース目標である2021年Q3も近づく中でそろそろVue3へのアップデートを検討されている方もいらっしゃることでしょうか？
この記事ではVue 2からVue 3への移行手順を記述していきます。
参考用のプロジェクトとして以下レポジトリを用意しました。
https://github.com/azukiazusa1/vue3-migrate-test
Vue 2からの移行を体験してみたい場合には、vue2-todo-appのタグにチェックアウトしてください。

 移行ビルドを使用する
Vue 2からVue 3へ移行す...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】CtoCのコードレビューサービス Kanon Code]]></title>
        <id>https://zenn.dev/kanon_code/articles/b3019ec509d6f5</id>
        <link href="https://zenn.dev/kanon_code/articles/b3019ec509d6f5"/>
        <updated>2021-09-13T10:38:44.000Z</updated>
        <summary type="html"><![CDATA[CtoCのコードレビューサービス Kanon Codeをリリースしました

本サイト
Kanon Code

 どんなサービス？
レビューして欲しい人がコードを投稿し、自由にレビューしてもらえるサービスです。
ユーザー登録でレビュイーにもレビュワーにもなれます。
また、レビューは販売することも可能で、販売システムはnoteを参考にしています。
もちろん無料でのレビューも可能です。

 技術スタック

Next.js
Lambda(node.js)
DynamoDB
vercel
SAM
Material UI
styled-component


 実際の画面

トップ画面はこのよう...]]></summary>
        <author>
            <name>kanon_code</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでWebサービス開発（Apollo Server/Prisma/Next.js etc...)]]></title>
        <id>https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b</id>
        <link href="https://zenn.dev/katsumanarisawa/articles/3e053fe3627b5b"/>
        <updated>2021-09-13T01:01:28.000Z</updated>
        <summary type="html"><![CDATA[最近開発しているBtoB SaaSサービスの技術スタックを、RailsからNode.jsに移行した。
これにより、フロントエンドもバックエンドも全てをTypeScriptで統一することができた。
特にNode.jsのWebバックエンドの構成について、まだまだ世の中に知見が少ない気がしているので記事にしておく。

 Webバックエンド - Node.js(TypeScript)

 Nexus/Apollo Server (Webサーバー)
GraphQLサーバーとして、コードファーストなアプローチのApollo ServerラッパーであるNexusを使っている。
https://nexu...]]></summary>
        <author>
            <name>Katsuma Narisawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでreact-pdf + react-konvaを使う]]></title>
        <id>https://zenn.dev/kin/articles/658b06a3233e60</id>
        <link href="https://zenn.dev/kin/articles/658b06a3233e60"/>
        <updated>2021-09-12T23:56:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ミチビク株式会社で開発に携わっております、Fiddler25と申します。
最近業務でreact-pdf, react-konvaを使う機会がありました。
画面上にPDFを表示し、PDF上で画像をドラッグ & ドロップする機能が必要だったのですが、Next.jsではインポートして利用できるようにするまでいくつかハマりポイントがあったため、解決方法を記したいと思います。
記事の最後にreact-pdf + react-konvaの簡単なサンプルコードを載せました。
こちらのコードで以下のような機能を作ることができます。

PDFはpdf.jsのExamplesにあるhe...]]></summary>
        <author>
            <name>Fiddler25</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js の Error を丁寧に扱う]]></title>
        <id>https://zenn.dev/takepepe/articles/nextjs-error-handling</id>
        <link href="https://zenn.dev/takepepe/articles/nextjs-error-handling"/>
        <updated>2021-09-12T16:39:51.000Z</updated>
        <summary type="html"><![CDATA[Next.js には組み込みのエラーフォールバック機構が存在します。pages/404.tsxとpages/500.tsx、Unhandled Error を捉えるpages/_error.tsxが組み込みフォールバックです。https://nextjs.org/docs/advanced-features/custom-error-page
実アプリケーションにおいてはこれだけでは不十分なケースが多く、意図的なもの・そうでないものをハンドリングしログ収集に繋げるなど、きちんとエラー設計をしたいところです。

 TypeScript 4.4 で try catch の推論が変更になった
...]]></summary>
        <author>
            <name>Takepepe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.JSでページ遷移する前にbeforeunloadはさみたい時]]></title>
        <id>https://zenn.dev/qaynam/articles/c4794537a163d2</id>
        <link href="https://zenn.dev/qaynam/articles/c4794537a163d2"/>
        <updated>2021-09-12T14:30:16.000Z</updated>
        <summary type="html"><![CDATA[フォームに入力中のデータがの残っていて、ページ遷移する前に注意(window.confirm())を出したくて、色々ハマりましたので、書き残しておきます。
結論から言う、beforeunloadはwindow.location.hrefやF5ようなページの再読み込むが発生する時には発火しますが、Next.jsのRouterのような ブラウザーのhistory APIでの画面遷移の場合は発火しないようです。
解決策をいくつか見つかったので、全部書いておきます。

 解決策1

      
        
        import SingletonRouter, { Router ...]]></summary>
        <author>
            <name>qaynam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript] 複数のKeyから引くMap]]></title>
        <id>https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117</id>
        <link href="https://zenn.dev/mitsuyoshi/articles/f94b89ec17d117"/>
        <updated>2021-09-12T12:36:27.000Z</updated>
        <summary type="html"><![CDATA[type UniqueId = string
type Obj = ...

const numberKeyMap = new Map<number, UniqueId>()
const stringKeyMap = new Map<string, UniqueId>()
const map = new Map<UniqueId, Obj>()

function getObjByNumberKey(key: number): Obj | undefined {
  const id = numberK...]]></summary>
        <author>
            <name>みつよし</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactとかNext.jsのアクセス制御]]></title>
        <id>https://zenn.dev/peg/articles/dff5c97e5c41b0</id>
        <link href="https://zenn.dev/peg/articles/dff5c97e5c41b0"/>
        <updated>2021-09-12T07:00:06.000Z</updated>
        <summary type="html"><![CDATA[課題としては、SPAでのアクセス制御。

ユーザーがログインしたら特定の画面にアクセスできる
ログインしてない場合はアクセスできないようにする。
ログインしている時はログイン画面からリダイレクトする

などなど。
https://zenn.dev/nus3/scraps/d04f5026bab361
https://zenn.dev/catnose99/articles/2169dae14b58b6

 リダイレクトする前に画面が見えてしまう。
functional componentでuseEffectで制御しようとすると、見せたくない画面が一瞬表示される。
https://davec...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjsでの認証の記事を読んだ]]></title>
        <id>https://zenn.dev/peg/articles/61440985120417</id>
        <link href="https://zenn.dev/peg/articles/61440985120417"/>
        <updated>2021-09-12T06:59:39.000Z</updated>
        <summary type="html"><![CDATA[Nextjsでの認証のタイミングがどうなのか調べた。

 記事1
https://www.mikealche.com/software-development/how-to-implement-authentication-in-next-js-without-third-party-libraries

In this way, if you don’t check for authentication on the server, you can prevent adding getServerSideProps to your pages.


And if your pages ...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to chechk is home with useRouter in Next.js(React)]]></title>
        <id>https://zenn.dev/maztak/articles/0a59c556ce4b83</id>
        <link href="https://zenn.dev/maztak/articles/0a59c556ce4b83"/>
        <updated>2021-09-12T05:14:41.000Z</updated>
        <summary type="html"><![CDATA[Llike this👇

      
        
        {router.pathname !== '/' && (
    <div className=''>
	...
    </div>
)}


      
      
 Properties of router
Here is a example that shows what are propeties of router. This url is /search?q=aaa, not / so that we can understand. So don't us...]]></summary>
        <author>
            <name>Takuya Matsuda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TypeScript]非同期処理(promise)の最大並列実行数を5行で制限]]></title>
        <id>https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63</id>
        <link href="https://zenn.dev/sora_kumo/articles/539d7f6e7f3c63"/>
        <updated>2021-09-12T01:55:08.000Z</updated>
        <summary type="html"><![CDATA[非同期処理の並列実行数に関して
大量の処理をAPIに投げるような場合、非同期処理が行われているとすぐに次の処理の実行が可能になります。そのためDoS攻撃のようなリクエストを投げてしまう場合があります。かといって一件ずつ処理待ちをしていると、待機時間が馬鹿になりません。
こういう場合に必要になってくるのが並列実行回数の制限です。

 よくある非同期待ちに関して
最大並列実行数を制御する場合、よくある処理としては実行処理そのものをキューに積んで、最大数を制限しながらキューの中の処理を実行していく方式です。この方法の問題点は、処理内容が10万件とか大規模な処理が必要な場合に、10万件の実行...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Headless UI + Vue3で作るUIコンポーネント]]></title>
        <id>https://zenn.dev/chabatake_i/articles/headlessui_introduction</id>
        <link href="https://zenn.dev/chabatake_i/articles/headlessui_introduction"/>
        <updated>2021-09-11T16:53:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Headless UIはTailwind CSSを開発しているTailwind Labsを中心に開発されているUIライブラリです。特徴として、スタイルは実装者側で自由に制御できること、アクセシビリティはライブラリ側で確保してくれること等が上げられます。React用とVue.js用がそれぞれ用意されていますが、今回はVue.jsでUIコンポーネントを作成してみました。
全体のコードは以下のリポジトリに公開しています。
https://github.com/K-shigehito/headlessui-example

本記事は学習ノートとして投稿させて頂きます。
内容に誤り等...]]></summary>
        <author>
            <name>k-shigehito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[useEffect has amissing dependencyのwarningを解消する]]></title>
        <id>https://zenn.dev/mackay/articles/1e8fcce329336d</id>
        <link href="https://zenn.dev/mackay/articles/1e8fcce329336d"/>
        <updated>2021-09-11T16:20:49.000Z</updated>
        <summary type="html"><![CDATA[こんにちは
マッケイです。
まとめまで書き終わった後に突如ページが消えて、まっさらのページを見ながら、それでもなお不屈の精神で書き上げた記事になります。

 はじめに
僕が運営するReact Bootcampというコミュニティにて、useEffect has amissing dependencyというwarningを解消したいという声を聞きました。
僕自身も体系だった情報がないかと探したところ、見当たらなかったのでこの記事を執筆しました。

 なぜwarningが発生する？
そもそもなぜこのwarningが発生しているのでしょうか？
このwarningを出している本体は、ESLintで...]]></summary>
        <author>
            <name>マッケイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 8のフロントエンド環境をReact+TypeScriptにする]]></title>
        <id>https://zenn.dev/laiso/articles/715543d2cd5552</id>
        <link href="https://zenn.dev/laiso/articles/715543d2cd5552"/>
        <updated>2021-09-11T15:56:43.000Z</updated>
        <summary type="html"><![CDATA[概要
Laravel標準のフロントエンド環境を自分好みにカスタマイズします

 方針

React+TypeScriptで画面を書く
Laravel Jetstream、Breezeを使わない(Livewire/Inertia.jsやAlpine.js、Blade Componentsが付属して入ってくるので)
Bladeテンプレートは画面構成に使わない
SPAにする
SSRはしない
Laravel Mixでアセットを管理する

なぜこうするかというとフロントエンドの環境だけ分離できる状態を維持しておいて、あとで複数人開発への移行やデプロイ分割をしたいためです。

 NPMモジュール...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ScalaとKotlinの分割代入(っぽい機構)の比較]]></title>
        <id>https://zenn.dev/gakuzzzz/articles/1fa87342be1f82</id>
        <link href="https://zenn.dev/gakuzzzz/articles/1fa87342be1f82"/>
        <updated>2021-09-11T15:48:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
世のプログラミング言語には「分割代入(Destructuring Assignment)」と呼ばれる機構を持つものがあります。
メジャーな所では ECMAScript/TypeScript や Python, PHP, Ruby などでしょうか。
実のところ Scala と Kotlin はこの分割代入という言語機構を持っていません。代わりに別の機構によって似たような目的を達成しています。
この記事では両者がとったアプローチを比較してそれぞれの違いについて紹介します。
使用する言語のバージョンは以下の通りです。

TypeScript 4.4

Scala 3.0.2

K...]]></summary>
        <author>
            <name>gakuzzzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[==（等価演算子）と===（厳密等価演算子）の違い]]></title>
        <id>https://zenn.dev/bokutano26/articles/442f11f4ec69bf</id>
        <link href="https://zenn.dev/bokutano26/articles/442f11f4ec69bf"/>
        <updated>2021-09-11T13:56:16.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。この記事ではjavaScriptにおける等価演算子（==）と厳密等価演算子（===）の違いについて解説していきます。実際の現場では、等価演算子は非推奨としているところが多い印象です。その理由も以下の解説を読むことで理解できるかと思います。

 等価演算子（==）と厳密等価演算子（===）の違い
まず初めにMDNを見てみましょう。
MDNには、等価演算子と厳密等価演算子の説明が以下のようにされています。

 等価演算子(==)

等価演算子 (==) は、二つのオペランドが等しいことを検査し、論理値で結果を返します。厳密等価演算子とは異なり、オペランドの型が異なる場合には型の変...]]></summary>
        <author>
            <name>bokutano26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChromaticとstorybookでUIのテストを自動化してみた]]></title>
        <id>https://zenn.dev/kyo9bo/articles/9909ba89c42a77</id>
        <link href="https://zenn.dev/kyo9bo/articles/9909ba89c42a77"/>
        <updated>2021-09-11T09:02:23.000Z</updated>
        <summary type="html"><![CDATA[やったこと
storybook + chromatic + githubActionでUIのテストを自動化させました。
今回mainとdevelopブランチにpull requestが行われた場合に実行させるようにしたので、手順を記事にします。

 手順

 chromaticのセットアップ
chromaticとは、storybookのメンテナーが作っているstorybookをホスティングするサービスです。加えてgithubと連携することで、PRと連携してUIのreviewを効率化してくれます。
現状、似たようなサービスとしてNetlifyがよく使われているように思われますが、sto...]]></summary>
        <author>
            <name>kyosuke kubo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptの全てのasを撲滅するas-safelyというOSSを作ったゾォォ〜]]></title>
        <id>https://zenn.dev/yuitosato/articles/fdbc464f31c292</id>
        <link href="https://zenn.dev/yuitosato/articles/fdbc464f31c292"/>
        <updated>2021-09-11T08:02:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
as-safelyというライブラリを作成しました。
このライブラリを使うと、型判定に失敗したときはその場で例外を投げてくれます。
危険なas(型Assertion)を撲滅し、真にタイプセーフなType Script環境を手に入れましょう。
https://github.com/YuitoSato/as-safely

      
        
        const str1: string = asSafely('1' as unknown, isString);
// => OK

const str2: string = asSafely(1 as u...]]></summary>
        <author>
            <name>Yuito Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ディレクトリ構造を保ったままwebp生成するNode.js/webp対応について]]></title>
        <id>https://zenn.dev/itomise/articles/72ab332bb8f506</id>
        <link href="https://zenn.dev/itomise/articles/72ab332bb8f506"/>
        <updated>2021-09-11T07:31:24.000Z</updated>
        <summary type="html"><![CDATA[本記事の構成は、CIなどは使わずにすべてローカルで完結することを前提としています。


 モチベーション
自分の前回の記事で、Next.jsの画像最適化モジュール「next-optimized-images」を使った環境などについて書いたのですが、
実際に使っていていくつか問題があったため結局実務では使っていません...。
問題としては、

ほぼ空のプロジェクトでも、next-optimized-imagesを使っただけで生成ファイルのサイズが200kbほど増えてしまっていた（詳しくは調べていませんが）
ビルド毎に画像生成を行うので毎回ビルドが遅い

ということがありました。
画像最適...]]></summary>
        <author>
            <name>itomise</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【VSCode Extension】JavaScriptのconsoleを簡単に挿入できる拡張機能を作って公開してみた]]></title>
        <id>https://zenn.dev/rpf_nob/articles/vscode-extension-js-console</id>
        <link href="https://zenn.dev/rpf_nob/articles/vscode-extension-js-console"/>
        <updated>2021-09-11T06:41:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は以下を目的としています。

VSCodeの拡張機能を作って公開する方法の簡単な説明
作った拡張機能の宣伝


 どういうものを作ったのか❓
JavaScript(TypeScript)でconsole.logなどの構文を簡単に挿入できるものを作りました。今まで使用していたほぼ同じような拡張機能があり、ちょっと機能追加したかったのですが、しばらく更新されていないようだったので自身で作り直して公開してみることにしました。
ここからインストールできますのでよかったらインストールして試してみてください🙇‍♂️
https://marketplace.visualstudi...]]></summary>
        <author>
            <name>のふのふ🀄</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vuexの型定義でモジュールでの型解決してくれるようにしてみた]]></title>
        <id>https://zenn.dev/satohjohn/articles/b064cf966a9e20</id>
        <link href="https://zenn.dev/satohjohn/articles/b064cf966a9e20"/>
        <updated>2021-09-11T04:37:38.000Z</updated>
        <summary type="html"><![CDATA[前提
Nuxt.jsでVuexを使っているのでそのときに
https://github.com/ktsn/vuex-type-helper
以下を利用させてもらっていました
ただ、モジュールのstore場合利用時にtypeがうまくはまらないから、どうするんだろうとか色々見てたのですがあんまりいい手段が見つからなく、自分で型定義でテンプレートリテラル部分書いたらどうなんだろうとおもってやってみました。
正直もっと良い手段があると思いますが、今回は自分の勉強踏まえの備忘録。
そして、多分Vue3対応とかが入ったらちゃんと動いていくんだと思うので、後で書き換えればいいし、現状型の問題だけな...]]></summary>
        <author>
            <name>佐藤慧太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【StripeAPI】複数の送金先への山分けを実装する]]></title>
        <id>https://zenn.dev/mamushi/articles/multiple_transfer</id>
        <link href="https://zenn.dev/mamushi/articles/multiple_transfer"/>
        <updated>2021-09-11T04:31:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、ダイゴと申します。
先日、StripeAPI を使った山分けの決済（ 顧客：送金先 = １：n ）を実装する機会があったので、
インプットした情報を忘れないうちに整理しておきたい、と思い記事にしました。
どなたかの参考になれば幸いです。

 実装する機能
プラットフォーム型サービスで、以下のような決済要件を持つものとします。

決済総額のうち、10%をプラットフォーム手数料として徴収
残り 90%を複数の送金先へ均等に山分けする


 サービス全体のイメージ


 Customer
顧客。購入者でありお金を支払うユーザー。上の図で緑。

 Platform
その名の通りプラッ...]]></summary>
        <author>
            <name>Daigo Wakabayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[算数インベーダー(1)]]></title>
        <id>https://zenn.dev/open_sesame/articles/2f6442ccdddb1b</id>
        <link href="https://zenn.dev/open_sesame/articles/2f6442ccdddb1b"/>
        <updated>2021-09-11T01:10:07.000Z</updated>
        <summary type="html"><![CDATA[ゲーム
世の中的には、プログラミングする人＝ゲーマー という方程式があるようで(思い込みか?)
長いことプログラミングをしていますが、パソコンは購入しますが、ゲーム機なるものを購入したこともパソコンやスマホでゲームをすることもありません。

 ゲームと脳
何かを獲得したときや何かをやっつけたときに脳が快楽物質であるドーパミンを大量に分泌するらしいですね。
どうも自分には、これが不要なようで...
ゲームをすることに興味がありませヌ。

 本題に
小学生低学年に算数を楽しんで憶えてしかもドーパミンを大量にあびてもらおうと思い。
1995年ころ京都の幼稚園で実際に使われていたアプリをVu...]]></summary>
        <author>
            <name>open sesame</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js] AmplifyでSSRデプロイする方法]]></title>
        <id>https://zenn.dev/052hide/articles/e1b9f90013c7f2</id>
        <link href="https://zenn.dev/052hide/articles/e1b9f90013c7f2"/>
        <updated>2021-09-10T16:15:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsアプリ作成

      
        
        npx create-next-app --ts

# What is your project named?
nextjs-ssr-amplify-sample


      
      コードが生成されるまで待つ！

 GitHubにあげる
省略
https://github.com/052hide/nextjs-ssr-amplify-sample

 Amplifyにデプロイ

 AWSにログインしてAmplify Consoleを開く
https://ap-northeast-1.console...]]></summary>
        <author>
            <name>Hidetoshi Ota</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsにおけるSPA的遷移の考え方]]></title>
        <id>https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507</id>
        <link href="https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507"/>
        <updated>2021-09-10T10:28:59.000Z</updated>
        <summary type="html"><![CDATA[Next.jsにおけるSPA的遷移の考え方

 背景
インターン先で既存SSR(React)プロジェクトをNext.jsに移行する際に、プロフィールページのタブやモーダルといった箇所でコンポーネントの切り替えと共にURLも変わるようなSPA的遷移の実装を移行するのに苦労した
具体的にはreact-routerのhistory.push()にあたる機能が Next.js ですぐに見つけられなかった
今まではタブなどの切り替え時にhistory.push()をすることで実装していたが、
それがNext.jsではどのようにすれば実装できるかについて議論する

 単語定義

 SPA的遷移
...]]></summary>
        <author>
            <name>ichigo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニア向けライブ配信サービスに配信予約機能が追加されました！]]></title>
        <id>https://zenn.dev/stacklive/articles/bccf6d9a6d0806</id>
        <link href="https://zenn.dev/stacklive/articles/bccf6d9a6d0806"/>
        <updated>2021-09-10T03:40:19.000Z</updated>
        <summary type="html"><![CDATA[配信を予約して事前に告知することが可能になりました
今回のアップデートでは配信をする日時を予約することが可能になり、視聴者に事前にお知らせできるようになりました。予約配信機能により、「いきなり配信をしても視聴者が集まらない」「配信内容に需要があるかわからない」などの不安も軽減されより気軽に配信していただければと思います。


 配信予約をする方法

右上のLIVEボタンをクリック
通常の配信通りにタイトルと概要を記入
配信予約をONにする
配信予約日時を設定して予約する


配信を予約すると、ホーム画面にある予約配信の箇所に表示されるようになります。
また、自分が予約している配信はマ...]]></summary>
        <author>
            <name>StackLive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Namespace Import に補完を効かせる TypeScript プラグインを作った]]></title>
        <id>https://zenn.dev/yuku/articles/4d2f665cf42385</id>
        <link href="https://zenn.dev/yuku/articles/4d2f665cf42385"/>
        <updated>2021-09-10T02:27:35.000Z</updated>
        <summary type="html"><![CDATA[Namespace Import に補完を効かせる TypeScript Language Service Plugin[1]、typescript-plugin-namespace-import を作りました。
そのモチベーションと使い方を紹介します。


この記事・製作物は Named Export と Default Export の是非について主張をするものではなく、それらの話題に関連して作ったものでもありません


 TL;DR

普通のオブジェクトを名前空間として用いると Tree Shaking が効かずバンドルサイズが膨らむ
Namespace Import を用いれば ...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】dynamic-pathでindex.tsxのComponentが一瞬表示される]]></title>
        <id>https://zenn.dev/nitaking/articles/9ff4fca3e8e62e</id>
        <link href="https://zenn.dev/nitaking/articles/9ff4fca3e8e62e"/>
        <updated>2021-09-09T14:24:03.000Z</updated>
        <summary type="html"><![CDATA[何がおきたか


pages/index.tsxの内容が、pages/[hoge].tsxに一瞬表示される


 なぜか

SPAはWEBサーバーからindex.html受け取る

これがデフォルトの表示に関係している？？？




 どうしたか

      
        
          /**
   * dynamic-pathなどの場合、`pages/index.tsx`がSSRのデフォルトとして読み込まれるため、
   * SSRではそのまま、CSRではリダイレクトする.
   *
   *  SSR: Rootがレンダリング -> Contentがレンダリン...]]></summary>
        <author>
            <name>nitaking</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript 環境構築 v11.1]]></title>
        <id>https://zenn.dev/rabbit/articles/d7175e62dc56a5</id>
        <link href="https://zenn.dev/rabbit/articles/d7175e62dc56a5"/>
        <updated>2021-09-09T10:47:54.000Z</updated>
        <summary type="html"><![CDATA[2021/09/時点での Next.js + TypeScript の環境構築忘備録です。
主な環境のバージョン

next: v11.1.0
typescript: v4.3.5
eslint: v7.32.0
@emotion/react: v11.4.1


 1.Next.jsの環境を作成
https://nextjs.org/docs#setup
tpescript用の環境作成コマンドよしなにやってくれる便利なやつ。

      
        
        yarn create next-app --typescript


      
      
 ディレクト...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript 環境構築 v11.1]]></title>
        <id>https://zenn.dev/rabbit/articles/d7175e62dc56a5</id>
        <link href="https://zenn.dev/rabbit/articles/d7175e62dc56a5"/>
        <updated>2021-09-09T10:47:54.000Z</updated>
        <summary type="html"><![CDATA[2021/09/時点での Next.js + TypeScript の環境構築忘備録です。
主な環境のバージョン

next: v11.1.0
typescript: v4.3.5
eslint: v7.32.0
@emotion/react: v11.4.1


 1.Next.jsの環境を作成
https://nextjs.org/docs#setup
tpescript用の環境作成コマンドよしなにやってくれる便利なやつ。

      
        
        yarn create next-app --typescript


      
      
 ディレクト...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StorybookでuseSelectorのモックを追加]]></title>
        <id>https://zenn.dev/takayuri/articles/af583f251ed64d</id>
        <link href="https://zenn.dev/takayuri/articles/af583f251ed64d"/>
        <updated>2021-09-09T08:49:27.000Z</updated>
        <summary type="html"><![CDATA[Storybook、React初心者です。
Storyook内でuseSelector部分をモックにして表示パターンを作成した時のメモです。
(そもそもStorybookでそんなことするのが適切でないかもしれません。)

 前提

"react": 16.13.1
"storybook": 5.3.19
"react-redux": 7.2.0


      
        Fooコンポーネント(一部抜粋)
        import * as selectors from "src/selectors"; // Stateのデータを加工してる関数がまとまっている

export ...]]></summary>
        <author>
            <name>Take</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[まとめ] Jest について]]></title>
        <id>https://zenn.dev/azu369yu/articles/a9989d73b4d19d</id>
        <link href="https://zenn.dev/azu369yu/articles/a9989d73b4d19d"/>
        <updated>2021-09-09T06:18:50.000Z</updated>
        <summary type="html"><![CDATA[Jest とは
https://jestjs.io/ja/
Jestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール
Jest には

テストランナー
カバレッジ計測
モック
アサーション

など テストの実行を含めた 様々な機能がオールインワンで提供されているため
今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる
vueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる

 Jest の設定について

実行環境設定

どの環境で テストを動作させ...]]></summary>
        <author>
            <name>Yu Watanabe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[まとめ] Jest について]]></title>
        <id>https://zenn.dev/azu369yu/articles/a9989d73b4d19d</id>
        <link href="https://zenn.dev/azu369yu/articles/a9989d73b4d19d"/>
        <updated>2021-09-09T06:18:50.000Z</updated>
        <summary type="html"><![CDATA[Jest とは
https://jestjs.io/ja/
Jestは、Facebook社がOSSとして開発を進めている、JavaScriptのユニットテストのためのツール
Jest には

テストランナー
カバレッジ計測
モック
アサーション

など テストの実行を含めた 様々な機能がオールインワンで提供されているため
今後のプロジェクトの展開において、Jest だけでunitテストを作成することができる
vueファイルからなる components に対するテストだけでなく BFF側のテストも作成できる

 Jest の設定について

実行環境設定

どの環境で テストを動作させ...]]></summary>
        <author>
            <name>Yu Watanabe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無名関数内でNuxt.jsのthisを利用したい。]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/311184ad511764</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/311184ad511764"/>
        <updated>2021-09-08T12:56:33.000Z</updated>
        <summary type="html"><![CDATA[これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）

 これダメ

      
        sample.vue
        <script>
  setTimeout(function() {
    this.data = false;
  }, 1000);
</script>


      
      
 JavaScriptだったら

      
        sample.v...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無名関数内でNuxt.jsのthisを利用したい。]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/311184ad511764</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/311184ad511764"/>
        <updated>2021-09-08T12:56:33.000Z</updated>
        <summary type="html"><![CDATA[これって正しいのでしょうかという疑問もかねて。むりやりthisを使ってますがいいんでしょうか。詳しい方、ご教授願います。また、アロー関数だったらどうするのっていう。（アロー関数にいまだになれないから使ってない人）

 これダメ

      
        sample.vue
        <script>
  setTimeout(function() {
    this.data = false;
  }, 1000);
</script>


      
      
 JavaScriptだったら

      
        sample.v...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.js+TypeScriptにjQueryを導入するルーティン]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450"/>
        <updated>2021-09-08T12:44:09.000Z</updated>
        <summary type="html"><![CDATA[触れる回数は多いけどいまだに覚えられないのでメモ
これよりいい方法いっぱいあると思います

 コマンド

      
        コマンドライン
        $ npm install --save-dev jquery @types/jquery


      
      
 nuxt.config.js

      
        nuxt.config.js
        + const webpack = require('webpack')

export default {
// ...省略...
// Build Configuration: https...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.js+TypeScriptにjQueryを導入するルーティン]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/0b72c2e996e450"/>
        <updated>2021-09-08T12:44:09.000Z</updated>
        <summary type="html"><![CDATA[触れる回数は多いけどいまだに覚えられないのでメモ
これよりいい方法いっぱいあると思います

 コマンド

      
        コマンドライン
        $ npm install --save-dev jquery @types/jquery


      
      
 nuxt.config.js

      
        nuxt.config.js
        + const webpack = require('webpack')

export default {
// ...省略...
// Build Configuration: https...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BashのParameter expansionの一部について整理]]></title>
        <id>https://zenn.dev/takasing/articles/parameter-extensions</id>
        <link href="https://zenn.dev/takasing/articles/parameter-extensions"/>
        <updated>2021-09-08T06:12:38.000Z</updated>
        <summary type="html"><![CDATA[シェル芸をする際にいつも何でググればよいかわからなくなるあれのことを Parameter expansion というらしい。
変数が存在しない際にデフォルト値設定したり、変数が存在する場合に変わりの文字を入れたりするあれ。
Next.js のアプリケーションを Vercel にデプロイする際に.env.localをうまく拡張する際に必要になったので一部だけ整理しとく。 .env.localでうまく展開されませんでした。。。

      
        
        #!/bin/bash

NO_VARIABLES=
VARIABLES=var

echo "- operator...]]></summary>
        <author>
            <name>Takashi Toyofuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Trendingを定期的につぶやくTwitter BotをFirebaseで作ってみた]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/github-trending-bot</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/github-trending-bot"/>
        <updated>2021-09-08T03:35:07.000Z</updated>
        <summary type="html"><![CDATA[📦 作ったもの
GitHub Trendingに掲載されたリポジトリを定期的につぶやく Twitter Bot を作りました。
全体のトレンドをつぶやく@gh_trending_と、JavaScript・TypeScript のトレンドをつぶやく@gh_trending_jsの 2 種類があります。



@gh_trending_
@gh_trending_js









仕様はこちらです。

30 分から 1 時間おきに GitHub Trending に掲載されているリポジトリをツイート
一度ツイートたリポジトリは再度掲載されていても 1 週間はつぶやかない
投稿内容は...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型変数に期待していない型推論がきいてしまうとき]]></title>
        <id>https://zenn.dev/qsf/articles/65afdf6a71bbc6</id>
        <link href="https://zenn.dev/qsf/articles/65afdf6a71bbc6"/>
        <updated>2021-09-07T18:25:35.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
NoInfer のような物があればいいのだが，ないのでこれを使う
https://github.com/microsoft/TypeScript/issues/14829#issuecomment-322267089

      
        
        export type NoInfer<T> = T & {[K in keyof T]: T[K]}


      
      
 Background
ものは違いますが，ReactのCustom Hooksを作っていて詰まりました．
以下の例を見てください．

      
   ...]]></summary>
        <author>
            <name>たふみ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[named exportは有害だと考えられます]]></title>
        <id>https://zenn.dev/yuhr/articles/668dba202726bf</id>
        <link href="https://zenn.dev/yuhr/articles/668dba202726bf"/>
        <updated>2021-09-07T16:22:44.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptの話です。default exportを使うことが有害であるかのような言説に異議を唱えるためにこの記事を書きました。
あらかじめ断っておきますが、この記事はTypeScriptを使っているプロジェクトのモジュール構成に関する話です。npmに上げられているようなNode.jsパッケージ間でのimport/exportはまた別のエコシステムが関わってくる話なので、分けて考えてください。Denoにおけるimport/exportに関しては、この記事での議論がそのまま通用します。

 基本的にdefault exportのみを使うべき
筆者の考えでは、named export...]]></summary>
        <author>
            <name>yuhr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[フロントエンド初心者がVueで作ったブログをNuxtのSSGで作り直した時につまずいたこと]]></title>
        <id>https://zenn.dev/shlia/articles/a6c2fb22ab7c6e</id>
        <link href="https://zenn.dev/shlia/articles/a6c2fb22ab7c6e"/>
        <updated>2021-09-07T10:16:24.000Z</updated>
        <summary type="html"><![CDATA[概要
業務で触れる技術はバックエンド関連が主で、フロントエンドを関連の技術に触れることが少ないのですが、勉強を兼ねてVue.jsとContentfulで作成したブログをSPAで、Netlifyにホスティングしていました。
その後、パフォーマンスの向上+OGPの設定を目的として、Nuxt.jsのSSG機能を使って書き換えてみました。

 リンク

 リプレイス後
https://github.com/shira79/MyBlog
https://shira-nuxt-static.netlify.app/
使用技術は以下です。
Nuxt.js or Next.js + Contenfu...]]></summary>
        <author>
            <name>shira79</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supabaseでuseswrを使ってみる。]]></title>
        <id>https://zenn.dev/byanbyan/articles/supabase_swr</id>
        <link href="https://zenn.dev/byanbyan/articles/supabase_swr"/>
        <updated>2021-09-07T08:07:18.000Z</updated>
        <summary type="html"><![CDATA[Supabase で swr 使えるのだろうか、、、
やってみたのでまとめ。
参考 🐈 Github
https://github.com/supabase/supabase/discussions/764
SWR
https://swr.vercel.app/ja
Supabase
https://app.supabase.io/


プロジェクト内に
pages/apiフォルダを作成し、supabase からデータ取得する処理を書く。


useSWR を使って、pages/apiからデータを取得する。



 0.supabase のクライアントの設定
https://supaba...]]></summary>
        <author>
            <name>ゆゆゆ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Issuesをキレイに外部公開するサービス「2go」作ってみた]]></title>
        <id>https://zenn.dev/nice2have/articles/aa15eccd13a23c</id>
        <link href="https://zenn.dev/nice2have/articles/aa15eccd13a23c"/>
        <updated>2021-09-07T07:58:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回初めて個人開発で作ったサービスを公開します。今までも何回かトライしていたのですが、なかなか公開までに至らないうちに、なにか問題にぶちあたったり、時間がかかりすぎて情熱が冷めてしまったりしていたので、今回はまずはスモールスタートで公開して改善していくことを心がけました。大体今回の公開まで、開発を始めてから1ヶ月程度になります。毎日朝4時半に起きて、子どもたちが起きる7時過ぎまでを開発時間として取り組んできました。


 どんな人向け？
自分で作っているサービスの開発ロードマップをユーザーに公開するために、都度ブログを書いたりするのも大変ですよね。もし、自分のサービスのソー...]]></summary>
        <author>
            <name>Nakajima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09-07のJS: Electron 14.0.0、node-fetch 3.0.0、replace-jquery]]></title>
        <id>https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/</id>
        <link href="https://jser.info/2021/09/07/electron-14.0.0-node-fetch-3.0.0-replace-jquery/"/>
        <updated>2021-09-07T01:36:56.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #556 - Electron 14.0.0がリリースされました。
Electron 14.0.0 | Electron Blog
依存がそれぞれChromium 93、Node.js 14.17.0、V8 9.3へとアップデートされています。
app.allowRendererProcessReuseオプションの削除、worldSafeExecuteJavaScriptオプションを削除(trueがデフォルト)されています。
また、Electron 12でDeprecatedとなっていたremoteモジュールを削除し、@electron/remoteという外部モジュールへと変更されています。
contextBridgeを使っていく方向になっています。
Electron（v.14.0.0 現在）の IPC 通信入門 - よりセキュアな方法への変遷 - Qiita
Node.jsでのFetch APIのpolyfillライブラリであるnode-fetch 3.0.0がリリースされました。
Release v3.0.0 · node-fetch/node-fetch
破壊的な変更として、Node.jsのESMのサポート、Node.js 12未満のサポート終了されています。
timeoutオプションは不要となったため削除されています。
Should we deprecate timeout in favor of AbortController? · Issue #523 · node-fetch/node-fetch
一方で、非標準なhighWaterMarkオプションの追加されています。
When users clone(), automatically create streams with custom highWaterMark · Issue #38…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでSoracomの基地局の位置情報を取得できるAPIを実行する]]></title>
        <id>https://zenn.dev/bull/articles/8f1d28c8cfcdf1</id>
        <link href="https://zenn.dev/bull/articles/8f1d28c8cfcdf1"/>
        <updated>2021-09-06T14:02:36.000Z</updated>
        <summary type="html"><![CDATA[基地局の位置情報を取得できる API を公開しました！
に記載されているAPIを利用して位置情報を取得してみます。

 はじめに

 Soracom APIの使い方
リファレンスが公開されているのでこちらから使い方を試してみることが可能です
https://users.soracom.io/ja-jp/tools/api/reference/

 SoracomのAPIから基地局情報を取得するために必要なAPI
少なくとも以下の3つのAPIを実行する必要がありました。

APIトークンの取得(認証キーを利用してAPIを実行してトークンを取得します)
3G の場合： MCC（Mobile ...]]></summary>
        <author>
            <name>bull</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjs + typescript + jest + enzyme の最小サンプルを動かしたい]]></title>
        <id>https://zenn.dev/matsutoba/articles/fba1e8a7c41181</id>
        <link href="https://zenn.dev/matsutoba/articles/fba1e8a7c41181"/>
        <updated>2021-09-06T11:24:10.000Z</updated>
        <summary type="html"><![CDATA[nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。
先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。

 やりたいこと

ボタンを押したらテキストが変わるコンポーネントを作る。
ボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい


 動かした環境

macOS 11.5.2
Node.js 14.17.0
yarn 1.22.10

後述の cr...]]></summary>
        <author>
            <name>matsutoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nextjs + typescript + jest + enzyme の最小サンプルを動かしたい]]></title>
        <id>https://zenn.dev/matsutoba/articles/fba1e8a7c41181</id>
        <link href="https://zenn.dev/matsutoba/articles/fba1e8a7c41181"/>
        <updated>2021-09-06T11:24:10.000Z</updated>
        <summary type="html"><![CDATA[nextjs + typescript + jest + enzyme の組み合わせで、UIを操作したテストを動かしたいと思います。
先人の詳しい記事がたくさんあるのですが、リッチなサンプルが多かったので、さらっと動かして確認したいときのための最小サンプルをメモしておきたいと思います。

 やりたいこと

ボタンを押したらテキストが変わるコンポーネントを作る。
ボタンを押す前、押した後のテキストの内容を、自動テストするサンプルを、Jest + enzyme で作りたい


 動かした環境

macOS 11.5.2
Node.js 14.17.0
yarn 1.22.10

後述の cr...]]></summary>
        <author>
            <name>matsutoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next jsをGitHub Pageにデプロイしたときにnext/linkが正しく遷移するようにする]]></title>
        <id>https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377</id>
        <link href="https://zenn.dev/mochi/articles/dc0cd0d6567f21f98377"/>
        <updated>2021-09-06T09:06:53.000Z</updated>
        <summary type="html"><![CDATA[状況
Nextjs のプロジェクトで GitHub Pages にデプロイし 下のようなコードを書いた時に https://aaaaaaaaaaaaaa.github.io/bbbbbbbbbbbb/page1に遷移してほしいのに https://aaaaaaaaaaaaaa.github.io/page1に遷移してしまう。

      
        
        <Link href="/page1">
  <a>リンク</a>
</Link>


      
      
 解決策

 GitHub 側
GitHub の...]]></summary>
        <author>
            <name>mochi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gatsby.js + Emotion で環境構築]]></title>
        <id>https://zenn.dev/rabbit/articles/9b439fb4278ab9</id>
        <link href="https://zenn.dev/rabbit/articles/9b439fb4278ab9"/>
        <updated>2021-09-06T04:19:33.000Z</updated>
        <summary type="html"><![CDATA[Gatsby.jsにEmotionを導入した際の忘備録です。
今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。
https://github.com/tsuki-lab/gatsby-emotion-sample

Emotionの導入以降を参照したい場合は 1.Emotionをインストール から読み進めてください。


本記事は、javascriptベースのGatsby.jsを対象としていますが、typescriptの環境でも同様に導入可能です。最後に、typescript対応の追記をしてあります。

この記事は以下のバージョン時点の情報です。...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境]]></title>
        <id>https://zenn.dev/sprout2000/articles/a4c59a294dcbae</id>
        <link href="https://zenn.dev/sprout2000/articles/a4c59a294dcbae"/>
        <updated>2021-09-06T03:23:34.000Z</updated>
        <summary type="html"><![CDATA[サマリー
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone https://github.com/sprout2000/react-ts.git
% cd react-ts
% docker-compose up


      
      localhost:3000 を開きましょう。これだけです。
ローカルに Node.js がインストールされていなかったり、インストールされていてもこのコンテナで利用されているバージョンとは異なっていたりしても同じ（仮想）環境でプロジェク...]]></summary>
        <author>
            <name>k_touge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの Incremental Static Regenerationを試してみた]]></title>
        <id>https://zenn.dev/kamy112/articles/67ea5fca437d05</id>
        <link href="https://zenn.dev/kamy112/articles/67ea5fca437d05"/>
        <updated>2021-09-06T01:46:54.000Z</updated>
        <summary type="html"><![CDATA[Incremental Static Regeneration とは
Incremental Static Regeneration（ISR）はNext.jsのビルドパターンの内の１つです。
直訳すると"段階的な静的再生成"ですね。簡単に説明すると、

クライアント側のリクエストに対し静的にビルドされたページを返す
有効期限を越えた後にアクセスがあった場合、バックグラウンドで静的ページを再生成する
次回のアクセス時に、再生成されたページを表示する

という流れとなります。
俗に言うstale-while-revalidateというキャッシュ戦略をNext.js上で実現可能にしたもので...]]></summary>
        <author>
            <name>Kamy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rustのimage::load_from_memory遅すぎ問題]]></title>
        <id>https://zenn.dev/dozo/articles/14bc23b488c95a</id>
        <link href="https://zenn.dev/dozo/articles/14bc23b488c95a"/>
        <updated>2021-09-05T23:55:11.000Z</updated>
        <summary type="html"><![CDATA[load_from_memoryを迂回すればなんとかなる
関連記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)


こんな記事がある
https://qiita.com/yokra9/items/f9e98a9b47fe2d1234b0
(^_^;)煽ってんなぁ。。。
VanillaJS(素のJSのこと), WA...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Typescript]Jest入門を進めてみる（前半）]]></title>
        <id>https://zenn.dev/296u/articles/7175641f1c4492</id>
        <link href="https://zenn.dev/296u/articles/7175641f1c4492"/>
        <updated>2021-09-05T23:48:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Reactをtypescriptで始めたはいいものの、テストを書こうとすると、どういったテストを書けば良いのか、書いてもtypeエラーになることがままある。
その度にドキュメントを読みに行ったり、エラー文を検索したりするのだが、毎回解決に時間がかかっていた。（特に最初の頃はJestの構文を間違えているのが問題なのか、enzymeの構文を間違えているのが問題なのかもわからず）
そこで一度Jest側を体系的に勉強しなおそうと思い至った。
せっかくなので、ドキュメンのうち「はじめに」部分の内容について、若干コードを付け足しながら記事にしてみようと思う。

 はじめに
対象...]]></summary>
        <author>
            <name>296u</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtの動的ルーティングのSSGと静的サイトホスティングの404]]></title>
        <id>https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057</id>
        <link href="https://zenn.dev/crayfisher_zari/articles/ed0a69e45f1057"/>
        <updated>2021-09-05T14:44:24.000Z</updated>
        <summary type="html"><![CDATA[Nuxtの動的ルーティングの静的サイトジェネレート（SSG）と静的サイトホスティングサービス（Netlify、Vercel、GitHub Pages）の404ページの挙動について調べました。
結論からすると、存在しない動的ルーティングで404ページを表示させたい場合はvalidate関数()を設置する必要があります。

デモはこちら
コードはこちら


 やりたいこと
静的ジェネレート後、存在しないIDのURL（例：/blog/9999）の場合は404ページに飛ばしたいです。

 前提
/blog/以下が動的ルーティングになっています。動的ルーティングのID番号を拾ってAPIから該当デー...]]></summary>
        <author>
            <name>にしはら</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hook Form使ってみる]]></title>
        <id>https://zenn.dev/kimura141899/articles/ad3bfa42f25724</id>
        <link href="https://zenn.dev/kimura141899/articles/ad3bfa42f25724"/>
        <updated>2021-09-05T11:24:40.000Z</updated>
        <summary type="html"><![CDATA[React Hook Formとは？
公式

https://react-hook-form.com/jp/

React Hookを利用した柔軟かつ拡張可能な使いやすいフォームバリデーションライブラリ。

 導入するメリット

バリデーションが比較的簡単に実装できる
レンダリングが抑えられる⇒パフォーマンス向上
依存性が少ない
軽量なパッケージ
公式のドキュメントが豊富&日本語
などがあげられるようです。


 環境構築

Next.js
TypeScript
react-hook-form "^7.14.2"
MaterialUI(別記事予定)

今回はreact-hoo...]]></summary>
        <author>
            <name>taku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでIMappable(Functor)]]></title>
        <id>https://zenn.dev/eagle/articles/functor-in-ts</id>
        <link href="https://zenn.dev/eagle/articles/functor-in-ts"/>
        <updated>2021-09-05T10:53:35.000Z</updated>
        <summary type="html"><![CDATA[本記事について
IMappableというインターフェースを定義することを動機として
型レベル関数という概念を導入します。
後半では型レベル関数を用いてApplicativeやMonadに相当するインターフェースの定義や、
2引数以上の型レベル関数の定義を行ってその実用可能性を示します。

 IMappable導入の動機と障害
次の2つの関数を考えます。

      
        
        const mapArray: <A, B>(f: (a: A) => B) => (fa: A[]) => B[] =
  (f) => (fa)...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Firestore×Apexchartsでグラフ描画する方法]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3</id>
        <link href="https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3"/>
        <updated>2021-09-05T10:10:46.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

ApexChartsをNext.jsで使う方法
データをべた書きしてグラフ化
データをFirestoreから取得してグラフ化


 参考にした記事

https://qiita.com/IchiLab/ite...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Firestore×Apexchartsでグラフ描画する方法]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3</id>
        <link href="https://zenn.dev/mizuneko4345/articles/d7ba5603dba1c3"/>
        <updated>2021-09-05T10:10:46.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Cloud Firestoreからデータフェッチとレンダリングを行いApexchartsでグラフ化する方法を解説していきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

ApexChartsをNext.jsで使う方法
データをべた書きしてグラフ化
データをFirestoreから取得してグラフ化


 参考にした記事

https://qiita.com/IchiLab/ite...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[WIP] Typescriptで書く関数型プログラミング]]></title>
        <id>https://zenn.dev/sterashima78/books/9dd0db90a6e532</id>
        <link href="https://zenn.dev/sterashima78/books/9dd0db90a6e532"/>
        <updated>2021-09-05T09:09:21.000Z</updated>
        <summary type="html"><![CDATA[Typescript での開発を普段行っている方向けに関数型プログラミングの要素の一部を紹介するものです。
関数型言語やその背景にある理論を紹介することは意図していません。
そのあたりのポリシーは『はじめに』に記載しているので御覧ください。

有料設定にしていますが基本的にはすべての章を無料で公開するつもりです。
気が向いた方や内容の充実を希望する方は支援いただけると幸いです。]]></summary>
        <author>
            <name>sterashima78</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gatsby.js + TypeScript + Linaria で環境構築]]></title>
        <id>https://zenn.dev/rabbit/articles/2dea91c4949604</id>
        <link href="https://zenn.dev/rabbit/articles/2dea91c4949604"/>
        <updated>2021-09-05T08:36:45.000Z</updated>
        <summary type="html"><![CDATA[以前まで、Emotion を用いてGatsby.jsを使っていたのですが、
iricoさんの「ReactのCSSの選択肢を比較してみた」という記事を読んで、Linariaに興味を持ち始めました。
zero runtimeとのことで、パフォーマンス向上が期待できるのは嬉しい点です。
https://linaria.dev/
今回は、LinariaとGatsbyの組み合わせでの記事が少なかったので忘備録としてこの記事を残します。
今回のコードは、下記リポジトリに保存してあります。何かあった時には参考になればと思います。
https://github.com/tsuki-lab/gatsby-...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[firestoreの型安全クエリができた]]></title>
        <id>https://zenn.dev/arark/articles/b5dc5e642e8d4e</id>
        <link href="https://zenn.dev/arark/articles/b5dc5e642e8d4e"/>
        <updated>2021-09-05T07:44:14.000Z</updated>
        <summary type="html"><![CDATA[以前超型安全firestoreができたと言った者なんですが、クエリも型安全にできたので紹介します。
例えばfirestoreでクエリするとき、where(age, ==, 30)したからtypescriptでもage:30で型ついてくんねえかな〜〜〜〜〜〜〜〜〜〜って思ったことある人人いませんか。これができます。さらに、firestore特有のクエリの制限、例えばage > 30とheight < 150を同時にできないみたいなそういうのも検知します。

 準備

      
        
        npm i firefuse firebase@9


    ...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d</id>
        <link href="https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d"/>
        <updated>2021-09-05T04:36:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
初めまして、みずねこです。
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

Firebaseのアプリ作成と初期設定
Firebase Authenticationで認証機能を実装
Materia-UIで認証画面のデザイン


 参考に...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebase  Authenticationでメール・パスワード認証(Cookie)を実装]]></title>
        <id>https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d</id>
        <link href="https://zenn.dev/mizuneko4345/articles/f5a7c5c0eeba1d"/>
        <updated>2021-09-05T04:36:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
初めまして、みずねこです。
Next.js+TypeScript+firebaseの構成で、推しのTWICEミナに関連した「ポモドーロタイマー」を開発しています。
この記事では、Next.jsとFirebase Authenticationを使ったメール・パスワード認証機能の実装とログイン画面のデザインの解説をしていきます。
何か間違っている点などありましたらご指摘いただけると幸いです。🙏

 解説すること

Firebaseのアプリ作成と初期設定
Firebase Authenticationで認証機能を実装
Materia-UIで認証画面のデザイン


 参考に...]]></summary>
        <author>
            <name>みずねこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[型レベルユニットテストのススメ]]></title>
        <id>https://zenn.dev/arark/articles/356a13c38a612b</id>
        <link href="https://zenn.dev/arark/articles/356a13c38a612b"/>
        <updated>2021-09-05T03:19:16.000Z</updated>
        <summary type="html"><![CDATA[準備

      
        
        export type Extends<E, A> = A extends E ? true : false;
export type NotExtends<E, A> = A extends E ? false : true;
export type Exact<A, B> = Extends<A, B> extends true
  ? Extends<B, A> extends true
    ? true
    : false
  : false;
expo...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FirestoreでDocumentのSnapShotからSubCollectionを取得する]]></title>
        <id>https://zenn.dev/matsuei/articles/908278e0c22eec</id>
        <link href="https://zenn.dev/matsuei/articles/908278e0c22eec"/>
        <updated>2021-09-05T02:30:12.000Z</updated>
        <summary type="html"><![CDATA[FirestoreではDocumentのSnapShotから、そのDocumentに紐づくSubCollectionを取得出来ないようになっています。
クエリで特定のDocumentのSnapShotを取得した後にSubCollectionを取得するには一手間必要なので、その方法を紹介します。

 例に使うデータ構造
ルートにUsersコレクションを持ち、各ユーザードキュメントがSubCollectionでPetsを持つデータ構造を考えます。



Collection
Document
Data(key)
Data(value)
SubCollection
Document
Data(...]]></summary>
        <author>
            <name>matsuei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[正確なCamelCaseのTemplate Literal Type定義を目指した]]></title>
        <id>https://zenn.dev/stomita/articles/9d1408c3447cd3</id>
        <link href="https://zenn.dev/stomita/articles/9d1408c3447cd3"/>
        <updated>2021-09-04T23:09:06.000Z</updated>
        <summary type="html"><![CDATA[概要
CamelCase<S>を TypeScriptのtemplate literal typesで実装するのは、ネット上にいくつかサンプルコードであがっているのを見たが、見つけたものはすべて不完全だった。types-festに含まれているCamelCase<S>もやはりおかしい。
とはいえ正確なCamelizationの定義というものがあるのかどうかもよく知らない。なので、npmで公開されているcamelcase の動作に近づけたCamelCase<S>の型定義を作成してみた。
ポイントは以下

複数区切り文字('-', '_', '.')に対...]]></summary>
        <author>
            <name>Shinichi Tomita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3】Vueで宣言した変数の値をCSSで読み込む]]></title>
        <id>https://zenn.dev/tentel/articles/736bfeaaa60ab3</id>
        <link href="https://zenn.dev/tentel/articles/736bfeaaa60ab3"/>
        <updated>2021-09-04T21:47:11.000Z</updated>
        <summary type="html"><![CDATA[Vue3.2からSFCの<style>内でのv-bind利用が実験的機能では無くなり、正式に導入されました。

 概要
SFCのdataもしくはsetup内で宣言した値を<style>で利用できます。

実際の値はハッシュ化されたCSS変数として書き出されるため、CSSは静的な状態です。
また、値が変更された場合はハッシュ化されたCSS変数が書き換えられるため、リアクティブです。


 書き方
書き方はシンプルで、<script>内で宣言した変数名を以下のようにv-bind()に渡すことで、<style>内で利用可能です。

      
...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovim luaのパフォーマンス計測方法]]></title>
        <id>https://zenn.dev/nazo6/articles/410be6ec751f9e</id>
        <link href="https://zenn.dev/nazo6/articles/410be6ec751f9e"/>
        <updated>2021-09-04T16:09:37.000Z</updated>
        <summary type="html"><![CDATA[やり方
plenary.nvimのprofilerを使います
plenary.nvimがインストールしてあれば使いかたは簡単で、計測したい範囲を

      
        
        require'plenary.profile'.start("profile.log")

-- code to be profiled

require'plenary.profile'.stop()


      
      のように囲むだけです。
これでinit.luaであれば~/.config/nvim以下にprofile.logができます。

 グラフにする
が、このログは超...]]></summary>
        <author>
            <name>nz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript + React + Jikan API で練習プロジェクト]]></title>
        <id>https://zenn.dev/kyohei1212/articles/4318cba26e9885</id>
        <link href="https://zenn.dev/kyohei1212/articles/4318cba26e9885"/>
        <updated>2021-09-04T16:04:27.000Z</updated>
        <summary type="html"><![CDATA[Jikan API(public API)を使ってTypescriptを勉強します。
基本は検索機能を使ってAnime Objectを取得します。
検索はカスタムフックを作ります。(importは省略してます。)

      
        
        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {
    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...]]></summary>
        <author>
            <name>Kyohei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript + React + Jikan API で練習プロジェクト]]></title>
        <id>https://zenn.dev/kyohei1212/articles/4318cba26e9885</id>
        <link href="https://zenn.dev/kyohei1212/articles/4318cba26e9885"/>
        <updated>2021-09-04T16:04:27.000Z</updated>
        <summary type="html"><![CDATA[Jikan API(public API)を使ってTypescriptを勉強します。
基本は検索機能を使ってAnime Objectを取得します。
検索はカスタムフックを作ります。(importは省略してます。)

      
        
        export default function useSearchAnime(query: string, numberToReturn: number): basicAnimeInfo[] {
    const [baiList, setBaiList] = useState<basicAnimeInfo[]>(...]]></summary>
        <author>
            <name>Kyohei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでの状態管理]]></title>
        <id>https://zenn.dev/peg/articles/f13b2608f682aa</id>
        <link href="https://zenn.dev/peg/articles/f13b2608f682aa"/>
        <updated>2021-09-04T13:05:11.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでの状態管理が気になったのでメモ。

Next.js の状態管理 2020

によく纏まっていた

 Context API
https://robinvdvleuten.nl/blog/how-to-use-react-context/

 Redux

Redux 入門 〜Reduxの基礎を理解する〜



 サンプル実装
サンプルの実装は公式のがわかりやすい

https://github.com/reduxjs/redux/blob/master/docs/introduction/Examples.md


 Recoil
Facebook製

Recoilは20...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PhpStormでReact開発環境を整える]]></title>
        <id>https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87</id>
        <link href="https://zenn.dev/nimusuke6/articles/fa95a17c5d5f87"/>
        <updated>2021-09-04T12:44:25.000Z</updated>
        <summary type="html"><![CDATA[Node.js（+Yarn）のインストール


anyenvをインストール
anyenvでnodenvをインストール
nodenvでNode.jsをインストール

Yarnをインストール


      
        
        npm install -g yarn


      
      
 Reactプロジェクトの作成

      
        
        npx create-react-app my-app --template typescript
cd my-app
yarn start


      
      
      
    ...]]></summary>
        <author>
            <name>nimusuke6</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[URLを解析するQsを丁寧に説明してみた]]></title>
        <id>https://zenn.dev/fujiyama/articles/bf26790ed81964</id>
        <link href="https://zenn.dev/fujiyama/articles/bf26790ed81964"/>
        <updated>2021-09-04T12:30:58.000Z</updated>
        <summary type="html"><![CDATA[Qsって何？

npm公式

クエリの解析，文字列化をするライブラリです．
使っていて非常に便利なので一旦まとめようと思います．

 基本的な使い方

      
        
        import qs from 'qs';  // (以下省略)

const obj = qs.parse('a=c');  // { a: 'c' }

const str = qs.stringify(obj);  // 'a=c'


      
      簡単に言うと，parseはURLなどの文字列をオブジェクトに変換するメソッドで， stringifyはオブジェクトをURL...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ddc.vimのlsp機能を強くする with nvim-lsp]]></title>
        <id>https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp</id>
        <link href="https://zenn.dev/matsui54/articles/2021-09-03-ddc-lsp"/>
        <updated>2021-09-04T09:04:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ddc.vimのLSPまわりの設定が良い感じになってきたので共有します。
前提として、補完ソースに関してはこちらを入れてください。
https://github.com/Shougo/ddc-nvim-lsp
最終的にはこんな感じで使えるようになります。


 補完候補のプレビュー & signature help
以下のgifにあるような機能で、前者は、補完候補を選択したときにその詳細情報をfloating windowに表示します。signature helpは、補完候補を選択して関数の中身を書いているときに、引数などの情報を表示する機能です。

vim-lsp...]]></summary>
        <author>
            <name>matsui54</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする]]></title>
        <id>https://zenn.dev/gomi_ningen/articles/f1c285f586215b</id>
        <link href="https://zenn.dev/gomi_ningen/articles/f1c285f586215b"/>
        <updated>2021-09-04T07:30:17.000Z</updated>
        <summary type="html"><![CDATA[Ajv の JTDSchemaType で複雑な JSON オブジェクトをバリデーションする際の記述方法がわからなくて 30 分くらい溶けたのでメモっておきます。

 配列

      
        
        export interface AppParameters {
    items: string[]
}

const AppParametersSchema: JTDSchemaType<AppParameters> = {
    properties: {
        items: { elements: { type: 'string' }...]]></summary>
        <author>
            <name>ゴミ人間</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue3】v-memoディレクティブでレンダリングを最適化する]]></title>
        <id>https://zenn.dev/tentel/articles/886dc6b615528f</id>
        <link href="https://zenn.dev/tentel/articles/886dc6b615528f"/>
        <updated>2021-09-04T06:27:40.000Z</updated>
        <summary type="html"><![CDATA[Vue3.2からv-memoディレクティブが追加されました。
v-memoディレクティブを利用することで、不要な再レンダリングを省略することができるので、パフォーマンスの向上につながります。

 概要
v-memoディレクティブは、指定したすべての値が最後のレンダリング結果と同じであれば、サブツリー全体の再レンダリングをスキップします。

DOMの更新だけでなく、仮想DOMのVNodeの作成もスキップされます。


 v-memoディレクティブの書き方
以下のように、コンポーネントが再レンダリングされた際に、配列に指定したvalueA及びvalueBが、最後のレンダリング時と同じ値の場合...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue 3のエッセンシャルガイドを会話風に説明してみる]]></title>
        <id>https://zenn.dev/rgbkids/articles/694a5a491494b8</id>
        <link href="https://zenn.dev/rgbkids/articles/694a5a491494b8"/>
        <updated>2021-09-04T03:03:55.000Z</updated>
        <summary type="html"><![CDATA[原文を元に、会話風（入門編によくある感じ）にしたてあげました。
わかりにくいところは説明を足しています。
原文：
https://v3.ja.vuejs.org/guide/introduction.html

 Vue.js とは？
🙍‍♀️「Vue (発音はビュー) は、ユーザーインターフェイスを構築するためのプログレッシブフレームワークです。Vue は少しずつ適用していけるように設計されています」
🙂「SPAだから、Reactと類似の技術ってことですね」
🙍‍♀️「その通りです。Vueの最新バージョンは3です。Vue3の説明をしていきます」

 はじめに
🙍‍♀️「Vue.js を...]]></summary>
        <author>
            <name>vteacher</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ページ内の文字列を検索してフィルタリングするコンポーネント]]></title>
        <id>https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1</id>
        <link href="https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1"/>
        <updated>2021-09-03T13:05:34.000Z</updated>
        <summary type="html"><![CDATA[ページ内の文字列を検索して、それだけ残す

 こんなかんじに検索して、絞り込むものを作ります。


前提として、環境は
・Next.js
・TypeScript
となっています。
※アイコンとかは違うコンポーネントなので省略して書きます。

      
        index.tsx
        import styles from './SearchForm.module.scss'
import cn from 'classnames'

export interface Props = {
  placeholder?: string
  className?: st...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ページ内の文字列を検索してフィルタリングするコンポーネント]]></title>
        <id>https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1</id>
        <link href="https://zenn.dev/renshimosawa/articles/dbdb0df966e1a1"/>
        <updated>2021-09-03T13:05:34.000Z</updated>
        <summary type="html"><![CDATA[ページ内の文字列を検索して、それだけ残す

 こんなかんじに検索して、絞り込むものを作ります。


前提として、環境は
・Next.js
・TypeScript
となっています。
※アイコンとかは違うコンポーネントなので省略して書きます。

      
        index.tsx
        import styles from './SearchForm.module.scss'
import cn from 'classnames'

export interface Props = {
  placeholder?: string
  className?: st...]]></summary>
        <author>
            <name>Ren Shimosawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境【入門編】]]></title>
        <id>https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb</id>
        <link href="https://zenn.dev/sprout2000/articles/27aa1c8ca3dcfb"/>
        <updated>2021-09-03T09:08:44.000Z</updated>
        <summary type="html"><![CDATA[サマリー
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone https://github.com/sprout2000/cra.git
% cd cra
% docker-compose up


      
      localhost:3000 を開きましょう。これだけです。
https://github.com/sprout2000/cra

このコンテナの実行を停止するには以下のようにしてください。

      
        bash
        ^C  ...]]></summary>
        <author>
            <name>k_touge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptのPartialを再帰的にするやつ。]]></title>
        <id>https://zenn.dev/umezo/articles/dc452d9a1a24f2</id>
        <link href="https://zenn.dev/umezo/articles/dc452d9a1a24f2"/>
        <updated>2021-09-03T07:14:04.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと

      
        
        type T1 = {
    a: {
        a1: string;
	a2: number;
    };
    b: {
        b1: string;
        b2: number;
    }[];
};

type T2: DeepPartial<T1>;

const t2: T2 = {
    a: {
        a2: "1",
    },
    b: [
        {
	    b2: 1
	}
    ],
};


      
     ...]]></summary>
        <author>
            <name>umezo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptのPickをTypeで指定できるやつ。]]></title>
        <id>https://zenn.dev/umezo/articles/06bd73b3a02be3</id>
        <link href="https://zenn.dev/umezo/articles/06bd73b3a02be3"/>
        <updated>2021-09-03T06:42:39.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
こういうことをしたい。

      
        
        type T1 = {
    a: number,
    b: string,
};

type T2 = PickUpByType<T1, number>;

const t2: T2 = {
    a: 1,
};


      
      
 解決
実装はこう

      
        
        type KeysByType<T, Type> = {
  [key in keyof T]: T[key] extends Type ? key ...]]></summary>
        <author>
            <name>umezo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「5分でTypeScript」を会話風に説明してみる]]></title>
        <id>https://zenn.dev/rgbkids/articles/3ab4c91b3b028c</id>
        <link href="https://zenn.dev/rgbkids/articles/3ab4c91b3b028c"/>
        <updated>2021-09-03T03:50:41.000Z</updated>
        <summary type="html"><![CDATA[原文を元に、会話風（入門編によくある感じ）にしたてあげました。
わかりにくいところは説明を足しています。
原文：
https://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html

 あいさつ
🙍‍♀️「TypeScriptを使用して簡単なWebアプリケーションを構築することから始めましょう」
🙂「うう…TypeScriptって、使っていないとなんとなくマウントを取られた感じがするあれですね」
🙍‍♀️「そうですね。小さいストレスでもバグの元。フロントエンドの開発にTypeScriptは必須...]]></summary>
        <author>
            <name>vteacher</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【RN】端末のカレンダーにイベントを追加する]]></title>
        <id>https://zenn.dev/nekoniki/articles/26dfda35b90377</id>
        <link href="https://zenn.dev/nekoniki/articles/26dfda35b90377"/>
        <updated>2021-09-03T01:20:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はReactNativeアプリから端末のカレンダーへイベントを登録する方法について紹介します。
会議やイベント情報などを表示するようなタイプのアプリでは、OSのカレンダーと同期を行いたいケースも多いので役立つかと思います。

 使用するライブラリ
使用するライブラリはreact-native-calendar-eventsです。
端末内のカレンダー情報の取得から、そこにイベントを追加するまでを行うことができます。
https://github.com/wmcmahan/react-native-calendar-events

 インストール
以下コマンドでインストール...]]></summary>
        <author>
            <name>nekoniki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Headless UI + Tailwind CSS で Twitter 風のドロワーを作ってみた]]></title>
        <id>https://zenn.dev/heavenosk/articles/headless-ui-drawer</id>
        <link href="https://zenn.dev/heavenosk/articles/headless-ui-drawer"/>
        <updated>2021-09-02T17:40:36.000Z</updated>
        <summary type="html"><![CDATA[Headless UI + Tailwind CSS を組み合わせてドロワーを楽に実装できたので紹介します。
以下のような Twitter っぽいのドロワーを作成しました。
https://twitter.com/heavenOSK/status/1433431433146605571?s=20

 Headless UI とは
Headless UI はスタイルを排除したコンポーネント集で、Tailwind CSS と相性がいいとのことです。
https://headlessui.dev/

 スタイルを排除した設計
各コンポーネントのスタイルを切り替えるタイミングを抽象化してくれてい...]]></summary>
        <author>
            <name>へぶん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vimにeskkをインストールする]]></title>
        <id>https://zenn.dev/kato_k/articles/753b36262b3213</id>
        <link href="https://zenn.dev/kato_k/articles/753b36262b3213"/>
        <updated>2021-09-02T15:04:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Vim上での日本語入力の手段としてeskk.vimを導入しましたので自分用のメモも兼ねて残します。
SKK・eskk.vim共にこれまで使ったことがないので、参考程度に見てください。

 インストール

 eskk.vim
https://github.com/tyru/eskk.vim
好みのプラグインマネージャでeskkを導入してください。

 辞書
skkを使うには読みとの対応が列挙された辞書が必要になるので、ダウンロードしてeskkに教えてあげる必要があります。
辞書ファイルはこちら↓などで公開されている物を利用しましょう。
https://skk-dev.gith...]]></summary>
        <author>
            <name>kato-k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLID原則で考えるReact設計]]></title>
        <id>https://zenn.dev/koki_tech/articles/361bb8f2278764</id>
        <link href="https://zenn.dev/koki_tech/articles/361bb8f2278764"/>
        <updated>2021-09-02T07:49:17.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、株式会社スタメンでオンラインサロンFANTSのフロントエンドエンジニアをしている@0906kokiです。
今回はSOLID原則の5つの設計原則を、Reactのコードをベースにして解説できればと思います。

 SOLID原則とは？
SOLID原則とは、ソフトウェアを柔軟に、メンテナンス性を高く設計するための5つの原則となります。
Robert C. Martinによって、5つの原則の頭文字をとってSOLIDという名前が付けられました。5つの原則とは以下の通りです。

SRP: 単一責任の原則
OCP: 開放閉鎖の原則
LSP: リスコフの置換原則
ISP: インタフェース分離の...]]></summary>
        <author>
            <name>Koki Nagai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[これからFirebaseでプロジェクトを始めようとする全ての人が知っておくべきこと v8→v9リリース]]></title>
        <id>https://zenn.dev/hiro__dev/articles/605161cd5a7875</id>
        <link href="https://zenn.dev/hiro__dev/articles/605161cd5a7875"/>
        <updated>2021-09-02T01:01:39.000Z</updated>
        <summary type="html"><![CDATA[環境
・MacOS BigSur（11.5.2）
・VScode（1.59.1）
・Node.js   (16.1.1）
・Firebase （9.0.0）←New!
・yarn (1.22.11)
・TypeScript(4.4.2)

 対象
・これからFirebaseでプロジェクトを始めようとする人
✍️8月25日以前に出された教材やチュートリアル、記事、そして現時点での日本語の公式ドキュメントを参考にしようとしている人は特に！
・教材や記事、ハンズオン通りにFirebaseでプロジェクトを始めたのに原因不明のエラーぶつかった人
・8月25日以前にFirebaseプロジェクト作って...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SWRとReact hooksで条件を満たすまで定期的にデータフェッチする処理を実現]]></title>
        <id>https://zenn.dev/creamstew/articles/674a0e2208a2befc131f</id>
        <link href="https://zenn.dev/creamstew/articles/674a0e2208a2befc131f"/>
        <updated>2021-09-01T14:52:24.000Z</updated>
        <summary type="html"><![CDATA[ある特定の条件を満たすまで、定期的にデータフェッチしたかった。
SWRとReact hooksを使って、ある程度簡単に処理が書けたので紹介します。
例えば、すごく時間がかかる処理（動画のアップロードとか）を今どのくらいまで処理が進んでるのかユーザーにステータス画面として表示したい場合などに使えると思います。

 完成形
これで条件を満たすまで、定期的なデータフェッチを実現しています。

      
        
        import useSWR from 'swr'
import { useEffect, useState } from 'react';

functio...]]></summary>
        <author>
            <name>creamstew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Sass】Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル (2021/09)]]></title>
        <id>https://zenn.dev/yknight/articles/1e46d3754e7f3b</id>
        <link href="https://zenn.dev/yknight/articles/1e46d3754e7f3b"/>
        <updated>2021-09-01T07:40:37.000Z</updated>
        <summary type="html"><![CDATA[node-sassの終了アナウンスから、dart-sassを使う
Sass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。

 node-sassの終了に関してはこちらの記事を参照


前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。


 sass-loaderに依存するNext.js（v11系）と、Storybook（v6.3.7）へ、「dart-sassの導入」...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Sass】node-sassの終了アナウンスから、dart-sassを使う (2021/09)]]></title>
        <id>https://zenn.dev/yknight/articles/1e46d3754e7f3b</id>
        <link href="https://zenn.dev/yknight/articles/1e46d3754e7f3b"/>
        <updated>2021-09-01T07:40:37.000Z</updated>
        <summary type="html"><![CDATA[Next.js(v11) /TypescriptとStorybookでsass導入と@useを使ったサンプル
Sass(Scss)のnode-sassは、2022年10月に終了のアナウンスがされています。現在の推奨はdart-sassです。

 node-sassの終了に関してはこちらの記事を参照


前回の記事で、Sassの導入について、以下のコメを記載していましたが、node-sassの終了に伴い、dart-sass(yarn add sass)によりインストールをしていることが理由です。


 sass-loaderに依存するNext.js（v11系）と、Storybook（v...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Material-UIのDate Pickerをカスタマイズしよう]]></title>
        <id>https://zenn.dev/ryoryo16/articles/7a62ca4634685f</id>
        <link href="https://zenn.dev/ryoryo16/articles/7a62ca4634685f"/>
        <updated>2021-09-01T07:18:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Material-UIのDate Pickerって見た目もシンプルでかなりいい感じですよね～

デフォルトのDate Picker
しかし、やはりデフォルで使用するには表示が日本人向けではない...
英語というだけでかなりの拒否反応を起こしてしまう方もいたりいなかったりしますよね。
ここはしっかりと日本人向けにカスタマイズしていこうじゃないかという趣旨の記事となっております。

 基本の使い方
ここはドキュメントをサラッと読むだけでも分かる部分なので読み飛ばしていただいても OK

 インストール
Date Pickerですがcoreパッケージではなく「Material-U...]]></summary>
        <author>
            <name>ryoryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Material-UIのwithStylesでカスタマイズ]]></title>
        <id>https://zenn.dev/ryoryo16/articles/076cc7e7391467</id>
        <link href="https://zenn.dev/ryoryo16/articles/076cc7e7391467"/>
        <updated>2021-09-01T00:39:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Material-UI のコンポーネントのスタイルを変更したいなーと思った際に、公式ドキュメントだけでは"withStyles"の利用方法が分かりづらかったので。
色々と使い方はあるみたいだが、とりあえず基本の基本をピックアップ。

 withStyles の基本
下記のように withStyles によってコンポーネントを作成し配置する。

      
        
        const CustomComponent = withStyles({
  root: {
    // ここにスタイルを書いたり
  },
  label: {},
  // etc...]]></summary>
        <author>
            <name>ryoryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsで郵便番号自動入力機能を作成する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0cd78360bcaf15"/>
        <updated>2021-09-01T00:38:19.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsだけで郵便番号自動入力機能を作成します。
CORSのエラーが発生してしまうので、jsonpを使用してCORSのエラーが出ないようにしていきます。

 jsonpインストール

      
        
        npm install axios-jsonp


      
      
 郵便番号から住所を取得してセットする取得実装
jsonpのaxiosを使用して、郵便局dが出している郵便番号取得APiを叩きに行きます。

      
        
        <div class="form-group">
  <label&g...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Auth0 の onContinuePostLogin を理解して Actions を柔軟に実装する]]></title>
        <id>https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd</id>
        <link href="https://zenn.dev/okunokentaro/articles/01fee7f2chzps2s0zpbfd48fbd"/>
        <updated>2021-09-01T00:07:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、クレスウェア株式会社の奥野賢太郎 ( @okunokentaro ) です。
今回はAuth0が提供する、ログインフローを拡張する仕組みであるActionsと、さらに強力な機能であるonContinuePostLogin()について紹介します。Auth0は認証認可の機能を扱うIDaaSのひとつで、サービス自体の詳解は省略します。
Auth0 Actionsは2021年5月にGAされた比較的新しい機能であるため、日本語情報どころか英語圏の情報がそもそも少ないため、頼りになるのは公式ドキュメント、及び試行錯誤の結果となります。今回紹介するonContinuePostLogin()...]]></summary>
        <author>
            <name>okunokentaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React hooksでfactoryパターンっぽいことをしたいときは結局コンポーネントを分離するのが妥当]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-08-31-react-hooks-factory"/>
        <updated>2021-08-31T14:49:44.000Z</updated>
        <summary type="html"><![CDATA[Reactでhooksを切り替えしたい時について考えたケースがあったので書き残し。
中盤は悪例を挟みます。悪例については利用しないことをおすすめします
結論だけ知りたい方向け -> 結論へ

 前提
React hooksで例えばパターンA、パターンBを切り替える、factoryパターンっぽいことをやりたくなることがある。
コンポーネントより外側で切り替えることが可能であればこちらの記事などのようなことが可能だが、コンポーネントの内部で切り替えたいケースだとこのやり方だと処理出来ない
例えばこのようなカウンターを考えてみたい。

      
        
        
/...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Symbol x Angular その1 Angularでsymbol-sdkを使うための環境構築]]></title>
        <id>https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk</id>
        <link href="https://zenn.dev/nemtus/articles/blockchain-symbol-angular-1st-symbol-sdk"/>
        <updated>2021-08-31T03:08:26.000Z</updated>
        <summary type="html"><![CDATA[Angularでsymbol-sdkを使うための環境構築

 概要
この記事では、Angularで作成されたWebアプリ上でsymbol-sdkというnpmパッケージを用いてSymbolというブロックチェーンを利用するための第一歩となる環境構築について説明します。Angularのデフォルトの設定のままsymbol-sdkをインストールするといくつかのエラーが発生します。それを修正するための方法について説明し、同時にsymbol-sdkをAngularプロジェクトで使う際のサンプルコードを紹介します。
以下URLでサンプルコードを実際に動かしているので、必要に応じてご参照ください。

...]]></summary>
        <author>
            <name>NEMTUS公式</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-31のJS: TypeScript 4.4、PageSpeed InsightsのLab/Field data、Packemon(ライブラリ向けビルドツール)]]></title>
        <id>https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/</id>
        <link href="https://jser.info/2021/08/31/typescript-4.4-pagespeed-insightslabfield-data-packemon/"/>
        <updated>2021-08-30T22:46:59.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #555 - TypeScript 4.4が正式にリリースされました。
Announcing TypeScript 4.4 | TypeScript
Control Flow Analysisの改善、Index SignaturesにSymbolやTemplate Stringを利用できるようになっています。
unknown型にするuseUnknownInCatchVariablesオプションと
undefined値の区別をするexactOptionalPropertyTypesオプションの追加されています。
useUnknownInCatchVariablesはstrictオプションが有効の場合は自動的にONとなります。
exactOptionalPropertyTypesはstrictオプションとは別途設定が必要になります。
また、ES Proposal Stage 3のclass static blockがサポートされています。
tsc --helpの表示を改善、ビルドパフォーマンスの改善も含まれています。
Why lab and field data can be different (and what to do about it)という記事では、PageSpeed Insightsなどに表示される"lab data"と"field data"の違いについて解説しています。
Lab dataは、ネットワークは実行環境を固定したSynthetic モニタリングのデータとなっています。
Chrome User Experience Reportで収集されたChromeユーザーのRUMデータを元にしています。
この2つのデータの違い、どのようなケースで値に違いがでるかなどを解説しています。
Packemonはnpmで公開するパッケージ向けのビルドツー…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js BFFとかExpress記事]]></title>
        <id>https://zenn.dev/peg/articles/1878a6d6661295</id>
        <link href="https://zenn.dev/peg/articles/1878a6d6661295"/>
        <updated>2021-08-30T08:06:42.000Z</updated>
        <summary type="html"><![CDATA[Next.jsにExpressを使うという記事を見かけて???となったので調べた。
まずこの記事をコピペしてやってみた。
https://www.forcia.com/blog/001559.html

Next.jsはデフォルトではパスと一致するpagesディレクトリ配下の各ファイルにルーティングされます。 このルーティングに独自実装を組み込みたい場合にカスタムサーバを利用します。 例えば、特定のパスの場合のCookie操作やリダイレクト処理の実装などが挙げられます。
参考: https://nextjs-ja-translation-docs.vercel.app/docs/adva...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作ったのでコード全公開&解説]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/82871052dad5ff</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/82871052dad5ff"/>
        <updated>2021-08-30T03:16:03.000Z</updated>
        <summary type="html"><![CDATA[最近公開した Chrome 拡張の紹介と技術的なポイントの解説です。

 ✨ 何を作った？
実際の挙手と Google Meet 上の挙手ボタンが連動する Chrome 拡張を作りました。
https://twitter.com/KawamataRyo/status/1430730469260234756
https://chrome.google.com/webstore/detail/sync-raise-hand/pimhkdcdgmedijjnjeagagnnddgbcnkm
大人数のミーティングで挙手ボタンを使う機会があるのですが、ボタンを押すという動作が億劫 & 挙手...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[.vimrc  を packadd で整理するとめっちゃ便利だった！]]></title>
        <id>https://zenn.dev/nyarla/articles/0a171145604993</id>
        <link href="https://zenn.dev/nyarla/articles/0a171145604993"/>
        <updated>2021-08-30T02:34:07.000Z</updated>
        <summary type="html"><![CDATA[お前が思うんならそうなんだろう。お前ん中ではな


 話の前提
私は普段プログラミングやテキスト管理に NeoVim を使っていて、.vimrc （NeoVim だと init.vim）に色々な場面で必要になる設定や関数、あるいは機能拡張などを記述していました。
しかし最初は機能ごとにファイルを分けたり init.vim を一つに統一したりと、色々と調整していたものの、どの方法も上手くファイルを整理するに至らず、

さてどうしたもんかな……これは……

と考え込んでいたところで、

あ！ 試しに vim 組み込みのパッケージ管理機能を使ってみるか！

と思いつき、実際にやってみたら結構...]]></summary>
        <author>
            <name>にゃるら（テック系）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで学ぶ古典的ADT - Maybe]]></title>
        <id>https://zenn.dev/eagle/articles/ts-maybe-introduction</id>
        <link href="https://zenn.dev/eagle/articles/ts-maybe-introduction"/>
        <updated>2021-08-29T10:42:49.000Z</updated>
        <summary type="html"><![CDATA[本記事はこの記事の続きです。
https://zenn.dev/eagle/articles/ts-coproduct-introduction
実用性の観点から割愛したMaybeを改めて紹介します。
代数的データ型をコードで表現するために次のコード群を使用します。

      
        
        type Coproduct<T> = {
  [K in keyof T]: Record<"type", K> & T[K];
}[keyof T];

type Individual<TCoproduct extends Recor...]]></summary>
        <author>
            <name>eagle</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート]]></title>
        <id>https://zenn.dev/otanu/articles/f0a0b2bd0d9c44</id>
        <link href="https://zenn.dev/otanu/articles/f0a0b2bd0d9c44"/>
        <updated>2021-08-29T10:19:30.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js 11.1がリリースされました。
https://nextjs.org/blog/next-11-1
Storybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。
構成は以下のようになっています。

yarn
Next.js v11.1.0
ESLint v7.32.0(Next.js v11.1から含まれるように)
TypeScript v4.4.2
Tailwind v2.2.8
Storybook v6.3
Prettier v2.3.2
Jest v27.1.0

コー...]]></summary>
        <author>
            <name>otanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js(v11.1)+TypeScript+Tailwind+SASS+Storybook+Jestのボイラープレート]]></title>
        <id>https://zenn.dev/otanu/articles/f0a0b2bd0d9c44</id>
        <link href="https://zenn.dev/otanu/articles/f0a0b2bd0d9c44"/>
        <updated>2021-08-29T10:19:30.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js 11.1がリリースされました。
https://nextjs.org/blog/next-11-1
Storybookの最新版インストールを試してみたのですが、中々うまくいかなかったりしたので、環境の整理ついでにボイラープレートとしてまとめてみました。
構成は以下のようになっています。

yarn
Next.js v11.1.0
ESLint v7.32.0(Next.js v11.1から含まれるように)
TypeScript v4.4.2
Tailwind v2.2.8
Storybook v6.3
Prettier v2.3.2
Jest v27.1.0

コー...]]></summary>
        <author>
            <name>otanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[microCMS + TailwindCSSでのHTMLコンテンツに対するスタイル適用]]></title>
        <id>https://zenn.dev/crea7/articles/5b2fde4be6b6f3</id>
        <link href="https://zenn.dev/crea7/articles/5b2fde4be6b6f3"/>
        <updated>2021-08-29T09:57:18.000Z</updated>
        <summary type="html"><![CDATA[以前Crea7というタイムラインとブログ機能を持ったサイトを作成した時に、Next.js + microCMS + Tailwind CSSで実装を行いました。

 問題点
記事の詳細画面では、microCMSのリッチエディタで作成した記事を、HTML形式で取得しinnerHTMLで表示を行なっています。

      
        
        <div
className="text-black pt-7"
dangerouslySetInnerHTML={{ __html: `${article.body}` }}
></div>


      
...]]></summary>
        <author>
            <name>Crea7</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colabのターミナルでvimから抜けられないとき]]></title>
        <id>https://zenn.dev/e4exp/articles/ee523772afa0e5</id>
        <link href="https://zenn.dev/e4exp/articles/ee523772afa0e5"/>
        <updated>2021-08-29T03:04:42.000Z</updated>
        <summary type="html"><![CDATA[前提

Colabはproプランでターミナルが使える
ブラウザ(Chrome)にVimiumという拡張が入っている
普段はEscキーでvimのinsertモードから抜けているが，Vimiumが有効だとEscキーを押すとターミナル領域ごと閉じてしまう


 解決方法


ctrl + cでinsertモードから抜けられる

または

Vimiumを無効化する(特定urlのみ無効化もできる)


 参考


Exit insert mode in Google Colab 2020]]></summary>
        <author>
            <name>e4exp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React + Highcharts で都道府県の人口をグラフで表示するアプリ]]></title>
        <id>https://zenn.dev/shimapon3/articles/13e3d4b147742c</id>
        <link href="https://zenn.dev/shimapon3/articles/13e3d4b147742c"/>
        <updated>2021-08-28T23:43:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初めて記事のようなものを書きます．よろしくお願いします．
今回は2020年のインターンシップ選考で私が開発した，都道府県ごとの人口を表示するアプリについて開発した手順を書いていきたいと思います．
至らない点があれば、遠慮なくご指摘いただければとも思います。

 Demo
県名にチェックを入れると，その県の人口推移が表示されます．
複数選択すると、まとめて表示されます。

https://react-highcharts-resas.web.app/

 環境

macOS Catalina (v10.15.6)
Node.js (v14.8.0)


 使用技術

Reac...]]></summary>
        <author>
            <name>shimapon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超型安全firestoreができた(更新)]]></title>
        <id>https://zenn.dev/arark/articles/0ee7d75dd200db</id>
        <link href="https://zenn.dev/arark/articles/0ee7d75dd200db"/>
        <updated>2021-08-28T16:04:02.000Z</updated>
        <summary type="html"><![CDATA[firebaseってtypescriptと相性わるいな～～～～～～～～～とまじで思ってたので超型安全firestore作ってみたらできました。パスまで型安全でやってくれます。これです。
https://github.com/Hagihara-A/fire-fuse
npm i firefuse
で使えます
firestore-v9を想定しています。

 特徴/出来ること

ただのユーティリティパッケージなので、一切の独自実装がない。ただし型安全。
パスの型付け
パスを解析してReferenceを型付けできる


 なにができるか

      
        
        // /...]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NextJSでSSR/SSGの挙動を確認する。]]></title>
        <id>https://zenn.dev/peg/articles/bca7b0ba13bce3</id>
        <link href="https://zenn.dev/peg/articles/bca7b0ba13bce3"/>
        <updated>2021-08-28T14:20:08.000Z</updated>
        <summary type="html"><![CDATA[https://qiita.com/G-awa/items/639f4f83aa4d97bc1f0d
こちらのサンプルプロジェクトを利用。
serveパッケージで静的ファイルをホスティングするローカルサーバーを立ち上げる。

      
        
        yarn add -D serve


      
      
https://qiita.com/Nossa/items/bdc6a9705e89ea8fc250
https://rennnosukesann.hatenablog.com/entry/2018/03/19/233245

export, serv...]]></summary>
        <author>
            <name>ぺい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsで作成する管理画面作成チュートリアル]]></title>
        <id>https://zenn.dev/thirosue/books/13ac92fc34ae22</id>
        <link href="https://zenn.dev/thirosue/books/13ac92fc34ae22"/>
        <updated>2021-08-28T12:44:02.000Z</updated>
        <summary type="html"><![CDATA[Next.jsで管理画面のボイラーテンプレートを作成してみました。
本書では、利用した技術などを紹介していきます。

1. はじめに
2. プロジェクトセットアップ
3. 自動デプロイ（CI/CD）
4. バックエンドの準備
5. コンポーネント作成（Atomic Design）
6. 共通処理
7. 入力フォーム
8. 状態管理
9. 非同期処理（react-query）
10. レンダリングオプション（CSR/SSG/SSR/ISR）
11. 単体テスト]]></summary>
        <author>
            <name>Thirosue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの開発サーバー（dev server）が動かなくなる]]></title>
        <id>https://zenn.dev/shuri/articles/d63c5d242859d9</id>
        <link href="https://zenn.dev/shuri/articles/d63c5d242859d9"/>
        <updated>2021-08-28T07:49:22.000Z</updated>
        <summary type="html"><![CDATA[問題
Next.js初心者です
yarn dev後、Google Chromeで Next.jsの開発サーバーを動かしていると、

      
        
        ・ リンクを押しても動作しない
・ リロードすると永遠にページの読み込み中になる
・ HMRも動いてない


      
      の問題が起きてました

 解決方法

      
        
        ・ Google chromeで chrome://serviceworker-internals/ を開く
・ Scope: localhost:3000 の記載があるサービスワーカーを...]]></summary>
        <author>
            <name>ヴィジュアル系エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[fish, neovim, starshipあたりでめっかわ❤️ターミナルを用意する]]></title>
        <id>https://zenn.dev/xxpiyomaruxx/articles/0661277cd1b2ab</id>
        <link href="https://zenn.dev/xxpiyomaruxx/articles/0661277cd1b2ab"/>
        <updated>2021-08-28T02:41:59.000Z</updated>
        <summary type="html"><![CDATA[デフォルトのシェルだと色があまりついていないし、可愛くもなくてつらい気持ちになったのでかわいくします。dotfilesの存在は知っていたが何から触ればいいのやらな人向け。

 だいたい導入するもの


fish

bashとかzshの変わりに使う
historyをGUIで見ることができたり、シンタックスハイライトをデフォルトでしてくれたり、入力補完をデフォルトでしてくれたりする
なので設定めんどくさい人でも入れるだけでちょっとハッピー



tmux

ターミナルのペインとか良い感じに分割したりセッション保存してくれたり



neovim

vimのすごいやつ
いれなくても良い気はした...]]></summary>
        <author>
            <name>ぴよまる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yupで配列内のオブジェクトのプロパティがユニークであることを検証する方法]]></title>
        <id>https://zenn.dev/rince/articles/4e35e52e0e158d</id>
        <link href="https://zenn.dev/rince/articles/4e35e52e0e158d"/>
        <updated>2021-08-28T01:49:17.000Z</updated>
        <summary type="html"><![CDATA[バリデーション用ライブラリ Yup で、配列内のオブジェクトのプロパティが重複していないことを検証する方法。
READMEには重複チェックについて書かれていなかったのでまとめておく。
例えば、url と caption を持つオブジェクトの配列で url がユニークであることを検証する場合、こんな感じに書ける。

      
        
        import * as yup from "yup";

const objectSchema = yup.object().shape({
  url: yup.string().url(),
  caption: yup.st...]]></summary>
        <author>
            <name>rince</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[firebase v9でupdateが(少し)型安全になりました]]></title>
        <id>https://zenn.dev/arark/articles/60927323db8697</id>
        <link href="https://zenn.dev/arark/articles/60927323db8697"/>
        <updated>2021-08-27T16:05:00.000Z</updated>
        <summary type="html"><![CDATA[先日ついにfirebase v9が リリースされました
知っている限り、v9ではモジュール式(ESM?)になっただけで、バンドルサイズの最適化以外の機能はないのですが、updateに関しては型定義での更新があったので紹介します。

 v9の使い方
少しv9の使い方を紹介します。v8までのようにクラスで実装するとtree shakeしづらいので、全て関数になりました。

      
        
        import { initializeApp } from "firebase/app";
const app = initializeApp({ projectId: "....]]></summary>
        <author>
            <name>arark</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.js 学習記録 #1 - blitz generate]]></title>
        <id>https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9</id>
        <link href="https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9"/>
        <updated>2021-08-27T14:59:06.000Z</updated>
        <summary type="html"><![CDATA[はじめに
普段はPython、React、Next.js等を中心に勉強していますが、個人的に今最も注目しているフレームワークであるBlitz.jsの勉強も最近始めました。ここでは私がBlitz.jsを学んでいく過程で、自身の学習記録兼日本語ドキュメント感覚で今後書いていこうと思っています。

 1. blitz generate

      
        
        blitz generate [type] [model]


      
      もしくは

      
        
        blitz g [type] [model]


    ...]]></summary>
        <author>
            <name>きじくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.js 学習記録 #1 - blitz generate]]></title>
        <id>https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9</id>
        <link href="https://zenn.dev/kijikunnn/articles/0d58e86c3ce0c9"/>
        <updated>2021-08-27T14:59:06.000Z</updated>
        <summary type="html"><![CDATA[はじめに
普段はPython、React、Next.js等を中心に勉強していますが、個人的に今最も注目しているフレームワークであるBlitz.jsの勉強も最近始めました。ここでは私がBlitz.jsを学んでいく過程で、自身の学習記録兼日本語ドキュメント感覚で今後書いていこうと思っています。

 1. blitz generate

      
        
        blitz generate [type] [model]


      
      もしくは

      
        
        blitz g [type] [model]


    ...]]></summary>
        <author>
            <name>きじくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + Emotion(css関数) でスタイリングする]]></title>
        <id>https://zenn.dev/rabbit/articles/e7376c9fce90db</id>
        <link href="https://zenn.dev/rabbit/articles/e7376c9fce90db"/>
        <updated>2021-08-27T14:02:12.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの環境でEmotionのcss関数でスタイリングを行う際に少し手間取ったのでその忘備録。

 設定する

 emotionを追加

      
        
        yarn add @emotion/react


      
      https://emotion.sh/docs/@emotion/react
tsconfig.jsonにjsxImportSourceパラメーターを追加する。
※ これが設定できていないとcss属性をpropできないので詰む。

      
        
        {
  "compilerOptions"...]]></summary>
        <author>
            <name>hanetsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでWeb-WorkerからWeb-Assembly呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/5b031d682d3fe2</id>
        <link href="https://zenn.dev/sora_kumo/articles/5b031d682d3fe2"/>
        <updated>2021-08-27T12:32:02.000Z</updated>
        <summary type="html"><![CDATA[Web-WorkerとWeb-Assemblyの連携に関して
Web-Workerを使えば、並列化による恩恵で総合的な動作速度の向上が見込めます
対してWeb-Assemblyを使えば、演算速度のような直列的な向上が見込めます
ならば「二つを合わせれば、さらなるパフォーマンスアップが見込める」というのは誰でも思うことでしょう
しかしこの二つの技術、いざ使おうとするとそれなりに面倒で敷居が高く感じます
その辺りを簡単に実現するための方法を紹介します

 サンプル置き場
https://github.com/SoraKumo001/next-worker3
https://next-wo...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでWeb-WorkerからWeb-Assembly呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/5b031d682d3fe2</id>
        <link href="https://zenn.dev/sora_kumo/articles/5b031d682d3fe2"/>
        <updated>2021-08-27T12:32:02.000Z</updated>
        <summary type="html"><![CDATA[Web-WorkerとWeb-Assemblyの連携に関して
Web-Workerを使えば、並列化による恩恵で総合的な動作速度の向上が見込めます
対してWeb-Assemblyを使えば、演算速度のような直列的な向上が見込めます
ならば「二つを合わせれば、さらなるパフォーマンスアップが見込める」というのは誰でも思うことでしょう
しかしこの二つの技術、いざ使おうとするとそれなりに面倒で敷居が高く感じます
その辺りを簡単に実現するための方法を紹介します

 サンプル置き場
https://github.com/SoraKumo001/next-worker3
https://next-wo...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VuetifyのテーマをCSS変数として使用する]]></title>
        <id>https://zenn.dev/azukiazusa/articles/5a69cbcca75113</id>
        <link href="https://zenn.dev/azukiazusa/articles/5a69cbcca75113"/>
        <updated>2021-08-27T09:54:35.000Z</updated>
        <summary type="html"><![CDATA[結論
オプションとしてcustomProperties:trueを渡します。

      
        
        import Vue from 'vue'
import Vuetify from 'vuetify/lib'

Vue.use(Vuetify)

export default new Vuetify({
  theme: {
    themes: {
      light: {
        main: '#D7F9F1',
        secondary: '#7AA095',
      }
    },
    options: { cu...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScriptでimportしたSVGの型がanyになってしまう]]></title>
        <id>https://zenn.dev/catnose99/articles/49c12f84182bdf</id>
        <link href="https://zenn.dev/catnose99/articles/49c12f84182bdf"/>
        <updated>2021-08-27T06:12:13.000Z</updated>
        <summary type="html"><![CDATA[前提: TypeScript + Next.js + svgrでSVGをインポートする
自分の関わっているNext.js製アプリケーションでは、svgrを導入することによりSVGを他のReactコンポーネントと同じ形でimportできるようにしています。
この記事の本筋からそれますが、svgrは以下のようにNext.jsへの導入できます。
↓ インストール

      
        
        $ npm install --save-dev @svgr/webpack


      
      ↓ @svgr/webpackをWebpackのloaderとして設定し...]]></summary>
        <author>
            <name>CatNose</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.js入門]]></title>
        <id>https://zenn.dev/compiled_oz/articles/a8edecc6c39713</id>
        <link href="https://zenn.dev/compiled_oz/articles/a8edecc6c39713"/>
        <updated>2021-08-27T05:53:53.000Z</updated>
        <summary type="html"><![CDATA[Vue.js is 何？
Vue.jsはシンプルなMVVM構造のプログレッシブフレームワークで、
Model、View、ViewModelの３つでアプリケーションを構築する。

 データバインディング
データバインディングを行うにはテンプレートで使用する全てのデータはリアクティブデータとして定義する必要がある

 ディレクティブ
vから始まるViewの要素に付加できる独自の属性のこと。
v-if、v-show、v-for、v-model、v-bind、v-onなどがある。
HTMLのクラスを動的に制御したり、イベントをハンドルできる。

v-on:イベントハンドラ
v-model:双...]]></summary>
        <author>
            <name>Oz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vueで非同期処理をまとめて処理する際のベストプラクティス]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/c776ef1586eb40</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/c776ef1586eb40"/>
        <updated>2021-08-26T23:52:48.000Z</updated>
        <summary type="html"><![CDATA[vue.jsで非同期処理をまとめて処理したい場合があります。
普通に1つ1つ処理を待つ場合は async - awaitで良いのですが、それだと1つずつしか処理できないので、どうしても処理が遅くなってしまいます。
そんな時は、 Promise.all を使えば、複数の非同期処理をまとめて処理しつつ、全ての処理が完了したら次に行きますよー！というふうにできます。

      
        
        // 非同期をまとめて処理する
async process() {
    await Promise.all([
        this.methodA(),
	this.me...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.jsでSupabaseのデータベースに接続する]]></title>
        <id>https://zenn.dev/kijikunnn/articles/0c06902611964d</id>
        <link href="https://zenn.dev/kijikunnn/articles/0c06902611964d"/>
        <updated>2021-08-26T15:48:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初投稿です。勉強したことをアウトプットして残していきたいと思い、投稿を始めました。
普段は学生でPythonによる機械学習で研究をしている一方で、プライベートではReactやNext.jsを勉強しています。
今回は、ReactのフルスタックフレームワークであるBlitz.jsが先日、v1.0に向けた大きな修正が終了したと発信していたことを機に、久しぶりに触れてみました。

過去にチュートリアルだけやったことはあったのですが、その時はデータベースがローカル環境のSQLiteもしくはPostgreSQLの2択だったため、「開発時だったら良いかもしれないけれど、実際にデプロイした...]]></summary>
        <author>
            <name>きじくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.jsでSupabaseのデータベースに接続する]]></title>
        <id>https://zenn.dev/kijikunnn/articles/0c06902611964d</id>
        <link href="https://zenn.dev/kijikunnn/articles/0c06902611964d"/>
        <updated>2021-08-26T15:48:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初投稿です。勉強したことをアウトプットして残していきたいと思い、投稿を始めました。
普段は学生でPythonによる機械学習で研究をしている一方で、プライベートではReactやNext.jsを勉強しています。
今回は、ReactのフルスタックフレームワークであるBlitz.jsが先日、v1.0に向けた大きな修正が終了したと発信していたことを機に、久しぶりに触れてみました。

過去にチュートリアルだけやったことはあったのですが、その時はデータベースがローカル環境のSQLiteもしくはPostgreSQLの2択だったため、「開発時だったら良いかもしれないけれど、実際にデプロイした...]]></summary>
        <author>
            <name>きじくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify v2の環境をDockerで気軽に作る]]></title>
        <id>https://zenn.dev/moroshi/articles/24a8bd494ee67c</id>
        <link href="https://zenn.dev/moroshi/articles/24a8bd494ee67c"/>
        <updated>2021-08-26T12:04:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 経緯
SPA(single page application)をvue.js + vuetifyで作成し、Laravelを作成したAPIサーバーと連携する環境をよく構築する。
それと関連して、ちょっとしたクリーンな検証環境をサクッと作りたくなることがあるため、dockerでそれらしい環境を作成しようと思ったのがことの始まり。
以下、"それらしい環境"の作成手順を残す。

 前提
環境や使うツールは以下のとおり

 環境

Windows 10 Pro 64bit
Docker Desktop for Windows (on Hyper-V), Version 3.6.0...]]></summary>
        <author>
            <name>moroshi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElementやEventに型をつけよう]]></title>
        <id>https://zenn.dev/sqer/articles/d9d51bbd4b410418cde3</id>
        <link href="https://zenn.dev/sqer/articles/d9d51bbd4b410418cde3"/>
        <updated>2021-08-26T12:03:15.000Z</updated>
        <summary type="html"><![CDATA[目次

目次

はじめに

any使っていませんか？
対象読者
今回の目標


Elementについて
Eventについて

実践！TypeScriptで型付けする

typed-query-selectorを使う
target.valueに型をつける


まとめ
リンク


 はじめに

 any使っていませんか？

idが"xxx"のinput要素に入力された値を取得してみてください。

この要件を w3schools のサンプルコードをコピペして実装しようとすると、

      
        
        document.getElementById("xxx")....]]></summary>
        <author>
            <name>sqer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[新世代の自動補完プラグイン ddc.vim]]></title>
        <id>https://zenn.dev/shougo/articles/ddc-vim-beta</id>
        <link href="https://zenn.dev/shougo/articles/ddc-vim-beta"/>
        <updated>2021-08-26T11:19:39.000Z</updated>
        <summary type="html"><![CDATA[始めに
ここ数ヵ月力を入れてddc.vimの開発をしていて、ようやく一通りの機能がそろいました
ので、広くユーザーに使ってもらうフェーズに進めたいと考えています。
ユーザーからの要望やバグ報告に対応が終わってから正式版の1.0となりますのでよろし
くお願いします。

 ddc.vim の特徴

 Vim8/neovim 両対応
deoplete.nvimでもvim-hug-neovim-rpcを用いることによりVimに対応していました。
しかしインストールが煩雑になる、neovimと比較してパフォーマンスに問題がある、安
定性への問題がありました。
ddc.vimではdenops.v...]]></summary>
        <author>
            <name>Shougo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebaseでCookieを使った認証処理を実装する]]></title>
        <id>https://zenn.dev/uttk/articles/f48fc75120f018</id>
        <link href="https://zenn.dev/uttk/articles/f48fc75120f018"/>
        <updated>2021-08-26T08:41:39.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Firebase AuthenticationとNext.jsのgetServerSideProps()を使って、Cookieを使ったセッション管理方法を、この場を借りて共有したいと思います💪
また、この記事の内容は基本的に以下の記事の内容を踏襲したものとなっています。そのため、内容やソースコードに引用などが含まれますので、予めご了承ください🙇‍♂️
https://firebase.google.com/docs/auth/admin/manage-cookies?hl=ja
それでは行きましょう🛴

 環境構築

この記事ではFirebaseの環境構築については...]]></summary>
        <author>
            <name>uttk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとFirebaseでCookieを使った認証処理を実装する]]></title>
        <id>https://zenn.dev/uttk/articles/f48fc75120f018</id>
        <link href="https://zenn.dev/uttk/articles/f48fc75120f018"/>
        <updated>2021-08-26T08:41:39.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Firebase AuthenticationとNext.jsのgetServerSideProps()を使って、Cookieを使ったセッション管理方法を、この場を借りて共有したいと思います💪
また、この記事の内容は基本的に以下の記事の内容を踏襲したものとなっています。そのため、内容やソースコードに引用などが含まれますので、予めご了承ください🙇‍♂️
https://firebase.google.com/docs/auth/admin/manage-cookies?hl=ja
それでは行きましょう🛴

 環境構築

この記事ではFirebaseの環境構築については...]]></summary>
        <author>
            <name>uttk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[１つの文字列に、配列の文字列が全て含まれているか]]></title>
        <id>https://zenn.dev/nitaking/articles/16a90535f3d535</id>
        <link href="https://zenn.dev/nitaking/articles/16a90535f3d535"/>
        <updated>2021-08-26T07:55:52.000Z</updated>
        <summary type="html"><![CDATA[Answer

      
        
        var str = 'apple_mango_banana';
var arr = ['apple','banana'];

var isEvery = arr.every(item => str.includes(item));

console.log(isEvery);


      
      
 Refs
https://stackoverflow.com/a/40649736/8023331]]></summary>
        <author>
            <name>nitaking</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.jsにおけるモジュールシステム]]></title>
        <id>https://zenn.dev/ichigo_dev/articles/540ebe464a6463674ea0</id>
        <link href="https://zenn.dev/ichigo_dev/articles/540ebe464a6463674ea0"/>
        <updated>2021-08-26T02:23:05.000Z</updated>
        <summary type="html"><![CDATA[Node.jsにおけるモジュールシステム
モジュールシステムとは外部ファイル（モジュール）を読み込むときの仕様である。
Node.jsで使えるモジュールシステムとして、CJSとESMがある、現在はCJSがデフォルトになっている。
拡張子が.cjsのものはCJS。
拡張子が.mjsのものはECM。
拡張子が.jsのファイルは、package.jsonのtypeフィールドの値によって判断される。
具体的にはtypeがmoduleであれば.jsファイルがECMとして扱われる。commonjsにするとCJSとして扱われる。記述しない場合もCJSとして扱われる。

 TypeScript
ts...]]></summary>
        <author>
            <name>ichigo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで書かれたJSをNode.js上で実行する方法]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/nodejs-with-typescript</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/nodejs-with-typescript"/>
        <updated>2021-08-25T23:45:47.000Z</updated>
        <summary type="html"><![CDATA[TypeScript で書かれている場合、一度 JS に変換(トランスパイル)してから 実行する必要があります。

 実行方法


TypeScript のインストール

      
        
        # npm
npm i -D typescript

# yarn
yarn add typescript --dev


      
      

コンパイル
下記コマンドを入力することで(エラーがなければ) hoge.js が生成されます。

      
        
        tsc hoge.ts


      
      

実行
hoge....]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nvimでVSCodeみたいなファイル横断検索・置換がしたい]]></title>
        <id>https://zenn.dev/bun913/articles/f18e0d37ece27b</id>
        <link href="https://zenn.dev/bun913/articles/f18e0d37ece27b"/>
        <updated>2021-08-25T13:33:38.000Z</updated>
        <summary type="html"><![CDATA[なんちゃってvimmerのbunです。
私は普段 nvim と VSCode をエディターとして利用しております。
VSCodeに関しては neovim 拡張を利用しています。
（使い始めるための記事を以前書きました）
https://zenn.dev/bun913/articles/02785aed0ba50e
vimにおいてファイル横断検索や置換をするには vimgrepを利用すれば良いのですが
VSCodeのように自分で対象のファイルを選んだりするのを楽にしたいなぁ と考えておりました。
↓以下のような形で。また、vimなのでマウスを使わずに使用したい

なお私の環境は以下の通りで...]]></summary>
        <author>
            <name>bun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuepress でリンクの url に frontmatter を混ぜる]]></title>
        <id>https://zenn.dev/uedatakeyuki/articles/c42d7852b2a525</id>
        <link href="https://zenn.dev/uedatakeyuki/articles/c42d7852b2a525"/>
        <updated>2021-08-25T05:36:55.000Z</updated>
        <summary type="html"><![CDATA[なにがしたいのか
同じ単語の複数の辞書へのリンクみたいなページを作る時に

大概の辞書って検索 URL にパラメタで単語を渡す感じの API なので
frontmatter で単語を宣言して

      
        
        ---
pv: get in
---


      
      あとは {{$frontmatter.pv}} とかで使い回せれば楽です

 ところが
実際にやってみると、こんなリンクで

[英辞郎](https://eow.alc.co.jp/search?q={{$frontmatter.pv}})

一見、いい感じに見えるのですが

全...]]></summary>
        <author>
            <name>UedaTakeyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-25のJS: browser-compat-dataにDenoを追加、Mobile First and Desktop First、create-react-appからNext.jsに移行]]></title>
        <id>https://jser.info/2021/08/25/browser-compat-datadeno-mobile-first-and-desktop-first-create-react-appnext.js/</id>
        <link href="https://jser.info/2021/08/25/browser-compat-datadeno-mobile-first-and-desktop-first-create-react-appnext.js/"/>
        <updated>2021-08-25T02:44:57.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #554 - MDNなどが利用するブラウザ実装の互換データを管理している @mdn/browser-compat-data 4.0.0がリリースされました。
Release v4.0.0 · mdn/browser-compat-data
互換リストにDenoのデータが追加されています。
Deno on MDN | Deno Blog
スキーマにpreviewとaccepts_flagsの追加、XPathとXSLTのデータが不完全であるため削除などの変更も含まれています・
The State Of Mobile First and Desktop First - Ahmad Shadeedという記事では、CSSを書くときにMobileとDesktop向けのどちらを先に書くかについて書かれています。
MobileとDesktopのどちらかを先に書いて、もう一方をMedia Queryで上書きしたときのコード量や拡張性の違いについて比較しています。
From Create-React-App to Next | Kitty Giraudelという記事ではCreate React App(CRA)からNext.jsへの移行をどのようにしたかについて書かれています。
<head>やスタイリングなどの項目ごとに、CRAからNext.jsにどのように移植したのかが書かれています。
<Link>以外はどちらの環境でも実行できたため、移行の動作確認として両方の環境で動かしてテストする方法についても書かれています。
ヘッドライン
Announcing React Native 0.65 · React Native
reactnative.dev/blog/2021/08/17/version-065
React iOS Android


React Native 0.…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RailsでHelloVue3!!!]]></title>
        <id>https://zenn.dev/newburu/articles/7efb9d9f0658a8</id>
        <link href="https://zenn.dev/newburu/articles/7efb9d9f0658a8"/>
        <updated>2021-08-24T13:54:05.000Z</updated>
        <summary type="html"><![CDATA[前回は、「rails new」のオプションでVueをインストールしました。
https://zenn.dev/newburu/articles/e21629af475d69
が・・・Vue2になるようで、Vue3を使うためには、手動でVue3のインストールが必要とのことでした。
という事で、やり直します！！

 rails newでWebアプリケーションを作成
前回同様、まずは「rails new」します。

      
        
        $ rails new -d mysql hello-vue3
$ rails db:create
$ rails s


    ...]]></summary>
        <author>
            <name>にゅ〜ぶる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アトミックデザインにおけるコンポーネントのAuto importの問題について色々と調査した件]]></title>
        <id>https://zenn.dev/sengosha/articles/95f3ec0d62fba8</id>
        <link href="https://zenn.dev/sengosha/articles/95f3ec0d62fba8"/>
        <updated>2021-08-24T08:37:01.000Z</updated>
        <summary type="html"><![CDATA[Nuxt2.15.x以降のコンポーネントimportに関して


@nuxt/components はバージョン 2 が使えるようになります
コンポーネント名にディレクトリ名を付与したタグを使うことができるようになり、コンポーネントの import や宣言などの記述を省略することができます (記述の省略は 2.14 でも可能でしたが 2.15 で先の記述の使用が可能となりました)


 ディレクト名付きのコンポーネント名
例えば下記のフォルダー構造

      
        
        | components/
---| my/
------| form/
------...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js で動的/静的ルーティングのサイトマップを生成する]]></title>
        <id>https://zenn.dev/soberhiko/articles/aed491ed167bad</id>
        <link href="https://zenn.dev/soberhiko/articles/aed491ed167bad"/>
        <updated>2021-08-24T05:47:46.000Z</updated>
        <summary type="html"><![CDATA[概要
Next.js のアプリケーションで、CMS などから取得したコンテンツによって動的に生成される URL と、静的な URL の両方がある場合に、サイトマップをどのように自動生成させるかについての記事です。
Zenn に投稿されている記事など、先行事例も見られますが、以下の要件を満たすサイトマップの生成方法については見当たらなかったため、その共有を目的としています。

対象 URL は Next.js の動的/静的ルーティングの両方を含む

動的 URL のページはコンテンツ追加のタイミングでビルドが走らない


サイトマップファイルはいくつかに分割し、インデックスファイルも生...]]></summary>
        <author>
            <name>eyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt に Payjp.js を導入する]]></title>
        <id>https://zenn.dev/nappa/articles/e201780237a81e</id>
        <link href="https://zenn.dev/nappa/articles/e201780237a81e"/>
        <updated>2021-08-23T19:38:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
副業の開発で、決済システムに PAY.JP を導入することになり、クライアント向けのライブラリとして、カスタマイズがしやすい Payjp.js を使うことになった。
しかし、副業の開発では Nuxt を使っており、良い感じに連携するドキュメントがなかったため、メモ代わりに残しておく。

 使っている技術

Nuxt 2.15.3

universal(ssr) モードを使用




 Payjp.js を読み込む
Payjp.js は script タグで読み込ませるので nuxt.config.js に設定を追加する必要がある。
下記の設定を追加して、<head&g...]]></summary>
        <author>
            <name>nappa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OAS使ってなるべく楽にNuxtのテスト]]></title>
        <id>https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40</id>
        <link href="https://zenn.dev/okoha/articles/1f909a3af0ee0244fe40"/>
        <updated>2021-08-23T17:12:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
composition apiの登場でVueもようやくテストしやすい感じになってきました。
とはいえ実際AJAXが絡んだコンポーネントのテストをやろうとするとあれをモックしてこれもモックしてとなんだかんだ大量のモッキングが必要になって色々めんどくさい感じになりがちですし、ほとんどモックされてて実際のところどこがテストできてるのかわけがわからない感じになりがちです。
前回の記事ではOASを利用することでスタブサーバーが用意できることを紹介しました。
この記事ではそのスタブサーバーを利用して、フロントで再現性のあるAJAXテストを簡単に行える方法がないか模索してみます。
スタブ...]]></summary>
        <author>
            <name>夕暮おこは</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL で N+1 問題を解決する 4 つのアプローチ]]></title>
        <id>https://zenn.dev/alea12/articles/15d73282c3aacc</id>
        <link href="https://zenn.dev/alea12/articles/15d73282c3aacc"/>
        <updated>2021-08-23T14:37:01.000Z</updated>
        <summary type="html"><![CDATA[TLDR

Prisma が検討できる場合: Prisma の findUnique を使う
それ以外の場合: DataLoader を実装する。ライブラリを使えばそんなに大変ではない

JOIN での解決は GraphQL の道を踏み外している(ように感じる)


 GraphQL における N+1 問題
GraphQL で 1:N のデータ構造をクエリすると、すぐに N+1 問題に行き当たります。User と Post が 1:N の関係となる、以下の例を見てみましょう。

      
        
        type User {
  id: Int!
  name...]]></summary>
        <author>
            <name>alea12</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rails+VueでHello Vue！まで]]></title>
        <id>https://zenn.dev/newburu/articles/e21629af475d69</id>
        <link href="https://zenn.dev/newburu/articles/e21629af475d69"/>
        <updated>2021-08-23T14:28:41.000Z</updated>
        <summary type="html"><![CDATA[rails new でアプリケーションを作成する
rails newには、Vueを簡単に使えるオプション--webpack=vueがあるので、それを指定してrails newします。
DBもMySQLを使うので、-d mysqlも一緒に指定します。※--database=mysqlと同じです。

      
        
        rails new -d mysql --webpack=vue hello-vue


      
      そして、いつもの起動するまでのコマンドをぽちぽち

      
        
        rails db:creat...]]></summary>
        <author>
            <name>にゅ〜ぶる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsをかじる本]]></title>
        <id>https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc</id>
        <link href="https://zenn.dev/sdkfz181tiger/books/363d20b1e591fc"/>
        <updated>2021-08-23T12:15:53.000Z</updated>
        <summary type="html"><![CDATA[Vue.jsの導入からBMI計算機やTODOアプリの作り方までの手順をまとめていきます。
この本を読むにあたり、下記の2点について経験がありますと、より理解しやすい内容と思います。

1. HTMLとCSSを使った事がある方
2. JavaScriptをそれなりに使った事がある方]]></summary>
        <author>
            <name>しめじ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無人島に持っていく(Neo)vimプラグイン10選 (TS開発環境編)]]></title>
        <id>https://zenn.dev/yano/articles/vim_plugin_top_10</id>
        <link href="https://zenn.dev/yano/articles/vim_plugin_top_10"/>
        <updated>2021-08-23T12:02:20.000Z</updated>
        <summary type="html"><![CDATA[概要
自分は普段Neovimを使って(主にTypeScriptでの)開発を行っています。
NeovimでのTypeScript開発は環境を整えればVSCodeと遜色ない開発体験を得ることができると思っています。
また、Vimの操作に慣れれば一部の編集機能についてはVimの方が優れていると感じています。
この記事では自分の開発に欠かせないプラグイン10個を紹介しようと思います。

 プラグイン10選

VimをIDE化するプラグイン coc.nvim

様々な操作の起点に使うFuzzy Finder fzf-preview.vim

高機能なファイラ fern.vim

Vim上でGi...]]></summary>
        <author>
            <name>Yuki Yano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】Parsing error: Cannot find module 'next/babel'の解決]]></title>
        <id>https://zenn.dev/shimotaroo/articles/c8f2e751cd7877</id>
        <link href="https://zenn.dev/shimotaroo/articles/c8f2e751cd7877"/>
        <updated>2021-08-23T09:44:44.000Z</updated>
        <summary type="html"><![CDATA[概要
以下の記事でNext.jsにESlint（JSのコードが正しいか検証してくれるツール）を導入した時に

      
        
        Parsing error: Cannot find module 'next/babel'


      
      が出たので解決方法を残しておきます。
https://fwywd.com/tech/next-eslint-prettier
上記エラー出力が確認できたのは以下のファイル（Tailwind CSSを導入済み）

next.config.js
tailwind.config.js
postcss.config...]]></summary>
        <author>
            <name>ゆーたろー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Vue3]オンラインか否かを判定・監視する]]></title>
        <id>https://zenn.dev/udyest/articles/46b1fd84001663</id>
        <link href="https://zenn.dev/udyest/articles/46b1fd84001663"/>
        <updated>2021-08-23T08:59:15.000Z</updated>
        <summary type="html"><![CDATA[navigator.online

navigator.onlineで、現在オンラインか否かを判定できます。
オンライン状態ならtrue、オフライン状態ならfalseになります。

      
        
        console.log(navigator.online)


      
      
 onlineイベント / offlineイベント
navigator.onlineは、あくまで現在のオンライン状態を取得するにすぎません。なので、「オンラインになったら何かをする」といった監視の処理はできません。
オンライン状態を監視するには、onlineイベントと...]]></summary>
        <author>
            <name>udyest</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Atomic designを辞めて利用目的別のディレクトリ構成に移行する]]></title>
        <id>https://zenn.dev/ynakamura/articles/8fab06bba527b5</id>
        <link href="https://zenn.dev/ynakamura/articles/8fab06bba527b5"/>
        <updated>2021-08-23T08:29:33.000Z</updated>
        <summary type="html"><![CDATA[かれこれ４、５年くらいAtomic designに触れてきて、こんなに使いづらいのになんで使ってるんんだっけ？ってなったので、脳死と妥協のAtomic designを辞めたいというモチベを高め、重い腰を上げて考えてみました。

 前提
今回の趣旨はあくまでも共通コンポーネントにフォーカスしています。なのでpages(人によってはscreens,containersと命名しているかも)は考慮しません。
また、atomic designのデザインサイドの思想そのものについては言及しません。あくまでもディレクトリ構成の運用上の課題にフォーカスします。

 ディレクトリを分ける意味とは
そもそも...]]></summary>
        <author>
            <name>yoshihiro nakamura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】大学生が『友達が半自動的に追加される新感覚SNS モドキ`AutoF2F`』 をリリースしました 🎉🎉🎉]]></title>
        <id>https://zenn.dev/ezryow/articles/1639171ddb994a</id>
        <link href="https://zenn.dev/ezryow/articles/1639171ddb994a"/>
        <updated>2021-08-23T07:27:26.000Z</updated>
        <summary type="html"><![CDATA[今回、リリースしたアプリケーション

https://www.autof2f.io/

皆さん、SNSでこんな経験ありませんか？
「この人の投稿面白いな、でも勝手にフォローしても失礼じゃないかな？？？」
今回リリースしたアプリケーションは、**「無言でフォローしまっていいのか問題」**をプログラムで自動的に解決しようという目的をもとに開発されました。
一言でどのように解決するか説明すると、
匿名掲示板上のユーザAの書き込みを『いいね』し、その『いいね』が一定の値を超えると自動的にユーザAがフォローに追加されるというものです。

 AutoF2Fの名前の由来
このアプリケーションを開発する...]]></summary>
        <author>
            <name>EZ.Ryow</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueにフォーム検証機能を実装する (vuelidate)]]></title>
        <id>https://zenn.dev/tokusuke/articles/e42e6d4d63618a</id>
        <link href="https://zenn.dev/tokusuke/articles/e42e6d4d63618a"/>
        <updated>2021-08-23T02:33:18.000Z</updated>
        <summary type="html"><![CDATA[概要

Vue.jsのフォーム検証機能を実装するため、vuelidateを実装したお話です。


2019年に社内LTで発表したものを編集して投稿した記事です。
一部古い情報が残っている場合がございますので、ご留意ください。


 はじめに

話さないこと

Vue.jsの導入
Vue 3.x での実例紹介
カスタムバリデーションの方法


話すこと

vuelidateの導入
コンポーネントへの実装
Vue 2.x での実例紹介




 環境

Vue.js 2.x
Bootstrap 4.x
npm ?

当時のバージョンのメモを失念してましたが、13.x だったと思います。
...]]></summary>
        <author>
            <name>yosuke-dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue.jsから複数の画像をLaravelに送り保存する]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0885e71f6f3609"/>
        <updated>2021-08-22T23:45:51.000Z</updated>
        <summary type="html"><![CDATA[複数の画像を一度にアップロードしたい場合があると思います。
Laravel×Vue.jsで実際に試してみたので、メモがてら残しておきたいと思います。
まずは、画像をアップロードするところのHTMLです

      
        
        <template>
  <div v-for="(file, index) in files">
    <label>ファイルを選択する</label>
    <input type="file" @change="onFileChange($event, file, index)...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4)]]></title>
        <id>https://zenn.dev/dozo/articles/0b5940f1994a6c</id>
        <link href="https://zenn.dev/dozo/articles/0b5940f1994a6c"/>
        <updated>2021-08-22T21:20:21.000Z</updated>
        <summary type="html"><![CDATA[@wasm-tool/rollup-plugin-rustの使い方
関連記事:
Rustが征くシリーズ過去記事

WSL2で作るWindows開発環境: Rustが征く(1)
wasmerでWebAssemblyの門を叩く: Rustが征く(2)
JavaScriptからWebAssemblyの関数を呼び出す: Rustが征く(3)
TypeScriptとRollupでWebassemblyを稼働させる: Rustが征く(4) ← イマココ


------------------- ↓ 前書はここから ↓-------------------
前回はコマンドを駆使して、
ブラウザ上...]]></summary>
        <author>
            <name>dozo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker×FastAPI×React(TypeScript) on AWS ECS【frontend】]]></title>
        <id>https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348</id>
        <link href="https://zenn.dev/daisukesasaki/articles/9620f7fd0ca348"/>
        <updated>2021-08-22T14:14:08.000Z</updated>
        <summary type="html"><![CDATA[前回のbackend編からの続きです
backend編
正直、フロント側はさっぱりセンスが無い＋忘れまくってたりしたのでめちゃくちゃ調べ直した。
あらためて両方できる皆さんすごいわぁ、、（ちなみに僕はバックエンド側もセンスないです）
frontend側に入る前に前回やった内容がちょっと半端だったのでまずはそこをサクッと修正してしまおうと思います。

 crud.py

      
        
        # project/backend/app/api/crud.py
from app.models.pydantic import SummaryPayloadSchem...]]></summary>
        <author>
            <name>daisuke sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing with Next.js]]></title>
        <id>https://zenn.dev/takepepe/articles/testing-with-nextjs</id>
        <link href="https://zenn.dev/takepepe/articles/testing-with-nextjs"/>
        <updated>2021-08-22T13:29:53.000Z</updated>
        <summary type="html"><![CDATA[先日、Next.js で開発するアプリケーションテスト手法について、公式ドキュメントが追加され話題になりました。
https://twitter.com/delba_oliveira/status/1427307677709967362
取り上げられている 2 者はよく知られており、いずれかに触れたことがある方も多いかと思います。この公式ドキュメントページでは「何を使って」を紹介しているのみなので、どちらを選ぶべきか悩んだ方もいるのではないでしょうか？

Cypress
Jest & React Testing Library

この判断についてはドキュメントに書かれていなかった...]]></summary>
        <author>
            <name>Takepepe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】dynamic routingで、paramsがundefinedになる問題解決方法]]></title>
        <id>https://zenn.dev/kyo9bo/articles/e02fdaa36fa322</id>
        <link href="https://zenn.dev/kyo9bo/articles/e02fdaa36fa322"/>
        <updated>2021-08-22T06:03:00.000Z</updated>
        <summary type="html"><![CDATA[クエリが取得できない
Nextのメリットの一つとしてdynamic routingが挙げられると思います。しかし、paramを取得する際に一点気になる部分が存在します。

Pages that are statically optimized by Automatic Static Optimization will be hydrated without their route parameters provided, i.e query will be an empty object ({}).


After hydration, Next.js will trigger an...]]></summary>
        <author>
            <name>kyo9bo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでお手軽にWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/bb10104c12080e</id>
        <link href="https://zenn.dev/sora_kumo/articles/bb10104c12080e"/>
        <updated>2021-08-22T04:16:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでWeb-Workerを簡単に使うには
前回の記事で書きましたが、Next.jsには最初からWeb-Workerを読み込むためのWebPack設定が入っているので、そのまま利用することが可能です
しかしWeb-Workerとして書いたスクリプトを読み込む設定が入っているだけで、それ以外のサポートはありません
機能を利用するには、コード上でそれなりに面倒な手順を記述する必要があります

 前回の記事
Next.jsでWeb-Workerを呼び出す

 サンプル置き場
https://github.com/SoraKumo001/next-worker2
https://n...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでお手軽にWeb-Workerを呼び出す]]></title>
        <id>https://zenn.dev/sora_kumo/articles/bb10104c12080e</id>
        <link href="https://zenn.dev/sora_kumo/articles/bb10104c12080e"/>
        <updated>2021-08-22T04:16:21.000Z</updated>
        <summary type="html"><![CDATA[Next.jsでWeb-Workerを簡単に使うには
前回の記事で書きましたが、Next.jsには最初からWeb-Workerを読み込むためのWebPack設定が入っているので、そのまま利用することが可能です
しかしWeb-Workerとして書いたスクリプトを読み込む設定が入っているだけで、それ以外のサポートはありません
機能を利用するには、コード上でそれなりに面倒な手順を記述する必要があります

 前回の記事
Next.jsでWeb-Workerを呼び出す

 サンプル置き場
https://github.com/SoraKumo001/next-worker2
https://n...]]></summary>
        <author>
            <name>空雲</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Neovim builtin LSP設定入門]]></title>
        <id>https://zenn.dev/nazo6/articles/c2f16b07798bab</id>
        <link href="https://zenn.dev/nazo6/articles/c2f16b07798bab"/>
        <updated>2021-08-21T14:33:34.000Z</updated>
        <summary type="html"><![CDATA[Neovimには組み込みのLSPクライアントがあります。ちょっと前まではVSCode並の開発体験のためにはcocを使うのがベストな選択肢でしたが、neovim builtin lsp(以下nvim-lsp)でもエコシステムが整ってきており、かなりいい感じの支援機能が受けられます。この記事ではその設定などについて書いていこうと思います。

 環境

Linux (Windowsだと後述のlspinstallというプラグインが使えないのでおすすめできません。LSPを使うこと自体はできます。)
Neovim 0.5
Vimscriptは使わずLuaで書きます


 基本的な設定

 必須プラグ...]]></summary>
        <author>
            <name>nz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxtのサードパーティ製Javascriptの読み込む方法を色々試してみた]]></title>
        <id>https://zenn.dev/sengosha/articles/54ec4c57194626</id>
        <link href="https://zenn.dev/sengosha/articles/54ec4c57194626"/>
        <updated>2021-08-21T14:06:58.000Z</updated>
        <summary type="html"><![CDATA[サードパーティ製Javascriptを読み込ませる方法
Nuxtにサードパーティ製Javascript(以下外部ライブラリと称します）を読み込む方法は三つあります、headメソッドやnuxt.config.jsでの設定とpluginで読み込ませる方法です。
今回は開発中に外部ライブラリの導入にあたってheadメソッドとnuxt.config.jsで設定する方法を試していくつかの問題が起きてしまいまして、最後はpluginで読み込ませる方法を選ぶ経緯をまとめました。

 方法１ headメソッド
特定なページに外部ライブラリを読み込ませるには一番手軽な方法です。
こんな感じで書けば外部...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescriptで計算した結果をGithub Actionsに渡して使用する]]></title>
        <id>https://zenn.dev/kinjosan/articles/26cff4f92b9453</id>
        <link href="https://zenn.dev/kinjosan/articles/26cff4f92b9453"/>
        <updated>2021-08-21T08:25:26.000Z</updated>
        <summary type="html"><![CDATA[Github Actions 上で Typescript を実行して、その計算内容を Github Actions 上で使用したい時とかありますよね🎅

 TL;DR

Github Actions で Typescript 実行
@actions/core の setOutput を使用


 例
毎朝 10 時に aws のコストを取得して、aws のコストはドルなので、円に直して slack に通知
※細かい取得方法はテーマではないので省略してます

      
        
        const awsCost = 100; // ドル
const rate = 10...]]></summary>
        <author>
            <name>kinjo yuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascriptで数字 → 文字に変換]]></title>
        <id>https://zenn.dev/kinjosan/articles/04287460d854e4</id>
        <link href="https://zenn.dev/kinjosan/articles/04287460d854e4"/>
        <updated>2021-08-21T08:20:08.000Z</updated>
        <summary type="html"><![CDATA[toStringを使う

      
        
        const numToString = (num: number): string => num.toString();

numToString(1234)
// "1234"


      
      
 String関数を使用する

      
        
        const numToString = (num: number): string => String(num);
numToString(1234)
// "1234"


      
      undef...]]></summary>
        <author>
            <name>kinjo yuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UTF-8対応のBase64を自作する]]></title>
        <id>https://zenn.dev/kota_yata/articles/89b10ac8c93b92</id>
        <link href="https://zenn.dev/kota_yata/articles/89b10ac8c93b92"/>
        <updated>2021-08-21T05:29:11.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptでBase64を自作します。Denoの場合標準ライブラリにBase64が実装されていますので実際に利用する際はそちらを使ってください。

 完成品
一応Denoパッケージとしても公開しています。
https://github.com/kota-yata/ky_base64

 処理の流れ

 エンコーダー
Base64エンコードの大まかな流れは、

文字列のバイナリーを6bitsで区切る
余ったビットは末尾に0を加えて6bitsにする
予め定められている変換表に対応する文字に変換する
文字数が4の整数倍に満たない場合は=で埋め合わせる

という、割と単純なアルゴリズム...]]></summary>
        <author>
            <name>kota-yata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify/v-listを縦スクロールできるように]]></title>
        <id>https://zenn.dev/gz/articles/491b324570703a</id>
        <link href="https://zenn.dev/gz/articles/491b324570703a"/>
        <updated>2021-08-20T16:20:43.000Z</updated>
        <summary type="html"><![CDATA[HTMLのselectのように縦のすこし展開して、スクロールできるようにしたいです。
説明より、コードを見ればわかる。

      
        
        <v-list
 style="max-height: 150px"
 class="overflow-y-auto"
...


      
      以下のようになります。

virtual-scrollbarがありますが、クリックする時の動きとか、振る舞いが気に入りませんでした。
以上です。]]></summary>
        <author>
            <name>walking_on_ice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueのカスタムイベントで .prevent する]]></title>
        <id>https://zenn.dev/yufushiro/articles/12d1db1f390f05</id>
        <link href="https://zenn.dev/yufushiro/articles/12d1db1f390f05"/>
        <updated>2021-08-20T11:50:42.000Z</updated>
        <summary type="html"><![CDATA[要約
Vue テンプレートのイベントハンドラーにおける .prevent modifier は $event.preventDefault() と等価なので、カスタムイベントであっても preventDefault メソッドさえ定義すれば使うことができる。
おわり

 .prevent modifier とは
Vue テンプレートで a 要素などに対して @click.prevent="..." のようにしてイベントハンドラーを書くと、その要素の click イベントにおけるデフォルトのアクションを抑制することができる。


<a href="http://example.co...]]></summary>
        <author>
            <name>ゆふしろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021-8】 Next.js + TypeScript + Storybook(Atomic Design) + Sass + jest]]></title>
        <id>https://zenn.dev/yknight/articles/f0167dc5b0cceb</id>
        <link href="https://zenn.dev/yknight/articles/f0167dc5b0cceb"/>
        <updated>2021-08-19T18:54:15.000Z</updated>
        <summary type="html"><![CDATA[フロントエンド環境に実装をしたStorybookに、Sassを導入する
StorybookへのSassの導入でcss-loaderでエラーにはまり、手順の記事を書きました。
原因はWebpack4と５で破壊的な変更（更新）からPKGをインストールして解決できました。（めでたし）
でも、フロントエンド開発に必要そうなベーシックな環境構築を、「ざーーっと、まとめたかった」ことが、個人的には一番の記事の動機です。

 実装リスト

docker
Next.js/TypeScript
Sass
Storybook
jest
Atomic design

※導入は個人の責任でおねがいします。（...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2021-8】 Next.js + TypeScript + Storybook(Atomic Design) + Sass + jest]]></title>
        <id>https://zenn.dev/yknight/articles/f0167dc5b0cceb</id>
        <link href="https://zenn.dev/yknight/articles/f0167dc5b0cceb"/>
        <updated>2021-08-19T18:54:15.000Z</updated>
        <summary type="html"><![CDATA[フロントエンド環境に実装をしたStorybookに、Sassを導入する
StorybookへのSassの導入でcss-loaderでエラーにはまり、手順の記事を書きました。
原因はWebpack4と５で破壊的な変更（更新）からPKGをインストールして解決できました。（めでたし）
でも、フロントエンド開発に必要そうなベーシックな環境構築を、「ざーーっと、まとめたかった」ことが、個人的には一番の記事の動機です。

 実装リスト

docker
Next.js/TypeScript
Sass
Storybook
jest
Atomic design

※導入は個人の責任でおねがいします。（...]]></summary>
        <author>
            <name>y_Knight</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + YouTube Data API でchannelの情報を取得し表示してみる]]></title>
        <id>https://zenn.dev/shimapon3/articles/90b32eb39acc50</id>
        <link href="https://zenn.dev/shimapon3/articles/90b32eb39acc50"/>
        <updated>2021-08-19T10:50:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Next.jsでYouTube Data APIに触ってみたいと思います。
下のように任意のチャンネルの情報を表示するまでの手順を記載します。

表示例

 ドキュメント
Youtube Data API Channels：　https://developers.google.com/youtube/v3/docs/channels

 環境

macOS Big Sur	 (v11.2.1)
Node.js (v16.3.0)


 API Keyを取得する
まずは、YouTube Data APIでプロジェクトを作成し、API keyを取得しましょう。


Google...]]></summary>
        <author>
            <name>shimapon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase HostingでBasic認証をかける ~TypeScript編~]]></title>
        <id>https://zenn.dev/kingu/articles/c32dfd9ca28fe8</id>
        <link href="https://zenn.dev/kingu/articles/c32dfd9ca28fe8"/>
        <updated>2021-08-19T09:32:59.000Z</updated>
        <summary type="html"><![CDATA[開発中だから見られたくない、特定の人にだけ見せたいなどで簡単に認証かけたいとなるとBasic認証である。
Firebase HostingでもCloud Functionsと連携すれば実現できる。

 ググるといっぱい出てくるが...
https://www.google.com/search?q=firebase+hosting+basic認証
なぜかCloud FunctionsはJavaScriptベースしか出てこなかった。
TypeScriptでやろうとしてちょっとハマったので共有していく。

見つけられなかっただけかも...


 手順
とは言え特別にやることはない。

Fir...]]></summary>
        <author>
            <name>kingu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify/v-autocompleteのポップアップメニューの位置ずれ]]></title>
        <id>https://zenn.dev/gz/articles/378ed050719e75</id>
        <link href="https://zenn.dev/gz/articles/378ed050719e75"/>
        <updated>2021-08-19T08:41:12.000Z</updated>
        <summary type="html"><![CDATA[答え：
menu-propsを利用します。
サンプル：

      
        
        :menu-props="{nudgeRight: 10, nudgeTop: 20}"


      
      ポップアップメニューの正体はv-menuですので、詳細はv-menuのAPIをご参照ください。
※注意点：APIのほうでnudge-rightと書かれているもの、nudgeRightのように書き換えてください。]]></summary>
        <author>
            <name>walking_on_ice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[デザインパターン ~Strategyパターン~]]></title>
        <id>https://zenn.dev/bonfireman/articles/1baea537219738</id>
        <link href="https://zenn.dev/bonfireman/articles/1baea537219738"/>
        <updated>2021-08-18T15:12:00.000Z</updated>
        <summary type="html"><![CDATA[Strategyとは？
GoF（Gang of Four）デザインパターンの一つであり、さまざまなビジネスルールやアルゴリズムの変更が発生した際に、使用する側には意識させる事なく、柔軟に変更を可能にするためのパターンです。

 コードを書いてみよう
今回は、以下のようなにネットで購入できる「写真」があったとします。
写真のサイズには「L」「2L」「DL（ダウンロード）」の３種類があり、それぞれの定価があります。

 Strategyを使わない場合

      
        
        class Photo {
// 種類
  private _size: 'L' | '...]]></summary>
        <author>
            <name>Shota Nakano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでのDIと、Tsyringeについて]]></title>
        <id>https://zenn.dev/chida/articles/1f7df8f2beb6b6</id>
        <link href="https://zenn.dev/chida/articles/1f7df8f2beb6b6"/>
        <updated>2021-08-18T15:04:41.000Z</updated>
        <summary type="html"><![CDATA[DIとは
DI（Dependency Injection）とは、日本語訳で依存性の注入です。依存性の注入と聞くと、依存性という抽象的な概念を何かに注入するような印象を与えますが、依存性という言葉自体は依存対象を表します。
DIにおける依存対象は、オブジェクトのインスタンスです。つまり、Dependencyはオブジェクトのインスタンスを指します。そして、Injectionは外部から挿入するという意味を持つため、DIはオブジェクトのインスタンスを外部から挿入するという事になります。

 DIのコード
DIの対応前後のサンプルコードで比較を確認します。次のコードは、ブラウザのコンソールに「...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
</feed>