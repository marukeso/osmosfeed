<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marukeso.github.io/osmosfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-08-09T01:04:26.752Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://marukeso.github.io/osmosfeed/index.html"/>
    <link rel="self" href="https://marukeso.github.io/osmosfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[react-markdownで詰まったのでメモ]]></title>
        <id>https://zenn.dev/tomi/articles/2021-08-08-next-issue</id>
        <link href="https://zenn.dev/tomi/articles/2021-08-08-next-issue"/>
        <updated>2021-08-08T13:49:23.000Z</updated>
        <summary type="html"><![CDATA[next.jsで新しいプロジェクトを作っている際にハマってしまった問題に関しての解決策です。
この問題に関しては、バージョンに起因すると思われますので、2021年8月時点での話であり、新しいバージョンが出ている場合は、解決しているかもしれません。
それまでの参考までにご活用ください。

 問題
next.jsをreact-markdownを使ってマークダウンからブログ記事を書くような利用は多いということは、関連記事の多さからも異論はないと思います。
私も１年前からこの組み合わせでブログ書いたりしています。最近マークダウンを使用する別のサイトのプロジェクトを作成し、react-markdo...]]></summary>
        <author>
            <name>Tomiaki Matsumura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Chakra UIプロジェクトにStorybookを導入する]]></title>
        <id>https://zenn.dev/a_da_chi/articles/2128cecc29635a</id>
        <link href="https://zenn.dev/a_da_chi/articles/2128cecc29635a"/>
        <updated>2021-08-08T08:28:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
今回はNext.js+Chakra UIプロジェクトにStorybookを導入する手順を書いていきたい思います。

 導入手順


npx sb initを実行
設定ファイルを修正
Storyを追加


 npx sb initを実行

      
        
        npx sb init


      
  ...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Ionic×Vue】並び替え(Reorder)リストの作り方]]></title>
        <id>https://zenn.dev/tentel/articles/040a0251dab79f</id>
        <link href="https://zenn.dev/tentel/articles/040a0251dab79f"/>
        <updated>2021-08-08T07:19:13.000Z</updated>
        <summary type="html"><![CDATA[Ionicでリストの並び替えを実装する場合に利用可能な、Reorderコンポーネントの使い方まとめ

 基本情報

 props



props名
型
初期値
説明




disabled
boolean
true
並び替えを禁止するかどうか。




 emit



emit名
戻り値
説明




ionItemReorder
Event
並び替えを完了させるために呼ぶ必要があるイベント。戻り値のEventの中にcompleteメソッドがあり、completeメソッドを呼び出すことで並び替えが完了する。呼び出さない場合は、並び替えが完了せずにフリーズする。



戻り値の中身
...]]></summary>
        <author>
            <name>てんてる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js/Serverless Frameworkでisr対応サイトを立ち上げる]]></title>
        <id>https://zenn.dev/ptpadan/articles/serverless-next-isr</id>
        <link href="https://zenn.dev/ptpadan/articles/serverless-next-isr"/>
        <updated>2021-08-08T05:17:42.000Z</updated>
        <summary type="html"><![CDATA[メディアを Next.js/Headless CMS でメディアを開発を行っているので、の技術選定やハマりどころをまとめていきます。
使用している技術の概要は下記です。

Next.js は Serverless Framework を使用して AWS 上にデプロイ
Headless CMS は、Prismic を使用


 Serverless frameworkの選定理由
AWS からインフラを分離したくない事情があったため、Vercel や Firebase Hosting 等は選択肢外でした。
別のプロダクトでは ecs を使用しているのですが、メディアはメインプロダクトではない...]]></summary>
        <author>
            <name>yasushi.kobayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker で React + TypeScript の開発環境構築 2021]]></title>
        <id>https://zenn.dev/sprout2000/articles/1ee32fa0181870</id>
        <link href="https://zenn.dev/sprout2000/articles/1ee32fa0181870"/>
        <updated>2021-08-07T07:27:01.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
Docker Desktop （docker デーモン）を起動させておいて…

      
        zsh
        % git clone git@github.com:sprout2000/cra.git
% cd cra
% docker-compose up cra


      
      localhost:3000 を開きましょう。これだけです。

 手順

 1. Docker のインストール
公式ドキュメントに従ってインストールしましょう。
https://docs.docker.com/docker-for-windows/inst...]]></summary>
        <author>
            <name>sprout2000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DOM, Node, Elementの違い]]></title>
        <id>https://zenn.dev/sqer/articles/2d4def0f07bf04c5cc47</id>
        <link href="https://zenn.dev/sqer/articles/2d4def0f07bf04c5cc47"/>
        <updated>2021-08-07T06:05:15.000Z</updated>
        <summary type="html"><![CDATA[DOM, Node, Elementについてそれぞれの違いを説明できますか？
DOM
Node
Element
実践！NodeをElementに変換する
まとめ
リンク


 DOM, Node, Elementについてそれぞれの違いを説明できますか？
Web開発において、これらをすべて「要素」として呼んで曖昧にしていると型定義などで詰まることがあります。
この３つの名称、実は明確な違いがあると知っていましたか？
これを期にマスターしましょう。

 DOM
DOMは、「Document Object Model、つまりドキュメントを物として扱うモデル」のことを言います。
DOMツリーと...]]></summary>
        <author>
            <name>sqer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blitz.js の prisma で MongoDB を使う！！！！]]></title>
        <id>https://zenn.dev/yuiseki/articles/5a3b418ca06581</id>
        <link href="https://zenn.dev/yuiseki/articles/5a3b418ca06581"/>
        <updated>2021-08-07T02:18:30.000Z</updated>
        <summary type="html"><![CDATA[Blitz.jsをインストールしてプロジェクトを生成する

      
        
        npm install -g blitz --legacy-peer-deps
cd blitz-hoge


      
      参考文献

https://blitzjs.com/docs/get-started
https://blitzjs.com/docs/tutorial



 db/schema.prisma を編集する
注意点

prismaのMongoDB対応はPreviewFeature
Cascading delete（リレーションを張った親モデル...]]></summary>
        <author>
            <name>yuiseki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[内部モジュールでは TypeScript をコンパイルせずに配る]]></title>
        <id>https://zenn.dev/mizchi/articles/no-traspiled-typescript</id>
        <link href="https://zenn.dev/mizchi/articles/no-traspiled-typescript"/>
        <updated>2021-08-06T08:23:18.000Z</updated>
        <summary type="html"><![CDATA[主張
現代では、 npm に publish するものを除けば TypeScript をコンパイルして配布する必要はほぼないと考えています。
TypeScript のコンパイルをしない環境、例えば deno や rome を使うと、コンパイルをするというステップが省くことで開発体験が大きく向上する、という肌感があり、ローカル環境ならこのメリットを優先するべきと考えています。
基本的に、ビルドはフロントエンド/サーバーともに配布前の最後の一回だけでいいはず、というのが自分の主張です。
https://github.com/denoland/deno

Rome Toolchain
De...]]></summary>
        <author>
            <name>mizchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React コンポーネントの書き方をチームで統一する]]></title>
        <id>https://zenn.dev/januswel/articles/a54aedc09fe7bc</id>
        <link href="https://zenn.dev/januswel/articles/a54aedc09fe7bc"/>
        <updated>2021-08-06T05:05:29.000Z</updated>
        <summary type="html"><![CDATA[次の記事を見てなるほどと思ったものの、コンポーネント集作成の視点で書かれている。我々はアプリを作る機会が多いので、その際はどういう書き方が楽なのか、チームで共有するために類型を洗い出し、比較した。
https://kray.jp/blog/dont-have-to-use-react-fc-and-react-vfc/

 TL;DR
関数での書き方を覚えれば良いと判断した。

      
        
        function MyComponent(props: React.PropsWithChildren<Props>) {
  if (props.ti...]]></summary>
        <author>
            <name>januswel</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パスワードレス認証サービスGAZEPASSを使ってみた]]></title>
        <id>https://zenn.dev/gaomar/articles/12c8664058638b</id>
        <link href="https://zenn.dev/gaomar/articles/12c8664058638b"/>
        <updated>2021-08-06T01:39:20.000Z</updated>
        <summary type="html"><![CDATA[GAZEPASSというパスワードレスでログイン認証するシステムを使ってみました。
端末にある生体認証機能を使って認証する仕組みです。生体認証が無いデバイスは顔認証することができます。
※現在はbeta版なので無料で使えますが、今後は 有料化 になる可能性がありますのでご注意ください。

 お試し環境
下記からどういうものか動かすことができます。
https://www.katacoda.com/gaomar/scenarios/gazepass-handson-playground

 1. API Keysを作成しよう
GAZEPASSサイトにアクセスしてアカウントを発行します。

 ...]]></summary>
        <author>
            <name>がおまる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjs AMPモードで Google Analyticsを動かしたい]]></title>
        <id>https://zenn.dev/dl10yr/articles/021c1b0fc2ec35</id>
        <link href="https://zenn.dev/dl10yr/articles/021c1b0fc2ec35"/>
        <updated>2021-08-05T12:11:57.000Z</updated>
        <summary type="html"><![CDATA[最重要なこと
GA4ではなくユニバーサルアナリティクスのプロパティ（UA-始まりのID）を使うこと！ (2021年8月4日現在、私調べ）

      
        
        [AmpAnalytics <unknown id>] No triggers were found in the config. No analytics data will be sent.


      
      GA4のIDでは動きませんでした...
https://github.com/ampproject/amphtml/issues/30903

 実装方針
AMP対...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最低限わかるVue Composition API]]></title>
        <id>https://zenn.dev/masakitm/articles/6b5e31549c03d9</id>
        <link href="https://zenn.dev/masakitm/articles/6b5e31549c03d9"/>
        <updated>2021-08-05T03:18:54.000Z</updated>
        <summary type="html"><![CDATA[この資料について
この資料はVue2.0で動くプロダクトでVue Composition APIについて簡単に解説し、関心をもってもらうために用いた際のものです。
対象読者は以下を想定しています。

VueのOption API（今までの書き方）をさわったことがある
React Hooksの経験がない

より詳細な知識は公式ドキュメントよりご参照ください。

 Vue 3系のコンポジションapi について

 ってなんですか

今までとは違う書式でvueを書ける記法
今後主流になりそう
reactのhooks apiに強く影響をうけている
https://ja.reactjs.org...]]></summary>
        <author>
            <name>masakitm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[現場のフロントエンド開発環境を Dart Sass へマイグレーションする覚書]]></title>
        <id>https://zenn.dev/toshimarnie/articles/c7cb99994075a3</id>
        <link href="https://zenn.dev/toshimarnie/articles/c7cb99994075a3"/>
        <updated>2021-08-05T02:49:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Sass の公式ドキュメントで 2020 年 10 月に LibSass の利用は非推奨 になり、Dart Sass の利用を推奨しています。そんな折、筆者が所属するフロントエンド開発チームでは LibSass を利用しており Dart Sass へ移行を進めました。本稿は LibSass から Dart Sass の移行についてご紹介します。本移行時の Dart Sass のバージョンは 1.32.7 になります。

LibSass の非推奨は『継続的にメンテナンスをするが、将来的に追加予定の CSS および Sass の新機能の互換性を担保しない』という意味になります。...]]></summary>
        <author>
            <name>Toshifumi Imanishi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueのCompositionAPIとgraphql-code-generatorの体験が良いので紹介したい。]]></title>
        <id>https://zenn.dev/yoshixj/articles/d460f4d9cfb299</id>
        <link href="https://zenn.dev/yoshixj/articles/d460f4d9cfb299"/>
        <updated>2021-08-04T23:09:36.000Z</updated>
        <summary type="html"><![CDATA[vue3がリリースされてから、時間が立ちました。CompositionAPIはどれくらい使用されているのでしょうか。自分は新規開発をすることが多いので、小さいLPなども含めると5つくらいのプロジェクトをNuxt × CompositionAPIで作ってきました。
そのなかで、CompositionAPIの体験がよいと思ったので軽く紹介します。

 CompositionAPIのメリット
CompositionAPIと以前からあるOption APIの違いを説明するとなった時に以下のような図が用いられます。

記述がまとまるということを示しているのですが、これがまとまったことで読みやすくな...]]></summary>
        <author>
            <name>yoshixj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueのCompositionAPIとgraphql-code-generatorの体験が良いので紹介したい。]]></title>
        <id>https://zenn.dev/yoshixj/articles/d460f4d9cfb299</id>
        <link href="https://zenn.dev/yoshixj/articles/d460f4d9cfb299"/>
        <updated>2021-08-04T23:09:36.000Z</updated>
        <summary type="html"><![CDATA[vue3がリリースされてから、時間が立ちました。CompositionAPIはどれくらい使用されているのでしょうか。自分は新規開発をすることが多いので、小さいLPなども含めると5つくらいのプロジェクトをNuxt × CompositionAPIで作ってきました。
そのなかで、CompositionAPIの体験がよいと思ったので軽く紹介します。

 CompositionAPIのメリット
CompositionAPIと以前からあるOption APIの違いを説明するとなった時に以下のような図が用いられます。

記述がまとまるということを示しているのですが、これがまとまったことで読みやすくな...]]></summary>
        <author>
            <name>yoshixj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim戦記 Part1]]></title>
        <id>https://zenn.dev/vampire_yuta/articles/c4703f4232f16b</id>
        <link href="https://zenn.dev/vampire_yuta/articles/c4703f4232f16b"/>
        <updated>2021-08-04T16:28:43.000Z</updated>
        <summary type="html"><![CDATA[基本操作

参照（https://knowledge.sakura.ad.jp/21687/）

 カーソル移動
h → 左に移動
j → 下に移動
k → 上に移動
l → 右に移動
gg → 最初の行へ移動
GG → 最後の行へ移動
Ctrl+f → 上へページスクロール
Ctrl+b → 下へページスクロール
zz → カーソル位置を中央へ
{ → 前の空行まで移動
} → 次の空行まで移動
w → 文字単位で次に移動
W → 区切り文字なしで次の文字に移動
b → 文字単位で前の文字に移動
B → 区切り文字なしで前の文字に移動

 進む戻る
Ctrl + r → 一つ前の操...]]></summary>
        <author>
            <name>vampire_yuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerで立てたNode.js, TypeScript環境にESLintとprettierを導入して、VSCode保存でコード整形も行う]]></title>
        <id>https://zenn.dev/unemployed/articles/prettier-eslint</id>
        <link href="https://zenn.dev/unemployed/articles/prettier-eslint"/>
        <updated>2021-08-04T06:11:36.000Z</updated>
        <summary type="html"><![CDATA[最初に
綺麗なコードを書きたいという事で、Stripe の API を試す環境（TypeScript と Express）に ESLint と Prettier を導入してコードを静的解析、整形出来る環境を作ろうと思う。

 node.js の環境構築
今回も docker-compose を使ってサクッと作ろうと思う。docker じゃなく docker-compose を使う理由はポートをルーティングしたコンテナの起動等が docker-compose.yml に記述出来るので起動時のコマンドを省略出来るので使用している。単一のコンテナを利用する際でも便利だと思う。
軽量な no...]]></summary>
        <author>
            <name>大学生だった.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wip 【音楽ファイル詳細表示機能】storeをモジュール化して、getterを参照したい]]></title>
        <id>https://zenn.dev/tanoken729/articles/6a96bff90b8e12</id>
        <link href="https://zenn.dev/tanoken729/articles/6a96bff90b8e12"/>
        <updated>2021-08-03T15:32:50.000Z</updated>
        <summary type="html"><![CDATA[成功
store/musicFiles.js

      
        
        export const state = () => ({
  musicFileData: [],
})

export const getters = {
  musicFileData: state => state.musicFileData
}

export const mutations = {
  setMusicFileDataMutations(state, musicFileData) {
    // console.log(musicFileData)
 ...]]></summary>
        <author>
            <name>tanoken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InsightFaceで顔認証（特徴量抽出、比較）してみた]]></title>
        <id>https://zenn.dev/yuyakato/articles/d35b185d36a33b</id>
        <link href="https://zenn.dev/yuyakato/articles/d35b185d36a33b"/>
        <updated>2021-08-03T13:48:56.000Z</updated>
        <summary type="html"><![CDATA[目次

InsightFaceとFastAPIで顔検出サーバを作ってみた
InsightFaceの顔検出結果をNext.jsで可視化してみた
InsightFaceで顔認証（特徴量抽出、比較）してみた（本記事）


 初めに
前回、前々回と、InsightFaceを使った顔検出の例を紹介しました。
今回は、InsightFaceを使って顔認証（Face Recognition）を試してみたいと思います。

 顔認証とは
顔認証とは:

提示された画像に含まれている顔が、事前に登録されているどの顔に一番近いか？
2つの顔画像、顔Aと顔Bはどれだけ類似しているか？

みたいなことを調べる...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08-03のJS: Yarn 3.0、Chrome 93 beta、cross origin iframeでのalert/prompt/confirmを削除]]></title>
        <id>https://jser.info/2021/08/03/yarn3-chrome93-beta-deprecate-alert/</id>
        <link href="https://jser.info/2021/08/03/yarn3-chrome93-beta-deprecate-alert/"/>
        <updated>2021-08-03T03:38:52.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #551 - Yarn 3.0がリリースされました。
Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches, ... - DEV Community 👩‍💻👨‍💻
berry/CHANGELOG.md at master · yarnpkg/berry
Node.js 10のサポート終了、.pnp.cjsにリネーム、@yarnpkg/pnpifyを3つのパッケージに分解などの変更を含んでいます。
@yarnpkg/sdks: Editor SDKs
@yarnpkg/pnpify: PnPと互換性のないツールを実行するツール
@yarnpkg/nm: node_modules linker
また、 exportsフィールドのサポート、pnpmライクなハードリンクのサポート、シェル構文のサポート改善、 ESBuildでのbundleをサポートする@yarnpkg/esbuild-plugin-pnpの追加なども含まれています。
Chrome 93 betaがリリースされました。
Chromium Blog: Chrome 93: Multi-Screen Window Placement, PWAs as URL Handlers, and More
Origin TrialとしてCOEPの導入をより手軽にするためのCross-Origin-Embedder-Policy：credentialless、URL Handlersの追加などが含まれています。
AbortSignal.abort()メソッドのサポート、Stage 3のError causeとObject.hasOwnのサポートも含まれています。
ダークモード対応などではCSSのprefers-color-scheme media quer…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue packages version mismatch:   エラーを確認 -> 解消する]]></title>
        <id>https://zenn.dev/koushikagawa/articles/d253bb1afc591f</id>
        <link href="https://zenn.dev/koushikagawa/articles/d253bb1afc591f"/>
        <updated>2021-08-03T03:14:35.000Z</updated>
        <summary type="html"><![CDATA[vue と vue-server-renderer で version mismatch
先日Nuxtプロジェクトで npm run dev を実行した際に、下記エラーが表示されました。

      
        
         ✖ Nuxt Fatal Error  
 Error:    
 Vue packages version mismatch:   
 - vue@2.6.11    
 - vue-server-renderer@2.6.14    
 This may cause things to work incorrectly. Make sure t...]]></summary>
        <author>
            <name>koushikagawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker×FastAPI×React(TypeScript) on AWS ECS【backend】]]></title>
        <id>https://zenn.dev/daisukesasaki/articles/f18dd6554f94e3</id>
        <link href="https://zenn.dev/daisukesasaki/articles/f18dd6554f94e3"/>
        <updated>2021-08-02T20:31:44.000Z</updated>
        <summary type="html"><![CDATA[はい、やってみた系です。
最近ずーっとInputばっかりだったのでやったこと書くか。。となった次第です。
ECSとか使ったことなかったので。（高いし。。）
※お金は知らんうちに全然可愛くない金額になってるのでご利用は計画的に（RDSとかも使ってたけど１週で3000円弱くらいになってた。。）

 最終構築のイメージ
何章かに分けて作成していきますが、全部終わったらこうなるイメージ
（今回はbackend編）


 動作環境

BigSur ver11.4
MacBook Pro (13-inch, 2019, Two Thunderbolt 3 ports)
1.4 GHz クアッドコ...]]></summary>
        <author>
            <name>daisuke sasaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型駆動開発]]></title>
        <id>https://zenn.dev/kazuhe/articles/type-driven-development-typescript</id>
        <link href="https://zenn.dev/kazuhe/articles/type-driven-development-typescript"/>
        <updated>2021-08-02T15:54:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
型駆動開発とはどんなもので実践すると何が嬉しいのかを自分なりに理解するためにこの記事を書きます。
2021年8月時点では「型駆動開発」でググっても意図した内容がヒットせず、「Type-Driven Development」と検索して英語の記事が何件かヒットする程度です。
自分の「型駆動開発」に対しての理解・認識が世間一般のそれと相違がある場合もありますので、何か思うところがあればご指摘いただければ大変嬉しく思います。
また、この記事ではTypeScriptとVue.jsでフロントエンドのコードを書いていきます。TypeScriptは必須の前提ですがReactでも同じような考...]]></summary>
        <author>
            <name>kazuhe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptで型駆動開発]]></title>
        <id>https://zenn.dev/kazuhe/articles/type-driven-development-typescript</id>
        <link href="https://zenn.dev/kazuhe/articles/type-driven-development-typescript"/>
        <updated>2021-08-02T15:54:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
型駆動開発とはどんなもので実践すると何が嬉しいのかを自分なりに理解するためにこの記事を書きます。
2021年8月時点では「型駆動開発」でググっても意図した内容がヒットせず、「Type-Driven Development」と検索して英語の記事が何件かヒットする程度です。
自分の「型駆動開発」に対しての理解・認識が世間一般のそれと相違がある場合もありますので、何か思うところがあればご指摘いただければ大変嬉しく思います。
また、この記事ではTypeScriptとVue.jsでフロントエンドのコードを書いていきます。TypeScriptは必須の前提ですがReactでも同じような考...]]></summary>
        <author>
            <name>kazuhe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Next.js Component のISR実装を読み解く]]></title>
        <id>https://zenn.dev/laiso/articles/8c619c38bd7b7b</id>
        <link href="https://zenn.dev/laiso/articles/8c619c38bd7b7b"/>
        <updated>2021-08-02T15:13:59.000Z</updated>
        <summary type="html"><![CDATA[AWS Amplify ConsoleでNext.jsのプロジェクトをデプロイすると Serverless Next.js Component のインテグレーションによってAWS Lambda リソースが最大4つ作成される(ソースコードはエクスポートできる)

Default Lambda@Edge for Next CloudFront distribution
API Lambda@Edge for Next CloudFront distribution
Image Lambda@Edge for Next CloudFront distribution
Next.js Regen...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Typescript+ContextAPIで予算トラッカーを作ってみた]]></title>
        <id>https://zenn.dev/kenta0313/articles/eb1c38209aa30e</id>
        <link href="https://zenn.dev/kenta0313/articles/eb1c38209aa30e"/>
        <updated>2021-08-02T08:31:47.000Z</updated>
        <summary type="html"><![CDATA[今回作ったもの
作品はこちら
コードはこちら

 作った経緯
ContextAPIを使ってみたかった為

 コードの解説

 コンポーネントをAppContextに接続する

      
        
        import React, { useContext } from 'react';
import { AppContext } from '../context/AppContext';

const Budget = () => {
	const { budget } = useContext(AppContext);
	return (
		<d...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js+Typescript+ContextAPIで予算トラッカーを作ってみた]]></title>
        <id>https://zenn.dev/kenta0313/articles/eb1c38209aa30e</id>
        <link href="https://zenn.dev/kenta0313/articles/eb1c38209aa30e"/>
        <updated>2021-08-02T08:31:47.000Z</updated>
        <summary type="html"><![CDATA[今回作ったもの
作品はこちら
コードはこちら

 作った経緯
ContextAPIを使ってみたかった為

 コードの解説

 コンポーネントをAppContextに接続する

      
        
        import React, { useContext } from 'react';
import { AppContext } from '../context/AppContext';

const Budget = () => {
	const { budget } = useContext(AppContext);
	return (
		<d...]]></summary>
        <author>
            <name>KenT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm + Vite + Vue + TypeScript で新規プロジェクトを作成する]]></title>
        <id>https://zenn.dev/yukination/articles/e854062cea4920</id>
        <link href="https://zenn.dev/yukination/articles/e854062cea4920"/>
        <updated>2021-08-02T06:26:46.000Z</updated>
        <summary type="html"><![CDATA[npm と比べて早いと話題の pnpm を使用してプロジェクトを新規作成したので備忘録として残します。
こちら に公式が発表しているベンチマークの結果があります。
npm や yarn との違いはこちらの記事が分かりやすくてオススメです。

 node.js のバージョンを確認
現在使用している Node.js のバージョンが 12 以上か？の確認を行います。

      
        
        > node -v
v16.4.2


      
      
 pnpm を新規インストール
npm を使用し pnpm のインストールを行います。

      
 ...]]></summary>
        <author>
            <name>Yukination</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pnpm + Vite + Vue + TypeScript で新規プロジェクトを作成する]]></title>
        <id>https://zenn.dev/yukination/articles/e854062cea4920</id>
        <link href="https://zenn.dev/yukination/articles/e854062cea4920"/>
        <updated>2021-08-02T06:26:46.000Z</updated>
        <summary type="html"><![CDATA[npm と比べて早いと話題の pnpm を使用してプロジェクトを新規作成したので備忘録として残します。
こちら に公式が発表しているベンチマークの結果があります。
npm や yarn との違いはこちらの記事が分かりやすくてオススメです。

 node.js のバージョンを確認
現在使用している Node.js のバージョンが 12 以上か？の確認を行います。

      
        
        > node -v
v16.4.2


      
      
 pnpm を新規インストール
npm を使用し pnpm のインストールを行います。

      
 ...]]></summary>
        <author>
            <name>Yukination</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js/JST で時刻をやりとりするにあたって]]></title>
        <id>https://zenn.dev/shztmk/articles/05_javascript-timezone</id>
        <link href="https://zenn.dev/shztmk/articles/05_javascript-timezone"/>
        <updated>2021-08-02T06:12:37.000Z</updated>
        <summary type="html"><![CDATA[予備知識
JavaScript の Date オブジェクトは、時刻を実行環境のタイムゾーンで保持している、とみなすことができます。
すなわち new Date('2020-01-01T09:00:00+09:00') としたとき

実行環境が JST ならば 2020-01-01T09:00:00+09:00

実行環境が UTC ならば 2020-01-01T00:00:00Z

実行環境が EST ならば 2019-12-31T19:00:00-05:00


として保持していることになります。

 懸念点
2020-01-01T00:00:00+09:00 という文字列を受け取...]]></summary>
        <author>
            <name>shztmk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim script. カーソル下のリンクの<title>を取得して、テキストリンクに置き換える。]]></title>
        <id>https://zenn.dev/kis9a/articles/vim-expand-link-to-text-link</id>
        <link href="https://zenn.dev/kis9a/articles/vim-expand-link-to-text-link"/>
        <updated>2021-08-02T01:24:44.000Z</updated>
        <summary type="html"><![CDATA[初めに
Vim では、リンクの上でgxをタイプすることで、ブラウザーでそのリンクを開くことができます。それを参考に、今回はカーソル下のリンクの<title>を取得して、テキストリンクに置き換える関数を書いてみました。単純ですが、個人的に markdown でメモを取る時や、参考 URL を書く時などに便利に使用しています。

 イメージ

vim-expand-link-to-text-link

 1.カーソル下のリンクを取得する。
これが、結構難しいと思っていましたが、案外簡単でした。

      
        
        expand('<cfil...]]></summary>
        <author>
            <name>kis9a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[簡単にVue.jsからNuxt.js(SPA)へ移行する手引き]]></title>
        <id>https://zenn.dev/shippokun/articles/8f9d13d7b05ed0</id>
        <link href="https://zenn.dev/shippokun/articles/8f9d13d7b05ed0"/>
        <updated>2021-08-01T17:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！ しっぽくんです
Vue.js をずっとやってきましたが、社内で Vue.js から Nuxt.js へ移行するプロジェクトが出てきたので参考程度に記事を書くことにしました
本記事では Vue.js から　Nuxt.js（SPA）　へ移行する手順を説明します

 はじめに
Vue.js から Nuxt.js へ移行するモチベーションは色々あります
例えばSEO対策、SSR・SSGをやりたい、 middleware や plugin を使って楽をしたい、 Nuxt.js 特有の機能を使いたいなどなど…
「Vue.js Nuxt.js 移行」と検索すると様々な記事がヒットしますが...]]></summary>
        <author>
            <name>しっぽくん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jest setTimeout()のようなでタイマー関数をテストする]]></title>
        <id>https://zenn.dev/azukiazusa/articles/67e059d7b7f3c7</id>
        <link href="https://zenn.dev/azukiazusa/articles/67e059d7b7f3c7"/>
        <updated>2021-08-01T13:04:25.000Z</updated>
        <summary type="html"><![CDATA[JavaScriptには、以下のような時間に関する関数が用意されています。

setTimeout
setInterval
clearTimeout
clearInterval

例えば、setTimeoutは第1引数で渡したコールバック関数を第2引数で渡したミリ秒後に実行します。
標準で用意されている非常に便利な関数群ですが、ユニットテストを記述するときには少々困りものです。setTimeoutのコールバック関数に渡した処理が正しく呼び出されているかどうか調べたいようない場合には、setTimeoutのコールバックが呼び出されるまで待機する処理を挟む必要があります。
setTimeou...]]></summary>
        <author>
            <name>azukiazusa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[超入門] FizzBuzzで考える関数型プログラミング学習を純粋関数型言語でやる理由]]></title>
        <id>https://zenn.dev/ababup1192/articles/a5f5c232b502d6</id>
        <link href="https://zenn.dev/ababup1192/articles/a5f5c232b502d6"/>
        <updated>2021-08-01T12:03:48.000Z</updated>
        <summary type="html"><![CDATA[先日、関数型プログラミングはまずは純粋関数型言語を用いて、考え方から理解しよう
と言う記事を書かせていただきました。納得の声をたくさん頂きましたが、それでは純粋関数型プログラミング言語を闇雲に初めて勘所がわかった！とはすぐにはならないと思い、順調にステップアップするための記事を書こうと思いました。また、考え方が違うだけで関数型プログラミング言語を学んだり使用する理由は特にないとの意見をいただいたので、改めて実例と共に関数型プログラミング言語を確認していただければなと思います。
今回の記事ではFizzBuzzとElmを利用して解説をしていきたいと思います。FizzBuzzは使い古された例で...]]></summary>
        <author>
            <name>ABAB↑↓BA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Apps Script向け簡易job-queueを作った]]></title>
        <id>https://zenn.dev/katzumi/articles/58354fb4d05038</id>
        <link href="https://zenn.dev/katzumi/articles/58354fb4d05038"/>
        <updated>2021-08-01T08:46:58.000Z</updated>
        <summary type="html"><![CDATA[Motivation
個人的にいくつかのSlackボットをGoogle Apps Script（以下GAS）で実装していますが、3秒ルールの壁があってイベント処理がタイムアウトしてしまうという課題がありました。
Slackの公式ドキュメントには3秒以内にレスポンスできない処理は、一旦レスポンスして非同期処理でイベントのペイロードにあるレスポンスURLに書き込めとありました。
GAS内で非同期処理を行うには、トリガー処理を組み合わせして実現できそうでした。
https://developers.google.com/apps-script/guides/triggers
使えるトリガー...]]></summary>
        <author>
            <name>katzumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js にレイアウトに関するドキュメントが追加されました]]></title>
        <id>https://zenn.dev/sota_yamaguchi/articles/b0e8aa63b4bb84</id>
        <link href="https://zenn.dev/sota_yamaguchi/articles/b0e8aa63b4bb84"/>
        <updated>2021-08-01T08:05:54.000Z</updated>
        <summary type="html"><![CDATA[Next.js の Layout 周りのドキュメントが新しく追加されました。
https://nextjs.org/docs/basic-features/layouts

 単一のレイアウトを扱う場合
単一のレイアウトで十分な場合はカスタマイズした <Layout/> で <Component /> タグを囲むだけで実装できます。

      
        
        // pages/_app.js

import Layout from '../components/layout'

export default function MyApp({...]]></summary>
        <author>
            <name>sota_yamaguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularでunix timeを取得する]]></title>
        <id>https://zenn.dev/hashito/articles/f23af092957bf5</id>
        <link href="https://zenn.dev/hashito/articles/f23af092957bf5"/>
        <updated>2021-08-01T07:07:16.000Z</updated>
        <summary type="html"><![CDATA[momentjsを利用したやり方
コマンドでmomenjsをプロジェクトにインストールする。
npm install moment --save
importして下記のように利用できる。

      
        
        import * as moment from 'moment';
let unixtime:number=moment().unix();


      
      
 Dateを利用したやり方
Date.now()というコードでunix timeのミリ秒版が取得できる。
なのでDate.now()/1000で単位を秒にすれば小数点付きだがun...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[画像の切り抜きライブラリVue Cropperを使ってみた。]]></title>
        <id>https://zenn.dev/nana/articles/c6e27ded863a95</id>
        <link href="https://zenn.dev/nana/articles/c6e27ded863a95"/>
        <updated>2021-07-31T13:59:54.000Z</updated>
        <summary type="html"><![CDATA[Vue Cropperについて
今回使用したのは以下のライブラリになります。
Vue製なのでVue環境であれば使えると思います。
https://github.com/xyxiao001/vue-cropper
Cropper.jsというライブラリがあり、こちらはJSのものになるので、JS環境であれば使う事ができます。
https://github.com/fengyuanchen/cropperjs
デモ
Cropper.jsはかなり老舗のライブラリのようで
画像の切り抜きに使う形になります。
今回紹介するもの以外にも以下のようなCropperをメインにしているライブラリは多数存在...]]></summary>
        <author>
            <name>ななな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discord Slash CommandのInteractionをAzure Functionsにデプロイしてみる]]></title>
        <id>https://zenn.dev/drumath2237/articles/112fd0bfa7ea4f836195</id>
        <link href="https://zenn.dev/drumath2237/articles/112fd0bfa7ea4f836195"/>
        <updated>2021-07-31T12:38:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 TL;DR
Discord の Slash Command を TypeScript を使って開発し、
Azure Functions にデプロイすることで簡単なボットのようなアプリをサーバーレスに作ることできる。

 扱う内容・対象読者
この記事では、Azure Functions にデプロイした関数を
Discord Slash Command の Interaction Endpoint に指定して使うまでを目標とします。
したがって次のような項目を扱います。

Slash Command の概要と作成方法
Azure Function アプリを TypeScri...]]></summary>
        <author>
            <name>にー兄さん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt.jsにTailwindを初めて使ってみるときのTips]]></title>
        <id>https://zenn.dev/kata_n/articles/2d4744d1bb6ab6</id>
        <link href="https://zenn.dev/kata_n/articles/2d4744d1bb6ab6"/>
        <updated>2021-07-31T11:10:31.000Z</updated>
        <summary type="html"><![CDATA[Tailwind CSSとは
ユーティリティが用意されているCSSフレームワーク。
CSSでいうユーティリティとは、あらかじめ用意されたクラスを利用してStyleを当てていくことで、CSSを書く事なくスタイルを当てていく手法です。
具体的には、クラスを定義した別ファイル（ユーティリティファイル）を用意しておいて、使いたい時にクラス名を書くイメージです。

      
        ユーティリティファイル
        .p-10 { padding:10px }


      
      使うときは、

      
        
        <h2 clas...]]></summary>
        <author>
            <name>kata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gauge のように受け入れテストを日本語で書ける Jest 拡張 "Jest-gauge" を公開しました]]></title>
        <id>https://zenn.dev/tnzk/articles/27b72f6b7ce982</id>
        <link href="https://zenn.dev/tnzk/articles/27b72f6b7ce982"/>
        <updated>2021-07-31T10:14:31.000Z</updated>
        <summary type="html"><![CDATA[先日 Daniel North の記事を訳していて、この記事がドラフトのままになっているのを思い出したので、加筆して公開することにしました。

 概要
Gauge のように受け入れテストを日本語で書いて、 Jest を採用しているプロジェクトで受け入れテスト駆動開発 (ATDD) を実現できる Jest 拡張 "jest-gauge" を公開しました。
https://github.com/tnzk/jest-gauge

 受け入れテスト駆動開発 (ATDD) とは
受け入れテスト駆動開発 (ATDD) とは、テスト駆動開発 (TDD) の延長線上にあるソフトウェア開発技法のひとつで、...]]></summary>
        <author>
            <name>tnzk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[住所で検索可能な周辺情報 GraphQL/SPARQL API]]></title>
        <id>https://zenn.dev/uedayou/articles/ee4a2ba1b5bd0a</id>
        <link href="https://zenn.dev/uedayou/articles/ee4a2ba1b5bd0a"/>
        <updated>2021-07-31T03:22:27.000Z</updated>
        <summary type="html"><![CDATA[Linked Open Addresses Japan という住所オープンデータ提供サイトで使用している周辺情報データを検索できる Web API を公開しました。
https://uedayou.net/loa/
実際には以下で使用しているものになります。

API には GraphQL と SPARQLエンドポイントの2種類があります。GraphQL は簡易、SPARQLエンドポイントはより詳細に検索ができます。用途によって使い分けてください。

 特徴
一般的に、位置情報を持つ情報を検索する場合、緯度経度で範囲を絞り込んで検索することが一般的だと思います。今回公開する周辺情報 AP...]]></summary>
        <author>
            <name>uedayou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[next startを本番に使用すべきではないたった一つの理由]]></title>
        <id>https://zenn.dev/umireon/articles/2e6add9aa34dbb</id>
        <link href="https://zenn.dev/umireon/articles/2e6add9aa34dbb"/>
        <updated>2021-07-31T01:59:53.000Z</updated>
        <summary type="html"><![CDATA[たった一つの理由
next start （npm run start） の実装にNode.jsでHTTPサーバーを提供される場合に標準的に使用されるexpressが使用されていないからです。（httpモジュールは実装が低レベルすぎるので直接使用するべきではありません）

 長い理由

 Next.jsのドキュメントに書いてあるよ？
Next.jsのドキュメントにはnext startが（一応）プロダクションデプロイに使えるよと書いてあります。
https://nextjs.org/docs/deployment#nodejs-server
だから、next startを本番で使うこと...]]></summary>
        <author>
            <name>Kaito Udagawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vimでタブを閉じたときに左側のタブを開く]]></title>
        <id>https://zenn.dev/notomo/articles/vim-open-left-tab-after-closing</id>
        <link href="https://zenn.dev/notomo/articles/vim-open-left-tab-after-closing"/>
        <updated>2021-07-30T23:52:51.000Z</updated>
        <summary type="html"><![CDATA[Vimで:tabeditすると新しいタブが右側に開くが、
:tabcloseすると元々いたタブの右側のタブが開く。
これを閉じたタブの左にあったタブが開かれるようにしたい。
つまり| 1 | 2 | 3 |のようにタブがあって、2を閉じたら3ではなく1を開く。
1で作業中に2を開いて閉じたら1の作業に戻りたいことが多い。

 実装
以下のようにautocmdで実現できる。

      
        
        let s:after_tab_leave = v:false
augroup activate_left_tab
  autocmd!
  autocmd TabEn...]]></summary>
        <author>
            <name>notomo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パスワードを生成するライブラリを作った]]></title>
        <id>https://zenn.dev/karibash/articles/3f18b3a77e1792</id>
        <link href="https://zenn.dev/karibash/articles/3f18b3a77e1792"/>
        <updated>2021-07-30T13:45:55.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/Karibash/password-generator

 使い方

      
        
        import password from '@karibash/password-generator';

console.log(password(9));
// -> C_Tpmf45L


      
      これだけで大文字、小文字、数字、記号を各1文字以上含む文字列を生成できます
探しても無かったので作っちゃいました

 生成時に使用する文字を変更する
第2引数に文字配列を指定すると、生成時に使用する文字を変更出...]]></summary>
        <author>
            <name>Karibash</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AmplifyでNext.js11系がサポート対象となりました]]></title>
        <id>https://zenn.dev/thim/articles/e16dd195fdee816a868c</id>
        <link href="https://zenn.dev/thim/articles/e16dd195fdee816a868c"/>
        <updated>2021-07-30T10:40:41.000Z</updated>
        <summary type="html"><![CDATA[https://docs.aws.amazon.com/amplify/latest/userguide/server-side-rendering-amplify.html
以下、公式ドキュメントより引用

When you deploy a new Next.js app with Amplify, by default Amplify uses the most recent supported version of Next.js. Currently, Amplify supports Next.js version 11.


Amplify で新しい Next.js アプリ...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「JupyterNotebookを一瞬で記事にするプラットフォーム」Noteboxの現在の技術スタック]]></title>
        <id>https://zenn.dev/fasdfas/articles/839bfc5160a81e</id>
        <link href="https://zenn.dev/fasdfas/articles/839bfc5160a81e"/>
        <updated>2021-07-30T06:22:29.000Z</updated>
        <summary type="html"><![CDATA[Noteboxとは
Noteboxは、「Jupyter Notebookを一瞬でブログ化」がコンセントのサービスです。それ以外はこちらのZennやQiitaと同じようなブログサービスですが、Jupyter Notebookを使う人、つまりデータサイエンスなどのサイエンス領域に特化したプラットフォームです。→https://notebox.jp
動画は↓
https://www.youtube.com/watch?v=IWcUbVnQxkw

 Noteboxができたきっかけ
実は最初はまったく別のプロダクトを作っていました。そのプロダクト上で、Djangoで作ったCMSがあり、「Ju...]]></summary>
        <author>
            <name>Naoya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript & Context APIのdefaultValueの書き方]]></title>
        <id>https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab</id>
        <link href="https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab"/>
        <updated>2021-07-29T17:54:22.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptを書くようになって約6ヶ月経ちました。以前は下記のような書き方をしていましたが、最近新たにプロジェクトを作るとこの書き方では ts(2339) エラーが発生するようになりました。
なぜそのエラーが発生するかの原因はまだ掴めていないのですが、取り急ぎこちらを解決する方法を調べたのでまとめます！
初投稿＆走り書きとなるので今後新たな知見を得たらカイゼンしていこうと思います。

 エラーの内容

与えられた型にcountプロパティが存在しません！

 as をつかって型を与える方法

      
        CountProvider.tsx
        impo...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript & Context APIのdefaultValueの書き方]]></title>
        <id>https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab</id>
        <link href="https://zenn.dev/hiro4hiro4/articles/a19d1f5c9b6eab"/>
        <updated>2021-07-29T17:54:22.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptを書くようになって約6ヶ月経ちました。以前は下記のような書き方をしていましたが、最近新たにプロジェクトを作るとこの書き方では ts(2339) エラーが発生するようになりました。
なぜそのエラーが発生するかの原因はまだ掴めていないのですが、取り急ぎこちらを解決する方法を調べたのでまとめます！
初投稿＆走り書きとなるので今後新たな知見を得たらカイゼンしていこうと思います。

 エラーの内容

与えられた型にcountプロパティが存在しません！

 as をつかって型を与える方法

      
        CountProvider.tsx
        impo...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RTP Payloadのキーフレーム判定方法 VP8/VP9/H264/AV1 編]]></title>
        <id>https://zenn.dev/shinyoshiaki/articles/rtp-payload-keyframe</id>
        <link href="https://zenn.dev/shinyoshiaki/articles/rtp-payload-keyframe"/>
        <updated>2021-07-29T11:35:37.000Z</updated>
        <summary type="html"><![CDATA[趣旨
Chrome の WebRTC で使える代表的なコーデックの RTP Payload をパースして RTP パケットのキーフレーム判定を行う方法についてまとめます。

 RTP Payload とは

      
        
              0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-...]]></summary>
        <author>
            <name>shin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js/成果物に含まれる node_modules を減量する]]></title>
        <id>https://zenn.dev/shztmk/articles/04_reduce_dependency_of_artefact</id>
        <link href="https://zenn.dev/shztmk/articles/04_reduce_dependency_of_artefact"/>
        <updated>2021-07-29T11:08:36.000Z</updated>
        <summary type="html"><![CDATA[動機
JavaScript ( や TypeScript などの AltJS ) で記述されたプロジェクトをデプロイするとき、対象となるサービスに設定されたデプロイパッケージの容量制限を意識せねばならない場合があります。 そういった目的のために、この記事では node_modules パッケージの容量を減らす方法についてまとめます。
node_modules のサイズについては、以下のコマンドなどで確認できます。

      
        
        $ du -d 1 -kh ./node_modules | sort -hr | head -50


      
 ...]]></summary>
        <author>
            <name>shztmk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kysely が Knex をリプレイスする日も近いかもしれない]]></title>
        <id>https://zenn.dev/acro5piano/articles/388b504289ccaa</id>
        <link href="https://zenn.dev/acro5piano/articles/388b504289ccaa"/>
        <updated>2021-07-29T08:40:08.000Z</updated>
        <summary type="html"><![CDATA[Node.js の RDB 向けの Query Builder は Knex が有名ですが、 Kysely というのが台頭しそうな予感がします。
https://github.com/koskimas/kysely
Knex と非常に似た構文をしていますが、大きな違いは、 TypeScript で書かれている ことです。 TS 4.1 で導入された Template Literal Type を駆使し、複雑な Join や As を使ったエイリアスでも可能な限り型推論できるようになっています。
作者の Koskimas 氏は Knex を利用した ORM である Objection.js...]]></summary>
        <author>
            <name>五所和哉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InsightFaceの顔検出結果をNext.jsで可視化してみた]]></title>
        <id>https://zenn.dev/yuyakato/articles/e96b9d8ec289cc</id>
        <link href="https://zenn.dev/yuyakato/articles/e96b9d8ec289cc"/>
        <updated>2021-07-28T17:07:20.000Z</updated>
        <summary type="html"><![CDATA[初めに
先日、InsightFaceとFastAPIを使った顔検出サーバを実装し、「InsightFaceとFastAPIで顔検出サーバを作ってみた」という記事を書きました。
先の記事の中では検出結果として数値が出力されているだけで、どのような結果なのかが確認しづらい状態でした。
今回はその結果を、Next.jsを使って可視化してみたいと思います。
なお本記事には、Next.js自体に関する説明は一切ありません。ご了承ください。

 実行例
文章で説明するよりも実行例を見た方が早いと思うので、女性1人、男女2人ずつが写った画像の認識結果を以下に示します。
なお、画像はぱくたそから以下...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v-dialogでv-cardを開いたときにFooterを固定させてスクロールする方法]]></title>
        <id>https://zenn.dev/harunonsystem/articles/vuetify_v_card_and_footer</id>
        <link href="https://zenn.dev/harunonsystem/articles/vuetify_v_card_and_footer"/>
        <updated>2021-07-28T14:05:45.000Z</updated>
        <summary type="html"><![CDATA[VuetifyのDialogを使ってv-cardを表示させたときにFooterを画面内に固定させる方法を備忘録程度に。

 完成形
せっかちめな人はこちらを参考に。


 Buttonを用意してダイアログを作成

      
         sample.vue
           <v-dialog
      v-model="dialog"
      scrollable
      max-width="300px"
    >
      <template v-slot:activator="{ on, attrs }">
        &l...]]></summary>
        <author>
            <name>はるのん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vim/Neovim】fern.vim で隠しファイル("."などで始まるファイル）を表示する。]]></title>
        <id>https://zenn.dev/purenium/articles/50facb02e93cbd</id>
        <link href="https://zenn.dev/purenium/articles/50facb02e93cbd"/>
        <updated>2021-07-28T11:02:24.000Z</updated>
        <summary type="html"><![CDATA[Vim/Neovim のファイラープラグイン ferm.vim についての記事です。

 環境
Ubuntu 20.04 LTS(WSL2)
Neovim 0.6.0

 事象と解決
.prettierrc、.gitignore などのドットで始まるファイルが含まれているフォルダがあるとします。

これを fern.vim で表示します。すると、.prettierrc などは、表示されないようです。

これを表示するにはどうすればよいでしょうか。
init.vim などの設定ファイルに以下を記述します。

      
        init.vim
        let g:fer...]]></summary>
        <author>
            <name>mumei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人開発した賃貸物件検索サービスのシステム構成と使用技術]]></title>
        <id>https://zenn.dev/choo/articles/84f41ad249c1dd</id>
        <link href="https://zenn.dev/choo/articles/84f41ad249c1dd"/>
        <updated>2021-07-28T09:27:04.000Z</updated>
        <summary type="html"><![CDATA[個人開発で 賃貸物件検索サービス Comfy を作りました。
先週、リリース後の告知ツイートをしたのですが、幸いなことに多くの人にリツイート・いいねの反響を頂きました（リアクションして頂いた方、本当にありがとうございます…!!!）

この記事では、Comfy のシステム構成及び使用した技術・サービスを紹介します。

 システム構成

図の通り、システムは大きく 3 つに分けられます。

フロントエンド
バックエンド
スクレイピング基盤

上記 3 つのサブシステムについて、使用している技術をそれぞれ述べます。

 フロントエンド
Comfy は一切ページ遷移のない SPA（Single ...]]></summary>
        <author>
            <name>choo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescriptで空でない配列を型で表現する]]></title>
        <id>https://zenn.dev/mura_chan/articles/e8c85262f54830</id>
        <link href="https://zenn.dev/mura_chan/articles/e8c85262f54830"/>
        <updated>2021-07-27T16:01:35.000Z</updated>
        <summary type="html"><![CDATA[「空でない配列を表現する型」は需要がありそうで、ググってヒットする日本語の記事が少なかった（和訳されたサイトはあったが純粋な日本語の記事はすぐに出てこなかった）ため、ひとつくらいすぐにヒットする日本語の記事があればと思い、記事にします。
いきなりですがコードは以下です。

      
        
        type NonEmptyArray<T> = [T, ...T[]];


      
      
      
        
        // コンパイルエラー
const numbers: NonEmptyArray<number>...]]></summary>
        <author>
            <name>mura_chan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Improve GraphQL server performance with knex-graphql-utils]]></title>
        <id>https://zenn.dev/acro5piano/articles/32a71345ea35cd</id>
        <link href="https://zenn.dev/acro5piano/articles/32a71345ea35cd"/>
        <updated>2021-07-27T14:55:26.000Z</updated>
        <summary type="html"><![CDATA[I've created a tiny library which improves performance for GraphQL + Knex.

 tl;dr

 Before


 After


Filter select columns based on a query from clients
Load relations without N+1 problem (pagination available!)

https://github.com/acro5piano/knex-graphql-utils
Currently only PostgreSQL is supp...]]></summary>
        <author>
            <name>五所和哉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Nuxtjs】Promise allでパフォーマンス改善について]]></title>
        <id>https://zenn.dev/sengosha/articles/498398d82fb056</id>
        <link href="https://zenn.dev/sengosha/articles/498398d82fb056"/>
        <updated>2021-07-27T14:46:20.000Z</updated>
        <summary type="html"><![CDATA[背景
最近NuxtJSの公式オンラインコース を受講してパフォーマンス周りを改善する方法を勉強したので共有します。

 概要
NuxtのSSRモードでページにアクセス時にasyncDataやfetchで複数のAPIリクエストを投げるのはよくあることです。APIリクエストはasync/waitで非同期処理なので、例えばA、B、Cの３つのリクエストがある場合、BはAが完了してから処理され、CはBが完了してから処理されます。リクエストが多ければ多いほどパフォーマンスに悪影響を与えてしまいます。
Promise.all でAPIリクエストを並列処理させることで、ページアクセスが早くなり、TT...]]></summary>
        <author>
            <name>ユウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt x Composition API x Hasura x TypeScriptを実装する]]></title>
        <id>https://zenn.dev/dialbird/articles/a63e9f1c838462</id>
        <link href="https://zenn.dev/dialbird/articles/a63e9f1c838462"/>
        <updated>2021-07-27T13:13:32.000Z</updated>
        <summary type="html"><![CDATA[まずはHasura Cloudでプロジェクトを作っておきましょう
https://hasura.io/docs/latest/graphql/cloud/projects/create.html
接続に必要なGraphQLのAPIエンドポイントと、アクセス時にヘッダーに必要なAdmin Secretを控えておきます

次にNuxtプロジェクトをnpxで作ります

      
        
        $ npx create-nuxt-app nuxt-composable-hasura


      
      次に必要なライブラリ群をインストールしていきましょう（各ライ...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt x Composition API x Hasura x TypeScriptを実装する]]></title>
        <id>https://zenn.dev/dialbird/articles/a63e9f1c838462</id>
        <link href="https://zenn.dev/dialbird/articles/a63e9f1c838462"/>
        <updated>2021-07-27T13:13:32.000Z</updated>
        <summary type="html"><![CDATA[まずはHasura Cloudでプロジェクトを作っておきましょう
https://hasura.io/docs/latest/graphql/cloud/projects/create.html
接続に必要なGraphQLのAPIエンドポイントと、アクセス時にヘッダーに必要なAdmin Secretを控えておきます

次にNuxtプロジェクトをnpxで作ります

      
        
        $ npx create-nuxt-app nuxt-composable-hasura


      
      次に必要なライブラリ群をインストールしていきましょう（各ライ...]]></summary>
        <author>
            <name>dialbird</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-27のJS: vscode-js-debug、 Privacy Sandbox Timeline、小さなブラウザの作り方]]></title>
        <id>https://jser.info/2021/07/27/vscode-js-debug-privacy-sandbox-timeline/</id>
        <link href="https://jser.info/2021/07/27/vscode-js-debug-privacy-sandbox-timeline/"/>
        <updated>2021-07-27T12:52:36.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #550 - vscode-js-debugはVSCodeからブラウザのデバッガーに接続し、JavaScriptをデバッグするVSCode拡張です。
Easier browser debugging with Developer Tools integration in Visual Studio Code - Microsoft Edge Blog
microsoft/vscode-js-debug: The VS Code JavaScript debugger
vscode-js-debugは、ChromeやMSEdgeなどのブラウザのデバッガーに接続できます。
Debug Adapter Protocol(DAP)という、開発ツール(VScodeなど)とデバッガー(ブラウザやNodeなど)を中継するAdapterを利用しています。
DAPはLanguage Server Protocol(LSP)似た形のもので、開発ツールと各種言語の中継となるプロトコルを定めています。
Privacy Sandbox TimelineというサイトでGoogleのPrivacy Sandboxと呼ばれるthird-party cookiesを廃止するためのProposal集に関するロードマップが公開されています。
Privacy Sandboxの各Proposalごとにどのようなスケジュールで、実装やテストをしていくかの予定が公開されています。
ちいさな Web ブラウザを作ってみようでは、Rustでウェブブラウザを作りつつ、ブラウザのレンダリングの仕組みやセキュリティについて学習する教材が公開されています。
現時点ではWIP(Working In Progress)な章もありますが、小さなブラウザをつくりつつブラウザの内部構造について学ぶのが目的となっています。…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplify+Next.js 環境変数設定方法まとめ]]></title>
        <id>https://zenn.dev/thim/articles/04775c68d796445f3c90</id>
        <link href="https://zenn.dev/thim/articles/04775c68d796445f3c90"/>
        <updated>2021-07-27T12:47:14.000Z</updated>
        <summary type="html"><![CDATA[Next.js アプリを Amplify にデプロイする際に環境変数の設定方法でつまづいたので記事にしておきます。

 クライアントサイドで扱う環境変数
クライアントサイド、つまりはブラウザで実行されるソースから参照する環境変数は Amplify コンソールから設定します。

ソースからは以下のように参照可能で非常に簡単です。

      
        
        const TEST = process.env.NEXT_PUBLIC_TEST;


      
      
 サーバーサイドで扱う環境変数
サーバーサイド、つまりは SSR する場合に参照する環境変数はn...]]></summary>
        <author>
            <name>thim</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoでHTMLタグを楽に書けるモジュールを作ってレジストリに公開した感想]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/6022552f509b84</id>
        <link href="https://zenn.dev/kawarimidoll/articles/6022552f509b84"/>
        <updated>2021-07-27T11:24:13.000Z</updated>
        <summary type="html"><![CDATA[本記事の主題はDenoの自作モジュールの説明ではなく、Denoのモジュール公開に関する所感について述べるものです。したがってIdea記事です。

 markup-tagをリリースした
先日、markup-tagというモジュールをリリースしました。
https://github.com/kawarimidoll/deno-markup-tag
https://deno.land/x/markup_tag
https://nest.land/package/markup-tag

 機能
プログラム内でHTMLのソースを記述したいときに、

      
        
        c...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[仮想オンライン作業スペースを作った]]></title>
        <id>https://zenn.dev/soraride/articles/89b6455ac62908ffb4d3</id>
        <link href="https://zenn.dev/soraride/articles/89b6455ac62908ffb4d3"/>
        <updated>2021-07-27T10:45:38.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、そらららいどです。
今回はじめて、個人的に開発したWebサービス「オンライン作業部屋」をリリースしましたので紹介したいと思います。

現在、後続の類似サービス「Youtube作業部屋」という24時間ライブ配信によるオンライン自習室も運営していますのでぜひご覧ください。
Youtube作業部屋チャンネル
Youtube作業部屋についても記事を準備中です。



 リンク

Webアプリ
Githubリポジトリ


 オンライン作業部屋とは？
オンライン上の仮想的な作業部屋というコンセプトです。
仕組みはシンプルで、好きな科目と座席を選び、ボタンを押して入室・退室するだけです。
...]]></summary>
        <author>
            <name>そららいど</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで任意のタグ名を設定できるコンポーネントを作る]]></title>
        <id>https://zenn.dev/andynuma/articles/c7f6d6587c116d</id>
        <link href="https://zenn.dev/andynuma/articles/c7f6d6587c116d"/>
        <updated>2021-07-27T04:08:28.000Z</updated>
        <summary type="html"><![CDATA[前書き
as を受け取るコンポーネントはどういうコンポーネントかというと、Chakra UI の Box コンポーネント にいい例があるのですが、

      
        
        <Box as="button" borderRadius="md" px={4} h={8}>
  Button
</Box>


      
      上記のようなコンポーネントです。
このようなコンポーネントを自作する場合に、型をどう付与するかについて Generics を使用する書き方を学んだので備忘録も兼ねて記事にします。
もっと良い方法などあれば教え...]]></summary>
        <author>
            <name>nu0ma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prismaで複数のデータベースを同時に扱う]]></title>
        <id>https://zenn.dev/frog/articles/073af49880452f</id>
        <link href="https://zenn.dev/frog/articles/073af49880452f"/>
        <updated>2021-07-26T19:36:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prismaについてはこちら
参考資料

 対象読者

Prismaを使っている
Node.jsを使っている(もしくは個別に変換して解釈できる)
複数のデータベースを同じプロジェクトで扱う必要がある
とりあえず動かしたい


 手順

Prisma schemaの作成
Prisma clientの生成
Clientのインポート&初期化
それぞれのクライアントを使う


 Prisma schemaの作成
Prismaで複数のデータベースを同時に扱うには、Schemaを複数作成する必要があります。
また、generatorの設定にoutputの項目を追加することで/p...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[150万MAUのNuxt.js製サービスを機能開発を止めずに1ヶ月&1人でNext.jsに置き換えた話]]></title>
        <id>https://zenn.dev/yuku/articles/a9edd53e13bb26</id>
        <link href="https://zenn.dev/yuku/articles/a9edd53e13bb26"/>
        <updated>2021-07-26T10:08:53.000Z</updated>
        <summary type="html"><![CDATA[Nuxt.js で開発されていたAI受診相談ユビーのフロントエンドを Next.js で作り直しました。
まだまだ仮説検証を繰り返すフェーズのスタートアップのため、機能開発を止めて一気に置き換えることはできず、機能ごとに少しずつ置き換えてリリースをしました。結果、5人のプロダクト開発チームによる機能開発と並走して、全体の移行を1人で1ヶ月の短期間で終わらせることができたので、その意思決定や過程、工夫を紹介します。

詳細な設計を話すと長くなるため別の機会として、この記事では移行についてのみ書きます。


Next.js と Nuxt.js が似ていて読みにくいので、区別のために Nuxt...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[150万MAUのNuxt.js製サービスを機能開発を止めずに1ヶ月&1人でNext.jsに置き換えた話]]></title>
        <id>https://zenn.dev/yuku/articles/a9edd53e13bb26</id>
        <link href="https://zenn.dev/yuku/articles/a9edd53e13bb26"/>
        <updated>2021-07-26T10:08:53.000Z</updated>
        <summary type="html"><![CDATA[Nuxt.js で開発されていたAI受診相談ユビーのフロントエンドを Next.js で作り直しました。
まだまだ仮説検証を繰り返すフェーズのスタートアップのため、機能開発を止めて一気に置き換えることはできず、機能ごとに少しずつ置き換えてリリースをしました。結果、5人のプロダクト開発チームによる機能開発と並走して、全体の移行を1人で1ヶ月の短期間で終わらせることができたので、その意思決定や過程、工夫を紹介します。

詳細な設計を話すと長くなるため別の機会として、この記事では移行についてのみ書きます。


Next.js と Nuxt.js が似ていて読みにくいので、区別のために Nuxt...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[150万MAUのNuxt.js製サービスを機能開発を止めずに1ヶ月&1人でNext.jsに置き換えた話]]></title>
        <id>https://zenn.dev/yuku/articles/a9edd53e13bb26</id>
        <link href="https://zenn.dev/yuku/articles/a9edd53e13bb26"/>
        <updated>2021-07-26T10:08:53.000Z</updated>
        <summary type="html"><![CDATA[Nuxt.js で開発されていたAI受診相談ユビーのフロントエンドを Next.js で作り直しました。
まだまだ仮説検証を繰り返すフェーズのスタートアップのため、機能開発を止めて一気に置き換えることはできず、機能ごとに少しずつ置き換えてリリースをしました。結果、5人のプロダクト開発チームによる機能開発と並走して、全体の移行を1人で1ヶ月の短期間で終わらせることができたので、その意思決定や過程、工夫を紹介します。

詳細な設計を話すと長くなるため別の機会として、この記事では移行についてのみ書きます。


Next.js と Nuxt.js が似ていて読みにくいので、区別のために Nuxt...]]></summary>
        <author>
            <name>Yuku Kotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[esa を CMS に VuePress v2 で管理しやすいドキュメントサイトを作る]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/4bf52f97165058</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/4bf52f97165058"/>
        <updated>2021-07-26T03:52:40.000Z</updated>
        <summary type="html"><![CDATA[esa を CMS に VuePress v2 でサイトを作る機会があったので紹介します。

 🛠 何を作った？
こちらのツイートで紹介されている LAPRAS 組織ハンドブックというサイトの基盤を esa  と VuePress v2 で作りました。
https://twitter.com/320KZCD/status/1417679812114616321

 👨‍💻 システム構成
基本構成はこちらです。

esa の GitHub Webhook (β) を使い、esa 上の特定のディレクトリ配下に記事を追加したとき、Webhook で指定した GitHub リポジトリの特定のディ...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[esa を CMS に VuePress v2 で管理しやすいドキュメントサイトを作る]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/4bf52f97165058</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/4bf52f97165058"/>
        <updated>2021-07-26T03:52:40.000Z</updated>
        <summary type="html"><![CDATA[esa を CMS に VuePress v2 でサイトを作る機会があったので紹介します。

 🛠 何を作った？
こちらのツイートで紹介されている LAPRAS 組織ハンドブックというサイトの基盤を esa  と VuePress v2 で作りました。
https://twitter.com/320KZCD/status/1417679812114616321

 👨‍💻 システム構成
基本構成はこちらです。

esa の GitHub Webhook (β) を使い、esa 上の特定のディレクトリ配下に記事を追加したとき、Webhook で指定した GitHub リポジトリの特定のディ...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue側でlaravelのenvファイルの値を使用する方法]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0b8e8b7863b4f2</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0b8e8b7863b4f2"/>
        <updated>2021-07-25T23:12:37.000Z</updated>
        <summary type="html"><![CDATA[Vueのファイルの方で.envの値を使いたいことがあったので調べて実装してみました。

 手順1. .envにMIX_という接頭辞を付けて環境設定を設定する
例えば APP_ENVの値をvue側で使いたい場合、 MIX_APP_ENV という風に MIX」 というprefixをつけて.envに登録します。

      
        
        APP_ENV=local
MIX_APP_ENV="${APP_ENV}"


      
      
 手順2. ローカルサーバーを立ち上げなおし、再コンパイルする
僕はこれをしていなかったので、なかなか値が反映されずしばらく困...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Hooksのライブラリ開発(web向け)をしたい人のためのテンプレート]]></title>
        <id>https://zenn.dev/qsf/articles/247315832ac599</id>
        <link href="https://zenn.dev/qsf/articles/247315832ac599"/>
        <updated>2021-07-25T17:52:43.000Z</updated>
        <summary type="html"><![CDATA[TL; DR
https://github.com/Qs-F/hookskit
React HooksのCustom Hooksをnpmのライブラリとして切り出して開発したい人用のGitHub Repository Templateです．スターもらえるとめっちゃ喜びます．
対応してるもの

TypeScript (.ts, .tsx)
React v17+ (jsxの変換の都合上)
Jestでのunit test
その他諸々 (下記参照)


 概要
Reactを触ったことのある方なら，Hooksはご存知だと思います．
一応めちゃくちゃざっくりとした解説をいれておくと，useXXX ...]]></summary>
        <author>
            <name>たふみ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsで複数ツイートを埋め込みたい]]></title>
        <id>https://zenn.dev/mktbsh/articles/376f4558bca196</id>
        <link href="https://zenn.dev/mktbsh/articles/376f4558bca196"/>
        <updated>2021-07-25T15:03:00.000Z</updated>
        <summary type="html"><![CDATA[CatNoseさんのJSでツイートを埋め込むときのベストプラクティスの記事を参考に複数ツイート読み込みを実現しようとしていました。

 上記の記事からの変更点
基本はCatNoseさんの記事にまとまってるので、どのように変更したかだけ記載します。
（とりあえず、動くようにしただけなのでパフォーマンス最適化されてるか否かは未計測です...！）

スニペットは利用せず、widgets.jsを読み込むように変更
useEffectの利用をやめました
next/scriptのScriptコンポーネントを使うようにしました

というわけでこうなった。

 実装

      
         p...]]></summary>
        <author>
            <name>mktbsh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TS/JSでレベルを持つオブジェクトの一次元配列をネストされた配列に変換する]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/528ee947842021</id>
        <link href="https://zenn.dev/kawarimidoll/articles/528ee947842021"/>
        <updated>2021-07-25T12:15:05.000Z</updated>
        <summary type="html"><![CDATA[連休中のヤクの毛刈りを共有したいと思います。

 要件
TypeScriptで、一次元配列をネストされた配列に変換するというのをやってました。
level要素を持つオブジェクトの配列を、そのレベルに従って入れ子式にした状態にする処理です。
日本語だとちょっと何言ってるかわからないですね。
以下のfromをtoに変換するということです。

      
        
        const from = [
  { level: 0, name: "a" },
  { level: 1, name: "b" },
  { level: 1, name: "c" },
  { lev...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TypeScript】初歩的だけど忘れがちな構文]]></title>
        <id>https://zenn.dev/chida/articles/b925b018d43455</id>
        <link href="https://zenn.dev/chida/articles/b925b018d43455"/>
        <updated>2021-07-25T08:35:20.000Z</updated>
        <summary type="html"><![CDATA[TypeScriptの基本的な所は知っているけど、「あれの呼び方何って言うんだっけ？」とか「interfaceとtypeって何が違うんだっけ？」となりがちなので、その辺りをまとめてみました。

 1. 基本
覚えておきたいTSの基本的な構文や型

 インデックスシグネチャ
[key: T]: Uという構文をインデックスシグネチャを呼びます。インデックスシグネチャのキーの型（T）は、numberかstringのどちらかでなければいけません。

      
        
        interface NumberList {
  [key: number]: string
}
c...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでちょっとだけsessionStorageを使わせて]]></title>
        <id>https://zenn.dev/tetsuyanh/articles/1ed9acd834723f</id>
        <link href="https://zenn.dev/tetsuyanh/articles/1ed9acd834723f"/>
        <updated>2021-07-25T07:35:19.000Z</updated>
        <summary type="html"><![CDATA[Next.jsがSSGで静的ページをプリレンダーして高速化してくれるのは大変ありがたいですが、クライアント側のセッション読み書きをほんの少しだけ使いたい時ってありますよね。
useContextはまだしもReduxとか、いやそんな大事にはしたくないんです。
クライアント側で発火するuseEffectでなんとかできないものか。

 要件
タグを持っているカードの一覧ページがあって、そこでタグの絞り込みができる。
このページに戻ってきた時に、先ほど指定したタグが適用されていて欲しい。
router.back()などで戻ってきたりすることもあって、クエリパラメータ云々はできない。

 Befo...]]></summary>
        <author>
            <name>tetsuyanh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Frameworkで作成したプロジェクトでexpressを使う with TypeScript]]></title>
        <id>https://zenn.dev/jojojo/articles/f58cc3d65f39b5</id>
        <link href="https://zenn.dev/jojojo/articles/f58cc3d65f39b5"/>
        <updated>2021-07-25T06:53:19.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！
最近個人で開発しているアプリで、ServerlessFrameworkで作成したプロジェクトでexpressを使うことがありました。その中で色々調べていたのですが、ymlを使って設定を書いているものが多く、tsファイルに設定を書いているものはあまり見つかりませんでした。
ですので本記事では、tsファイルで設定を書き、serverlessでexpressを使う方法を紹介していきます。

 目次

アプリの構成。この改修が必要になった理由
serverlessアプリ作成
serverless offlineインストール
express, serverless-httpインストー...]]></summary>
        <author>
            <name>jojojo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[どうしてもnuxtでaxiosが動かない時の留意点]]></title>
        <id>https://zenn.dev/ryuji_cre8ive/articles/dc42afd40a1147</id>
        <link href="https://zenn.dev/ryuji_cre8ive/articles/dc42afd40a1147"/>
        <updated>2021-07-25T06:24:45.000Z</updated>
        <summary type="html"><![CDATA[ターゲット層
Nuxtで外部APIを叩きたいと考えているが、@nuxtjs/axiosがうまく動かない全人に向けて

 結論

nuxt.config.js内のaxiosとproxyの位置を変える
axios内の{ proxy: true }の記述をなくす。


 諸解説
この二つを踏まえた上でまだ動かないという人はpathRewriteやprefixなども見直したほうがいいです。
prefixというのは読んで字の如く前に付随しますよ〜という合図です。
なので$axiosがリクエストを送る際に記述したエンドポイント（URL）の前に勝手についてきます。
そして肝心なproxy部ですが、...]]></summary>
        <author>
            <name>ryuji_cre8ive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextjsにtailwindcssをインストールしてみる]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/install-tailwind-article</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/install-tailwind-article"/>
        <updated>2021-07-25T05:00:32.000Z</updated>
        <summary type="html"><![CDATA[Nextjsにtailwindcssを入れてから実際に使えるようにするまでの流れをみていきます。
公式ではnpmを使っているのでyarnでインストールしていこうと思います。

 前提
Node.js 12.13.0以降をインストールしている

 インストール方法


インストール
ターミナルを開いて下記のように入力します。

      
        
        yarn add -D tailwindcss@latest postcss@latest autoprefixer@latest


      
      

tailwind.config.js と postc...]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[東京フレンドパーク風ブロックゲームをVue.jsで作った話]]></title>
        <id>https://zenn.dev/century/articles/e67dc676ab81b0</id>
        <link href="https://zenn.dev/century/articles/e67dc676ab81b0"/>
        <updated>2021-07-25T04:49:42.000Z</updated>
        <summary type="html"><![CDATA[ゲームの紹介

再現して作ったゲーム

参考にした本家のゲーム
https://github.com/Century-ss/BlockGame-like-TokyoFriendPark
今回作ったゲームは、動くブロックを止めて、左から繋げていき、右の壁に到達するとクリアするというものになっています。
この記事では、このゲームを作ることで得たノウハウや行き詰まった点などを紹介していこうと思います。

 作った経緯
単純にVueの勉強のためです。
ハンズオンをやったり、公式ドキュメントを眺めるだけではなかなか頭に入ってこなかったので、
自分で考えながら手を動かしてプログラミングをしたいと...]]></summary>
        <author>
            <name>Century</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GA4（Web）でDebugViewが使えるようになっていたので試してみた]]></title>
        <id>https://zenn.dev/mktbsh/articles/f2880ae7058187</id>
        <link href="https://zenn.dev/mktbsh/articles/f2880ae7058187"/>
        <updated>2021-07-25T01:55:54.000Z</updated>
        <summary type="html"><![CDATA[昨年、GA4がリリースされた時は使えなかったような気がしたDebugViewが使えるようになっていたので、試してみました。
業務での利用だと検証環境用と本番環境用などでGAのプロパティ・トラッキングIDを分けていることがほとんどだと思いますが、個人レベルで触る分にはID一つで使えたほうが楽なので、これで楽できる...！

 DebugViewとは
[GA4] デバッグモードでイベントをモニタリングする
こんな感じでリアルタイムにイベント等を確認できます。
FirebaseではAndroid, iOSアプリ向けで使っていて便利だったのでWebでも使いたいと思っていました。


 Next....]]></summary>
        <author>
            <name>mktbsh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Notion】Notion Blogでブログ開設〜10分でできるもん〜（デプロイ〜ローカル環境構築まで）]]></title>
        <id>https://zenn.dev/damuha/articles/f109e1f1cfe1e5</id>
        <link href="https://zenn.dev/damuha/articles/f109e1f1cfe1e5"/>
        <updated>2021-07-24T13:06:29.000Z</updated>
        <summary type="html"><![CDATA[Notion Blogでブログを開設しました
ちょっと前になりますが、Notion Blogでsisterのブログを開設したので、開設するまでの流れを書いてみようと思います。
▼sisterのブログはこちらです↓
https://blog.sisterwith.com/
▼ Notion Blogはこちらです↓
https://notion-blog.vercel.app/
▼ 参考記事はこちらです↓
https://blog.35d.jp/2020-05-23-notion-blog-1

 Notion Blogとは
Notion Blog とは、Notion（バックエンド）で作...]]></summary>
        <author>
            <name>だむは</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Notion】Notion Blogでブログ開設〜10分でできるもん〜（デプロイ〜ローカル環境構築まで）]]></title>
        <id>https://zenn.dev/damuha/articles/f109e1f1cfe1e5</id>
        <link href="https://zenn.dev/damuha/articles/f109e1f1cfe1e5"/>
        <updated>2021-07-24T13:06:29.000Z</updated>
        <summary type="html"><![CDATA[Notion Blogでブログを開設しました
ちょっと前になりますが、Notion Blogでsisterのブログを開設したので、開設するまでの流れを書いてみようと思います。
▼sisterのブログはこちらです↓
https://blog.sisterwith.com/
▼ Notion Blogはこちらです↓
https://notion-blog.vercel.app/
▼ 参考記事はこちらです↓
https://blog.35d.jp/2020-05-23-notion-blog-1

 Notion Blogとは
Notion Blog とは、Notion（バックエンド）で作...]]></summary>
        <author>
            <name>だむは</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno標準ライブラリ0.102.0で追加されたcollectionsの紹介]]></title>
        <id>https://zenn.dev/kawarimidoll/articles/7d1fc9f0fb6538</id>
        <link href="https://zenn.dev/kawarimidoll/articles/7d1fc9f0fb6538"/>
        <updated>2021-07-24T06:54:18.000Z</updated>
        <summary type="html"><![CDATA[先日、Deno標準ライブラリのバージョン0.102.0が公開されました。
https://github.com/denoland/deno_std/releases/tag/0.102.0
こちらで追加されたcollectionsというモジュールを紹介します。
https://deno.land/std@0.102.0/collections
その名の通り、集合の扱いを支援してくれるモジュールです。
なお、READMEに載っているサンプルコードは記述にミスがあるのでそのままでは動作しません。
PRが出ているのでそのうち解決されると思います。
https://github.com/deno...]]></summary>
        <author>
            <name>kawarimidoll</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニア1年生、2ヶ月目の振り返り]]></title>
        <id>https://zenn.dev/mouritania/articles/0ea0412deb4256</id>
        <link href="https://zenn.dev/mouritania/articles/0ea0412deb4256"/>
        <updated>2021-07-24T00:32:32.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。もうりです。
webエンジニアとしてフロントエンド(React + Typescript)およびバックエンド(Rails)の開発をしています。
未経験からエンジニアになって2ヶ月目の振り返りをします。
ぜひ最後まで読んでいただけると嬉しいです。
1ヶ月目の振り返りは下のリンクから御覧ください。
https://zenn.dev/mouritania/articles/9821ee3457aa10

 今月のトピック
今月は主にこんなことがありました。

はじめての社外開発
はじめて触れる技術(React, Typescript, Cypress, ActionMailer.....]]></summary>
        <author>
            <name>mouritania</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue3で掲示板（BBS）を作ろうという試み]]></title>
        <id>https://zenn.dev/sakots/articles/fb6529ee401fd3</id>
        <link href="https://zenn.dev/sakots/articles/fb6529ee401fd3"/>
        <updated>2021-07-23T17:48:15.000Z</updated>
        <summary type="html"><![CDATA[やあ、さこつです。
これは最初の記事だよ！　お手柔らかに。

 今作ってるやつ

このお絵かき掲示板はSQLiteとさらにBladeを（以下略
Github

phpとBladeでつくったお絵描き掲示板です。データベースにSQLiteを使用。

 なぜまた新しく作るのか

 新技術のへの渇望
とにかくいろいろできたほうが仕事が多い。んで、ReactとVueでどっちからやるか比べてたんですけども、どうもJSXに慣れるまで時間がかかりそうだったのでVueから勉強することに決定。

 というわけで
Githubにページだけ作りました。こんごともよろしく。
veita

にゃー]]></summary>
        <author>
            <name>sakots</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js × Tailwind.cssでAMP対応させてみる]]></title>
        <id>https://zenn.dev/dl10yr/articles/582fd609078cea</id>
        <link href="https://zenn.dev/dl10yr/articles/582fd609078cea"/>
        <updated>2021-07-23T13:53:31.000Z</updated>
        <summary type="html"><![CDATA[こちらを参考にさせていただきながら（なぞりながら）やってみました。詳しい解説はこちらの方が良いです。
https://sunday-morning.app/posts/2020-12-25-next-js-10-tailwind-2-hybrid-amp

 まずはNext.js × Tailwind.cssの環境構築
以前自分が作ったコマンドを調整して（storybookを外して）環境構築を行いました。
https://zenn.dev/dl10yr/articles/0e31819e983a28

      
        
         git clone -b not-i...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js × Tailwind.cssでAMP対応させてみる]]></title>
        <id>https://zenn.dev/dl10yr/articles/582fd609078cea</id>
        <link href="https://zenn.dev/dl10yr/articles/582fd609078cea"/>
        <updated>2021-07-23T13:53:31.000Z</updated>
        <summary type="html"><![CDATA[こちらを参考にさせていただきながら（なぞりながら）やってみました。詳しい解説はこちらの方が良いです。
https://sunday-morning.app/posts/2020-12-25-next-js-10-tailwind-2-hybrid-amp

 まずはNext.js × Tailwind.cssの環境構築
以前自分が作ったコマンドを調整して（storybookを外して）環境構築を行いました。
https://zenn.dev/dl10yr/articles/0e31819e983a28

      
        
         git clone -b not-i...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TailwindcssでMaterial UI風のカードデザイン作ってみました]]></title>
        <id>https://zenn.dev/yusuke_akiyama/articles/1c786c10a22fa8</id>
        <link href="https://zenn.dev/yusuke_akiyama/articles/1c786c10a22fa8"/>
        <updated>2021-07-23T12:23:07.000Z</updated>
        <summary type="html"><![CDATA[Tailwindcssとは、ユーティリティファーストのCSSフレームワークです。
https://tailwindcss.com/
ユーティリティファーストなのでCSS設計など考慮しなくてもいいので、個人的に好きです！

 Tailwindcssのカードデザイン
codepenに残しておいたのでHTMLのコードはそこから拾って使ってみてください。


 できなかったこと

当然ですがクリック時の「ripple efect」（波紋のアニメーション）の表現ができないのは残念ですね...。
ボタンを押した後のアクションなどの指定をしたかったのですが、設定ファイルに記述が必要でCDNでは無理そ...]]></summary>
        <author>
            <name>Yusuke Akiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「NEXTJS / S3 画像アップロード」画像を更新する時にこれやっちゃダメ！]]></title>
        <id>https://zenn.dev/ihsan/articles/506510db3ba233</id>
        <link href="https://zenn.dev/ihsan/articles/506510db3ba233"/>
        <updated>2021-07-23T10:01:09.000Z</updated>
        <summary type="html"><![CDATA[BEYONDMAGのマガジンサイトに連載と特集機能の画像アップロードを実装したときに、気づいたメモです。


 前提🙇🏽‍♂️
本記事は、コーディングの仕方を教えるよりかは、ベストプラクティスを教えます。
画像アップロードのコーディングを学びたい人はこの記事を参考にしてください。

 初めに🏁

「画像を更新する時ってどうやるんだろう？」 という疑問持っている人いっぱいいますよね？
僕もその一人です😅。

 僕が知っている画像の更新方法🙋🏽
僕が知っている画像の更新方法は二つあります🤔

 1. 同じURLを使用し、画像の中身だけ変える方法


つまり画像をS3に同じURLかつ違う画像の...]]></summary>
        <author>
            <name>マレーシア人のイサン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nest.js Version8がリリースされたので新機能についてまとめる : API Versioning編]]></title>
        <id>https://zenn.dev/sojiro/articles/3d678492f1d94b</id>
        <link href="https://zenn.dev/sojiro/articles/3d678492f1d94b"/>
        <updated>2021-07-23T06:52:48.000Z</updated>
        <summary type="html"><![CDATA[Nest.js Version 8が7月7日にリリース!
https://trilon.io/blog/announcing-nestjs-8-whats-new

 新機能: API Versioning
Controller及び各Routesをバージョン管理できるようになりました。

 1.URI Versioning
URIの中にVersion情報を含める。

      
        
        import { VersioningType } from '@nestjs/common';

const app = await NestFactory.create...]]></summary>
        <author>
            <name>So Koyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CamelCase な型と SnakeCase な型の変換]]></title>
        <id>https://zenn.dev/ulcttku/articles/conversion-of-camel-case-and-snake-case-types</id>
        <link href="https://zenn.dev/ulcttku/articles/conversion-of-camel-case-and-snake-case-types"/>
        <updated>2021-07-23T04:33:05.000Z</updated>
        <summary type="html"><![CDATA[TypeScript で、(Lower)CamelCase な型を SnakeCase な型に、SnakeCase な型を(Lower)CamelCase な型に変換する型を作りました。
具体的には、

      
        
        type camelCase = SnakeToCamel<"camel_case">;
// type camelCase = "camelCase"

type snakeCase = CamelToSnake<"snakeCase">;
// type snakeCase = "snake_case";


 ...]]></summary>
        <author>
            <name>ulcttku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VueからGoogle OAuthを使用してログインする]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/0f463859b6b462</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/0f463859b6b462"/>
        <updated>2021-07-23T00:19:37.000Z</updated>
        <summary type="html"><![CDATA[僕の場合はLaravel×Vueを使っており本来であれば、Laravelの方でsocialiteというパッケージを使用してgoogle oauth認証を行うのが一般的なのですが、
諸事情でVue側でgoogle oauth認証を行いアクセストークンを使用してから、バックエンドにリクエストを送るという方法をしたかったのです。
そこで今回はvue側でgoogle認証を実装する方法をメモとして残しておきます。

 1-1. Google Cloud Platformにアクセスし、プロジェクトを作成する
Google Cloud Platformにアクセスしてプロジェクトを作成してください。
こ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prisma と express でつくる REST API]]></title>
        <id>https://zenn.dev/yamo/articles/prisma-express-rest-api</id>
        <link href="https://zenn.dev/yamo/articles/prisma-express-rest-api"/>
        <updated>2021-07-22T16:45:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前から気になっていた Prisma を触ってみました。
公式ドキュメントを読みながら、練習として Prisma + Express で REST API を作ってみました。
自分と同じように入門してみたい人の参考になれば幸いです。
ソースコードはこちらになります。
https://github.com/yamosan/prisma-rest-api

 環境構築

 プロジェクトの作成

      
        
        $ npm init -y


      
      
 パッケージのインストール
必要なパッケージを予めインストールしていきます。
つ...]]></summary>
        <author>
            <name>yamo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript で値が Union Type にマッチするかを検証したい]]></title>
        <id>https://zenn.dev/hokaccha/articles/a665b7406b9773</id>
        <link href="https://zenn.dev/hokaccha/articles/a665b7406b9773"/>
        <updated>2021-07-22T13:58:02.000Z</updated>
        <summary type="html"><![CDATA[TypeScript version: v4.3.5
元々やりたかったのは以下のようなこと。外部入力の文字列を Union Type にマッチするか検証してマッチしなければデフォルト値を返すみたいなやつ。

      
        
        const colors = ["red", "blue", "yellow"] as const;
type Color = typeof colors[number];
const defaultColor = colors[0];

function toColor(color: string): Color {
  return...]]></summary>
        <author>
            <name>hokaccha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSSの単位を型安全にしつつ相互に変換出来るライブラリを更新した]]></title>
        <id>https://zenn.dev/karibash/articles/c093902e8294d1</id>
        <link href="https://zenn.dev/karibash/articles/c093902e8294d1"/>
        <updated>2021-07-22T12:06:19.000Z</updated>
        <summary type="html"><![CDATA[https://www.npmjs.com/package/@karibash/pixel-units

 設計の大幅な見直し
以前作成したライブラリをとある記事を参考に、クラスに依存しない設計へと大幅に改修を加え作り直しました。
インスタンス化が不要になったのでパフォーマンスもたぶん上がってると思います。しらんけど。

      
        
        // old
const pixel = new Pixel(16);
console.log(`${pixel}`}
// -> 16px

// new
const pixel: Unit<'px'>...]]></summary>
        <author>
            <name>Karibash</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Type Script × Axios リポジトリパターン]]></title>
        <id>https://zenn.dev/chida/articles/5756a54d94230a</id>
        <link href="https://zenn.dev/chida/articles/5756a54d94230a"/>
        <updated>2021-07-22T08:53:00.000Z</updated>
        <summary type="html"><![CDATA[概要
リポジトリパターンは、データの操作（作成、削除など）をビジネスロジックから分離します。ビジネスロジック内でAxiosをインスタンス化すると単体テストが難しくなったり、各ファイルにエンドポイントの定義を書いている場合、そのエンドポイントが変わった時に多数のファイルを更新しなければいけません。
リポジトリパターンはそのような問題を解決し、コードの柔軟性・保守性を高めてくれます。

 実装

APIはJSONPlaceholderというサービスを使い、userを取得します
リポジトリパターンのコードをすぐに動作確認したい場合は、CodeSandboxなどのオンラインエディタを使うと良...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【連休】Reactのカスタムフックを勉強してみる]]></title>
        <id>https://zenn.dev/fujiyama/articles/53ec18ca9367e8</id>
        <link href="https://zenn.dev/fujiyama/articles/53ec18ca9367e8"/>
        <updated>2021-07-22T07:40:34.000Z</updated>
        <summary type="html"><![CDATA[始めに
Reactのhooksを使うことは多いと思うのですが，recoilでログインユーザーの状態管理を勉強しているときにカスタムフックをちゃんと勉強しようと思ったのでまとめます.

 公式解説
公式にチャットアプリでのフレンドがオンラインかどうかを示すコンポーネントがありました．

      
        FriendStatus.tsx
        import React, { useState, useEffect } from 'react';

function FriendStatus(props) {
  const [isOnline, setIsOnli...]]></summary>
        <author>
            <name>Fujiyamayama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データの整形は末端で行うようにしている]]></title>
        <id>https://zenn.dev/gamin/articles/b509c1d9b08816</id>
        <link href="https://zenn.dev/gamin/articles/b509c1d9b08816"/>
        <updated>2021-07-22T03:35:55.000Z</updated>
        <summary type="html"><![CDATA[概要
mutation 処理で、親子コンポーネントでデータのやりとりをする時。
例えば、親コンポーネントの中に

      
        
        XXX - XXXX


      
      みたいな郵便番号の Input box が連なっている子コンポーネントがある時を考える。
郵便番号自体はサーバから XXX-XXXX と、一つのまとまりで送られてくる。
仮に郵便番号の Input box がハイフンつなぎでふたつあるとする。ふたつあるので、どこかでデータをふたつに整形するる必要がある。
さてさて fetch、 親、 子、どこで整形するのが正しいのだろうか？...]]></summary>
        <author>
            <name>gamine🍑</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[スマホでコード書く 環境構築編]]></title>
        <id>https://zenn.dev/ssssssigma/articles/coding-on-smartphone-1</id>
        <link href="https://zenn.dev/ssssssigma/articles/coding-on-smartphone-1"/>
        <updated>2021-07-21T18:26:58.000Z</updated>
        <summary type="html"><![CDATA[スマホでコードを書くとなると、パソコンの場合と前提条件が異なります。スマホは画面が小さく、可能な限りテキスト編集のみにリソースを割くべきで、また、スマホのIMEを使った快適なテキスト編集のため、高度な補完も大切です。任意のキーバインドが使えることもアドバンテージとなるでしょう。

 Vimを使う
スマホでVimを使うことは非常に理に適っています。Vimはディスプレイが限られた文字数の文字しか表示できない時代から支持されてきたエディタであり、またスマホのテキストの表示能力はその時代のディスプレイよりもリッチです。
また、Vimはキーボードが標準化される前から存在していてスマホのIMEのよう...]]></summary>
        <author>
            <name>sigma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[amazon-chime-sdk でWebとReact Nativeでビデオ通話ができるアプリを作る(後編)]]></title>
        <id>https://zenn.dev/kondo_script/articles/adef37669545a1</id>
        <link href="https://zenn.dev/kondo_script/articles/adef37669545a1"/>
        <updated>2021-07-21T15:00:39.000Z</updated>
        <summary type="html"><![CDATA[前編の続きです

 要約

Android/iOSともに殆どネイティブアプリを触ったことがない人が頑張った話

Kotlin/Objective-Cデビューしながらの体験記です
誤記/誤解などありましたらDiscussionで教えてください🙏


React Native 対応は結構しんどい

公式から RN のライブラリは出ていない  - サンプル はある
kotlin/Objective-Cの知識が必要
ios/androidともにシミュレータだと動作に問題があるため開発には 実機が必須 となる




 前提 amazon-chime-sdkとreact-native
公式からre...]]></summary>
        <author>
            <name>kondo_script</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js + TypeScript + Laravel Passportで実装するOAuth2認証]]></title>
        <id>https://zenn.dev/kaibuki0315/articles/39fe0e38f6635e</id>
        <link href="https://zenn.dev/kaibuki0315/articles/39fe0e38f6635e"/>
        <updated>2021-07-21T12:59:55.000Z</updated>
        <summary type="html"><![CDATA[今回は認証サーバとしてLaravelを使った場合を想定したOAuth2の認可コードフローに基づいた認証機能の実装をしていきます。
Next.jsでは認証を楽に作れるNextAuthというライブラリがあるので、今回はそれを使っていきますが、NextAuthはパスワードなしの認証(Passwordless Authentication)を推奨しているということもあり、OAuth2の認可コードフロー実装に関する情報が少ないように思えたので備忘録も兼ねて記事として残してみます。
今回Laravel側で認証基盤を実装するためのものとしてLaravel Passportを使います。
OAuthで定義...]]></summary>
        <author>
            <name>かわみつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFront のログを JS (TS) で分析する]]></title>
        <id>https://zenn.dev/mryhryki/articles/2021-07-21-parse-cloudfront-logs</id>
        <link href="https://zenn.dev/mryhryki/articles/2021-07-21-parse-cloudfront-logs"/>
        <updated>2021-07-21T09:55:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
CloudFront のログを解析して、リクエストされたパスごとの転送容量を出したい、という場面があったので、その時にやったことのメモです。
半分は備忘録として、半分は誰かやってみたい人もいるかも、と思ったので書き残しておこうと思った次第です。

 CloudFront のログ
CloudFront で設定しておけば、S3バケットに出力されます。
詳しくはこちらの公式ドキュメントをご覧ください。
https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html

...]]></summary>
        <author>
            <name>Moriya Hiroyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マルチプレイヤーゲーム実況システムをAmazon Chime SDK JSで作る。 - Among Us Auto Mute -]]></title>
        <id>https://zenn.dev/wok/articles/0017_multi-players-gameplay-with-chime</id>
        <link href="https://zenn.dev/wok/articles/0017_multi-players-gameplay-with-chime"/>
        <updated>2021-07-21T02:41:12.000Z</updated>
        <summary type="html"><![CDATA[この記事は、こちらの記事を改変したものになります。
https://cloud.flect.co.jp/entry/2021/07/21/113845

こんにちは。
オリンピックの開催が間近になりましたが、最近はデジタルの界隈でもe-sportsがにわかに注目を集め始めていますね。これを後押しするというわけでもありませんが、今回はAmazon Chime SDK JSを用いてマルチプレイヤーゲームの実況配信システムを作ってみたいと思います。特に今回は、公式がファン創作についてポリシーを明確にしてくれているAmong Usを題材にしてみようと思います(ref)。
具体的には下図のような...]]></summary>
        <author>
            <name>wok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron アプリのテンプレート 2021]]></title>
        <id>https://zenn.dev/hokaccha/articles/887e1af361faa8</id>
        <link href="https://zenn.dev/hokaccha/articles/887e1af361faa8"/>
        <updated>2021-07-20T14:58:32.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/hokaccha/electron-template-2021
作ったので公開しておくが、こういうテンプレートはメンテしないとすぐ腐ってしまうけどメンテするモチベーションも特にないのでスナップショットという意味合いも込めて2021をつけている。

 electron-next
ベースに electron-next というのを使っていて、これがけっこうよくできていた。やっていることはシンプルで、レンダラプロセスに Next.js を使っていて、開発時は Next.js のサーバーを起動し、production build では next export ...]]></summary>
        <author>
            <name>hokaccha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Laravel 非公式（半分公式？）な Next.js スターターキット登場]]></title>
        <id>https://zenn.dev/nshiro/articles/49b0c7b5fabef5</id>
        <link href="https://zenn.dev/nshiro/articles/49b0c7b5fabef5"/>
        <updated>2021-07-20T07:16:47.000Z</updated>
        <summary type="html"><![CDATA[Laravel 作成者の Taylor さんより、Next.js スターターキットがリリースされました。
https://twitter.com/taylorotwell/status/1417148351506681859
https://github.com/taylorotwell/next-example-frontend
https://github.com/taylorotwell/next-example-backend
Taylor さん個人のリポジトリなので、Laravel 公式という訳では無いですが、まぁ、Laravel 作成者の方ですからね。半分公式と言えなくはない...]]></summary>
        <author>
            <name>nshiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-20のJS: Node.js 16.5.0(WHATWG Stream)、npm 7.20.0(`npm pkg`)、Ember 4のロードマップ]]></title>
        <id>https://jser.info/2021/07/20/node.js-16.5.0whatwg-stream-npm-7.20.0npm-pkg-ember-4/</id>
        <link href="https://jser.info/2021/07/20/node.js-16.5.0whatwg-stream-npm-7.20.0npm-pkg-ember-4/"/>
        <updated>2021-07-20T02:16:58.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #549 - Node.js 16.5.0がリリースされました。
Node v16.5.0 (Current) | Node.js
16.5.0では試験的に、WHATWGで仕様策定されウェブブラウザに実装されているWHATWG Streams APIが実装されました。(stream/web)
Node.js Stream APIがありますが、これとは異なる実装です。
Node.js StreamとWHATWG Streamの違いについては次のドキュメントにも書かれています。
streams/FAQ.md at main · whatwg/streams
Node.jsでWHATWG Streamを実装している理由としてはQUIC/HTTP3のサポートなどが挙げられています。
HTTP/3 support · Issue #38478 · nodejs/node
また、Node.js StreamとWHATWG Streamの棲み分けや相互運用性については次のIssueで議論されています。
Future of streams · Issue #39093 · nodejs/node
npm 7.20.0がリリースされました。
Release v7.20.0 · npm/cli
npm 7.20.0では、package.jsonの任意のフィールドを読み書きできるnpm pkgコマンドが追加されています。
feat: npm pkg by ruyadorno · Pull Request #3487 · npm/cli
The Road to Ember 4.0という記事では、Ember 4のロードマップが公開されています。
Ember 4は2021年9月20日にリリース予定としています。
それぞれのマイグレーションガイドも公開されています。
Ember.js…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DenoのDateTimeライブラリPteraをリリースしました]]></title>
        <id>https://zenn.dev/tak_iwamoto/articles/8b32b27bd577b1</id>
        <link href="https://zenn.dev/tak_iwamoto/articles/8b32b27bd577b1"/>
        <updated>2021-07-20T00:48:58.000Z</updated>
        <summary type="html"><![CDATA[Ptera

DenoのDateTimeライブラリであるPteraをリリースしたので、その紹介(宣伝)をします。
素敵なロゴはDenoのイラストを数多く書いてらっしゃる hashrockさんにデザインしていただきました！
これまでNode.jsのライブラリはMoment.js、Day.js、Luxon、date-fns
などいくつか選択肢がありました。
ただ、Denoで書かれているThird Partyライブラリは自分が調査した限り見当たらなかったので、作ってみました。

 Getting Started
メインで使用するAPIはdatetimeです。
引数なしの場合、ローカルの現在...]]></summary>
        <author>
            <name>tak_iwamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reactで作る簡易検索機能]]></title>
        <id>https://zenn.dev/himenon/articles/4c6d7ed8b7df30</id>
        <link href="https://zenn.dev/himenon/articles/4c6d7ed8b7df30"/>
        <updated>2021-07-19T12:36:13.000Z</updated>
        <summary type="html"><![CDATA[配列操作を利用した検索機能を紹介します。UI化することで利便性が一気に向上する機能を紹介します。

 DEMO
まずはデモです。入力欄に適当なアルファベットを入力することで、続くリストが増減します。

※ DemoのサンプルデータはWikipediaのプログラミング言語を利用しています。

 基本的な仕組み
基本的な仕組みはfitlerを利用した配列操作です。

      
        
        ["a", "b", "c"].filter((text) => {
  return text === "a";
});
// #=> ["a"];


      ...]]></summary>
        <author>
            <name>Himenon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next + typescript で i18n対応し、SSR、SSGを行うexample]]></title>
        <id>https://zenn.dev/sirosuzume/articles/393b17b21034a7</id>
        <link href="https://zenn.dev/sirosuzume/articles/393b17b21034a7"/>
        <updated>2021-07-19T10:11:01.000Z</updated>
        <summary type="html"><![CDATA[Next + typescript で i18n 対応し、SSR、SSG を行う example
本項では、Next を使用して i18n 対応(SSR, SSG)を方法を解説します。

 記事の要約


next-i18nextを使うとi18nextを使用して、SSR、SSG を比較的手軽に行う事ができる

react-i18nextは typescript 対応を行っているので、.d.tsでネームスペースごとに追加の定義を行うと便利

参考


i18n 対応時はnext-seoが便利

i18n 対応していない場合も便利
i18n 対応時はalternatesの設定をきちんとす...]]></summary>
        <author>
            <name>白雀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next + typescript で i18n対応し、SSR、SSGを行うexample]]></title>
        <id>https://zenn.dev/sirosuzume/articles/393b17b21034a7</id>
        <link href="https://zenn.dev/sirosuzume/articles/393b17b21034a7"/>
        <updated>2021-07-19T10:11:01.000Z</updated>
        <summary type="html"><![CDATA[Next + typescript で i18n 対応し、SSR、SSG を行う example
本項では、Next を使用して i18n 対応(SSR, SSG)を方法を解説します。

 記事の要約


next-i18nextを使うとi18nextを使用して、SSR、SSG を比較的手軽に行う事ができる

react-i18nextは typescript 対応を行っているので、.d.tsでネームスペースごとに追加の定義を行うと便利

参考


i18n 対応時はnext-seoが便利

i18n 対応していない場合も便利
i18n 対応時はalternatesの設定をきちんとす...]]></summary>
        <author>
            <name>白雀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next] API Routesのreq, resの型について]]></title>
        <id>https://zenn.dev/eitches/articles/2021-0719-api-routes-http-request-type</id>
        <link href="https://zenn.dev/eitches/articles/2021-0719-api-routes-http-request-type"/>
        <updated>2021-07-19T09:47:20.000Z</updated>
        <summary type="html"><![CDATA[前提
Next.jsでAPI Routesを使用する際、以下のようなコードを書くと思います。

      
        
        const handler = (req, res) => { 
  res.status(200).json({ ... })
}

export default handler


      
      このreq, resに型をつける方法がわからなかったので調べました。

 Next.jsの公式ページを確認する
公式ページのAPI Routesの部分にreq, resについての情報がありました。
https://nextjs....]]></summary>
        <author>
            <name>eitches</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim/Neovimでdockerを操作できるdenops-docker.vimを作った]]></title>
        <id>https://zenn.dev/skanehira/articles/2021-07-18-vim-denops-docker</id>
        <link href="https://zenn.dev/skanehira/articles/2021-07-18-vim-denops-docker"/>
        <updated>2021-07-19T01:50:16.000Z</updated>
        <summary type="html"><![CDATA[初めに
最近denops.vimを使ってプラグインを作るのが自分の中で流行っています。
denops.vimはTypeScriptメインでVim/Neovim対応のプラグインを書けるところが魅力的で、型システムがあることでデータ構造が明確にわかるためとても書きやすいので、
今後プラグインを作るときは基本denops.vimで書こうと考えています。
denops.vimの詳細に関してこれ以上触れないので、気になる方はこちらの記事を参照してください。
本題ですが、Vimを初めたころにdocker.vimというプラグインを作りました。
本記事はdocker.vimをdenops.vimで書...]]></summary>
        <author>
            <name>シン・ゴリラ@上野動物園休園中</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeのTrigger Suggestionの紹介と、macOSで有効化するための工夫]]></title>
        <id>https://zenn.dev/hiroga/articles/vscode-trigger-suggestion-macos</id>
        <link href="https://zenn.dev/hiroga/articles/vscode-trigger-suggestion-macos"/>
        <updated>2021-07-18T12:22:01.000Z</updated>
        <summary type="html"><![CDATA[VSCodeでTypescriptを書くときに、「一文字も入力していないんだけど、予測変換が出てほしいな...」と思うことはありませんか？
それ、Trigger Suggestion で可能です。macOSユーザーで「何それ？」って人は、私のようにOSのショートカットと衝突しているせいで見逃しているかもしれないです。

 デモ
Ctrl + Spaceでショートカットを表示しています。


 Trigger Suggestionについて
VSCodeには Trigger Suggestionというショートカットがあります。
いまVSCodeを開いている人は、Cmd + Shift + P...]]></summary>
        <author>
            <name>hiroga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NPM パッケージ作成講座]]></title>
        <id>https://zenn.dev/sprout2000/books/9325fe6c9c1ba9</id>
        <link href="https://zenn.dev/sprout2000/books/9325fe6c9c1ba9"/>
        <updated>2021-07-18T08:17:52.000Z</updated>
        <summary type="html"><![CDATA[TypeScript を使ってオリジナルの NPM パッケージを作ろう！]]></summary>
        <author>
            <name>sprout2000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Test Double】JestでMockとStubを確認する]]></title>
        <id>https://zenn.dev/chida/articles/cec625e3b6aa7b</id>
        <link href="https://zenn.dev/chida/articles/cec625e3b6aa7b"/>
        <updated>2021-07-18T07:24:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
MockとStubの違いをソースコードレベルで理解出来ていないと思い、記事を書いて整理してみました。色々検索して調べましたが、もし間違えている箇所がありましたら、ご指摘いただけると有り難いです。

 Test Doubleとは
Test Doubleは、テストの対象が他のモジュール（クラスや関数など）に依存している場合、その代役として使われるモジュールのことです。
TestsDoublesの作成者であるGerardMeszarosによると、Test Doubleは5つのカテゴリに分類できます。その中でも今回は、JestでMockとStubについて書きます。

http://...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Svelte】on:clickで呼ばれる関数をpropsとして渡す方法]]></title>
        <id>https://zenn.dev/ezryow/articles/08d8a7bf16ac1f</id>
        <link href="https://zenn.dev/ezryow/articles/08d8a7bf16ac1f"/>
        <updated>2021-07-18T06:18:48.000Z</updated>
        <summary type="html"><![CDATA[いつも忘れてしまうので，書きます．
HogeButton.svelteがあります．

      
        
        <button on:click>ClickMe</button>


      
      on:clickは通常on:click={f}などの形式で，呼び出し関数を波括弧の中に書きますが，上記例では何も書いていません．
そして，propsとして呼び出したい関数は次のような形式で渡します．

      
        
        <script lang="ts">
    import HogeButt...]]></summary>
        <author>
            <name>EZryow</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をyamlファイルかつコンポーネント(SFC)毎にする普通ではない方法[改良版]]]></title>
        <id>https://zenn.dev/yukihirop/articles/20920804228834</id>
        <link href="https://zenn.dev/yukihirop/articles/20920804228834"/>
        <updated>2021-07-18T05:34:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はvue-i18nの翻訳ファイルをコンポーネント毎に管理したいという思いで書いた前回の記事の改良版です。
https://zenn.dev/yukihirop/articles/b36c43014355fd
前回のやり方が「ほぼタラバガニ」なら今回のやり方は「タラバガニ」です。🦀
前回のやり方には以下の問題がありました。

      
        
        - $etという$tを拡張したグローバルなプロパティーをVueプラグインで用意しなくちゃいけなかった
- 生成物にファイル構造が分かってしまう情報が出てしまう
 - 翻訳のルートキーをSFCへの相対...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をyamlファイルかつコンポーネント(SFC)毎にする普通ではない方法[改良版]]]></title>
        <id>https://zenn.dev/yukihirop/articles/20920804228834</id>
        <link href="https://zenn.dev/yukihirop/articles/20920804228834"/>
        <updated>2021-07-18T05:34:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はvue-i18nの翻訳ファイルをコンポーネント毎に管理したいという思いで書いた前回の記事の改良版です。
https://zenn.dev/yukihirop/articles/b36c43014355fd
前回のやり方が「ほぼタラバガニ」なら今回のやり方は「タラバガニ」です。🦀
前回のやり方には以下の問題がありました。

      
        
        - $etという$tを拡張したグローバルなプロパティーをVueプラグインで用意しなくちゃいけなかった
- 生成物にファイル構造が分かってしまう情報が出てしまう
 - 翻訳のルートキーをSFCへの相対...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 開発環境構築メモ 2021年7月版 - Yarn, TypeScript, ESLint, Prettier, VSCode]]></title>
        <id>https://zenn.dev/15/articles/aa8c322c85d27f</id>
        <link href="https://zenn.dev/15/articles/aa8c322c85d27f"/>
        <updated>2021-07-18T04:27:20.000Z</updated>
        <summary type="html"><![CDATA[まえがき
このあたりを参考に環境構築をしたが、そのままでは動かない or 好みに変えたい部分があったので自分の手順を作ってみた。
詳しい手順の理解が必要であればリンク先を参照してほしい。
https://zenn.dev/66ed3gs/articles/99aa613a86f21f
https://zenn.dev/januswel/articles/402774d76424e71ac906

 create-next-app
ts版で実行する。

      
        
        npx create-next-app --ts sample-app
cd samp...]]></summary>
        <author>
            <name>15</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js 開発環境構築メモ 2021年7月版 - Yarn, TypeScript, ESLint, Prettier, VSCode]]></title>
        <id>https://zenn.dev/15/articles/aa8c322c85d27f</id>
        <link href="https://zenn.dev/15/articles/aa8c322c85d27f"/>
        <updated>2021-07-18T04:27:20.000Z</updated>
        <summary type="html"><![CDATA[まえがき
このあたりを参考に環境構築をしたが、そのままでは動かない or 好みに変えたい部分があったので自分の手順を作ってみた。
詳しい手順の理解が必要であればリンク先を参照してほしい。
https://zenn.dev/66ed3gs/articles/99aa613a86f21f
https://zenn.dev/januswel/articles/402774d76424e71ac906

 create-next-app
ts版で実行する。

      
        
        npx create-next-app --ts sample-app
cd samp...]]></summary>
        <author>
            <name>15</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js（TypeScript）で Firebase を利用し, Google ログインを]]></title>
        <id>https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth"/>
        <updated>2021-07-18T00:16:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って TypeScript を使用した Next アプリに Google ログインを実装する方法を記述します.
JavaScript を使用した Next アプリに Google ログインを実装する方法はこちらに記述しています.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


TypeScript
4.3.5...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js（TypeScript）で Firebase を利用し, Google ログインを]]></title>
        <id>https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth</id>
        <link href="https://zenn.dev/minguu42/articles/20210717-nextjs-typescript-auth"/>
        <updated>2021-07-18T00:16:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では, Firebase Authentication を使って TypeScript を使用した Next アプリに Google ログインを実装する方法を記述します.
JavaScript を使用した Next アプリに Google ログインを実装する方法はこちらに記述しています.
この記事が他の人の参考になれば幸いです.
また, この記事の内容に間違った記載がありましたら, 指摘してもらえるとありがたいです.

 環境



名前
バージョン




macOS Big Sur
11.4


Node.js
16.4.1


TypeScript
4.3.5...]]></summary>
        <author>
            <name>minguu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Next.js】みんな next.confing.js にどんなプラグイン入れてる？]]></title>
        <id>https://zenn.dev/aiji42/articles/1de8f9ea7b8a10</id>
        <link href="https://zenn.dev/aiji42/articles/1de8f9ea7b8a10"/>
        <updated>2021-07-17T14:43:03.000Z</updated>
        <summary type="html"><![CDATA[https://twitter.com/aiji42_dev/status/1415711986608795648?s=20


Why Next.js
私は、業務でもプライベートでも Next.js を使っています。
Next.js は "Zero Config" をうたっているわけですが、実際業務で使うとなると、なかなか Zero とはいきません。IE11用にトランスパイルが必要になったり、ソースマップのアップロードのために webpack の拡張が必要なるケースにおいては、next.config.js のカスタマイズが必要になります。
そういったカスタマイズをサポートし、設定のスト...]]></summary>
        <author>
            <name>aiji42</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt+TS+CompositionAPI+Vercel+VSCodeのセットアップ手順]]></title>
        <id>https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel</id>
        <link href="https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel"/>
        <updated>2021-07-17T13:08:22.000Z</updated>
        <summary type="html"><![CDATA[ずっとNext.jsを使っていたんだが、Nuxt.jsに切り替えるにあたって何回も挫折したので、正直二度とやりたくないが 一応メモする。

最終更新: 2021年7月17日
筆者はNuxtに関しては初心者ですので、細かい説明が不正確かもしれません。また、Vue/Nuxtはすごい速度で進化しています。仕様変更に注意してください


 何をセットアップするか


yarn create nuxt-appで以下を済ませる

TypeScript化
Prettier+ESLint
TailwindCSS対応
PWA対応


コンフィグをTS化する

srcディレクトリにまとめる
OGPを設定する...]]></summary>
        <author>
            <name>sasigume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt+TS+CompositionAPI+Vercel+VSCodeのセットアップ手順]]></title>
        <id>https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel</id>
        <link href="https://zenn.dev/sasigume/articles/nuxt-ts-composition-vercel"/>
        <updated>2021-07-17T13:08:22.000Z</updated>
        <summary type="html"><![CDATA[ずっとNext.jsを使っていたんだが、Nuxt.jsに切り替えるにあたって何回も挫折したので、正直二度とやりたくないが 一応メモする。

最終更新: 2021年7月17日
筆者はNuxtに関しては初心者ですので、細かい説明が不正確かもしれません。また、Vue/Nuxtはすごい速度で進化しています。仕様変更に注意してください


 何をセットアップするか


yarn create nuxt-appで以下を済ませる

TypeScript化
Prettier+ESLint
TailwindCSS対応
PWA対応


コンフィグをTS化する

srcディレクトリにまとめる
OGPを設定する...]]></summary>
        <author>
            <name>sasigume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[転職後2週間でフロントエンドの開発環境を大工事して、React を導入した話]]></title>
        <id>https://zenn.dev/nappa/articles/e7759c7e65df9a</id>
        <link href="https://zenn.dev/nappa/articles/e7759c7e65df9a"/>
        <updated>2021-07-17T11:46:33.000Z</updated>
        <summary type="html"><![CDATA[ども、今月スタートアップ企業に転職した nappa です。現在新規事業の開発に携わっています。
今日は転職後2週間でフロントエンドの環境を大工事 & React 導入した話を書きます。

 面接まで
面接では「新規事業では Vue.js を使っている」と言われて、ある程度フロントエンドの環境が整ってるだろうと思っていました。サーバサイドは Rails を使っているとのことだったので、技術的には前職の経験もあるので、大丈夫だろうと思っていました。

 入社後、フタを開けてみたら...
入社後、ソースコードを拝見して度肝を抜かれました。
当初、面接から入社まで Vue.js を使って...]]></summary>
        <author>
            <name>nappa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-i18nの翻訳をコンポーネント(SFC)毎にする普通ではない方法]]></title>
        <id>https://zenn.dev/yukihirop/articles/b36c43014355fd</id>
        <link href="https://zenn.dev/yukihirop/articles/b36c43014355fd"/>
        <updated>2021-07-17T11:27:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
vue-i18nを使っている人なら一度や二度は翻訳のキーのつけ方に悩んだ人は多いかと思います。
しかも複数人で開発していると人によってキーのつけ方の癖が違ったり、ルール化していてもそのルールを常に意識しながら開発するのは辛いです。そういう問題に対しての一つの解決策を提示してみようかと思います。
「コンポーネント専用の翻訳ファイルでルートキーがユニークならそれに続くキーは適当でも大して問題ないのではないか？ キーのつけ方が適当になってしまったとしてもそれはそのコンポーネントの翻訳で閉じているし、影響範囲は明確なので大して問題ないのではなかろうか？」
です。

 環境

vue...]]></summary>
        <author>
            <name>yukihirop</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでベース配列型で新しい型を作って初期化するとエラーになる。]]></title>
        <id>https://zenn.dev/hashito/articles/54d9167e7b5624</id>
        <link href="https://zenn.dev/hashito/articles/54d9167e7b5624"/>
        <updated>2021-07-17T00:31:52.000Z</updated>
        <summary type="html"><![CDATA[現象

      
        
        type History=Array<string>;
history:History=new History();


      
      下記のようなエラーが出る。

TS2693: 'History' only refers to a type, but is being used as a value here.


 解決
下記のように修正すれば解決される。

      
        
        type History=Array<string>;
history:Histo...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue.jsのcomputedとmethodsの使い分け]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/8c99581ca5bdd0</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/8c99581ca5bdd0"/>
        <updated>2021-07-16T02:14:23.000Z</updated>
        <summary type="html"><![CDATA[vue.jsには算出プロパティを意味する「computed」と関数を意味する「methods」があります。
少しオブジェクト指向を知っている人ならプロパティ とメソッドは全然別物だということが分かりますが、Vue.jsのcomputedでは計算ができてしまうので、実際にできることととしてはほとんど変わらないのです。
では、どういうときにプロパティを使って、どういうときにメソッドを使えば良いのでしょうか？

 computedとmethodsの大きな違いはキャッシュ機能があるかどうか
computedにはキャッシュ機能がありページをリロードしてもキャッシュした値を表示するため、データが変わ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[neovim+pyls+flake8でテキスト領域に警告内容が表示されないようにする]]></title>
        <id>https://zenn.dev/hhatto/articles/38cc31b301ede3</id>
        <link href="https://zenn.dev/hhatto/articles/38cc31b301ede3"/>
        <updated>2021-07-16T00:16:17.000Z</updated>
        <summary type="html"><![CDATA['sys' imported but unused はflake8による警告メッセージ

 結論
let g:lsp_diagnostics_virtual_text_enabled = 0 の設定にしておく

 使用環境

neovim(NVIM): v0.5.0


 設定ファイル

      
        .config/nvim/init.vim
        call plug#begin('~/.config/nvim/plugged')
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
call...]]></summary>
        <author>
            <name>hhatto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase: AppCheck 導入]]></title>
        <id>https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031</id>
        <link href="https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031"/>
        <updated>2021-07-15T19:54:35.000Z</updated>
        <summary type="html"><![CDATA[Firebase AppCheck 導入

 対応サービス

Realtime Database
Cloud Storage
Cloud Functions (callable functions)


 前提
Firebase のプロジェクト作成まで完了している

 1. reCAPTCHA 登録
https://www.google.com/recaptcha/admin/create

以下の情報を登録

ラベル
reCAPTCHA タイプ: "reCAPTCHA v3" を選択
ドメイン: ドメイン設定


 2. コンソール画面からAppCheck登録
https://co...]]></summary>
        <author>
            <name>Yuuya Miyamae</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase: AppCheck 導入]]></title>
        <id>https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031</id>
        <link href="https://zenn.dev/yuuyamiyamae/articles/83b4c6a5157031"/>
        <updated>2021-07-15T19:54:35.000Z</updated>
        <summary type="html"><![CDATA[Firebase AppCheck 導入

 対応サービス

Realtime Database
Cloud Storage
Cloud Functions (callable functions)


 前提
Firebase のプロジェクト作成まで完了している

 1. reCAPTCHA 登録
https://www.google.com/recaptcha/admin/create

以下の情報を登録

ラベル
reCAPTCHA タイプ: "reCAPTCHA v3" を選択
ドメイン: ドメイン設定


 2. コンソール画面からAppCheck登録
https://co...]]></summary>
        <author>
            <name>Yuuya Miyamae</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React+TypeScript+ESLint+Prettierをまとめて環境構築]]></title>
        <id>https://zenn.dev/jpn_asane/articles/d7f44682b74fdc</id>
        <link href="https://zenn.dev/jpn_asane/articles/d7f44682b74fdc"/>
        <updated>2021-07-15T18:19:10.000Z</updated>
        <summary type="html"><![CDATA[環境構築をしっかりするメリット
正直な話、React+TypeScriptは公式にあるコマンドを一個打ち込めばプロジェクト自体は出来ます。
環境構築がめんどくさくてそれだけで済ませていた人も多いと思いますが、今回紹介する環境構築をする事で、様々なメリットがあります。

チーム制作などでコーディングルールを厳格化できる
->チーム一人一人が我流のコーディングをすると誰も読み取る事が出来ないモノが完成します。
初心者のうちからコーディングの変な癖をなくす
->初心者のうちから変な癖がついてしまうと、修正するのが大変です。
コーディングの穴をなくす
->JavaScrip...]]></summary>
        <author>
            <name>Asane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくのかんがえたさいきょうのデータフェッチ 2021Summer🏄‍♂️【Next.js / Hasura】]]></title>
        <id>https://zenn.dev/eringiv3/articles/56f2b9f90a0632</id>
        <link href="https://zenn.dev/eringiv3/articles/56f2b9f90a0632"/>
        <updated>2021-07-15T15:16:24.000Z</updated>
        <summary type="html"><![CDATA[フロントエンドアプリケーションの開発を行う上で避けては通れないデータフェッチの実装。
REST APIを使うか、GraphQLを使うか、クライアントでキャッシュするか、APIレスポンスにどのようにして型を付けるか、状態管理はどうするのかなど、開発者の悩みが尽きないけれども、それに関しての設計を考えたり議論を行うのはフロントエンド開発の楽しいポイントだと僕は思っています。
この記事では、バックエンドにHasura、フロントエンドにNext.jsを使用する場合に僕が最強だと感じたツールの組み合わせ・使い方を紹介します。

 モチベーション

APIからのレスポンスにはTypeScriptの型...]]></summary>
        <author>
            <name>Eringi_V3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ぼくのかんがえたさいきょうのデータフェッチ 2021Summer🏄‍♂️【Next.js / Hasura】]]></title>
        <id>https://zenn.dev/eringiv3/articles/56f2b9f90a0632</id>
        <link href="https://zenn.dev/eringiv3/articles/56f2b9f90a0632"/>
        <updated>2021-07-15T15:16:24.000Z</updated>
        <summary type="html"><![CDATA[フロントエンドアプリケーションの開発を行う上で避けては通れないデータフェッチの実装。
REST APIを使うか、GraphQLを使うか、クライアントでキャッシュするか、APIレスポンスにどのようにして型を付けるか、状態管理はどうするのかなど、開発者の悩みが尽きないけれども、それに関しての設計を考えたり議論を行うのはフロントエンド開発の楽しいポイントだと僕は思っています。
この記事では、バックエンドにHasura、フロントエンドにNext.jsを使用する場合に僕が最強だと感じたツールの組み合わせ・使い方を紹介します。

 モチベーション

APIからのレスポンスにはTypeScriptの型...]]></summary>
        <author>
            <name>Eringi_V3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularでundefinedな可能性のある要素を表示する]]></title>
        <id>https://zenn.dev/hashito/articles/f0c4c0441b4cd2</id>
        <link href="https://zenn.dev/hashito/articles/f0c4c0441b4cd2"/>
        <updated>2021-07-15T13:42:14.000Z</updated>
        <summary type="html"><![CDATA[問題
下記のように|undefinedなどがある場合に、HTML上で参照しようとすると、下記のようなエラーが出る。

      
        
        import {
  Component
} from '@angular/core';
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user: { name: string; a...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angularで生のDOMを操作する]]></title>
        <id>https://zenn.dev/hashito/articles/f9b9c2401e0318</id>
        <link href="https://zenn.dev/hashito/articles/f9b9c2401e0318"/>
        <updated>2021-07-15T13:19:13.000Z</updated>
        <summary type="html"><![CDATA[結論
下記のようにする。

      
        
        import {
  Component,
  ViewChild,
  AfterViewInit,
  OnInit,
  ElementRef
} from '@angular/core';
@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements AfterVi...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chart.jsをNuxt.jsで使って時間の折線を作ったので個人的にメモした]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c"/>
        <updated>2021-07-15T13:00:42.000Z</updated>
        <summary type="html"><![CDATA[ほんと適当ですみません。

 Install

      
        
        $ npm install vue-chartjs@2 chart.js@2


      
      なんかこのバージョンじゃないとだめだった。よくわかんないけど両方2にした。
vue-chartjsの導入を忘れないこと。

      
        
        $ npm install @nuxtjs/moment


      
      時間の管理しやすさのためにMoment.jsを。入らなくてもいいかも。

      
        
        $ np...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chart.jsをNuxt.jsで使って時間の折線を作ったので個人的にメモした]]></title>
        <id>https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c</id>
        <link href="https://zenn.dev/cyber_hacnosuke/articles/4ccb3451de8a9c"/>
        <updated>2021-07-15T13:00:42.000Z</updated>
        <summary type="html"><![CDATA[ほんと適当ですみません。

 Install

      
        
        $ npm install vue-chartjs@2 chart.js@2


      
      なんかこのバージョンじゃないとだめだった。よくわかんないけど両方2にした。
vue-chartjsの導入を忘れないこと。

      
        
        $ npm install @nuxtjs/moment


      
      時間の管理しやすさのためにMoment.jsを。入らなくてもいいかも。

      
        
        $ np...]]></summary>
        <author>
            <name>博ノ助</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.js環境で、PythonのFastAPIみたいなOpenAPIドキュメント自動生成を求めて、Fastifyに手を出してみる]]></title>
        <id>https://zenn.dev/ibaraki/articles/7a6368bdfb890f</id>
        <link href="https://zenn.dev/ibaraki/articles/7a6368bdfb890f"/>
        <updated>2021-07-15T12:17:44.000Z</updated>
        <summary type="html"><![CDATA[やりたかったこと
Node.jsでAPIを書いたら、OpenAPIドキュメントを自動生成して欲しい

 背景
APIを書く場合に使うFrameworkにおいてPythonではDjangoやFlaskが有名ですが、最近注目されているFrameworkにFastAPIというものがあります。FastAPIは、動作がNode.js並に早いとか習得が容易といった特徴もありますが、コードを書くと自動でOpenAPIドキュメントを作ってくれてwebインターフェースも用意してくれる機能がとても便利です。
詳しくは知りたい方は、ドキュメントを読んでください。
https://fastapi.tiang...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leaner の技術スタック紹介(2021年7月版)]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107"/>
        <updated>2021-07-15T01:51:12.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
以前 Leaner の技術スタックを記事にまとめましたが、Copilot CLIでのコンテナ化やAmplify ConsoleでのSPA配信で技術スタックが更新されたことで少々古い内容になっています。
https://zenn.dev/leaner_tech/articles/20210608-leaner-techstack
また新規プロダクトの立ち上げが始まっており、そちらでは従前のプロダクトと異なる技術選定をした部分もあります。
これらの点を踏まえ、本記事では Leaner で採用している現在の技術ス...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leaner の技術スタック紹介(2021年7月版)]]></title>
        <id>https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107</id>
        <link href="https://zenn.dev/leaner_tech/articles/20210709-leaner-techstack-202107"/>
        <updated>2021-07-15T01:51:12.000Z</updated>
        <summary type="html"><![CDATA[Leaner Technologies の黒曜(@kokuyouwind)です。
以前 Leaner の技術スタックを記事にまとめましたが、Copilot CLIでのコンテナ化やAmplify ConsoleでのSPA配信で技術スタックが更新されたことで少々古い内容になっています。
https://zenn.dev/leaner_tech/articles/20210608-leaner-techstack
また新規プロダクトの立ち上げが始まっており、そちらでは従前のプロダクトと異なる技術選定をした部分もあります。
これらの点を踏まえ、本記事では Leaner で採用している現在の技術ス...]]></summary>
        <author>
            <name>リーナーテックブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHPでもNextしたい]]></title>
        <id>https://zenn.dev/quocca/articles/36182859d30b22</id>
        <link href="https://zenn.dev/quocca/articles/36182859d30b22"/>
        <updated>2021-07-14T13:36:47.000Z</updated>
        <summary type="html"><![CDATA[したかったので開発しました！
https://quocca-works.com/accela/
ドキュメントはサイト内にあるので、この記事ではNext.jsとの対比や簡単なコードで、Accelaの特徴を紹介していきます。実際にどういった動作をするかは当サイトで確認することができ、サイトのデータ自体もダウンロードできるので、サンプルとしてお使いください。

 Next.jsを参考にした機能
Next.js(React)の設計思想やNode.jsのエコシステムは素晴らしいものですが、Accelaはその全てを参考にして作っているわけではありません。主に以下の3点を踏襲した上で、別のコンセプトを...]]></summary>
        <author>
            <name>quocca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsの環境を構築する（+TypeScript, Storybook, Hygen）]]></title>
        <id>https://zenn.dev/nihashi/articles/f532d43bd52e6f</id>
        <link href="https://zenn.dev/nihashi/articles/f532d43bd52e6f"/>
        <updated>2021-07-14T11:48:49.000Z</updated>
        <summary type="html"><![CDATA[Next.jsの導入

      
        
        npx create-next-app project-name


      
      typescriptを導入したい場合はオプションに--typescript（もしくは--ts）を追加するか、プロジェクト作成後に必要なファイルの作成およびパッケージのインストールを行います。

      
         プロジェクト作成時に導入
        npx create-next-app project-name --typescript


      
      
      
        ...]]></summary>
        <author>
            <name>nihashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[小規模環境のi18nで、t("Hello","こんにちは")のように日本語をfallbackに入れる運用したら良かった話]]></title>
        <id>https://zenn.dev/terrierscript/articles/2021-07-13-i18n</id>
        <link href="https://zenn.dev/terrierscript/articles/2021-07-13-i18n"/>
        <updated>2021-07-14T10:10:29.000Z</updated>
        <summary type="html"><![CDATA[Reactアプリケーションをi18nをするにあたって、t("Hello", "こんにちは")のように日本語をfallback値として設定するようにしたらわりと良かったのでまとめる

 前提
あくまで今回の話は下記のような前提としている。

小規模で、複雑な多言語化処理を要する部分が少ない
日本語から他言語への変換である
多言語化の種類は少なく、多言語化後も日本語が中心。
組織のコミュニケーションパスが少なく、実装者がUIを変更する事が出来る環境である


 準備
本題に入る前の前提として、ライブラリと外部サービス選びについて。

 ライブラリ選び
i18n自体はマッピングさえできれば十分...]]></summary>
        <author>
            <name>terrierscript</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deno 1.12.0 がリリースされたので新機能や変更点の紹介]]></title>
        <id>https://zenn.dev/magurotuna/articles/deno-release-note-1-12-0</id>
        <link href="https://zenn.dev/magurotuna/articles/deno-release-note-1-12-0"/>
        <updated>2021-07-14T04:30:36.000Z</updated>
        <summary type="html"><![CDATA[Copyright (c) 2018-2021 the Deno authors. MIT License.
日本時間の昨日（2021 年 7 月 13 日）に Deno の v1.12.0 がリリースされました。
https://deno.com/blog/v1.12
詳細なリリース内容は上記のリリースノートにまとまっていますが、ざっと紹介していきたいと思います。


generateKey, sign, verify の3つの Web Crypto API がサポート
ネイティブ HTTP サーバーでの WebSocket サポート
REPL における TypeScript のサポ...]]></summary>
        <author>
            <name>magurotuna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07-14のJS: Firefox 90、npm auditの問題、Access Guide]]></title>
        <id>https://jser.info/2021/07/14/firefox-90-npm-audit-access-guide/</id>
        <link href="https://jser.info/2021/07/14/firefox-90-npm-audit-access-guide/"/>
        <updated>2021-07-14T03:24:13.000Z</updated>
        <summary type="html"><![CDATA[JSer.info #548 - Firefox 90がリリースされました。
Firefox 90.0, See All New Features, Updates and Fixes
Firefox 90 for developers - Mozilla | MDN
Firefox 90ではECMAScript Proposal Stage 4のPrivate class fieldsをデフォルトでサポート、Stage 3のString/Arrayのat()をサポートしています。FTPサポートの削除、WheelEventの互換性を改善なども含まれています。
また、Chromeでも実装されていたFetch metadata request headersが実装されています。
Sec-Fetch-Site、Sec-Fetch-Mode、Sec-Fetch-User、Sec-Fetch-Destのリクエストヘッダがそれぞれのリクエストに追加され、サーバ側でのチェックに利用できます。
Firefox 90 supports Fetch Metadata Request Headers - Mozilla Security Blog
Protect your resources from web attacks with Fetch Metadata
Fetch metadata request headersはSafariとIE以外のブラウザで実装されています。
npm audit: Broken by Design — Overreactedという記事では、create-react-appを例に npm audit で報告される脆弱性の問題について書かれています。
報告される脆弱性の殆どはReDOSとなっていて、devDependenciesとして扱うツールにおいてはfalse…]]></summary>
        <author>
            <name>JSer.info</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless FrameworkとTypeScriptでCQRSを実現する 実装編1]]></title>
        <id>https://zenn.dev/makumattun/articles/e3e598ff8c6dd3</id>
        <link href="https://zenn.dev/makumattun/articles/e3e598ff8c6dd3"/>
        <updated>2021-07-14T01:20:29.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事の続きです。
https://zenn.dev/makumattun/articles/474fbe08a5111c
※この記事ではEventStoreとmain関数の流れまでを紹介します。
この部分


 イベントソーシングでテーブル格納時にやりたいこと
やりたいこと
・一つのテーブルにすべてのイベントを格納したい
・複数のドメインイベントをAcidに登録したい
・整合性を持たせるために誤って２回登録のイベントが発火されたときは失敗させたい
ここらへんを満たすようにテーブルの設計をする必要があります。

 DynamoDBのインデックス設計
ごちゃごちゃ記載するよりも、Ev...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ViteでReact17以降のJSXトランスフォームに対応する]]></title>
        <id>https://zenn.dev/sykmhmh/articles/086eef9300ac2d</id>
        <link href="https://zenn.dev/sykmhmh/articles/086eef9300ac2d"/>
        <updated>2021-07-13T14:13:21.000Z</updated>
        <summary type="html"><![CDATA[概要
Viteで、React17以降のJSXトランスフォームに対応する方法です。
https://ja.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html

 動機
React16以前では、JSXを利用するには明示的にReactをインポートする必要がありましたが、React 17以降は新しいトランスフォームの方法が提供され(現在は16以前のバージョンでも提供されています)、babelやtsconfigの設定を変更することで明示的にReactをインポートせずともJSXが利用できるようになりました。
しかし...]]></summary>
        <author>
            <name>sykmhmh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueでドラムロールを実装する]]></title>
        <id>https://zenn.dev/syuri/articles/ea7117bfb35a09</id>
        <link href="https://zenn.dev/syuri/articles/ea7117bfb35a09"/>
        <updated>2021-07-13T13:58:19.000Z</updated>
        <summary type="html"><![CDATA[ドラムロールとは・・・
数字がじゃかじゃか回るやつです。
今回は数字が画面内に入ってきたら、数字のドラムロールが開始されるというアニメーションをプラグインを使わずに実装したいと思います。(Nuxt＋Typescriptで開発しています。)


 目次
最初に考えた方法
もうちょっと賢い方法
最終型を見たい方はもうちょっと賢い方法から見てください。

 最初に考えた方法
まずはコードから。

      
        
        <div data-destination="2000"　class="number">0</div>


      
   ...]]></summary>
        <author>
            <name>syuri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vueでドラムロールを実装する]]></title>
        <id>https://zenn.dev/syuri/articles/ea7117bfb35a09</id>
        <link href="https://zenn.dev/syuri/articles/ea7117bfb35a09"/>
        <updated>2021-07-13T13:58:19.000Z</updated>
        <summary type="html"><![CDATA[ドラムロールとは・・・
数字がじゃかじゃか回るやつです。
今回は数字が画面内に入ってきたら、数字のドラムロールが開始されるというアニメーションをプラグインを使わずに実装したいと思います。(Nuxt＋Typescriptで開発しています。)


 目次
最初に考えた方法
もうちょっと賢い方法
最終型を見たい方はもうちょっと賢い方法から見てください。

 最初に考えた方法
まずはコードから。

      
        
        <div data-destination="2000"　class="number">0</div>


      
   ...]]></summary>
        <author>
            <name>syuri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ViteをNuxtで試した]]></title>
        <id>https://zenn.dev/kai/articles/try-nuxt-vite</id>
        <link href="https://zenn.dev/kai/articles/try-nuxt-vite"/>
        <updated>2021-07-13T13:36:11.000Z</updated>
        <summary type="html"><![CDATA[最近話題となっている Vite を Nuxt で試してみました。
Vite とは簡単に言ってしまうと、速い、フロントエンドのビルドツールです。
調べてみると、Nuxt Vite というのがあるんですね。
そちらで試したことを書いていきます。

 Nuxt に Vite を導入する

 Nuxt のプロジェクトを作成

      
        
        $ yarn create nuxt-app vite-nuxt


      
      vite-nuxtのところは任意の名前で大丈夫です。
Vite を試したいだけなので、とりあえず最小限の構成にしました。
targ...]]></summary>
        <author>
            <name>カイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[apollo graphqlアプリのUIテスト]]></title>
        <id>https://zenn.dev/kupuma_ru21/articles/bb3d32e6e27102</id>
        <link href="https://zenn.dev/kupuma_ru21/articles/bb3d32e6e27102"/>
        <updated>2021-07-13T13:14:30.000Z</updated>
        <summary type="html"><![CDATA[apollo graphqlを使ったUIテストのセットアップをしてみました。
備忘録で残します。
テストはreact-tesing-liblaryで行います。
以下、テスト対象のアプリです。
https://github.com/kupuma-ru21/apollo_relay_style_cursor_pagination
(以前、書いた記事にテスト対象のアプリの作成方法を記載してます。読まなくてもできるように進めたいと思います。)
https://zenn.dev/kupuma_ru21/articles/f56148ffcac7b0


 前提
まず、普通にreact-tesing...]]></summary>
        <author>
            <name>くぷまーる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[１００万円失いながらハッキングを乗り越え誰でも１分で切り抜きを作れるサービスを公開するまでの失敗と学び]]></title>
        <id>https://zenn.dev/kendai/articles/b6a3467eafb7db</id>
        <link href="https://zenn.dev/kendai/articles/b6a3467eafb7db"/>
        <updated>2021-07-13T03:19:32.000Z</updated>
        <summary type="html"><![CDATA[先日、誰でも最短1分でYouTubeの切り抜きを作れるウェブサービスを公開しました。
私はプログラミングの勉強を始めて1年半の初学者ですが、個人開発でサービスを公開するまでに、数多くの失敗と苦労をしてきました(そして今もしてます笑)。後ほど詳しく書きますが、以下のような経験をしました。

ハッキングを受けデータを盗まれる
α版をリリースするも作り直しを決意する
巻き返しのため海外フリーランサーを雇うも無駄金となる
公開前に本家が同じ機能を発表し諦めかける
β版をリリースするも使われない

同じようにプログラミングの勉強をし始めたばかりの方や、個人開発でいつかはサービスを公開したいと考えて...]]></summary>
        <author>
            <name>Kendai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JestでModuleNameMapperを使うとVSCodeくんがモジュール参照してくれない時～～]]></title>
        <id>https://zenn.dev/huequica/articles/fix_module_decralation_in_vscode</id>
        <link href="https://zenn.dev/huequica/articles/fix_module_decralation_in_vscode"/>
        <updated>2021-07-12T18:13:43.000Z</updated>
        <summary type="html"><![CDATA[悲しい時～～～～～悲し以下略
Jestには ModuleNameMapper なる、テスト対象のオブジェクトを import してくる際にパス名を特定の prefix で代用する機能があります。
例えば、以下のようなディレクトリ構成のプロジェクトであると仮定します。

      
        
        $ tree  -L 1
.
├── LICENSE
├── README.md
├── dist
├── jest.config.js
├── node_modules
├── package.json
├── src
├── tests
├── tsconfig.json...]]></summary>
        <author>
            <name>Haru_Yakumo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue3 + Composition API でフォーム操作]]></title>
        <id>https://zenn.dev/fjsh/articles/aa17332a126162</id>
        <link href="https://zenn.dev/fjsh/articles/aa17332a126162"/>
        <updated>2021-07-12T16:21:10.000Z</updated>
        <summary type="html"><![CDATA[Vue3 を使ってフォーム操作のサンプルを作ります。

 プロジェクトの作成

      
        
        $ vue create form-handling

? Please pick a preset: Manually select features
? Check the features needed for your project: Choose Vue version, TS, Linter
? Choose a version of Vue.js that you want to start the project with 3.x
? Use ...]]></summary>
        <author>
            <name>Sho Fujimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt TypeScript（Composition API）、Django REST Framework で、・・・]]></title>
        <id>https://zenn.dev/jqinglong/articles/e901ca698f2158</id>
        <link href="https://zenn.dev/jqinglong/articles/e901ca698f2158"/>
        <updated>2021-07-12T12:49:03.000Z</updated>
        <summary type="html"><![CDATA[タイトル長すぎですね。途中で切れました。
本当は

 Nuxt TypeScript（Composition API）、Django REST Framework で、Docker Compose上での開発基盤を作る
こいつの続きというか。
https://zenn.dev/jqinglong/scraps/168d1bb5dd4832
この悪戦苦闘の結果、まあまあ良い構成ができたと思っており、それを使って、さらにもう一つアプリを作ってます。スッキリいくと思うので、そのスッキリした記録を残そうと思ったのですが、そうは問屋はおろさず・・・それでも、上記よりは落ち着いてできたので、こちらに残...]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuxt TypeScript（Composition API）、Django REST Framework で、・・・]]></title>
        <id>https://zenn.dev/jqinglong/articles/e901ca698f2158</id>
        <link href="https://zenn.dev/jqinglong/articles/e901ca698f2158"/>
        <updated>2021-07-12T12:49:03.000Z</updated>
        <summary type="html"><![CDATA[タイトル長すぎですね。途中で切れました。
本当は

 Nuxt TypeScript（Composition API）、Django REST Framework で、Docker Compose上での開発基盤を作る
こいつの続きというか。
https://zenn.dev/jqinglong/scraps/168d1bb5dd4832
この悪戦苦闘の結果、まあまあ良い構成ができたと思っており、それを使って、さらにもう一つアプリを作ってます。スッキリいくと思うので、そのスッキリした記録を残そうと思ったのですが、そうは問屋はおろさず・・・それでも、上記よりは落ち着いてできたので、こちらに残...]]></summary>
        <author>
            <name>JQinglong</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[denopsでPaiza IOのwebAPIを実行するプラグインを作った]]></title>
        <id>https://zenn.dev/omochice/articles/35e339fdfb5241</id>
        <link href="https://zenn.dev/omochice/articles/35e339fdfb5241"/>
        <updated>2021-07-12T03:16:14.000Z</updated>
        <summary type="html"><![CDATA[denopsでPaiza IOのwebAPIを実行するプラグインを作った

手元に特定の言語の実行環境がなくてもクラウドでコードを実行できるwebAPI(paiza.io)をvim上から実行するプラグインを作った。
denopsについては以下を参照。


 使い方

 インストール
私がdein.vimを使ってるのでdeinの例で。

      
        
        call dein#add("vim-denops/denops.vim")
call dein#add("Omochice/dps-paiza-io-vim")


      
      
 実行
...]]></summary>
        <author>
            <name>Omochice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-clipboard2でクリップボードにコピーを簡単に実現する（laravel×vue.js）]]></title>
        <id>https://zenn.dev/naoki_oshiumi/articles/af1723805deef4</id>
        <link href="https://zenn.dev/naoki_oshiumi/articles/af1723805deef4"/>
        <updated>2021-07-11T23:35:18.000Z</updated>
        <summary type="html"><![CDATA[vue-clipboardを使えば、vue.jsでクリップボードにコピーがめちゃくちゃ簡単に実現することができます！

 VueClipboard2をインストールする
普通にインストールしていきます

      
        
        npm install --save vue-clipboard2


      
      
 VueClipboard2をインポートする

      
        
        import VueClipboard from 'vue-clipboard2'
Vue.use(VueClipboard)


      
 ...]]></summary>
        <author>
            <name>おしうみなおき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AngularでRoutingしてもServiceが再作成されるときの原因]]></title>
        <id>https://zenn.dev/hashito/articles/f24b066962f58d</id>
        <link href="https://zenn.dev/hashito/articles/f24b066962f58d"/>
        <updated>2021-07-11T23:32:45.000Z</updated>
        <summary type="html"><![CDATA[背景
AngularでServiceを作成して下記の一文を入れておくとクラスがシングルストン構成となるはずです。

      
        
        @Injectable({
  providedIn: 'root'
})


      
      シングルストン構成とは、アプリケーション上単一のインスタンスしか持たいない構成で、通常のクラスは複数の実態を持つが、シングルストンなクラスはどこからアクセスしても単一な実態へアクセスすることになります。
詳しくは下記。
https://ja.wikipedia.org/wiki/Singleton_パターン
これで構成...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google App Script 開発 のための Templateリポジトリを作った]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/2c6cc4e7c27210</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/2c6cc4e7c27210"/>
        <updated>2021-07-11T23:15:22.000Z</updated>
        <summary type="html"><![CDATA[GAS を書くたびに開発環境構築を調べている気がするので、GAS 開発用の Template リポジトリを作ってみました。

 Templateリポジトリ
https://github.com/kawamataryo/google-app-script-starter-template
機能はこちらです。


claspによる App Script へのデプロイ
TypeScript 対応
Webpack5 でのビルド※

ESLint / prettier でのコード整形

husky / lint-stage でのプレコミットフック


Clasp を使えば TypeScrip での...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScriptでFind型を作ってみた]]></title>
        <id>https://zenn.dev/schrosis/articles/ec2e43e2bd72c2</id>
        <link href="https://zenn.dev/schrosis/articles/ec2e43e2bd72c2"/>
        <updated>2021-07-11T20:08:43.000Z</updated>
        <summary type="html"><![CDATA[作ったもの
以下のテストが通る Find 型

型テストのための Equal ,  Expect は @type-challenges/utils の型


      
        
        import { Equal, Expect } from '@type-challenges/utils'

type Lang = 'TypeScript'|'PHP'|'Swift'|'Python'

type cases = [
  // 配列側が確定していて、探す要素が1通りしかないとき
  // 探していた要素か undefined を明確に返す
  Expect&l...]]></summary>
        <author>
            <name>シュレシス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[warn(prisma-client) Already 10 Prisma Clients are actively runningの対処]]></title>
        <id>https://zenn.dev/kanasugi/articles/368d0b39c94daf</id>
        <link href="https://zenn.dev/kanasugi/articles/368d0b39c94daf"/>
        <updated>2021-07-11T15:45:42.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
new PrismaClient() を複数回書いてる可能性があるので、
root直下でlibのようなファイルを作り、そこで、PrsimaClientのインスタンスを１度だけ生成し、そこからimportする形で、PrismaClientのインスタンスを使用すれば解決。

 概要
Prismaを使用している時、
warn(prisma-client) Already 10 Prisma Clients are actively runningというメッセージがコンソールに表示されることがある。
本番Build時にこの箇所が原因で、DBのコネクション数の制限のエラーになること...]]></summary>
        <author>
            <name>Kanasugi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless FrameworkとTypeScriptでCQRSを実現する 概要編]]></title>
        <id>https://zenn.dev/makumattun/articles/474fbe08a5111c</id>
        <link href="https://zenn.dev/makumattun/articles/474fbe08a5111c"/>
        <updated>2021-07-11T15:02:47.000Z</updated>
        <summary type="html"><![CDATA[CQRS イベントソーシングやってますか？
なかなかCQRSとイベントソーシングを個人でちゃんとやろうと思うと難しいですよね。
そして本気でパフォーマンス考えるならスナップショットなども考慮してAkka一択な感じがありますよね。
でもそれなりのパフォーマンスを実現するのであれば、
それを実現できるデータベースはいくつかあります。そうDynamoDBもね！

 参考
https://zenn.dev/j5ik2o/articles/368e0ab78f105f2a0fae
https://techblog.zozo.com/entry/zozomat-cqrs
zozo technol...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでtodoアプリ を作ろうとしたらRecoil + React Hook Form v7で楽ができた件]]></title>
        <id>https://zenn.dev/din/articles/15d27a4bff3b5c</id>
        <link href="https://zenn.dev/din/articles/15d27a4bff3b5c"/>
        <updated>2021-07-11T15:01:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
なろう形式のタイトルってわかりやすいですね。
初投稿です。
Reactの学習のため、Todoアプリを作成しました。
どうせなら最新のライブラリを使用しようとRecoil, React Hook Form v7を使ってみましたので、備忘録がてらその内容を紹介します。

 環境
Windows10 64bit(20H2)
WSL(Ubuntu 18.) v1
node v14.17.1
yarn 1.22.5
VSCode

 完成図
こんな感じの簡単なtodoアプリを作ってみました。
見た目は完全に度外視しています。


 install
まずWSLで下記コマンドを実行して、...]]></summary>
        <author>
            <name>din</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsでtodoアプリ を作ろうとしたらRecoil + React Hook Form v7で楽ができた件]]></title>
        <id>https://zenn.dev/din/articles/15d27a4bff3b5c</id>
        <link href="https://zenn.dev/din/articles/15d27a4bff3b5c"/>
        <updated>2021-07-11T15:01:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
なろう形式のタイトルってわかりやすいですね。
初投稿です。
Reactの学習のため、Todoアプリを作成しました。
どうせなら最新のライブラリを使用しようとRecoil, React Hook Form v7を使ってみましたので、備忘録がてらその内容を紹介します。

 環境
Windows10 64bit(20H2)
WSL(Ubuntu 18.) v1
node v14.17.1
yarn 1.22.5
VSCode

 完成図
こんな感じの簡単なtodoアプリを作ってみました。
見た目は完全に度外視しています。


 install
まずWSLで下記コマンドを実行して、...]]></summary>
        <author>
            <name>din</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスト駆動開発（TDD）でコードを書く]]></title>
        <id>https://zenn.dev/chida/articles/6d1882c2e00d0a</id>
        <link href="https://zenn.dev/chida/articles/6d1882c2e00d0a"/>
        <updated>2021-07-11T09:59:28.000Z</updated>
        <summary type="html"><![CDATA[テスト駆動開発の本を買って少し読みましたが、実際に自分でコードを書いて表現してみたく、TypeScriptとJestでテスト駆動開発を実践します。
https://www.amazon.co.jp/-/en/Kent-Beck/dp/4274217884/ref=sr_1_1?crid=29A7GYVAMFT8E&dchild=1&keywords=テスト駆動開発&language=ja_JP&qid=1625801931&sprefix=テスト駆動%2Caps%2C282&sr=8-1
この記事では簡単なコードをテスト駆動開発の手順に沿っ...]]></summary>
        <author>
            <name>chida</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vercelを使わずにNext.jsするのはまだ早かった]]></title>
        <id>https://zenn.dev/makumattun/articles/c091602d3060d3</id>
        <link href="https://zenn.dev/makumattun/articles/c091602d3060d3"/>
        <updated>2021-07-11T08:10:46.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事の続きになります。
https://zenn.dev/articles/6e260f3a5af117

 serverless-nextjs
2021年7月11日現在
https://www.serverless.com/plugins/serverless-nextjs-plugin/
こちらを使うことによって、Next.jsの10系の機能をAWSにデプロイできると歓喜してそちらをつかいながら実装しておりました。

 ISRを設定したページで503エラーの頻発
こちらエラーの全文を載せておきます。

      
        
        503 ERROR
The...]]></summary>
        <author>
            <name>mattun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsプロジェクトにCypressを導入してGitHub ActionsでVercelのPreview環境のE2Eテストをする]]></title>
        <id>https://zenn.dev/a_da_chi/articles/7ba871c23c5510</id>
        <link href="https://zenn.dev/a_da_chi/articles/7ba871c23c5510"/>
        <updated>2021-07-11T07:56:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
※この記事は下記記事の延長です。下記記事を読まなくても問題ないように書いていますが、ご興味ありましたらご一読ください。
https://zenn.dev/a_da_chi/articles/181ea4ccc39580#スナップショットテスト導入
今回はNext.jsプロジェクトにCypressを導入してGitHub ActionsでVercelのPreview環境のE2Eテストをするまでの手順を書いていきたい思います。

 前提

Next.jsでsrcディレクトリ配下にアプリケーションコードを配置していること
Vercelを使用しており、PRごとにPreview環境がデ...]]></summary>
        <author>
            <name>adachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【簡単】Next.jsによるSSGの実装]]></title>
        <id>https://zenn.dev/mo_ri_regen/articles/implement-ssg-article</id>
        <link href="https://zenn.dev/mo_ri_regen/articles/implement-ssg-article"/>
        <updated>2021-07-11T02:03:43.000Z</updated>
        <summary type="html"><![CDATA[Next.jsではAPIを叩くときにgetStaticPropsを使うことで、ビルド時にデータを取得して事前にHTMLファイルのレンダリングを行うことができます。ビルド時にデータを取得して事前にHTMLファイルのレンダリングを行うことをSSGと呼びます。
TypeScriptを使う場合はgetStaticPropsの型にGetStaticProps[1]を指定します。
SSG(StaticSiteGeneration)とは
Static Generationと呼ばれることもあります。
ビルド時にデータを取得することでpre-renderされるため高速にデータを読むことができます。
リアル...]]></summary>
        <author>
            <name>モーリー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Vue.js】スライドアップダウン・ドロップダウン・アコーディオン]]></title>
        <id>https://zenn.dev/ymkn8crz/articles/25c7962dd20d54</id>
        <link href="https://zenn.dev/ymkn8crz/articles/25c7962dd20d54"/>
        <updated>2021-07-10T15:20:44.000Z</updated>
        <summary type="html"><![CDATA[以前実装に使ったVueのライブラリについてメモ。
スライドアップダウンメニュー、ドロップダウンメニュー、アコーディオンメニューなど言い方がいろいろあるやつ。

 今回の仕様
「詳しくはこちら」と書いてある赤色ヘッダーをクリックすると、

スライドがアニメーションで開き、詳細を表示する。周りの要素もスライドに合わせて移動する。

もう一度クリックすると元に戻る。

 vue-slide-up-down
Vue.jsの開発で、スライド機能を実装するならvue-slide-up-downを使うと簡単に実装できた。
https://github.com/danieldiekmeier/vue-s...]]></summary>
        <author>
            <name>ymkn8crz</name>
        </author>
    </entry>
</feed>